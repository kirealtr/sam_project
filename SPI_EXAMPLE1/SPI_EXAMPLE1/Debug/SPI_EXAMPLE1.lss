
SPI_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ccc  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20000000  00401ccc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000028c  2000084c  00402518  0002084c  2**2
                  ALLOC
  3 .stack        00003000  20000ad8  004027a4  0002084c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f104  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023e1  00000000  00000000  0002f9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002d9c  00000000  00000000  00031db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000720  00000000  00000000  00034b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000640  00000000  00000000  00035274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017080  00000000  00000000  000358b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008d44  00000000  00000000  0004c934  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00064118  00000000  00000000  00055678  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001610  00000000  00000000  000b9790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 3a 00 20 91 06 40 00 8d 06 40 00 8d 06 40 00     .:. ..@...@...@.
  400010:	8d 06 40 00 8d 06 40 00 8d 06 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	8d 06 40 00 8d 06 40 00 00 00 00 00 8d 06 40 00     ..@...@.......@.
  40003c:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  40004c:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  40005c:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  40006c:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  40007c:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  40008c:	2d 0a 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     -.@...@...@...@.
  40009c:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  4000ac:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  4000bc:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  4000cc:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  4000dc:	8d 06 40 00 8d 06 40 00 8d 06 40 00 8d 06 40 00     ..@...@...@...@.
  4000ec:	8d 06 40 00 8d 06 40 00 8d 06 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000084c 	.word	0x2000084c
  400114:	00000000 	.word	0x00000000
  400118:	00401ccc 	.word	0x00401ccc

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00401ccc 	.word	0x00401ccc
  400158:	20000850 	.word	0x20000850
  40015c:	00401ccc 	.word	0x00401ccc
  400160:	00000000 	.word	0x00000000

00400164 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400164:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400166:	480e      	ldr	r0, [pc, #56]	; (4001a0 <sysclk_init+0x3c>)
  400168:	4b0e      	ldr	r3, [pc, #56]	; (4001a4 <sysclk_init+0x40>)
  40016a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40016c:	213e      	movs	r1, #62	; 0x3e
  40016e:	2000      	movs	r0, #0
  400170:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <sysclk_init+0x44>)
  400172:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400174:	4c0d      	ldr	r4, [pc, #52]	; (4001ac <sysclk_init+0x48>)
  400176:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400178:	2800      	cmp	r0, #0
  40017a:	d0fc      	beq.n	400176 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40017c:	4b0c      	ldr	r3, [pc, #48]	; (4001b0 <sysclk_init+0x4c>)
  40017e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400180:	4a0c      	ldr	r2, [pc, #48]	; (4001b4 <sysclk_init+0x50>)
  400182:	4b0d      	ldr	r3, [pc, #52]	; (4001b8 <sysclk_init+0x54>)
  400184:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400186:	4c0d      	ldr	r4, [pc, #52]	; (4001bc <sysclk_init+0x58>)
  400188:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40018a:	2800      	cmp	r0, #0
  40018c:	d0fc      	beq.n	400188 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40018e:	2010      	movs	r0, #16
  400190:	4b0b      	ldr	r3, [pc, #44]	; (4001c0 <sysclk_init+0x5c>)
  400192:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400194:	4b0b      	ldr	r3, [pc, #44]	; (4001c4 <sysclk_init+0x60>)
  400196:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400198:	4801      	ldr	r0, [pc, #4]	; (4001a0 <sysclk_init+0x3c>)
  40019a:	4b02      	ldr	r3, [pc, #8]	; (4001a4 <sysclk_init+0x40>)
  40019c:	4798      	blx	r3
  40019e:	bd10      	pop	{r4, pc}
  4001a0:	07270e00 	.word	0x07270e00
  4001a4:	00400865 	.word	0x00400865
  4001a8:	00400485 	.word	0x00400485
  4001ac:	004004d9 	.word	0x004004d9
  4001b0:	004004e9 	.word	0x004004e9
  4001b4:	20133f01 	.word	0x20133f01
  4001b8:	400e0400 	.word	0x400e0400
  4001bc:	004004f9 	.word	0x004004f9
  4001c0:	00400421 	.word	0x00400421
  4001c4:	00400759 	.word	0x00400759

004001c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4001cc:	b980      	cbnz	r0, 4001f0 <_read+0x28>
  4001ce:	460c      	mov	r4, r1
  4001d0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4001d2:	2a00      	cmp	r2, #0
  4001d4:	dd0f      	ble.n	4001f6 <_read+0x2e>
  4001d6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4001d8:	4e08      	ldr	r6, [pc, #32]	; (4001fc <_read+0x34>)
  4001da:	4d09      	ldr	r5, [pc, #36]	; (400200 <_read+0x38>)
  4001dc:	6830      	ldr	r0, [r6, #0]
  4001de:	4621      	mov	r1, r4
  4001e0:	682b      	ldr	r3, [r5, #0]
  4001e2:	4798      	blx	r3
		ptr++;
  4001e4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4001e6:	42bc      	cmp	r4, r7
  4001e8:	d1f8      	bne.n	4001dc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4001ea:	4640      	mov	r0, r8
  4001ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4001f0:	f04f 38ff 	mov.w	r8, #4294967295
  4001f4:	e7f9      	b.n	4001ea <_read+0x22>
	for (; len > 0; --len) {
  4001f6:	4680      	mov	r8, r0
  4001f8:	e7f7      	b.n	4001ea <_read+0x22>
  4001fa:	bf00      	nop
  4001fc:	20000aac 	.word	0x20000aac
  400200:	20000aa4 	.word	0x20000aa4

00400204 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400204:	3801      	subs	r0, #1
  400206:	2802      	cmp	r0, #2
  400208:	d815      	bhi.n	400236 <_write+0x32>
{
  40020a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40020e:	460e      	mov	r6, r1
  400210:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400212:	b19a      	cbz	r2, 40023c <_write+0x38>
  400214:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400216:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400250 <_write+0x4c>
  40021a:	4f0c      	ldr	r7, [pc, #48]	; (40024c <_write+0x48>)
  40021c:	f8d8 0000 	ldr.w	r0, [r8]
  400220:	f815 1b01 	ldrb.w	r1, [r5], #1
  400224:	683b      	ldr	r3, [r7, #0]
  400226:	4798      	blx	r3
  400228:	2800      	cmp	r0, #0
  40022a:	db0a      	blt.n	400242 <_write+0x3e>
  40022c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40022e:	3c01      	subs	r4, #1
  400230:	d1f4      	bne.n	40021c <_write+0x18>
  400232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400236:	f04f 30ff 	mov.w	r0, #4294967295
  40023a:	4770      	bx	lr
	for (; len != 0; --len) {
  40023c:	4610      	mov	r0, r2
  40023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400242:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024a:	bf00      	nop
  40024c:	20000aa8 	.word	0x20000aa8
  400250:	20000aac 	.word	0x20000aac

00400254 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400254:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40025a:	4b6d      	ldr	r3, [pc, #436]	; (400410 <board_init+0x1bc>)
  40025c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40025e:	2009      	movs	r0, #9
  400260:	4c6c      	ldr	r4, [pc, #432]	; (400414 <board_init+0x1c0>)
  400262:	47a0      	blx	r4
  400264:	200a      	movs	r0, #10
  400266:	47a0      	blx	r4
  400268:	200b      	movs	r0, #11
  40026a:	47a0      	blx	r4
  40026c:	200c      	movs	r0, #12
  40026e:	47a0      	blx	r4
  400270:	200d      	movs	r0, #13
  400272:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400274:	4b68      	ldr	r3, [pc, #416]	; (400418 <board_init+0x1c4>)
  400276:	2201      	movs	r2, #1
  400278:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40027a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40027e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400280:	4966      	ldr	r1, [pc, #408]	; (40041c <board_init+0x1c8>)
  400282:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400286:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400288:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40028c:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40028e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400292:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400294:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400298:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40029a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40029e:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002a0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002a4:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002a6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002aa:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002ac:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4002ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002b2:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4002b4:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4002b8:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4002bc:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4002c0:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4002c2:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4002c6:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4002ca:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002ce:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002d4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002da:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4002dc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4002de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002e4:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4002e8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ea:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002ec:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4002f0:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4002f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4002f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  4002fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4002fe:	2202      	movs	r2, #2
  400300:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400302:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400306:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40030c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40030e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400314:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400316:	f021 0102 	bic.w	r1, r1, #2
  40031a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40031c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40031e:	f021 0102 	bic.w	r1, r1, #2
  400322:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400324:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400328:	2204      	movs	r2, #4
  40032a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40032c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400330:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400336:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400338:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40033a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40033e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400340:	f021 0104 	bic.w	r1, r1, #4
  400344:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400346:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400348:	f021 0104 	bic.w	r1, r1, #4
  40034c:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40034e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400352:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  400356:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40035a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40035e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400364:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400366:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40036c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40036e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400372:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400374:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400376:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40037a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40037c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40037e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400382:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400388:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40038a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40038c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400390:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400392:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400396:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400398:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40039a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40039e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003a0:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4003a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4003a6:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ac:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003ae:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003b6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4003ba:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003be:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4003c2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003c4:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4003c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4003ca:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003d0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003d2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003da:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  4003de:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003e0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003e2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  4003e6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003e8:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4003ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003ee:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003f6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4003fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003fe:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400402:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400404:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400406:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40040a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40040c:	605a      	str	r2, [r3, #4]
  40040e:	bd10      	pop	{r4, pc}
  400410:	400e1850 	.word	0x400e1850
  400414:	00400509 	.word	0x00400509
  400418:	400e0e00 	.word	0x400e0e00
  40041c:	400e1400 	.word	0x400e1400

00400420 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400420:	4a17      	ldr	r2, [pc, #92]	; (400480 <pmc_switch_mck_to_pllack+0x60>)
  400422:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400428:	4318      	orrs	r0, r3
  40042a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40042c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40042e:	f013 0f08 	tst.w	r3, #8
  400432:	d10a      	bne.n	40044a <pmc_switch_mck_to_pllack+0x2a>
  400434:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400438:	4911      	ldr	r1, [pc, #68]	; (400480 <pmc_switch_mck_to_pllack+0x60>)
  40043a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40043c:	f012 0f08 	tst.w	r2, #8
  400440:	d103      	bne.n	40044a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400442:	3b01      	subs	r3, #1
  400444:	d1f9      	bne.n	40043a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400446:	2001      	movs	r0, #1
  400448:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40044a:	4a0d      	ldr	r2, [pc, #52]	; (400480 <pmc_switch_mck_to_pllack+0x60>)
  40044c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40044e:	f023 0303 	bic.w	r3, r3, #3
  400452:	f043 0302 	orr.w	r3, r3, #2
  400456:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400458:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40045a:	f013 0f08 	tst.w	r3, #8
  40045e:	d10a      	bne.n	400476 <pmc_switch_mck_to_pllack+0x56>
  400460:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400464:	4906      	ldr	r1, [pc, #24]	; (400480 <pmc_switch_mck_to_pllack+0x60>)
  400466:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400468:	f012 0f08 	tst.w	r2, #8
  40046c:	d105      	bne.n	40047a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40046e:	3b01      	subs	r3, #1
  400470:	d1f9      	bne.n	400466 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400472:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400474:	4770      	bx	lr
	return 0;
  400476:	2000      	movs	r0, #0
  400478:	4770      	bx	lr
  40047a:	2000      	movs	r0, #0
  40047c:	4770      	bx	lr
  40047e:	bf00      	nop
  400480:	400e0400 	.word	0x400e0400

00400484 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400484:	b9c8      	cbnz	r0, 4004ba <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400486:	4a11      	ldr	r2, [pc, #68]	; (4004cc <pmc_switch_mainck_to_xtal+0x48>)
  400488:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40048a:	0209      	lsls	r1, r1, #8
  40048c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40048e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400492:	f023 0303 	bic.w	r3, r3, #3
  400496:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40049a:	f043 0301 	orr.w	r3, r3, #1
  40049e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4004a0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4004a2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004a4:	f013 0f01 	tst.w	r3, #1
  4004a8:	d0fb      	beq.n	4004a2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4004aa:	4a08      	ldr	r2, [pc, #32]	; (4004cc <pmc_switch_mainck_to_xtal+0x48>)
  4004ac:	6a13      	ldr	r3, [r2, #32]
  4004ae:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4004b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4004b6:	6213      	str	r3, [r2, #32]
  4004b8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4004ba:	4904      	ldr	r1, [pc, #16]	; (4004cc <pmc_switch_mainck_to_xtal+0x48>)
  4004bc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4004be:	4a04      	ldr	r2, [pc, #16]	; (4004d0 <pmc_switch_mainck_to_xtal+0x4c>)
  4004c0:	401a      	ands	r2, r3
  4004c2:	4b04      	ldr	r3, [pc, #16]	; (4004d4 <pmc_switch_mainck_to_xtal+0x50>)
  4004c4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4004c6:	620b      	str	r3, [r1, #32]
  4004c8:	4770      	bx	lr
  4004ca:	bf00      	nop
  4004cc:	400e0400 	.word	0x400e0400
  4004d0:	fec8fffc 	.word	0xfec8fffc
  4004d4:	01370002 	.word	0x01370002

004004d8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4004d8:	4b02      	ldr	r3, [pc, #8]	; (4004e4 <pmc_osc_is_ready_mainck+0xc>)
  4004da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4004dc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4004e0:	4770      	bx	lr
  4004e2:	bf00      	nop
  4004e4:	400e0400 	.word	0x400e0400

004004e8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4004e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4004ec:	4b01      	ldr	r3, [pc, #4]	; (4004f4 <pmc_disable_pllack+0xc>)
  4004ee:	629a      	str	r2, [r3, #40]	; 0x28
  4004f0:	4770      	bx	lr
  4004f2:	bf00      	nop
  4004f4:	400e0400 	.word	0x400e0400

004004f8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4004f8:	4b02      	ldr	r3, [pc, #8]	; (400504 <pmc_is_locked_pllack+0xc>)
  4004fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4004fc:	f000 0002 	and.w	r0, r0, #2
  400500:	4770      	bx	lr
  400502:	bf00      	nop
  400504:	400e0400 	.word	0x400e0400

00400508 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400508:	282f      	cmp	r0, #47	; 0x2f
  40050a:	d81e      	bhi.n	40054a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40050c:	281f      	cmp	r0, #31
  40050e:	d80c      	bhi.n	40052a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400510:	4b11      	ldr	r3, [pc, #68]	; (400558 <pmc_enable_periph_clk+0x50>)
  400512:	699a      	ldr	r2, [r3, #24]
  400514:	2301      	movs	r3, #1
  400516:	4083      	lsls	r3, r0
  400518:	4393      	bics	r3, r2
  40051a:	d018      	beq.n	40054e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40051c:	2301      	movs	r3, #1
  40051e:	fa03 f000 	lsl.w	r0, r3, r0
  400522:	4b0d      	ldr	r3, [pc, #52]	; (400558 <pmc_enable_periph_clk+0x50>)
  400524:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400526:	2000      	movs	r0, #0
  400528:	4770      	bx	lr
		ul_id -= 32;
  40052a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40052c:	4b0a      	ldr	r3, [pc, #40]	; (400558 <pmc_enable_periph_clk+0x50>)
  40052e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400532:	2301      	movs	r3, #1
  400534:	4083      	lsls	r3, r0
  400536:	4393      	bics	r3, r2
  400538:	d00b      	beq.n	400552 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40053a:	2301      	movs	r3, #1
  40053c:	fa03 f000 	lsl.w	r0, r3, r0
  400540:	4b05      	ldr	r3, [pc, #20]	; (400558 <pmc_enable_periph_clk+0x50>)
  400542:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400546:	2000      	movs	r0, #0
  400548:	4770      	bx	lr
		return 1;
  40054a:	2001      	movs	r0, #1
  40054c:	4770      	bx	lr
	return 0;
  40054e:	2000      	movs	r0, #0
  400550:	4770      	bx	lr
  400552:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400554:	4770      	bx	lr
  400556:	bf00      	nop
  400558:	400e0400 	.word	0x400e0400

0040055c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40055c:	b508      	push	{r3, lr}
  40055e:	2013      	movs	r0, #19
  400560:	4b01      	ldr	r3, [pc, #4]	; (400568 <spi_enable_clock+0xc>)
  400562:	4798      	blx	r3
  400564:	bd08      	pop	{r3, pc}
  400566:	bf00      	nop
  400568:	00400509 	.word	0x00400509

0040056c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40056c:	6843      	ldr	r3, [r0, #4]
  40056e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400572:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400574:	6843      	ldr	r3, [r0, #4]
  400576:	0409      	lsls	r1, r1, #16
  400578:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40057c:	4319      	orrs	r1, r3
  40057e:	6041      	str	r1, [r0, #4]
  400580:	4770      	bx	lr

00400582 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400582:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400584:	f643 2499 	movw	r4, #15001	; 0x3a99
  400588:	6905      	ldr	r5, [r0, #16]
  40058a:	f015 0f02 	tst.w	r5, #2
  40058e:	d103      	bne.n	400598 <spi_write+0x16>
		if (!timeout--) {
  400590:	3c01      	subs	r4, #1
  400592:	d1f9      	bne.n	400588 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400594:	2001      	movs	r0, #1
  400596:	e00c      	b.n	4005b2 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400598:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40059a:	f014 0f02 	tst.w	r4, #2
  40059e:	d006      	beq.n	4005ae <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4005a0:	0412      	lsls	r2, r2, #16
  4005a2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4005a6:	4311      	orrs	r1, r2
		if (uc_last) {
  4005a8:	b10b      	cbz	r3, 4005ae <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4005aa:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4005ae:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4005b0:	2000      	movs	r0, #0
}
  4005b2:	bc30      	pop	{r4, r5}
  4005b4:	4770      	bx	lr

004005b6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4005b6:	b932      	cbnz	r2, 4005c6 <spi_set_clock_polarity+0x10>
  4005b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4005bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005be:	f023 0301 	bic.w	r3, r3, #1
  4005c2:	6303      	str	r3, [r0, #48]	; 0x30
  4005c4:	4770      	bx	lr
  4005c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4005ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005cc:	f043 0301 	orr.w	r3, r3, #1
  4005d0:	6303      	str	r3, [r0, #48]	; 0x30
  4005d2:	4770      	bx	lr

004005d4 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4005d4:	b932      	cbnz	r2, 4005e4 <spi_set_clock_phase+0x10>
  4005d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4005da:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005dc:	f023 0302 	bic.w	r3, r3, #2
  4005e0:	6303      	str	r3, [r0, #48]	; 0x30
  4005e2:	4770      	bx	lr
  4005e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4005e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005ea:	f043 0302 	orr.w	r3, r3, #2
  4005ee:	6303      	str	r3, [r0, #48]	; 0x30
  4005f0:	4770      	bx	lr

004005f2 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4005f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4005f6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4005f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4005fc:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4005fe:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400600:	431a      	orrs	r2, r3
  400602:	630a      	str	r2, [r1, #48]	; 0x30
  400604:	4770      	bx	lr

00400606 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400606:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400608:	23ac      	movs	r3, #172	; 0xac
  40060a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40060c:	680b      	ldr	r3, [r1, #0]
  40060e:	684a      	ldr	r2, [r1, #4]
  400610:	fbb3 f3f2 	udiv	r3, r3, r2
  400614:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400616:	1e5c      	subs	r4, r3, #1
  400618:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40061c:	4294      	cmp	r4, r2
  40061e:	d80c      	bhi.n	40063a <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400620:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400622:	688b      	ldr	r3, [r1, #8]
  400624:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400626:	f240 2302 	movw	r3, #514	; 0x202
  40062a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40062e:	2350      	movs	r3, #80	; 0x50
  400630:	6003      	str	r3, [r0, #0]

	return 0;
  400632:	2000      	movs	r0, #0
}
  400634:	f85d 4b04 	ldr.w	r4, [sp], #4
  400638:	4770      	bx	lr
		return 1;
  40063a:	2001      	movs	r0, #1
  40063c:	e7fa      	b.n	400634 <uart_init+0x2e>

0040063e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40063e:	6943      	ldr	r3, [r0, #20]
  400640:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400644:	bf1a      	itte	ne
  400646:	61c1      	strne	r1, [r0, #28]
	return 0;
  400648:	2000      	movne	r0, #0
		return 1;
  40064a:	2001      	moveq	r0, #1
}
  40064c:	4770      	bx	lr

0040064e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40064e:	6943      	ldr	r3, [r0, #20]
  400650:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400654:	bf1d      	ittte	ne
  400656:	6983      	ldrne	r3, [r0, #24]
  400658:	700b      	strbne	r3, [r1, #0]
	return 0;
  40065a:	2000      	movne	r0, #0
		return 1;
  40065c:	2001      	moveq	r0, #1
}
  40065e:	4770      	bx	lr

00400660 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400660:	6943      	ldr	r3, [r0, #20]
  400662:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400666:	bf1d      	ittte	ne
  400668:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40066c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40066e:	2000      	movne	r0, #0
		return 1;
  400670:	2001      	moveq	r0, #1
}
  400672:	4770      	bx	lr

00400674 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400674:	6943      	ldr	r3, [r0, #20]
  400676:	f013 0f01 	tst.w	r3, #1
  40067a:	d005      	beq.n	400688 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40067c:	6983      	ldr	r3, [r0, #24]
  40067e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400682:	600b      	str	r3, [r1, #0]

	return 0;
  400684:	2000      	movs	r0, #0
  400686:	4770      	bx	lr
		return 1;
  400688:	2001      	movs	r0, #1
}
  40068a:	4770      	bx	lr

0040068c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40068c:	e7fe      	b.n	40068c <Dummy_Handler>
	...

00400690 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400690:	b500      	push	{lr}
  400692:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400694:	4b25      	ldr	r3, [pc, #148]	; (40072c <Reset_Handler+0x9c>)
  400696:	4a26      	ldr	r2, [pc, #152]	; (400730 <Reset_Handler+0xa0>)
  400698:	429a      	cmp	r2, r3
  40069a:	d010      	beq.n	4006be <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  40069c:	4b25      	ldr	r3, [pc, #148]	; (400734 <Reset_Handler+0xa4>)
  40069e:	4a23      	ldr	r2, [pc, #140]	; (40072c <Reset_Handler+0x9c>)
  4006a0:	429a      	cmp	r2, r3
  4006a2:	d20c      	bcs.n	4006be <Reset_Handler+0x2e>
  4006a4:	3b01      	subs	r3, #1
  4006a6:	1a9b      	subs	r3, r3, r2
  4006a8:	f023 0303 	bic.w	r3, r3, #3
  4006ac:	3304      	adds	r3, #4
  4006ae:	4413      	add	r3, r2
  4006b0:	491f      	ldr	r1, [pc, #124]	; (400730 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  4006b2:	f851 0b04 	ldr.w	r0, [r1], #4
  4006b6:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4006ba:	429a      	cmp	r2, r3
  4006bc:	d1f9      	bne.n	4006b2 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4006be:	4b1e      	ldr	r3, [pc, #120]	; (400738 <Reset_Handler+0xa8>)
  4006c0:	4a1e      	ldr	r2, [pc, #120]	; (40073c <Reset_Handler+0xac>)
  4006c2:	429a      	cmp	r2, r3
  4006c4:	d20a      	bcs.n	4006dc <Reset_Handler+0x4c>
  4006c6:	3b01      	subs	r3, #1
  4006c8:	1a9b      	subs	r3, r3, r2
  4006ca:	f023 0303 	bic.w	r3, r3, #3
  4006ce:	3304      	adds	r3, #4
  4006d0:	4413      	add	r3, r2
		*pDest++ = 0;
  4006d2:	2100      	movs	r1, #0
  4006d4:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4006d8:	4293      	cmp	r3, r2
  4006da:	d1fb      	bne.n	4006d4 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4006dc:	4a18      	ldr	r2, [pc, #96]	; (400740 <Reset_Handler+0xb0>)
  4006de:	4b19      	ldr	r3, [pc, #100]	; (400744 <Reset_Handler+0xb4>)
  4006e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4006e4:	6093      	str	r3, [r2, #8]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4006e6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4006ea:	fab3 f383 	clz	r3, r3
  4006ee:	095b      	lsrs	r3, r3, #5
  4006f0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4006f2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4006f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4006f8:	2200      	movs	r2, #0
  4006fa:	4b13      	ldr	r3, [pc, #76]	; (400748 <Reset_Handler+0xb8>)
  4006fc:	701a      	strb	r2, [r3, #0]
	return flags;
  4006fe:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400700:	4a12      	ldr	r2, [pc, #72]	; (40074c <Reset_Handler+0xbc>)
  400702:	6813      	ldr	r3, [r2, #0]
  400704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400708:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40070a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40070e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400712:	b129      	cbz	r1, 400720 <Reset_Handler+0x90>
		cpu_irq_enable();
  400714:	2201      	movs	r2, #1
  400716:	4b0c      	ldr	r3, [pc, #48]	; (400748 <Reset_Handler+0xb8>)
  400718:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40071a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40071e:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400720:	4b0b      	ldr	r3, [pc, #44]	; (400750 <Reset_Handler+0xc0>)
  400722:	4798      	blx	r3

	/* Branch to main function */
	main();
  400724:	4b0b      	ldr	r3, [pc, #44]	; (400754 <Reset_Handler+0xc4>)
  400726:	4798      	blx	r3
  400728:	e7fe      	b.n	400728 <Reset_Handler+0x98>
  40072a:	bf00      	nop
  40072c:	20000000 	.word	0x20000000
  400730:	00401ccc 	.word	0x00401ccc
  400734:	2000084c 	.word	0x2000084c
  400738:	20000ad8 	.word	0x20000ad8
  40073c:	2000084c 	.word	0x2000084c
  400740:	e000ed00 	.word	0xe000ed00
  400744:	00400000 	.word	0x00400000
  400748:	20000000 	.word	0x20000000
  40074c:	e000ed88 	.word	0xe000ed88
  400750:	00400bad 	.word	0x00400bad
  400754:	00400a6d 	.word	0x00400a6d

00400758 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400758:	4b3b      	ldr	r3, [pc, #236]	; (400848 <SystemCoreClockUpdate+0xf0>)
  40075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40075c:	f003 0303 	and.w	r3, r3, #3
  400760:	2b01      	cmp	r3, #1
  400762:	d01d      	beq.n	4007a0 <SystemCoreClockUpdate+0x48>
  400764:	b183      	cbz	r3, 400788 <SystemCoreClockUpdate+0x30>
  400766:	2b02      	cmp	r3, #2
  400768:	d036      	beq.n	4007d8 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40076a:	4b37      	ldr	r3, [pc, #220]	; (400848 <SystemCoreClockUpdate+0xf0>)
  40076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40076e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400772:	2b70      	cmp	r3, #112	; 0x70
  400774:	d05f      	beq.n	400836 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400776:	4b34      	ldr	r3, [pc, #208]	; (400848 <SystemCoreClockUpdate+0xf0>)
  400778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40077a:	4934      	ldr	r1, [pc, #208]	; (40084c <SystemCoreClockUpdate+0xf4>)
  40077c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400780:	680b      	ldr	r3, [r1, #0]
  400782:	40d3      	lsrs	r3, r2
  400784:	600b      	str	r3, [r1, #0]
  400786:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400788:	4b31      	ldr	r3, [pc, #196]	; (400850 <SystemCoreClockUpdate+0xf8>)
  40078a:	695b      	ldr	r3, [r3, #20]
  40078c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400790:	bf14      	ite	ne
  400792:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400796:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40079a:	4b2c      	ldr	r3, [pc, #176]	; (40084c <SystemCoreClockUpdate+0xf4>)
  40079c:	601a      	str	r2, [r3, #0]
  40079e:	e7e4      	b.n	40076a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4007a0:	4b29      	ldr	r3, [pc, #164]	; (400848 <SystemCoreClockUpdate+0xf0>)
  4007a2:	6a1b      	ldr	r3, [r3, #32]
  4007a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4007a8:	d003      	beq.n	4007b2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4007aa:	4a2a      	ldr	r2, [pc, #168]	; (400854 <SystemCoreClockUpdate+0xfc>)
  4007ac:	4b27      	ldr	r3, [pc, #156]	; (40084c <SystemCoreClockUpdate+0xf4>)
  4007ae:	601a      	str	r2, [r3, #0]
  4007b0:	e7db      	b.n	40076a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4007b2:	4a29      	ldr	r2, [pc, #164]	; (400858 <SystemCoreClockUpdate+0x100>)
  4007b4:	4b25      	ldr	r3, [pc, #148]	; (40084c <SystemCoreClockUpdate+0xf4>)
  4007b6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4007b8:	4b23      	ldr	r3, [pc, #140]	; (400848 <SystemCoreClockUpdate+0xf0>)
  4007ba:	6a1b      	ldr	r3, [r3, #32]
  4007bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4007c0:	2b10      	cmp	r3, #16
  4007c2:	d005      	beq.n	4007d0 <SystemCoreClockUpdate+0x78>
  4007c4:	2b20      	cmp	r3, #32
  4007c6:	d1d0      	bne.n	40076a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  4007c8:	4a22      	ldr	r2, [pc, #136]	; (400854 <SystemCoreClockUpdate+0xfc>)
  4007ca:	4b20      	ldr	r3, [pc, #128]	; (40084c <SystemCoreClockUpdate+0xf4>)
  4007cc:	601a      	str	r2, [r3, #0]
				break;
  4007ce:	e7cc      	b.n	40076a <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  4007d0:	4a22      	ldr	r2, [pc, #136]	; (40085c <SystemCoreClockUpdate+0x104>)
  4007d2:	4b1e      	ldr	r3, [pc, #120]	; (40084c <SystemCoreClockUpdate+0xf4>)
  4007d4:	601a      	str	r2, [r3, #0]
				break;
  4007d6:	e7c8      	b.n	40076a <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4007d8:	4b1b      	ldr	r3, [pc, #108]	; (400848 <SystemCoreClockUpdate+0xf0>)
  4007da:	6a1b      	ldr	r3, [r3, #32]
  4007dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4007e0:	d016      	beq.n	400810 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4007e2:	4a1c      	ldr	r2, [pc, #112]	; (400854 <SystemCoreClockUpdate+0xfc>)
  4007e4:	4b19      	ldr	r3, [pc, #100]	; (40084c <SystemCoreClockUpdate+0xf4>)
  4007e6:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  4007e8:	4b17      	ldr	r3, [pc, #92]	; (400848 <SystemCoreClockUpdate+0xf0>)
  4007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4007ec:	f003 0303 	and.w	r3, r3, #3
  4007f0:	2b02      	cmp	r3, #2
  4007f2:	d1ba      	bne.n	40076a <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4007f4:	4a14      	ldr	r2, [pc, #80]	; (400848 <SystemCoreClockUpdate+0xf0>)
  4007f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4007f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4007fa:	4814      	ldr	r0, [pc, #80]	; (40084c <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4007fc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400800:	6803      	ldr	r3, [r0, #0]
  400802:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400806:	b2d2      	uxtb	r2, r2
  400808:	fbb3 f3f2 	udiv	r3, r3, r2
  40080c:	6003      	str	r3, [r0, #0]
  40080e:	e7ac      	b.n	40076a <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400810:	4a11      	ldr	r2, [pc, #68]	; (400858 <SystemCoreClockUpdate+0x100>)
  400812:	4b0e      	ldr	r3, [pc, #56]	; (40084c <SystemCoreClockUpdate+0xf4>)
  400814:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400816:	4b0c      	ldr	r3, [pc, #48]	; (400848 <SystemCoreClockUpdate+0xf0>)
  400818:	6a1b      	ldr	r3, [r3, #32]
  40081a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40081e:	2b10      	cmp	r3, #16
  400820:	d005      	beq.n	40082e <SystemCoreClockUpdate+0xd6>
  400822:	2b20      	cmp	r3, #32
  400824:	d1e0      	bne.n	4007e8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400826:	4a0b      	ldr	r2, [pc, #44]	; (400854 <SystemCoreClockUpdate+0xfc>)
  400828:	4b08      	ldr	r3, [pc, #32]	; (40084c <SystemCoreClockUpdate+0xf4>)
  40082a:	601a      	str	r2, [r3, #0]
				break;
  40082c:	e7dc      	b.n	4007e8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  40082e:	4a0b      	ldr	r2, [pc, #44]	; (40085c <SystemCoreClockUpdate+0x104>)
  400830:	4b06      	ldr	r3, [pc, #24]	; (40084c <SystemCoreClockUpdate+0xf4>)
  400832:	601a      	str	r2, [r3, #0]
				break;
  400834:	e7d8      	b.n	4007e8 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400836:	4a05      	ldr	r2, [pc, #20]	; (40084c <SystemCoreClockUpdate+0xf4>)
  400838:	6813      	ldr	r3, [r2, #0]
  40083a:	4909      	ldr	r1, [pc, #36]	; (400860 <SystemCoreClockUpdate+0x108>)
  40083c:	fba1 1303 	umull	r1, r3, r1, r3
  400840:	085b      	lsrs	r3, r3, #1
  400842:	6013      	str	r3, [r2, #0]
  400844:	4770      	bx	lr
  400846:	bf00      	nop
  400848:	400e0400 	.word	0x400e0400
  40084c:	20000004 	.word	0x20000004
  400850:	400e1810 	.word	0x400e1810
  400854:	00b71b00 	.word	0x00b71b00
  400858:	003d0900 	.word	0x003d0900
  40085c:	007a1200 	.word	0x007a1200
  400860:	aaaaaaab 	.word	0xaaaaaaab

00400864 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400864:	4b12      	ldr	r3, [pc, #72]	; (4008b0 <system_init_flash+0x4c>)
  400866:	4298      	cmp	r0, r3
  400868:	d911      	bls.n	40088e <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  40086a:	4b12      	ldr	r3, [pc, #72]	; (4008b4 <system_init_flash+0x50>)
  40086c:	4298      	cmp	r0, r3
  40086e:	d913      	bls.n	400898 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400870:	4b11      	ldr	r3, [pc, #68]	; (4008b8 <system_init_flash+0x54>)
  400872:	4298      	cmp	r0, r3
  400874:	d914      	bls.n	4008a0 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400876:	4b11      	ldr	r3, [pc, #68]	; (4008bc <system_init_flash+0x58>)
  400878:	4298      	cmp	r0, r3
  40087a:	d915      	bls.n	4008a8 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40087c:	4b10      	ldr	r3, [pc, #64]	; (4008c0 <system_init_flash+0x5c>)
  40087e:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400880:	bf94      	ite	ls
  400882:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400886:	4a0f      	ldrhi	r2, [pc, #60]	; (4008c4 <system_init_flash+0x60>)
  400888:	4b0f      	ldr	r3, [pc, #60]	; (4008c8 <system_init_flash+0x64>)
  40088a:	601a      	str	r2, [r3, #0]
  40088c:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40088e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400892:	4b0d      	ldr	r3, [pc, #52]	; (4008c8 <system_init_flash+0x64>)
  400894:	601a      	str	r2, [r3, #0]
  400896:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400898:	4a0c      	ldr	r2, [pc, #48]	; (4008cc <system_init_flash+0x68>)
  40089a:	4b0b      	ldr	r3, [pc, #44]	; (4008c8 <system_init_flash+0x64>)
  40089c:	601a      	str	r2, [r3, #0]
  40089e:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4008a0:	4a0b      	ldr	r2, [pc, #44]	; (4008d0 <system_init_flash+0x6c>)
  4008a2:	4b09      	ldr	r3, [pc, #36]	; (4008c8 <system_init_flash+0x64>)
  4008a4:	601a      	str	r2, [r3, #0]
  4008a6:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4008a8:	4a0a      	ldr	r2, [pc, #40]	; (4008d4 <system_init_flash+0x70>)
  4008aa:	4b07      	ldr	r3, [pc, #28]	; (4008c8 <system_init_flash+0x64>)
  4008ac:	601a      	str	r2, [r3, #0]
  4008ae:	4770      	bx	lr
  4008b0:	01312cff 	.word	0x01312cff
  4008b4:	026259ff 	.word	0x026259ff
  4008b8:	039386ff 	.word	0x039386ff
  4008bc:	04c4b3ff 	.word	0x04c4b3ff
  4008c0:	05f5e0ff 	.word	0x05f5e0ff
  4008c4:	04000500 	.word	0x04000500
  4008c8:	400e0a00 	.word	0x400e0a00
  4008cc:	04000100 	.word	0x04000100
  4008d0:	04000200 	.word	0x04000200
  4008d4:	04000300 	.word	0x04000300

004008d8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4008d8:	4b0a      	ldr	r3, [pc, #40]	; (400904 <_sbrk+0x2c>)
  4008da:	681b      	ldr	r3, [r3, #0]
  4008dc:	b153      	cbz	r3, 4008f4 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4008de:	4b09      	ldr	r3, [pc, #36]	; (400904 <_sbrk+0x2c>)
  4008e0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4008e2:	181a      	adds	r2, r3, r0
  4008e4:	4908      	ldr	r1, [pc, #32]	; (400908 <_sbrk+0x30>)
  4008e6:	4291      	cmp	r1, r2
  4008e8:	db08      	blt.n	4008fc <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4008ea:	4610      	mov	r0, r2
  4008ec:	4a05      	ldr	r2, [pc, #20]	; (400904 <_sbrk+0x2c>)
  4008ee:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4008f0:	4618      	mov	r0, r3
  4008f2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  4008f4:	4a05      	ldr	r2, [pc, #20]	; (40090c <_sbrk+0x34>)
  4008f6:	4b03      	ldr	r3, [pc, #12]	; (400904 <_sbrk+0x2c>)
  4008f8:	601a      	str	r2, [r3, #0]
  4008fa:	e7f0      	b.n	4008de <_sbrk+0x6>
		return (caddr_t) -1;	
  4008fc:	f04f 30ff 	mov.w	r0, #4294967295
}
  400900:	4770      	bx	lr
  400902:	bf00      	nop
  400904:	20000868 	.word	0x20000868
  400908:	2001fffc 	.word	0x2001fffc
  40090c:	20003ad8 	.word	0x20003ad8

00400910 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400910:	f04f 30ff 	mov.w	r0, #4294967295
  400914:	4770      	bx	lr

00400916 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40091a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40091c:	2000      	movs	r0, #0
  40091e:	4770      	bx	lr

00400920 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400920:	2000      	movs	r0, #0
  400922:	4770      	bx	lr

00400924 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400924:	b5f0      	push	{r4, r5, r6, r7, lr}
  400926:	b083      	sub	sp, #12
  400928:	4605      	mov	r5, r0
  40092a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40092c:	2300      	movs	r3, #0
  40092e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400930:	4b18      	ldr	r3, [pc, #96]	; (400994 <usart_serial_getchar+0x70>)
  400932:	4298      	cmp	r0, r3
  400934:	d00a      	beq.n	40094c <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400936:	4b18      	ldr	r3, [pc, #96]	; (400998 <usart_serial_getchar+0x74>)
  400938:	4298      	cmp	r0, r3
  40093a:	d00f      	beq.n	40095c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40093c:	4b17      	ldr	r3, [pc, #92]	; (40099c <usart_serial_getchar+0x78>)
  40093e:	4298      	cmp	r0, r3
  400940:	d014      	beq.n	40096c <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400942:	4b17      	ldr	r3, [pc, #92]	; (4009a0 <usart_serial_getchar+0x7c>)
  400944:	429d      	cmp	r5, r3
  400946:	d01b      	beq.n	400980 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400948:	b003      	add	sp, #12
  40094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40094c:	461f      	mov	r7, r3
  40094e:	4e15      	ldr	r6, [pc, #84]	; (4009a4 <usart_serial_getchar+0x80>)
  400950:	4621      	mov	r1, r4
  400952:	4638      	mov	r0, r7
  400954:	47b0      	blx	r6
  400956:	2800      	cmp	r0, #0
  400958:	d1fa      	bne.n	400950 <usart_serial_getchar+0x2c>
  40095a:	e7f2      	b.n	400942 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40095c:	461e      	mov	r6, r3
  40095e:	4d11      	ldr	r5, [pc, #68]	; (4009a4 <usart_serial_getchar+0x80>)
  400960:	4621      	mov	r1, r4
  400962:	4630      	mov	r0, r6
  400964:	47a8      	blx	r5
  400966:	2800      	cmp	r0, #0
  400968:	d1fa      	bne.n	400960 <usart_serial_getchar+0x3c>
  40096a:	e7ed      	b.n	400948 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  40096c:	461e      	mov	r6, r3
  40096e:	4d0e      	ldr	r5, [pc, #56]	; (4009a8 <usart_serial_getchar+0x84>)
  400970:	a901      	add	r1, sp, #4
  400972:	4630      	mov	r0, r6
  400974:	47a8      	blx	r5
  400976:	2800      	cmp	r0, #0
  400978:	d1fa      	bne.n	400970 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  40097a:	9b01      	ldr	r3, [sp, #4]
  40097c:	7023      	strb	r3, [r4, #0]
  40097e:	e7e3      	b.n	400948 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400980:	461e      	mov	r6, r3
  400982:	4d09      	ldr	r5, [pc, #36]	; (4009a8 <usart_serial_getchar+0x84>)
  400984:	a901      	add	r1, sp, #4
  400986:	4630      	mov	r0, r6
  400988:	47a8      	blx	r5
  40098a:	2800      	cmp	r0, #0
  40098c:	d1fa      	bne.n	400984 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  40098e:	9b01      	ldr	r3, [sp, #4]
  400990:	7023      	strb	r3, [r4, #0]
}
  400992:	e7d9      	b.n	400948 <usart_serial_getchar+0x24>
  400994:	400e0600 	.word	0x400e0600
  400998:	40060600 	.word	0x40060600
  40099c:	400a0000 	.word	0x400a0000
  4009a0:	400a4000 	.word	0x400a4000
  4009a4:	0040064f 	.word	0x0040064f
  4009a8:	00400675 	.word	0x00400675

004009ac <usart_serial_putchar>:
{
  4009ac:	b570      	push	{r4, r5, r6, lr}
  4009ae:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4009b0:	4b18      	ldr	r3, [pc, #96]	; (400a14 <usart_serial_putchar+0x68>)
  4009b2:	4298      	cmp	r0, r3
  4009b4:	d00a      	beq.n	4009cc <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  4009b6:	4b18      	ldr	r3, [pc, #96]	; (400a18 <usart_serial_putchar+0x6c>)
  4009b8:	4298      	cmp	r0, r3
  4009ba:	d010      	beq.n	4009de <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  4009bc:	4b17      	ldr	r3, [pc, #92]	; (400a1c <usart_serial_putchar+0x70>)
  4009be:	4298      	cmp	r0, r3
  4009c0:	d016      	beq.n	4009f0 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  4009c2:	4b17      	ldr	r3, [pc, #92]	; (400a20 <usart_serial_putchar+0x74>)
  4009c4:	4298      	cmp	r0, r3
  4009c6:	d01c      	beq.n	400a02 <usart_serial_putchar+0x56>
	return 0;
  4009c8:	2000      	movs	r0, #0
}
  4009ca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4009cc:	461e      	mov	r6, r3
  4009ce:	4d15      	ldr	r5, [pc, #84]	; (400a24 <usart_serial_putchar+0x78>)
  4009d0:	4621      	mov	r1, r4
  4009d2:	4630      	mov	r0, r6
  4009d4:	47a8      	blx	r5
  4009d6:	2800      	cmp	r0, #0
  4009d8:	d1fa      	bne.n	4009d0 <usart_serial_putchar+0x24>
		return 1;
  4009da:	2001      	movs	r0, #1
  4009dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4009de:	461e      	mov	r6, r3
  4009e0:	4d10      	ldr	r5, [pc, #64]	; (400a24 <usart_serial_putchar+0x78>)
  4009e2:	4621      	mov	r1, r4
  4009e4:	4630      	mov	r0, r6
  4009e6:	47a8      	blx	r5
  4009e8:	2800      	cmp	r0, #0
  4009ea:	d1fa      	bne.n	4009e2 <usart_serial_putchar+0x36>
		return 1;
  4009ec:	2001      	movs	r0, #1
  4009ee:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4009f0:	461e      	mov	r6, r3
  4009f2:	4d0d      	ldr	r5, [pc, #52]	; (400a28 <usart_serial_putchar+0x7c>)
  4009f4:	4621      	mov	r1, r4
  4009f6:	4630      	mov	r0, r6
  4009f8:	47a8      	blx	r5
  4009fa:	2800      	cmp	r0, #0
  4009fc:	d1fa      	bne.n	4009f4 <usart_serial_putchar+0x48>
		return 1;
  4009fe:	2001      	movs	r0, #1
  400a00:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400a02:	461e      	mov	r6, r3
  400a04:	4d08      	ldr	r5, [pc, #32]	; (400a28 <usart_serial_putchar+0x7c>)
  400a06:	4621      	mov	r1, r4
  400a08:	4630      	mov	r0, r6
  400a0a:	47a8      	blx	r5
  400a0c:	2800      	cmp	r0, #0
  400a0e:	d1fa      	bne.n	400a06 <usart_serial_putchar+0x5a>
		return 1;
  400a10:	2001      	movs	r0, #1
  400a12:	bd70      	pop	{r4, r5, r6, pc}
  400a14:	400e0600 	.word	0x400e0600
  400a18:	40060600 	.word	0x40060600
  400a1c:	400a0000 	.word	0x400a0000
  400a20:	400a4000 	.word	0x400a4000
  400a24:	0040063f 	.word	0x0040063f
  400a28:	00400661 	.word	0x00400661

00400a2c <SPI_Handler>:
	}
}


void SPI_Handler(void)
{	
  400a2c:	b538      	push	{r3, r4, r5, lr}
	if(i <= 4) {
  400a2e:	4b0b      	ldr	r3, [pc, #44]	; (400a5c <SPI_Handler+0x30>)
  400a30:	681b      	ldr	r3, [r3, #0]
  400a32:	2b04      	cmp	r3, #4
  400a34:	d903      	bls.n	400a3e <SPI_Handler+0x12>
		i = 0;
  400a36:	2200      	movs	r2, #0
  400a38:	4b08      	ldr	r3, [pc, #32]	; (400a5c <SPI_Handler+0x30>)
  400a3a:	601a      	str	r2, [r3, #0]
  400a3c:	bd38      	pop	{r3, r4, r5, pc}
		spi_write(SPI_SLAVE_BASE, buffer[i], 0, 0);
  400a3e:	4c07      	ldr	r4, [pc, #28]	; (400a5c <SPI_Handler+0x30>)
  400a40:	6820      	ldr	r0, [r4, #0]
  400a42:	2300      	movs	r3, #0
  400a44:	461a      	mov	r2, r3
  400a46:	4906      	ldr	r1, [pc, #24]	; (400a60 <SPI_Handler+0x34>)
  400a48:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  400a4c:	4805      	ldr	r0, [pc, #20]	; (400a64 <SPI_Handler+0x38>)
  400a4e:	4d06      	ldr	r5, [pc, #24]	; (400a68 <SPI_Handler+0x3c>)
  400a50:	47a8      	blx	r5
		i++; 
  400a52:	6823      	ldr	r3, [r4, #0]
  400a54:	3301      	adds	r3, #1
  400a56:	6023      	str	r3, [r4, #0]
  400a58:	bd38      	pop	{r3, r4, r5, pc}
  400a5a:	bf00      	nop
  400a5c:	20000a6c 	.word	0x20000a6c
  400a60:	2000086c 	.word	0x2000086c
  400a64:	40088000 	.word	0x40088000
  400a68:	00400583 	.word	0x00400583

00400a6c <main>:
 * \brief Application entry point for SPI example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  400a6e:	b085      	sub	sp, #20
	/* Initialize the SAM system. */
	sysclk_init();
  400a70:	4b3a      	ldr	r3, [pc, #232]	; (400b5c <main+0xf0>)
  400a72:	4798      	blx	r3
	board_init();
  400a74:	4b3a      	ldr	r3, [pc, #232]	; (400b60 <main+0xf4>)
  400a76:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400a78:	4c3a      	ldr	r4, [pc, #232]	; (400b64 <main+0xf8>)
  400a7a:	4b3b      	ldr	r3, [pc, #236]	; (400b68 <main+0xfc>)
  400a7c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400a7e:	4a3b      	ldr	r2, [pc, #236]	; (400b6c <main+0x100>)
  400a80:	4b3b      	ldr	r3, [pc, #236]	; (400b70 <main+0x104>)
  400a82:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400a84:	4a3b      	ldr	r2, [pc, #236]	; (400b74 <main+0x108>)
  400a86:	4b3c      	ldr	r3, [pc, #240]	; (400b78 <main+0x10c>)
  400a88:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400a8a:	4b3c      	ldr	r3, [pc, #240]	; (400b7c <main+0x110>)
  400a8c:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400a8e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400a92:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a98:	9303      	str	r3, [sp, #12]
  400a9a:	2007      	movs	r0, #7
  400a9c:	4b38      	ldr	r3, [pc, #224]	; (400b80 <main+0x114>)
  400a9e:	4798      	blx	r3
		uart_init((Uart*)p_usart, &uart_settings);
  400aa0:	a901      	add	r1, sp, #4
  400aa2:	4620      	mov	r0, r4
  400aa4:	4b37      	ldr	r3, [pc, #220]	; (400b84 <main+0x118>)
  400aa6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400aa8:	4d37      	ldr	r5, [pc, #220]	; (400b88 <main+0x11c>)
  400aaa:	682b      	ldr	r3, [r5, #0]
  400aac:	2100      	movs	r1, #0
  400aae:	6898      	ldr	r0, [r3, #8]
  400ab0:	4c36      	ldr	r4, [pc, #216]	; (400b8c <main+0x120>)
  400ab2:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400ab4:	682b      	ldr	r3, [r5, #0]
  400ab6:	2100      	movs	r1, #0
  400ab8:	6858      	ldr	r0, [r3, #4]
  400aba:	47a0      	blx	r4
	configure_console();
	
	
	for(int j = 0; j <= 4; j++)
	{
		buffer[j] = j * 1000;
  400abc:	4b34      	ldr	r3, [pc, #208]	; (400b90 <main+0x124>)
  400abe:	2500      	movs	r5, #0
  400ac0:	801d      	strh	r5, [r3, #0]
  400ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400ac6:	805a      	strh	r2, [r3, #2]
  400ac8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  400acc:	809a      	strh	r2, [r3, #4]
  400ace:	f640 32b8 	movw	r2, #3000	; 0xbb8
  400ad2:	80da      	strh	r2, [r3, #6]
  400ad4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
  400ad8:	811a      	strh	r2, [r3, #8]
	spi_enable_clock(SPI_SLAVE_BASE);
  400ada:	4c2e      	ldr	r4, [pc, #184]	; (400b94 <main+0x128>)
  400adc:	4620      	mov	r0, r4
  400ade:	4b2e      	ldr	r3, [pc, #184]	; (400b98 <main+0x12c>)
  400ae0:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400ae2:	2602      	movs	r6, #2
  400ae4:	6026      	str	r6, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400ae6:	2780      	movs	r7, #128	; 0x80
  400ae8:	6027      	str	r7, [r4, #0]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  400aea:	6863      	ldr	r3, [r4, #4]
  400aec:	f023 0301 	bic.w	r3, r3, #1
  400af0:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400af2:	6863      	ldr	r3, [r4, #4]
  400af4:	f043 0310 	orr.w	r3, r3, #16
  400af8:	6063      	str	r3, [r4, #4]
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
  400afa:	210e      	movs	r1, #14
  400afc:	4620      	mov	r0, r4
  400afe:	4b27      	ldr	r3, [pc, #156]	; (400b9c <main+0x130>)
  400b00:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400b02:	462a      	mov	r2, r5
  400b04:	4629      	mov	r1, r5
  400b06:	4620      	mov	r0, r4
  400b08:	4b25      	ldr	r3, [pc, #148]	; (400ba0 <main+0x134>)
  400b0a:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400b0c:	462a      	mov	r2, r5
  400b0e:	4629      	mov	r1, r5
  400b10:	4620      	mov	r0, r4
  400b12:	4b24      	ldr	r3, [pc, #144]	; (400ba4 <main+0x138>)
  400b14:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, bits_per_transfer);
  400b16:	463a      	mov	r2, r7
  400b18:	4629      	mov	r1, r5
  400b1a:	4620      	mov	r0, r4
  400b1c:	4b22      	ldr	r3, [pc, #136]	; (400ba8 <main+0x13c>)
  400b1e:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400b20:	f44f 7380 	mov.w	r3, #256	; 0x100
  400b24:	6163      	str	r3, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400b26:	2101      	movs	r1, #1
  400b28:	6021      	str	r1, [r4, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b2a:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
  400b2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400b36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b3a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400b3e:	f883 5313 	strb.w	r5, [r3, #787]	; 0x313
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b42:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400b46:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400b4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b50:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b54:	601a      	str	r2, [r3, #0]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400b56:	6026      	str	r6, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400b58:	6021      	str	r1, [r4, #0]
  400b5a:	e7fe      	b.n	400b5a <main+0xee>
  400b5c:	00400165 	.word	0x00400165
  400b60:	00400255 	.word	0x00400255
  400b64:	400e0600 	.word	0x400e0600
  400b68:	20000aac 	.word	0x20000aac
  400b6c:	004009ad 	.word	0x004009ad
  400b70:	20000aa8 	.word	0x20000aa8
  400b74:	00400925 	.word	0x00400925
  400b78:	20000aa4 	.word	0x20000aa4
  400b7c:	07270e00 	.word	0x07270e00
  400b80:	00400509 	.word	0x00400509
  400b84:	00400607 	.word	0x00400607
  400b88:	20000008 	.word	0x20000008
  400b8c:	00400c99 	.word	0x00400c99
  400b90:	2000086c 	.word	0x2000086c
  400b94:	40088000 	.word	0x40088000
  400b98:	0040055d 	.word	0x0040055d
  400b9c:	0040056d 	.word	0x0040056d
  400ba0:	004005b7 	.word	0x004005b7
  400ba4:	004005d5 	.word	0x004005d5
  400ba8:	004005f3 	.word	0x004005f3

00400bac <__libc_init_array>:
  400bac:	b570      	push	{r4, r5, r6, lr}
  400bae:	4e0f      	ldr	r6, [pc, #60]	; (400bec <__libc_init_array+0x40>)
  400bb0:	4d0f      	ldr	r5, [pc, #60]	; (400bf0 <__libc_init_array+0x44>)
  400bb2:	1b76      	subs	r6, r6, r5
  400bb4:	10b6      	asrs	r6, r6, #2
  400bb6:	bf18      	it	ne
  400bb8:	2400      	movne	r4, #0
  400bba:	d005      	beq.n	400bc8 <__libc_init_array+0x1c>
  400bbc:	3401      	adds	r4, #1
  400bbe:	f855 3b04 	ldr.w	r3, [r5], #4
  400bc2:	4798      	blx	r3
  400bc4:	42a6      	cmp	r6, r4
  400bc6:	d1f9      	bne.n	400bbc <__libc_init_array+0x10>
  400bc8:	4e0a      	ldr	r6, [pc, #40]	; (400bf4 <__libc_init_array+0x48>)
  400bca:	4d0b      	ldr	r5, [pc, #44]	; (400bf8 <__libc_init_array+0x4c>)
  400bcc:	1b76      	subs	r6, r6, r5
  400bce:	f001 f86b 	bl	401ca8 <_init>
  400bd2:	10b6      	asrs	r6, r6, #2
  400bd4:	bf18      	it	ne
  400bd6:	2400      	movne	r4, #0
  400bd8:	d006      	beq.n	400be8 <__libc_init_array+0x3c>
  400bda:	3401      	adds	r4, #1
  400bdc:	f855 3b04 	ldr.w	r3, [r5], #4
  400be0:	4798      	blx	r3
  400be2:	42a6      	cmp	r6, r4
  400be4:	d1f9      	bne.n	400bda <__libc_init_array+0x2e>
  400be6:	bd70      	pop	{r4, r5, r6, pc}
  400be8:	bd70      	pop	{r4, r5, r6, pc}
  400bea:	bf00      	nop
  400bec:	00401cb4 	.word	0x00401cb4
  400bf0:	00401cb4 	.word	0x00401cb4
  400bf4:	00401cbc 	.word	0x00401cbc
  400bf8:	00401cb4 	.word	0x00401cb4

00400bfc <memset>:
  400bfc:	b470      	push	{r4, r5, r6}
  400bfe:	0786      	lsls	r6, r0, #30
  400c00:	d046      	beq.n	400c90 <memset+0x94>
  400c02:	1e54      	subs	r4, r2, #1
  400c04:	2a00      	cmp	r2, #0
  400c06:	d041      	beq.n	400c8c <memset+0x90>
  400c08:	b2ca      	uxtb	r2, r1
  400c0a:	4603      	mov	r3, r0
  400c0c:	e002      	b.n	400c14 <memset+0x18>
  400c0e:	f114 34ff 	adds.w	r4, r4, #4294967295
  400c12:	d33b      	bcc.n	400c8c <memset+0x90>
  400c14:	f803 2b01 	strb.w	r2, [r3], #1
  400c18:	079d      	lsls	r5, r3, #30
  400c1a:	d1f8      	bne.n	400c0e <memset+0x12>
  400c1c:	2c03      	cmp	r4, #3
  400c1e:	d92e      	bls.n	400c7e <memset+0x82>
  400c20:	b2cd      	uxtb	r5, r1
  400c22:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400c26:	2c0f      	cmp	r4, #15
  400c28:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400c2c:	d919      	bls.n	400c62 <memset+0x66>
  400c2e:	f103 0210 	add.w	r2, r3, #16
  400c32:	4626      	mov	r6, r4
  400c34:	3e10      	subs	r6, #16
  400c36:	2e0f      	cmp	r6, #15
  400c38:	f842 5c10 	str.w	r5, [r2, #-16]
  400c3c:	f842 5c0c 	str.w	r5, [r2, #-12]
  400c40:	f842 5c08 	str.w	r5, [r2, #-8]
  400c44:	f842 5c04 	str.w	r5, [r2, #-4]
  400c48:	f102 0210 	add.w	r2, r2, #16
  400c4c:	d8f2      	bhi.n	400c34 <memset+0x38>
  400c4e:	f1a4 0210 	sub.w	r2, r4, #16
  400c52:	f022 020f 	bic.w	r2, r2, #15
  400c56:	f004 040f 	and.w	r4, r4, #15
  400c5a:	3210      	adds	r2, #16
  400c5c:	2c03      	cmp	r4, #3
  400c5e:	4413      	add	r3, r2
  400c60:	d90d      	bls.n	400c7e <memset+0x82>
  400c62:	461e      	mov	r6, r3
  400c64:	4622      	mov	r2, r4
  400c66:	3a04      	subs	r2, #4
  400c68:	2a03      	cmp	r2, #3
  400c6a:	f846 5b04 	str.w	r5, [r6], #4
  400c6e:	d8fa      	bhi.n	400c66 <memset+0x6a>
  400c70:	1f22      	subs	r2, r4, #4
  400c72:	f022 0203 	bic.w	r2, r2, #3
  400c76:	3204      	adds	r2, #4
  400c78:	4413      	add	r3, r2
  400c7a:	f004 0403 	and.w	r4, r4, #3
  400c7e:	b12c      	cbz	r4, 400c8c <memset+0x90>
  400c80:	b2c9      	uxtb	r1, r1
  400c82:	441c      	add	r4, r3
  400c84:	f803 1b01 	strb.w	r1, [r3], #1
  400c88:	429c      	cmp	r4, r3
  400c8a:	d1fb      	bne.n	400c84 <memset+0x88>
  400c8c:	bc70      	pop	{r4, r5, r6}
  400c8e:	4770      	bx	lr
  400c90:	4614      	mov	r4, r2
  400c92:	4603      	mov	r3, r0
  400c94:	e7c2      	b.n	400c1c <memset+0x20>
  400c96:	bf00      	nop

00400c98 <setbuf>:
  400c98:	2900      	cmp	r1, #0
  400c9a:	bf0c      	ite	eq
  400c9c:	2202      	moveq	r2, #2
  400c9e:	2200      	movne	r2, #0
  400ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400ca4:	f000 b800 	b.w	400ca8 <setvbuf>

00400ca8 <setvbuf>:
  400ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400cac:	4c61      	ldr	r4, [pc, #388]	; (400e34 <setvbuf+0x18c>)
  400cae:	6825      	ldr	r5, [r4, #0]
  400cb0:	b083      	sub	sp, #12
  400cb2:	4604      	mov	r4, r0
  400cb4:	460f      	mov	r7, r1
  400cb6:	4690      	mov	r8, r2
  400cb8:	461e      	mov	r6, r3
  400cba:	b115      	cbz	r5, 400cc2 <setvbuf+0x1a>
  400cbc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d064      	beq.n	400d8c <setvbuf+0xe4>
  400cc2:	f1b8 0f02 	cmp.w	r8, #2
  400cc6:	d006      	beq.n	400cd6 <setvbuf+0x2e>
  400cc8:	f1b8 0f01 	cmp.w	r8, #1
  400ccc:	f200 809f 	bhi.w	400e0e <setvbuf+0x166>
  400cd0:	2e00      	cmp	r6, #0
  400cd2:	f2c0 809c 	blt.w	400e0e <setvbuf+0x166>
  400cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400cd8:	07d8      	lsls	r0, r3, #31
  400cda:	d534      	bpl.n	400d46 <setvbuf+0x9e>
  400cdc:	4621      	mov	r1, r4
  400cde:	4628      	mov	r0, r5
  400ce0:	f000 f95a 	bl	400f98 <_fflush_r>
  400ce4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  400ce6:	b141      	cbz	r1, 400cfa <setvbuf+0x52>
  400ce8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  400cec:	4299      	cmp	r1, r3
  400cee:	d002      	beq.n	400cf6 <setvbuf+0x4e>
  400cf0:	4628      	mov	r0, r5
  400cf2:	f000 fa4b 	bl	40118c <_free_r>
  400cf6:	2300      	movs	r3, #0
  400cf8:	6323      	str	r3, [r4, #48]	; 0x30
  400cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400cfe:	2200      	movs	r2, #0
  400d00:	61a2      	str	r2, [r4, #24]
  400d02:	6062      	str	r2, [r4, #4]
  400d04:	061a      	lsls	r2, r3, #24
  400d06:	d43a      	bmi.n	400d7e <setvbuf+0xd6>
  400d08:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400d0c:	f023 0303 	bic.w	r3, r3, #3
  400d10:	f1b8 0f02 	cmp.w	r8, #2
  400d14:	81a3      	strh	r3, [r4, #12]
  400d16:	d01d      	beq.n	400d54 <setvbuf+0xac>
  400d18:	ab01      	add	r3, sp, #4
  400d1a:	466a      	mov	r2, sp
  400d1c:	4621      	mov	r1, r4
  400d1e:	4628      	mov	r0, r5
  400d20:	f000 fb4c 	bl	4013bc <__swhatbuf_r>
  400d24:	89a3      	ldrh	r3, [r4, #12]
  400d26:	4318      	orrs	r0, r3
  400d28:	81a0      	strh	r0, [r4, #12]
  400d2a:	2e00      	cmp	r6, #0
  400d2c:	d132      	bne.n	400d94 <setvbuf+0xec>
  400d2e:	9e00      	ldr	r6, [sp, #0]
  400d30:	4630      	mov	r0, r6
  400d32:	f000 fb71 	bl	401418 <malloc>
  400d36:	4607      	mov	r7, r0
  400d38:	2800      	cmp	r0, #0
  400d3a:	d06b      	beq.n	400e14 <setvbuf+0x16c>
  400d3c:	89a3      	ldrh	r3, [r4, #12]
  400d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400d42:	81a3      	strh	r3, [r4, #12]
  400d44:	e028      	b.n	400d98 <setvbuf+0xf0>
  400d46:	89a3      	ldrh	r3, [r4, #12]
  400d48:	0599      	lsls	r1, r3, #22
  400d4a:	d4c7      	bmi.n	400cdc <setvbuf+0x34>
  400d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400d4e:	f000 fb31 	bl	4013b4 <__retarget_lock_acquire_recursive>
  400d52:	e7c3      	b.n	400cdc <setvbuf+0x34>
  400d54:	2500      	movs	r5, #0
  400d56:	6e61      	ldr	r1, [r4, #100]	; 0x64
  400d58:	2600      	movs	r6, #0
  400d5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  400d5e:	f043 0302 	orr.w	r3, r3, #2
  400d62:	2001      	movs	r0, #1
  400d64:	60a6      	str	r6, [r4, #8]
  400d66:	07ce      	lsls	r6, r1, #31
  400d68:	81a3      	strh	r3, [r4, #12]
  400d6a:	6022      	str	r2, [r4, #0]
  400d6c:	6122      	str	r2, [r4, #16]
  400d6e:	6160      	str	r0, [r4, #20]
  400d70:	d401      	bmi.n	400d76 <setvbuf+0xce>
  400d72:	0598      	lsls	r0, r3, #22
  400d74:	d53e      	bpl.n	400df4 <setvbuf+0x14c>
  400d76:	4628      	mov	r0, r5
  400d78:	b003      	add	sp, #12
  400d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d7e:	6921      	ldr	r1, [r4, #16]
  400d80:	4628      	mov	r0, r5
  400d82:	f000 fa03 	bl	40118c <_free_r>
  400d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400d8a:	e7bd      	b.n	400d08 <setvbuf+0x60>
  400d8c:	4628      	mov	r0, r5
  400d8e:	f000 f95b 	bl	401048 <__sinit>
  400d92:	e796      	b.n	400cc2 <setvbuf+0x1a>
  400d94:	2f00      	cmp	r7, #0
  400d96:	d0cb      	beq.n	400d30 <setvbuf+0x88>
  400d98:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400d9a:	2b00      	cmp	r3, #0
  400d9c:	d033      	beq.n	400e06 <setvbuf+0x15e>
  400d9e:	9b00      	ldr	r3, [sp, #0]
  400da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  400da4:	6027      	str	r7, [r4, #0]
  400da6:	429e      	cmp	r6, r3
  400da8:	bf1c      	itt	ne
  400daa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  400dae:	81a2      	strhne	r2, [r4, #12]
  400db0:	f1b8 0f01 	cmp.w	r8, #1
  400db4:	bf04      	itt	eq
  400db6:	f042 0201 	orreq.w	r2, r2, #1
  400dba:	81a2      	strheq	r2, [r4, #12]
  400dbc:	b292      	uxth	r2, r2
  400dbe:	f012 0308 	ands.w	r3, r2, #8
  400dc2:	6127      	str	r7, [r4, #16]
  400dc4:	6166      	str	r6, [r4, #20]
  400dc6:	d00e      	beq.n	400de6 <setvbuf+0x13e>
  400dc8:	07d1      	lsls	r1, r2, #31
  400dca:	d51a      	bpl.n	400e02 <setvbuf+0x15a>
  400dcc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400dce:	4276      	negs	r6, r6
  400dd0:	2300      	movs	r3, #0
  400dd2:	f015 0501 	ands.w	r5, r5, #1
  400dd6:	61a6      	str	r6, [r4, #24]
  400dd8:	60a3      	str	r3, [r4, #8]
  400dda:	d009      	beq.n	400df0 <setvbuf+0x148>
  400ddc:	2500      	movs	r5, #0
  400dde:	4628      	mov	r0, r5
  400de0:	b003      	add	sp, #12
  400de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400de6:	60a3      	str	r3, [r4, #8]
  400de8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400dea:	f015 0501 	ands.w	r5, r5, #1
  400dee:	d1f5      	bne.n	400ddc <setvbuf+0x134>
  400df0:	0593      	lsls	r3, r2, #22
  400df2:	d4c0      	bmi.n	400d76 <setvbuf+0xce>
  400df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400df6:	f000 fadf 	bl	4013b8 <__retarget_lock_release_recursive>
  400dfa:	4628      	mov	r0, r5
  400dfc:	b003      	add	sp, #12
  400dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400e02:	60a6      	str	r6, [r4, #8]
  400e04:	e7f0      	b.n	400de8 <setvbuf+0x140>
  400e06:	4628      	mov	r0, r5
  400e08:	f000 f91e 	bl	401048 <__sinit>
  400e0c:	e7c7      	b.n	400d9e <setvbuf+0xf6>
  400e0e:	f04f 35ff 	mov.w	r5, #4294967295
  400e12:	e7b0      	b.n	400d76 <setvbuf+0xce>
  400e14:	f8dd 9000 	ldr.w	r9, [sp]
  400e18:	45b1      	cmp	r9, r6
  400e1a:	d004      	beq.n	400e26 <setvbuf+0x17e>
  400e1c:	4648      	mov	r0, r9
  400e1e:	f000 fafb 	bl	401418 <malloc>
  400e22:	4607      	mov	r7, r0
  400e24:	b920      	cbnz	r0, 400e30 <setvbuf+0x188>
  400e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400e2a:	f04f 35ff 	mov.w	r5, #4294967295
  400e2e:	e792      	b.n	400d56 <setvbuf+0xae>
  400e30:	464e      	mov	r6, r9
  400e32:	e783      	b.n	400d3c <setvbuf+0x94>
  400e34:	20000008 	.word	0x20000008

00400e38 <register_fini>:
  400e38:	4b02      	ldr	r3, [pc, #8]	; (400e44 <register_fini+0xc>)
  400e3a:	b113      	cbz	r3, 400e42 <register_fini+0xa>
  400e3c:	4802      	ldr	r0, [pc, #8]	; (400e48 <register_fini+0x10>)
  400e3e:	f000 b805 	b.w	400e4c <atexit>
  400e42:	4770      	bx	lr
  400e44:	00000000 	.word	0x00000000
  400e48:	004010b9 	.word	0x004010b9

00400e4c <atexit>:
  400e4c:	2300      	movs	r3, #0
  400e4e:	4601      	mov	r1, r0
  400e50:	461a      	mov	r2, r3
  400e52:	4618      	mov	r0, r3
  400e54:	f000 be10 	b.w	401a78 <__register_exitproc>

00400e58 <__sflush_r>:
  400e58:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  400e5c:	b29a      	uxth	r2, r3
  400e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e62:	460d      	mov	r5, r1
  400e64:	0711      	lsls	r1, r2, #28
  400e66:	4680      	mov	r8, r0
  400e68:	d43a      	bmi.n	400ee0 <__sflush_r+0x88>
  400e6a:	686a      	ldr	r2, [r5, #4]
  400e6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400e70:	2a00      	cmp	r2, #0
  400e72:	81ab      	strh	r3, [r5, #12]
  400e74:	dd6f      	ble.n	400f56 <__sflush_r+0xfe>
  400e76:	6aac      	ldr	r4, [r5, #40]	; 0x28
  400e78:	2c00      	cmp	r4, #0
  400e7a:	d049      	beq.n	400f10 <__sflush_r+0xb8>
  400e7c:	2200      	movs	r2, #0
  400e7e:	b29b      	uxth	r3, r3
  400e80:	f8d8 6000 	ldr.w	r6, [r8]
  400e84:	f8c8 2000 	str.w	r2, [r8]
  400e88:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  400e8c:	d067      	beq.n	400f5e <__sflush_r+0x106>
  400e8e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  400e90:	075f      	lsls	r7, r3, #29
  400e92:	d505      	bpl.n	400ea0 <__sflush_r+0x48>
  400e94:	6869      	ldr	r1, [r5, #4]
  400e96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400e98:	1a52      	subs	r2, r2, r1
  400e9a:	b10b      	cbz	r3, 400ea0 <__sflush_r+0x48>
  400e9c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  400e9e:	1ad2      	subs	r2, r2, r3
  400ea0:	2300      	movs	r3, #0
  400ea2:	69e9      	ldr	r1, [r5, #28]
  400ea4:	4640      	mov	r0, r8
  400ea6:	47a0      	blx	r4
  400ea8:	1c44      	adds	r4, r0, #1
  400eaa:	d03c      	beq.n	400f26 <__sflush_r+0xce>
  400eac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  400eb0:	692a      	ldr	r2, [r5, #16]
  400eb2:	602a      	str	r2, [r5, #0]
  400eb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400eb8:	2200      	movs	r2, #0
  400eba:	81ab      	strh	r3, [r5, #12]
  400ebc:	04db      	lsls	r3, r3, #19
  400ebe:	606a      	str	r2, [r5, #4]
  400ec0:	d447      	bmi.n	400f52 <__sflush_r+0xfa>
  400ec2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  400ec4:	f8c8 6000 	str.w	r6, [r8]
  400ec8:	b311      	cbz	r1, 400f10 <__sflush_r+0xb8>
  400eca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  400ece:	4299      	cmp	r1, r3
  400ed0:	d002      	beq.n	400ed8 <__sflush_r+0x80>
  400ed2:	4640      	mov	r0, r8
  400ed4:	f000 f95a 	bl	40118c <_free_r>
  400ed8:	2000      	movs	r0, #0
  400eda:	6328      	str	r0, [r5, #48]	; 0x30
  400edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ee0:	692e      	ldr	r6, [r5, #16]
  400ee2:	b1ae      	cbz	r6, 400f10 <__sflush_r+0xb8>
  400ee4:	682c      	ldr	r4, [r5, #0]
  400ee6:	602e      	str	r6, [r5, #0]
  400ee8:	0791      	lsls	r1, r2, #30
  400eea:	bf0c      	ite	eq
  400eec:	696b      	ldreq	r3, [r5, #20]
  400eee:	2300      	movne	r3, #0
  400ef0:	1ba4      	subs	r4, r4, r6
  400ef2:	60ab      	str	r3, [r5, #8]
  400ef4:	e00a      	b.n	400f0c <__sflush_r+0xb4>
  400ef6:	4623      	mov	r3, r4
  400ef8:	4632      	mov	r2, r6
  400efa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  400efc:	69e9      	ldr	r1, [r5, #28]
  400efe:	4640      	mov	r0, r8
  400f00:	47b8      	blx	r7
  400f02:	2800      	cmp	r0, #0
  400f04:	eba4 0400 	sub.w	r4, r4, r0
  400f08:	4406      	add	r6, r0
  400f0a:	dd04      	ble.n	400f16 <__sflush_r+0xbe>
  400f0c:	2c00      	cmp	r4, #0
  400f0e:	dcf2      	bgt.n	400ef6 <__sflush_r+0x9e>
  400f10:	2000      	movs	r0, #0
  400f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f16:	89ab      	ldrh	r3, [r5, #12]
  400f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400f1c:	81ab      	strh	r3, [r5, #12]
  400f1e:	f04f 30ff 	mov.w	r0, #4294967295
  400f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f26:	f8d8 4000 	ldr.w	r4, [r8]
  400f2a:	2c1d      	cmp	r4, #29
  400f2c:	d8f3      	bhi.n	400f16 <__sflush_r+0xbe>
  400f2e:	4b19      	ldr	r3, [pc, #100]	; (400f94 <__sflush_r+0x13c>)
  400f30:	40e3      	lsrs	r3, r4
  400f32:	43db      	mvns	r3, r3
  400f34:	f013 0301 	ands.w	r3, r3, #1
  400f38:	d1ed      	bne.n	400f16 <__sflush_r+0xbe>
  400f3a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  400f3e:	606b      	str	r3, [r5, #4]
  400f40:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  400f44:	6929      	ldr	r1, [r5, #16]
  400f46:	81ab      	strh	r3, [r5, #12]
  400f48:	04da      	lsls	r2, r3, #19
  400f4a:	6029      	str	r1, [r5, #0]
  400f4c:	d5b9      	bpl.n	400ec2 <__sflush_r+0x6a>
  400f4e:	2c00      	cmp	r4, #0
  400f50:	d1b7      	bne.n	400ec2 <__sflush_r+0x6a>
  400f52:	6528      	str	r0, [r5, #80]	; 0x50
  400f54:	e7b5      	b.n	400ec2 <__sflush_r+0x6a>
  400f56:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  400f58:	2a00      	cmp	r2, #0
  400f5a:	dc8c      	bgt.n	400e76 <__sflush_r+0x1e>
  400f5c:	e7d8      	b.n	400f10 <__sflush_r+0xb8>
  400f5e:	2301      	movs	r3, #1
  400f60:	69e9      	ldr	r1, [r5, #28]
  400f62:	4640      	mov	r0, r8
  400f64:	47a0      	blx	r4
  400f66:	1c43      	adds	r3, r0, #1
  400f68:	4602      	mov	r2, r0
  400f6a:	d002      	beq.n	400f72 <__sflush_r+0x11a>
  400f6c:	89ab      	ldrh	r3, [r5, #12]
  400f6e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  400f70:	e78e      	b.n	400e90 <__sflush_r+0x38>
  400f72:	f8d8 3000 	ldr.w	r3, [r8]
  400f76:	2b00      	cmp	r3, #0
  400f78:	d0f8      	beq.n	400f6c <__sflush_r+0x114>
  400f7a:	2b1d      	cmp	r3, #29
  400f7c:	d001      	beq.n	400f82 <__sflush_r+0x12a>
  400f7e:	2b16      	cmp	r3, #22
  400f80:	d102      	bne.n	400f88 <__sflush_r+0x130>
  400f82:	f8c8 6000 	str.w	r6, [r8]
  400f86:	e7c3      	b.n	400f10 <__sflush_r+0xb8>
  400f88:	89ab      	ldrh	r3, [r5, #12]
  400f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400f8e:	81ab      	strh	r3, [r5, #12]
  400f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f94:	20400001 	.word	0x20400001

00400f98 <_fflush_r>:
  400f98:	b538      	push	{r3, r4, r5, lr}
  400f9a:	460d      	mov	r5, r1
  400f9c:	4604      	mov	r4, r0
  400f9e:	b108      	cbz	r0, 400fa4 <_fflush_r+0xc>
  400fa0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400fa2:	b1bb      	cbz	r3, 400fd4 <_fflush_r+0x3c>
  400fa4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  400fa8:	b188      	cbz	r0, 400fce <_fflush_r+0x36>
  400faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  400fac:	07db      	lsls	r3, r3, #31
  400fae:	d401      	bmi.n	400fb4 <_fflush_r+0x1c>
  400fb0:	0581      	lsls	r1, r0, #22
  400fb2:	d517      	bpl.n	400fe4 <_fflush_r+0x4c>
  400fb4:	4620      	mov	r0, r4
  400fb6:	4629      	mov	r1, r5
  400fb8:	f7ff ff4e 	bl	400e58 <__sflush_r>
  400fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  400fbe:	07da      	lsls	r2, r3, #31
  400fc0:	4604      	mov	r4, r0
  400fc2:	d402      	bmi.n	400fca <_fflush_r+0x32>
  400fc4:	89ab      	ldrh	r3, [r5, #12]
  400fc6:	059b      	lsls	r3, r3, #22
  400fc8:	d507      	bpl.n	400fda <_fflush_r+0x42>
  400fca:	4620      	mov	r0, r4
  400fcc:	bd38      	pop	{r3, r4, r5, pc}
  400fce:	4604      	mov	r4, r0
  400fd0:	4620      	mov	r0, r4
  400fd2:	bd38      	pop	{r3, r4, r5, pc}
  400fd4:	f000 f838 	bl	401048 <__sinit>
  400fd8:	e7e4      	b.n	400fa4 <_fflush_r+0xc>
  400fda:	6da8      	ldr	r0, [r5, #88]	; 0x58
  400fdc:	f000 f9ec 	bl	4013b8 <__retarget_lock_release_recursive>
  400fe0:	4620      	mov	r0, r4
  400fe2:	bd38      	pop	{r3, r4, r5, pc}
  400fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  400fe6:	f000 f9e5 	bl	4013b4 <__retarget_lock_acquire_recursive>
  400fea:	e7e3      	b.n	400fb4 <_fflush_r+0x1c>

00400fec <_cleanup_r>:
  400fec:	4901      	ldr	r1, [pc, #4]	; (400ff4 <_cleanup_r+0x8>)
  400fee:	f000 b9b3 	b.w	401358 <_fwalk_reent>
  400ff2:	bf00      	nop
  400ff4:	00401b61 	.word	0x00401b61

00400ff8 <std.isra.0>:
  400ff8:	b510      	push	{r4, lr}
  400ffa:	2300      	movs	r3, #0
  400ffc:	4604      	mov	r4, r0
  400ffe:	8181      	strh	r1, [r0, #12]
  401000:	81c2      	strh	r2, [r0, #14]
  401002:	6003      	str	r3, [r0, #0]
  401004:	6043      	str	r3, [r0, #4]
  401006:	6083      	str	r3, [r0, #8]
  401008:	6643      	str	r3, [r0, #100]	; 0x64
  40100a:	6103      	str	r3, [r0, #16]
  40100c:	6143      	str	r3, [r0, #20]
  40100e:	6183      	str	r3, [r0, #24]
  401010:	4619      	mov	r1, r3
  401012:	2208      	movs	r2, #8
  401014:	305c      	adds	r0, #92	; 0x5c
  401016:	f7ff fdf1 	bl	400bfc <memset>
  40101a:	4807      	ldr	r0, [pc, #28]	; (401038 <std.isra.0+0x40>)
  40101c:	4907      	ldr	r1, [pc, #28]	; (40103c <std.isra.0+0x44>)
  40101e:	4a08      	ldr	r2, [pc, #32]	; (401040 <std.isra.0+0x48>)
  401020:	4b08      	ldr	r3, [pc, #32]	; (401044 <std.isra.0+0x4c>)
  401022:	6220      	str	r0, [r4, #32]
  401024:	61e4      	str	r4, [r4, #28]
  401026:	6261      	str	r1, [r4, #36]	; 0x24
  401028:	62a2      	str	r2, [r4, #40]	; 0x28
  40102a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40102c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  401030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401034:	f000 b9ba 	b.w	4013ac <__retarget_lock_init_recursive>
  401038:	004019c5 	.word	0x004019c5
  40103c:	004019e9 	.word	0x004019e9
  401040:	00401a25 	.word	0x00401a25
  401044:	00401a45 	.word	0x00401a45

00401048 <__sinit>:
  401048:	b510      	push	{r4, lr}
  40104a:	4604      	mov	r4, r0
  40104c:	4812      	ldr	r0, [pc, #72]	; (401098 <__sinit+0x50>)
  40104e:	f000 f9b1 	bl	4013b4 <__retarget_lock_acquire_recursive>
  401052:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401054:	b9d2      	cbnz	r2, 40108c <__sinit+0x44>
  401056:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40105a:	4810      	ldr	r0, [pc, #64]	; (40109c <__sinit+0x54>)
  40105c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401060:	2103      	movs	r1, #3
  401062:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  401066:	63e0      	str	r0, [r4, #60]	; 0x3c
  401068:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40106c:	6860      	ldr	r0, [r4, #4]
  40106e:	2104      	movs	r1, #4
  401070:	f7ff ffc2 	bl	400ff8 <std.isra.0>
  401074:	2201      	movs	r2, #1
  401076:	2109      	movs	r1, #9
  401078:	68a0      	ldr	r0, [r4, #8]
  40107a:	f7ff ffbd 	bl	400ff8 <std.isra.0>
  40107e:	2202      	movs	r2, #2
  401080:	2112      	movs	r1, #18
  401082:	68e0      	ldr	r0, [r4, #12]
  401084:	f7ff ffb8 	bl	400ff8 <std.isra.0>
  401088:	2301      	movs	r3, #1
  40108a:	63a3      	str	r3, [r4, #56]	; 0x38
  40108c:	4802      	ldr	r0, [pc, #8]	; (401098 <__sinit+0x50>)
  40108e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401092:	f000 b991 	b.w	4013b8 <__retarget_lock_release_recursive>
  401096:	bf00      	nop
  401098:	20000abc 	.word	0x20000abc
  40109c:	00400fed 	.word	0x00400fed

004010a0 <__sfp_lock_acquire>:
  4010a0:	4801      	ldr	r0, [pc, #4]	; (4010a8 <__sfp_lock_acquire+0x8>)
  4010a2:	f000 b987 	b.w	4013b4 <__retarget_lock_acquire_recursive>
  4010a6:	bf00      	nop
  4010a8:	20000ad0 	.word	0x20000ad0

004010ac <__sfp_lock_release>:
  4010ac:	4801      	ldr	r0, [pc, #4]	; (4010b4 <__sfp_lock_release+0x8>)
  4010ae:	f000 b983 	b.w	4013b8 <__retarget_lock_release_recursive>
  4010b2:	bf00      	nop
  4010b4:	20000ad0 	.word	0x20000ad0

004010b8 <__libc_fini_array>:
  4010b8:	b538      	push	{r3, r4, r5, lr}
  4010ba:	4c0a      	ldr	r4, [pc, #40]	; (4010e4 <__libc_fini_array+0x2c>)
  4010bc:	4d0a      	ldr	r5, [pc, #40]	; (4010e8 <__libc_fini_array+0x30>)
  4010be:	1b64      	subs	r4, r4, r5
  4010c0:	10a4      	asrs	r4, r4, #2
  4010c2:	d00a      	beq.n	4010da <__libc_fini_array+0x22>
  4010c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4010c8:	3b01      	subs	r3, #1
  4010ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4010ce:	3c01      	subs	r4, #1
  4010d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4010d4:	4798      	blx	r3
  4010d6:	2c00      	cmp	r4, #0
  4010d8:	d1f9      	bne.n	4010ce <__libc_fini_array+0x16>
  4010da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4010de:	f000 bded 	b.w	401cbc <_fini>
  4010e2:	bf00      	nop
  4010e4:	00401ccc 	.word	0x00401ccc
  4010e8:	00401cc8 	.word	0x00401cc8

004010ec <_malloc_trim_r>:
  4010ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010ee:	4f24      	ldr	r7, [pc, #144]	; (401180 <_malloc_trim_r+0x94>)
  4010f0:	460c      	mov	r4, r1
  4010f2:	4606      	mov	r6, r0
  4010f4:	f000 fc48 	bl	401988 <__malloc_lock>
  4010f8:	68bb      	ldr	r3, [r7, #8]
  4010fa:	685d      	ldr	r5, [r3, #4]
  4010fc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401100:	310f      	adds	r1, #15
  401102:	f025 0503 	bic.w	r5, r5, #3
  401106:	4429      	add	r1, r5
  401108:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40110c:	f021 010f 	bic.w	r1, r1, #15
  401110:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401114:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401118:	db07      	blt.n	40112a <_malloc_trim_r+0x3e>
  40111a:	2100      	movs	r1, #0
  40111c:	4630      	mov	r0, r6
  40111e:	f000 fc3f 	bl	4019a0 <_sbrk_r>
  401122:	68bb      	ldr	r3, [r7, #8]
  401124:	442b      	add	r3, r5
  401126:	4298      	cmp	r0, r3
  401128:	d004      	beq.n	401134 <_malloc_trim_r+0x48>
  40112a:	4630      	mov	r0, r6
  40112c:	f000 fc32 	bl	401994 <__malloc_unlock>
  401130:	2000      	movs	r0, #0
  401132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401134:	4261      	negs	r1, r4
  401136:	4630      	mov	r0, r6
  401138:	f000 fc32 	bl	4019a0 <_sbrk_r>
  40113c:	3001      	adds	r0, #1
  40113e:	d00d      	beq.n	40115c <_malloc_trim_r+0x70>
  401140:	4b10      	ldr	r3, [pc, #64]	; (401184 <_malloc_trim_r+0x98>)
  401142:	68ba      	ldr	r2, [r7, #8]
  401144:	6819      	ldr	r1, [r3, #0]
  401146:	1b2d      	subs	r5, r5, r4
  401148:	f045 0501 	orr.w	r5, r5, #1
  40114c:	4630      	mov	r0, r6
  40114e:	1b09      	subs	r1, r1, r4
  401150:	6055      	str	r5, [r2, #4]
  401152:	6019      	str	r1, [r3, #0]
  401154:	f000 fc1e 	bl	401994 <__malloc_unlock>
  401158:	2001      	movs	r0, #1
  40115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40115c:	2100      	movs	r1, #0
  40115e:	4630      	mov	r0, r6
  401160:	f000 fc1e 	bl	4019a0 <_sbrk_r>
  401164:	68ba      	ldr	r2, [r7, #8]
  401166:	1a83      	subs	r3, r0, r2
  401168:	2b0f      	cmp	r3, #15
  40116a:	ddde      	ble.n	40112a <_malloc_trim_r+0x3e>
  40116c:	4c06      	ldr	r4, [pc, #24]	; (401188 <_malloc_trim_r+0x9c>)
  40116e:	4905      	ldr	r1, [pc, #20]	; (401184 <_malloc_trim_r+0x98>)
  401170:	6824      	ldr	r4, [r4, #0]
  401172:	f043 0301 	orr.w	r3, r3, #1
  401176:	1b00      	subs	r0, r0, r4
  401178:	6053      	str	r3, [r2, #4]
  40117a:	6008      	str	r0, [r1, #0]
  40117c:	e7d5      	b.n	40112a <_malloc_trim_r+0x3e>
  40117e:	bf00      	nop
  401180:	2000043c 	.word	0x2000043c
  401184:	20000a70 	.word	0x20000a70
  401188:	20000844 	.word	0x20000844

0040118c <_free_r>:
  40118c:	2900      	cmp	r1, #0
  40118e:	d044      	beq.n	40121a <_free_r+0x8e>
  401190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401194:	460d      	mov	r5, r1
  401196:	4680      	mov	r8, r0
  401198:	f000 fbf6 	bl	401988 <__malloc_lock>
  40119c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4011a0:	4969      	ldr	r1, [pc, #420]	; (401348 <_free_r+0x1bc>)
  4011a2:	f027 0301 	bic.w	r3, r7, #1
  4011a6:	f1a5 0408 	sub.w	r4, r5, #8
  4011aa:	18e2      	adds	r2, r4, r3
  4011ac:	688e      	ldr	r6, [r1, #8]
  4011ae:	6850      	ldr	r0, [r2, #4]
  4011b0:	42b2      	cmp	r2, r6
  4011b2:	f020 0003 	bic.w	r0, r0, #3
  4011b6:	d05e      	beq.n	401276 <_free_r+0xea>
  4011b8:	07fe      	lsls	r6, r7, #31
  4011ba:	6050      	str	r0, [r2, #4]
  4011bc:	d40b      	bmi.n	4011d6 <_free_r+0x4a>
  4011be:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4011c2:	1be4      	subs	r4, r4, r7
  4011c4:	f101 0e08 	add.w	lr, r1, #8
  4011c8:	68a5      	ldr	r5, [r4, #8]
  4011ca:	4575      	cmp	r5, lr
  4011cc:	443b      	add	r3, r7
  4011ce:	d06d      	beq.n	4012ac <_free_r+0x120>
  4011d0:	68e7      	ldr	r7, [r4, #12]
  4011d2:	60ef      	str	r7, [r5, #12]
  4011d4:	60bd      	str	r5, [r7, #8]
  4011d6:	1815      	adds	r5, r2, r0
  4011d8:	686d      	ldr	r5, [r5, #4]
  4011da:	07ed      	lsls	r5, r5, #31
  4011dc:	d53e      	bpl.n	40125c <_free_r+0xd0>
  4011de:	f043 0201 	orr.w	r2, r3, #1
  4011e2:	6062      	str	r2, [r4, #4]
  4011e4:	50e3      	str	r3, [r4, r3]
  4011e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4011ea:	d217      	bcs.n	40121c <_free_r+0x90>
  4011ec:	08db      	lsrs	r3, r3, #3
  4011ee:	1c58      	adds	r0, r3, #1
  4011f0:	109a      	asrs	r2, r3, #2
  4011f2:	684d      	ldr	r5, [r1, #4]
  4011f4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4011f8:	60a7      	str	r7, [r4, #8]
  4011fa:	2301      	movs	r3, #1
  4011fc:	4093      	lsls	r3, r2
  4011fe:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  401202:	432b      	orrs	r3, r5
  401204:	3a08      	subs	r2, #8
  401206:	60e2      	str	r2, [r4, #12]
  401208:	604b      	str	r3, [r1, #4]
  40120a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40120e:	60fc      	str	r4, [r7, #12]
  401210:	4640      	mov	r0, r8
  401212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401216:	f000 bbbd 	b.w	401994 <__malloc_unlock>
  40121a:	4770      	bx	lr
  40121c:	0a5a      	lsrs	r2, r3, #9
  40121e:	2a04      	cmp	r2, #4
  401220:	d852      	bhi.n	4012c8 <_free_r+0x13c>
  401222:	099a      	lsrs	r2, r3, #6
  401224:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401228:	00ff      	lsls	r7, r7, #3
  40122a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40122e:	19c8      	adds	r0, r1, r7
  401230:	59ca      	ldr	r2, [r1, r7]
  401232:	3808      	subs	r0, #8
  401234:	4290      	cmp	r0, r2
  401236:	d04f      	beq.n	4012d8 <_free_r+0x14c>
  401238:	6851      	ldr	r1, [r2, #4]
  40123a:	f021 0103 	bic.w	r1, r1, #3
  40123e:	428b      	cmp	r3, r1
  401240:	d232      	bcs.n	4012a8 <_free_r+0x11c>
  401242:	6892      	ldr	r2, [r2, #8]
  401244:	4290      	cmp	r0, r2
  401246:	d1f7      	bne.n	401238 <_free_r+0xac>
  401248:	68c3      	ldr	r3, [r0, #12]
  40124a:	60a0      	str	r0, [r4, #8]
  40124c:	60e3      	str	r3, [r4, #12]
  40124e:	609c      	str	r4, [r3, #8]
  401250:	60c4      	str	r4, [r0, #12]
  401252:	4640      	mov	r0, r8
  401254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401258:	f000 bb9c 	b.w	401994 <__malloc_unlock>
  40125c:	6895      	ldr	r5, [r2, #8]
  40125e:	4f3b      	ldr	r7, [pc, #236]	; (40134c <_free_r+0x1c0>)
  401260:	42bd      	cmp	r5, r7
  401262:	4403      	add	r3, r0
  401264:	d040      	beq.n	4012e8 <_free_r+0x15c>
  401266:	68d0      	ldr	r0, [r2, #12]
  401268:	60e8      	str	r0, [r5, #12]
  40126a:	f043 0201 	orr.w	r2, r3, #1
  40126e:	6085      	str	r5, [r0, #8]
  401270:	6062      	str	r2, [r4, #4]
  401272:	50e3      	str	r3, [r4, r3]
  401274:	e7b7      	b.n	4011e6 <_free_r+0x5a>
  401276:	07ff      	lsls	r7, r7, #31
  401278:	4403      	add	r3, r0
  40127a:	d407      	bmi.n	40128c <_free_r+0x100>
  40127c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401280:	1aa4      	subs	r4, r4, r2
  401282:	4413      	add	r3, r2
  401284:	68a0      	ldr	r0, [r4, #8]
  401286:	68e2      	ldr	r2, [r4, #12]
  401288:	60c2      	str	r2, [r0, #12]
  40128a:	6090      	str	r0, [r2, #8]
  40128c:	4a30      	ldr	r2, [pc, #192]	; (401350 <_free_r+0x1c4>)
  40128e:	6812      	ldr	r2, [r2, #0]
  401290:	f043 0001 	orr.w	r0, r3, #1
  401294:	4293      	cmp	r3, r2
  401296:	6060      	str	r0, [r4, #4]
  401298:	608c      	str	r4, [r1, #8]
  40129a:	d3b9      	bcc.n	401210 <_free_r+0x84>
  40129c:	4b2d      	ldr	r3, [pc, #180]	; (401354 <_free_r+0x1c8>)
  40129e:	4640      	mov	r0, r8
  4012a0:	6819      	ldr	r1, [r3, #0]
  4012a2:	f7ff ff23 	bl	4010ec <_malloc_trim_r>
  4012a6:	e7b3      	b.n	401210 <_free_r+0x84>
  4012a8:	4610      	mov	r0, r2
  4012aa:	e7cd      	b.n	401248 <_free_r+0xbc>
  4012ac:	1811      	adds	r1, r2, r0
  4012ae:	6849      	ldr	r1, [r1, #4]
  4012b0:	07c9      	lsls	r1, r1, #31
  4012b2:	d444      	bmi.n	40133e <_free_r+0x1b2>
  4012b4:	6891      	ldr	r1, [r2, #8]
  4012b6:	68d2      	ldr	r2, [r2, #12]
  4012b8:	60ca      	str	r2, [r1, #12]
  4012ba:	4403      	add	r3, r0
  4012bc:	f043 0001 	orr.w	r0, r3, #1
  4012c0:	6091      	str	r1, [r2, #8]
  4012c2:	6060      	str	r0, [r4, #4]
  4012c4:	50e3      	str	r3, [r4, r3]
  4012c6:	e7a3      	b.n	401210 <_free_r+0x84>
  4012c8:	2a14      	cmp	r2, #20
  4012ca:	d816      	bhi.n	4012fa <_free_r+0x16e>
  4012cc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4012d0:	00ff      	lsls	r7, r7, #3
  4012d2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4012d6:	e7aa      	b.n	40122e <_free_r+0xa2>
  4012d8:	10aa      	asrs	r2, r5, #2
  4012da:	2301      	movs	r3, #1
  4012dc:	684d      	ldr	r5, [r1, #4]
  4012de:	4093      	lsls	r3, r2
  4012e0:	432b      	orrs	r3, r5
  4012e2:	604b      	str	r3, [r1, #4]
  4012e4:	4603      	mov	r3, r0
  4012e6:	e7b0      	b.n	40124a <_free_r+0xbe>
  4012e8:	f043 0201 	orr.w	r2, r3, #1
  4012ec:	614c      	str	r4, [r1, #20]
  4012ee:	610c      	str	r4, [r1, #16]
  4012f0:	60e5      	str	r5, [r4, #12]
  4012f2:	60a5      	str	r5, [r4, #8]
  4012f4:	6062      	str	r2, [r4, #4]
  4012f6:	50e3      	str	r3, [r4, r3]
  4012f8:	e78a      	b.n	401210 <_free_r+0x84>
  4012fa:	2a54      	cmp	r2, #84	; 0x54
  4012fc:	d806      	bhi.n	40130c <_free_r+0x180>
  4012fe:	0b1a      	lsrs	r2, r3, #12
  401300:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401304:	00ff      	lsls	r7, r7, #3
  401306:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40130a:	e790      	b.n	40122e <_free_r+0xa2>
  40130c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401310:	d806      	bhi.n	401320 <_free_r+0x194>
  401312:	0bda      	lsrs	r2, r3, #15
  401314:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401318:	00ff      	lsls	r7, r7, #3
  40131a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40131e:	e786      	b.n	40122e <_free_r+0xa2>
  401320:	f240 5054 	movw	r0, #1364	; 0x554
  401324:	4282      	cmp	r2, r0
  401326:	d806      	bhi.n	401336 <_free_r+0x1aa>
  401328:	0c9a      	lsrs	r2, r3, #18
  40132a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40132e:	00ff      	lsls	r7, r7, #3
  401330:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401334:	e77b      	b.n	40122e <_free_r+0xa2>
  401336:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40133a:	257e      	movs	r5, #126	; 0x7e
  40133c:	e777      	b.n	40122e <_free_r+0xa2>
  40133e:	f043 0101 	orr.w	r1, r3, #1
  401342:	6061      	str	r1, [r4, #4]
  401344:	6013      	str	r3, [r2, #0]
  401346:	e763      	b.n	401210 <_free_r+0x84>
  401348:	2000043c 	.word	0x2000043c
  40134c:	20000444 	.word	0x20000444
  401350:	20000848 	.word	0x20000848
  401354:	20000aa0 	.word	0x20000aa0

00401358 <_fwalk_reent>:
  401358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40135c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401360:	d01f      	beq.n	4013a2 <_fwalk_reent+0x4a>
  401362:	4688      	mov	r8, r1
  401364:	4606      	mov	r6, r0
  401366:	f04f 0900 	mov.w	r9, #0
  40136a:	687d      	ldr	r5, [r7, #4]
  40136c:	68bc      	ldr	r4, [r7, #8]
  40136e:	3d01      	subs	r5, #1
  401370:	d411      	bmi.n	401396 <_fwalk_reent+0x3e>
  401372:	89a3      	ldrh	r3, [r4, #12]
  401374:	2b01      	cmp	r3, #1
  401376:	f105 35ff 	add.w	r5, r5, #4294967295
  40137a:	d908      	bls.n	40138e <_fwalk_reent+0x36>
  40137c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401380:	3301      	adds	r3, #1
  401382:	4621      	mov	r1, r4
  401384:	4630      	mov	r0, r6
  401386:	d002      	beq.n	40138e <_fwalk_reent+0x36>
  401388:	47c0      	blx	r8
  40138a:	ea49 0900 	orr.w	r9, r9, r0
  40138e:	1c6b      	adds	r3, r5, #1
  401390:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401394:	d1ed      	bne.n	401372 <_fwalk_reent+0x1a>
  401396:	683f      	ldr	r7, [r7, #0]
  401398:	2f00      	cmp	r7, #0
  40139a:	d1e6      	bne.n	40136a <_fwalk_reent+0x12>
  40139c:	4648      	mov	r0, r9
  40139e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013a2:	46b9      	mov	r9, r7
  4013a4:	4648      	mov	r0, r9
  4013a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4013aa:	bf00      	nop

004013ac <__retarget_lock_init_recursive>:
  4013ac:	4770      	bx	lr
  4013ae:	bf00      	nop

004013b0 <__retarget_lock_close_recursive>:
  4013b0:	4770      	bx	lr
  4013b2:	bf00      	nop

004013b4 <__retarget_lock_acquire_recursive>:
  4013b4:	4770      	bx	lr
  4013b6:	bf00      	nop

004013b8 <__retarget_lock_release_recursive>:
  4013b8:	4770      	bx	lr
  4013ba:	bf00      	nop

004013bc <__swhatbuf_r>:
  4013bc:	b570      	push	{r4, r5, r6, lr}
  4013be:	460c      	mov	r4, r1
  4013c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4013c4:	2900      	cmp	r1, #0
  4013c6:	b090      	sub	sp, #64	; 0x40
  4013c8:	4615      	mov	r5, r2
  4013ca:	461e      	mov	r6, r3
  4013cc:	db14      	blt.n	4013f8 <__swhatbuf_r+0x3c>
  4013ce:	aa01      	add	r2, sp, #4
  4013d0:	f000 fc28 	bl	401c24 <_fstat_r>
  4013d4:	2800      	cmp	r0, #0
  4013d6:	db0f      	blt.n	4013f8 <__swhatbuf_r+0x3c>
  4013d8:	9a02      	ldr	r2, [sp, #8]
  4013da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4013de:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4013e2:	fab2 f282 	clz	r2, r2
  4013e6:	0952      	lsrs	r2, r2, #5
  4013e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4013ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4013f0:	6032      	str	r2, [r6, #0]
  4013f2:	602b      	str	r3, [r5, #0]
  4013f4:	b010      	add	sp, #64	; 0x40
  4013f6:	bd70      	pop	{r4, r5, r6, pc}
  4013f8:	89a2      	ldrh	r2, [r4, #12]
  4013fa:	2300      	movs	r3, #0
  4013fc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401400:	6033      	str	r3, [r6, #0]
  401402:	d004      	beq.n	40140e <__swhatbuf_r+0x52>
  401404:	2240      	movs	r2, #64	; 0x40
  401406:	4618      	mov	r0, r3
  401408:	602a      	str	r2, [r5, #0]
  40140a:	b010      	add	sp, #64	; 0x40
  40140c:	bd70      	pop	{r4, r5, r6, pc}
  40140e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401412:	602b      	str	r3, [r5, #0]
  401414:	b010      	add	sp, #64	; 0x40
  401416:	bd70      	pop	{r4, r5, r6, pc}

00401418 <malloc>:
  401418:	4b02      	ldr	r3, [pc, #8]	; (401424 <malloc+0xc>)
  40141a:	4601      	mov	r1, r0
  40141c:	6818      	ldr	r0, [r3, #0]
  40141e:	f000 b803 	b.w	401428 <_malloc_r>
  401422:	bf00      	nop
  401424:	20000008 	.word	0x20000008

00401428 <_malloc_r>:
  401428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40142c:	f101 060b 	add.w	r6, r1, #11
  401430:	2e16      	cmp	r6, #22
  401432:	b083      	sub	sp, #12
  401434:	4605      	mov	r5, r0
  401436:	f240 809e 	bls.w	401576 <_malloc_r+0x14e>
  40143a:	f036 0607 	bics.w	r6, r6, #7
  40143e:	f100 80bd 	bmi.w	4015bc <_malloc_r+0x194>
  401442:	42b1      	cmp	r1, r6
  401444:	f200 80ba 	bhi.w	4015bc <_malloc_r+0x194>
  401448:	f000 fa9e 	bl	401988 <__malloc_lock>
  40144c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401450:	f0c0 8293 	bcc.w	40197a <_malloc_r+0x552>
  401454:	0a73      	lsrs	r3, r6, #9
  401456:	f000 80b8 	beq.w	4015ca <_malloc_r+0x1a2>
  40145a:	2b04      	cmp	r3, #4
  40145c:	f200 8179 	bhi.w	401752 <_malloc_r+0x32a>
  401460:	09b3      	lsrs	r3, r6, #6
  401462:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401466:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40146a:	00c3      	lsls	r3, r0, #3
  40146c:	4fbf      	ldr	r7, [pc, #764]	; (40176c <_malloc_r+0x344>)
  40146e:	443b      	add	r3, r7
  401470:	f1a3 0108 	sub.w	r1, r3, #8
  401474:	685c      	ldr	r4, [r3, #4]
  401476:	42a1      	cmp	r1, r4
  401478:	d106      	bne.n	401488 <_malloc_r+0x60>
  40147a:	e00c      	b.n	401496 <_malloc_r+0x6e>
  40147c:	2a00      	cmp	r2, #0
  40147e:	f280 80aa 	bge.w	4015d6 <_malloc_r+0x1ae>
  401482:	68e4      	ldr	r4, [r4, #12]
  401484:	42a1      	cmp	r1, r4
  401486:	d006      	beq.n	401496 <_malloc_r+0x6e>
  401488:	6863      	ldr	r3, [r4, #4]
  40148a:	f023 0303 	bic.w	r3, r3, #3
  40148e:	1b9a      	subs	r2, r3, r6
  401490:	2a0f      	cmp	r2, #15
  401492:	ddf3      	ble.n	40147c <_malloc_r+0x54>
  401494:	4670      	mov	r0, lr
  401496:	693c      	ldr	r4, [r7, #16]
  401498:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401780 <_malloc_r+0x358>
  40149c:	4574      	cmp	r4, lr
  40149e:	f000 81ab 	beq.w	4017f8 <_malloc_r+0x3d0>
  4014a2:	6863      	ldr	r3, [r4, #4]
  4014a4:	f023 0303 	bic.w	r3, r3, #3
  4014a8:	1b9a      	subs	r2, r3, r6
  4014aa:	2a0f      	cmp	r2, #15
  4014ac:	f300 8190 	bgt.w	4017d0 <_malloc_r+0x3a8>
  4014b0:	2a00      	cmp	r2, #0
  4014b2:	f8c7 e014 	str.w	lr, [r7, #20]
  4014b6:	f8c7 e010 	str.w	lr, [r7, #16]
  4014ba:	f280 809d 	bge.w	4015f8 <_malloc_r+0x1d0>
  4014be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4014c2:	f080 8161 	bcs.w	401788 <_malloc_r+0x360>
  4014c6:	08db      	lsrs	r3, r3, #3
  4014c8:	f103 0c01 	add.w	ip, r3, #1
  4014cc:	1099      	asrs	r1, r3, #2
  4014ce:	687a      	ldr	r2, [r7, #4]
  4014d0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4014d4:	f8c4 8008 	str.w	r8, [r4, #8]
  4014d8:	2301      	movs	r3, #1
  4014da:	408b      	lsls	r3, r1
  4014dc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4014e0:	4313      	orrs	r3, r2
  4014e2:	3908      	subs	r1, #8
  4014e4:	60e1      	str	r1, [r4, #12]
  4014e6:	607b      	str	r3, [r7, #4]
  4014e8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4014ec:	f8c8 400c 	str.w	r4, [r8, #12]
  4014f0:	1082      	asrs	r2, r0, #2
  4014f2:	2401      	movs	r4, #1
  4014f4:	4094      	lsls	r4, r2
  4014f6:	429c      	cmp	r4, r3
  4014f8:	f200 808b 	bhi.w	401612 <_malloc_r+0x1ea>
  4014fc:	421c      	tst	r4, r3
  4014fe:	d106      	bne.n	40150e <_malloc_r+0xe6>
  401500:	f020 0003 	bic.w	r0, r0, #3
  401504:	0064      	lsls	r4, r4, #1
  401506:	421c      	tst	r4, r3
  401508:	f100 0004 	add.w	r0, r0, #4
  40150c:	d0fa      	beq.n	401504 <_malloc_r+0xdc>
  40150e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401512:	46cc      	mov	ip, r9
  401514:	4680      	mov	r8, r0
  401516:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40151a:	459c      	cmp	ip, r3
  40151c:	d107      	bne.n	40152e <_malloc_r+0x106>
  40151e:	e16d      	b.n	4017fc <_malloc_r+0x3d4>
  401520:	2a00      	cmp	r2, #0
  401522:	f280 817b 	bge.w	40181c <_malloc_r+0x3f4>
  401526:	68db      	ldr	r3, [r3, #12]
  401528:	459c      	cmp	ip, r3
  40152a:	f000 8167 	beq.w	4017fc <_malloc_r+0x3d4>
  40152e:	6859      	ldr	r1, [r3, #4]
  401530:	f021 0103 	bic.w	r1, r1, #3
  401534:	1b8a      	subs	r2, r1, r6
  401536:	2a0f      	cmp	r2, #15
  401538:	ddf2      	ble.n	401520 <_malloc_r+0xf8>
  40153a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40153e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401542:	9300      	str	r3, [sp, #0]
  401544:	199c      	adds	r4, r3, r6
  401546:	4628      	mov	r0, r5
  401548:	f046 0601 	orr.w	r6, r6, #1
  40154c:	f042 0501 	orr.w	r5, r2, #1
  401550:	605e      	str	r6, [r3, #4]
  401552:	f8c8 c00c 	str.w	ip, [r8, #12]
  401556:	f8cc 8008 	str.w	r8, [ip, #8]
  40155a:	617c      	str	r4, [r7, #20]
  40155c:	613c      	str	r4, [r7, #16]
  40155e:	f8c4 e00c 	str.w	lr, [r4, #12]
  401562:	f8c4 e008 	str.w	lr, [r4, #8]
  401566:	6065      	str	r5, [r4, #4]
  401568:	505a      	str	r2, [r3, r1]
  40156a:	f000 fa13 	bl	401994 <__malloc_unlock>
  40156e:	9b00      	ldr	r3, [sp, #0]
  401570:	f103 0408 	add.w	r4, r3, #8
  401574:	e01e      	b.n	4015b4 <_malloc_r+0x18c>
  401576:	2910      	cmp	r1, #16
  401578:	d820      	bhi.n	4015bc <_malloc_r+0x194>
  40157a:	f000 fa05 	bl	401988 <__malloc_lock>
  40157e:	2610      	movs	r6, #16
  401580:	2318      	movs	r3, #24
  401582:	2002      	movs	r0, #2
  401584:	4f79      	ldr	r7, [pc, #484]	; (40176c <_malloc_r+0x344>)
  401586:	443b      	add	r3, r7
  401588:	f1a3 0208 	sub.w	r2, r3, #8
  40158c:	685c      	ldr	r4, [r3, #4]
  40158e:	4294      	cmp	r4, r2
  401590:	f000 813d 	beq.w	40180e <_malloc_r+0x3e6>
  401594:	6863      	ldr	r3, [r4, #4]
  401596:	68e1      	ldr	r1, [r4, #12]
  401598:	68a6      	ldr	r6, [r4, #8]
  40159a:	f023 0303 	bic.w	r3, r3, #3
  40159e:	4423      	add	r3, r4
  4015a0:	4628      	mov	r0, r5
  4015a2:	685a      	ldr	r2, [r3, #4]
  4015a4:	60f1      	str	r1, [r6, #12]
  4015a6:	f042 0201 	orr.w	r2, r2, #1
  4015aa:	608e      	str	r6, [r1, #8]
  4015ac:	605a      	str	r2, [r3, #4]
  4015ae:	f000 f9f1 	bl	401994 <__malloc_unlock>
  4015b2:	3408      	adds	r4, #8
  4015b4:	4620      	mov	r0, r4
  4015b6:	b003      	add	sp, #12
  4015b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015bc:	2400      	movs	r4, #0
  4015be:	230c      	movs	r3, #12
  4015c0:	4620      	mov	r0, r4
  4015c2:	602b      	str	r3, [r5, #0]
  4015c4:	b003      	add	sp, #12
  4015c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015ca:	2040      	movs	r0, #64	; 0x40
  4015cc:	f44f 7300 	mov.w	r3, #512	; 0x200
  4015d0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4015d4:	e74a      	b.n	40146c <_malloc_r+0x44>
  4015d6:	4423      	add	r3, r4
  4015d8:	68e1      	ldr	r1, [r4, #12]
  4015da:	685a      	ldr	r2, [r3, #4]
  4015dc:	68a6      	ldr	r6, [r4, #8]
  4015de:	f042 0201 	orr.w	r2, r2, #1
  4015e2:	60f1      	str	r1, [r6, #12]
  4015e4:	4628      	mov	r0, r5
  4015e6:	608e      	str	r6, [r1, #8]
  4015e8:	605a      	str	r2, [r3, #4]
  4015ea:	f000 f9d3 	bl	401994 <__malloc_unlock>
  4015ee:	3408      	adds	r4, #8
  4015f0:	4620      	mov	r0, r4
  4015f2:	b003      	add	sp, #12
  4015f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4015f8:	4423      	add	r3, r4
  4015fa:	4628      	mov	r0, r5
  4015fc:	685a      	ldr	r2, [r3, #4]
  4015fe:	f042 0201 	orr.w	r2, r2, #1
  401602:	605a      	str	r2, [r3, #4]
  401604:	f000 f9c6 	bl	401994 <__malloc_unlock>
  401608:	3408      	adds	r4, #8
  40160a:	4620      	mov	r0, r4
  40160c:	b003      	add	sp, #12
  40160e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401612:	68bc      	ldr	r4, [r7, #8]
  401614:	6863      	ldr	r3, [r4, #4]
  401616:	f023 0803 	bic.w	r8, r3, #3
  40161a:	45b0      	cmp	r8, r6
  40161c:	d304      	bcc.n	401628 <_malloc_r+0x200>
  40161e:	eba8 0306 	sub.w	r3, r8, r6
  401622:	2b0f      	cmp	r3, #15
  401624:	f300 8085 	bgt.w	401732 <_malloc_r+0x30a>
  401628:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401784 <_malloc_r+0x35c>
  40162c:	4b50      	ldr	r3, [pc, #320]	; (401770 <_malloc_r+0x348>)
  40162e:	f8d9 2000 	ldr.w	r2, [r9]
  401632:	681b      	ldr	r3, [r3, #0]
  401634:	3201      	adds	r2, #1
  401636:	4433      	add	r3, r6
  401638:	eb04 0a08 	add.w	sl, r4, r8
  40163c:	f000 8155 	beq.w	4018ea <_malloc_r+0x4c2>
  401640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401644:	330f      	adds	r3, #15
  401646:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40164a:	f02b 0b0f 	bic.w	fp, fp, #15
  40164e:	4659      	mov	r1, fp
  401650:	4628      	mov	r0, r5
  401652:	f000 f9a5 	bl	4019a0 <_sbrk_r>
  401656:	1c41      	adds	r1, r0, #1
  401658:	4602      	mov	r2, r0
  40165a:	f000 80fc 	beq.w	401856 <_malloc_r+0x42e>
  40165e:	4582      	cmp	sl, r0
  401660:	f200 80f7 	bhi.w	401852 <_malloc_r+0x42a>
  401664:	4b43      	ldr	r3, [pc, #268]	; (401774 <_malloc_r+0x34c>)
  401666:	6819      	ldr	r1, [r3, #0]
  401668:	4459      	add	r1, fp
  40166a:	6019      	str	r1, [r3, #0]
  40166c:	f000 814d 	beq.w	40190a <_malloc_r+0x4e2>
  401670:	f8d9 0000 	ldr.w	r0, [r9]
  401674:	3001      	adds	r0, #1
  401676:	bf1b      	ittet	ne
  401678:	eba2 0a0a 	subne.w	sl, r2, sl
  40167c:	4451      	addne	r1, sl
  40167e:	f8c9 2000 	streq.w	r2, [r9]
  401682:	6019      	strne	r1, [r3, #0]
  401684:	f012 0107 	ands.w	r1, r2, #7
  401688:	f000 8115 	beq.w	4018b6 <_malloc_r+0x48e>
  40168c:	f1c1 0008 	rsb	r0, r1, #8
  401690:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401694:	4402      	add	r2, r0
  401696:	3108      	adds	r1, #8
  401698:	eb02 090b 	add.w	r9, r2, fp
  40169c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4016a0:	eba1 0909 	sub.w	r9, r1, r9
  4016a4:	4649      	mov	r1, r9
  4016a6:	4628      	mov	r0, r5
  4016a8:	9301      	str	r3, [sp, #4]
  4016aa:	9200      	str	r2, [sp, #0]
  4016ac:	f000 f978 	bl	4019a0 <_sbrk_r>
  4016b0:	1c43      	adds	r3, r0, #1
  4016b2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4016b6:	f000 8143 	beq.w	401940 <_malloc_r+0x518>
  4016ba:	1a80      	subs	r0, r0, r2
  4016bc:	4448      	add	r0, r9
  4016be:	f040 0001 	orr.w	r0, r0, #1
  4016c2:	6819      	ldr	r1, [r3, #0]
  4016c4:	60ba      	str	r2, [r7, #8]
  4016c6:	4449      	add	r1, r9
  4016c8:	42bc      	cmp	r4, r7
  4016ca:	6050      	str	r0, [r2, #4]
  4016cc:	6019      	str	r1, [r3, #0]
  4016ce:	d017      	beq.n	401700 <_malloc_r+0x2d8>
  4016d0:	f1b8 0f0f 	cmp.w	r8, #15
  4016d4:	f240 80fb 	bls.w	4018ce <_malloc_r+0x4a6>
  4016d8:	6860      	ldr	r0, [r4, #4]
  4016da:	f1a8 020c 	sub.w	r2, r8, #12
  4016de:	f022 0207 	bic.w	r2, r2, #7
  4016e2:	eb04 0e02 	add.w	lr, r4, r2
  4016e6:	f000 0001 	and.w	r0, r0, #1
  4016ea:	f04f 0c05 	mov.w	ip, #5
  4016ee:	4310      	orrs	r0, r2
  4016f0:	2a0f      	cmp	r2, #15
  4016f2:	6060      	str	r0, [r4, #4]
  4016f4:	f8ce c004 	str.w	ip, [lr, #4]
  4016f8:	f8ce c008 	str.w	ip, [lr, #8]
  4016fc:	f200 8117 	bhi.w	40192e <_malloc_r+0x506>
  401700:	4b1d      	ldr	r3, [pc, #116]	; (401778 <_malloc_r+0x350>)
  401702:	68bc      	ldr	r4, [r7, #8]
  401704:	681a      	ldr	r2, [r3, #0]
  401706:	4291      	cmp	r1, r2
  401708:	bf88      	it	hi
  40170a:	6019      	strhi	r1, [r3, #0]
  40170c:	4b1b      	ldr	r3, [pc, #108]	; (40177c <_malloc_r+0x354>)
  40170e:	681a      	ldr	r2, [r3, #0]
  401710:	4291      	cmp	r1, r2
  401712:	6862      	ldr	r2, [r4, #4]
  401714:	bf88      	it	hi
  401716:	6019      	strhi	r1, [r3, #0]
  401718:	f022 0203 	bic.w	r2, r2, #3
  40171c:	4296      	cmp	r6, r2
  40171e:	eba2 0306 	sub.w	r3, r2, r6
  401722:	d801      	bhi.n	401728 <_malloc_r+0x300>
  401724:	2b0f      	cmp	r3, #15
  401726:	dc04      	bgt.n	401732 <_malloc_r+0x30a>
  401728:	4628      	mov	r0, r5
  40172a:	f000 f933 	bl	401994 <__malloc_unlock>
  40172e:	2400      	movs	r4, #0
  401730:	e740      	b.n	4015b4 <_malloc_r+0x18c>
  401732:	19a2      	adds	r2, r4, r6
  401734:	f043 0301 	orr.w	r3, r3, #1
  401738:	f046 0601 	orr.w	r6, r6, #1
  40173c:	6066      	str	r6, [r4, #4]
  40173e:	4628      	mov	r0, r5
  401740:	60ba      	str	r2, [r7, #8]
  401742:	6053      	str	r3, [r2, #4]
  401744:	f000 f926 	bl	401994 <__malloc_unlock>
  401748:	3408      	adds	r4, #8
  40174a:	4620      	mov	r0, r4
  40174c:	b003      	add	sp, #12
  40174e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401752:	2b14      	cmp	r3, #20
  401754:	d971      	bls.n	40183a <_malloc_r+0x412>
  401756:	2b54      	cmp	r3, #84	; 0x54
  401758:	f200 80a3 	bhi.w	4018a2 <_malloc_r+0x47a>
  40175c:	0b33      	lsrs	r3, r6, #12
  40175e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401762:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401766:	00c3      	lsls	r3, r0, #3
  401768:	e680      	b.n	40146c <_malloc_r+0x44>
  40176a:	bf00      	nop
  40176c:	2000043c 	.word	0x2000043c
  401770:	20000aa0 	.word	0x20000aa0
  401774:	20000a70 	.word	0x20000a70
  401778:	20000a98 	.word	0x20000a98
  40177c:	20000a9c 	.word	0x20000a9c
  401780:	20000444 	.word	0x20000444
  401784:	20000844 	.word	0x20000844
  401788:	0a5a      	lsrs	r2, r3, #9
  40178a:	2a04      	cmp	r2, #4
  40178c:	d95b      	bls.n	401846 <_malloc_r+0x41e>
  40178e:	2a14      	cmp	r2, #20
  401790:	f200 80ae 	bhi.w	4018f0 <_malloc_r+0x4c8>
  401794:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401798:	00c9      	lsls	r1, r1, #3
  40179a:	325b      	adds	r2, #91	; 0x5b
  40179c:	eb07 0c01 	add.w	ip, r7, r1
  4017a0:	5879      	ldr	r1, [r7, r1]
  4017a2:	f1ac 0c08 	sub.w	ip, ip, #8
  4017a6:	458c      	cmp	ip, r1
  4017a8:	f000 8088 	beq.w	4018bc <_malloc_r+0x494>
  4017ac:	684a      	ldr	r2, [r1, #4]
  4017ae:	f022 0203 	bic.w	r2, r2, #3
  4017b2:	4293      	cmp	r3, r2
  4017b4:	d273      	bcs.n	40189e <_malloc_r+0x476>
  4017b6:	6889      	ldr	r1, [r1, #8]
  4017b8:	458c      	cmp	ip, r1
  4017ba:	d1f7      	bne.n	4017ac <_malloc_r+0x384>
  4017bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4017c0:	687b      	ldr	r3, [r7, #4]
  4017c2:	60e2      	str	r2, [r4, #12]
  4017c4:	f8c4 c008 	str.w	ip, [r4, #8]
  4017c8:	6094      	str	r4, [r2, #8]
  4017ca:	f8cc 400c 	str.w	r4, [ip, #12]
  4017ce:	e68f      	b.n	4014f0 <_malloc_r+0xc8>
  4017d0:	19a1      	adds	r1, r4, r6
  4017d2:	f046 0c01 	orr.w	ip, r6, #1
  4017d6:	f042 0601 	orr.w	r6, r2, #1
  4017da:	f8c4 c004 	str.w	ip, [r4, #4]
  4017de:	4628      	mov	r0, r5
  4017e0:	6179      	str	r1, [r7, #20]
  4017e2:	6139      	str	r1, [r7, #16]
  4017e4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4017e8:	f8c1 e008 	str.w	lr, [r1, #8]
  4017ec:	604e      	str	r6, [r1, #4]
  4017ee:	50e2      	str	r2, [r4, r3]
  4017f0:	f000 f8d0 	bl	401994 <__malloc_unlock>
  4017f4:	3408      	adds	r4, #8
  4017f6:	e6dd      	b.n	4015b4 <_malloc_r+0x18c>
  4017f8:	687b      	ldr	r3, [r7, #4]
  4017fa:	e679      	b.n	4014f0 <_malloc_r+0xc8>
  4017fc:	f108 0801 	add.w	r8, r8, #1
  401800:	f018 0f03 	tst.w	r8, #3
  401804:	f10c 0c08 	add.w	ip, ip, #8
  401808:	f47f ae85 	bne.w	401516 <_malloc_r+0xee>
  40180c:	e02d      	b.n	40186a <_malloc_r+0x442>
  40180e:	68dc      	ldr	r4, [r3, #12]
  401810:	42a3      	cmp	r3, r4
  401812:	bf08      	it	eq
  401814:	3002      	addeq	r0, #2
  401816:	f43f ae3e 	beq.w	401496 <_malloc_r+0x6e>
  40181a:	e6bb      	b.n	401594 <_malloc_r+0x16c>
  40181c:	4419      	add	r1, r3
  40181e:	461c      	mov	r4, r3
  401820:	684a      	ldr	r2, [r1, #4]
  401822:	68db      	ldr	r3, [r3, #12]
  401824:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401828:	f042 0201 	orr.w	r2, r2, #1
  40182c:	604a      	str	r2, [r1, #4]
  40182e:	4628      	mov	r0, r5
  401830:	60f3      	str	r3, [r6, #12]
  401832:	609e      	str	r6, [r3, #8]
  401834:	f000 f8ae 	bl	401994 <__malloc_unlock>
  401838:	e6bc      	b.n	4015b4 <_malloc_r+0x18c>
  40183a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40183e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  401842:	00c3      	lsls	r3, r0, #3
  401844:	e612      	b.n	40146c <_malloc_r+0x44>
  401846:	099a      	lsrs	r2, r3, #6
  401848:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40184c:	00c9      	lsls	r1, r1, #3
  40184e:	3238      	adds	r2, #56	; 0x38
  401850:	e7a4      	b.n	40179c <_malloc_r+0x374>
  401852:	42bc      	cmp	r4, r7
  401854:	d054      	beq.n	401900 <_malloc_r+0x4d8>
  401856:	68bc      	ldr	r4, [r7, #8]
  401858:	6862      	ldr	r2, [r4, #4]
  40185a:	f022 0203 	bic.w	r2, r2, #3
  40185e:	e75d      	b.n	40171c <_malloc_r+0x2f4>
  401860:	f859 3908 	ldr.w	r3, [r9], #-8
  401864:	4599      	cmp	r9, r3
  401866:	f040 8086 	bne.w	401976 <_malloc_r+0x54e>
  40186a:	f010 0f03 	tst.w	r0, #3
  40186e:	f100 30ff 	add.w	r0, r0, #4294967295
  401872:	d1f5      	bne.n	401860 <_malloc_r+0x438>
  401874:	687b      	ldr	r3, [r7, #4]
  401876:	ea23 0304 	bic.w	r3, r3, r4
  40187a:	607b      	str	r3, [r7, #4]
  40187c:	0064      	lsls	r4, r4, #1
  40187e:	429c      	cmp	r4, r3
  401880:	f63f aec7 	bhi.w	401612 <_malloc_r+0x1ea>
  401884:	2c00      	cmp	r4, #0
  401886:	f43f aec4 	beq.w	401612 <_malloc_r+0x1ea>
  40188a:	421c      	tst	r4, r3
  40188c:	4640      	mov	r0, r8
  40188e:	f47f ae3e 	bne.w	40150e <_malloc_r+0xe6>
  401892:	0064      	lsls	r4, r4, #1
  401894:	421c      	tst	r4, r3
  401896:	f100 0004 	add.w	r0, r0, #4
  40189a:	d0fa      	beq.n	401892 <_malloc_r+0x46a>
  40189c:	e637      	b.n	40150e <_malloc_r+0xe6>
  40189e:	468c      	mov	ip, r1
  4018a0:	e78c      	b.n	4017bc <_malloc_r+0x394>
  4018a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4018a6:	d815      	bhi.n	4018d4 <_malloc_r+0x4ac>
  4018a8:	0bf3      	lsrs	r3, r6, #15
  4018aa:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4018ae:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4018b2:	00c3      	lsls	r3, r0, #3
  4018b4:	e5da      	b.n	40146c <_malloc_r+0x44>
  4018b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4018ba:	e6ed      	b.n	401698 <_malloc_r+0x270>
  4018bc:	687b      	ldr	r3, [r7, #4]
  4018be:	1092      	asrs	r2, r2, #2
  4018c0:	2101      	movs	r1, #1
  4018c2:	fa01 f202 	lsl.w	r2, r1, r2
  4018c6:	4313      	orrs	r3, r2
  4018c8:	607b      	str	r3, [r7, #4]
  4018ca:	4662      	mov	r2, ip
  4018cc:	e779      	b.n	4017c2 <_malloc_r+0x39a>
  4018ce:	2301      	movs	r3, #1
  4018d0:	6053      	str	r3, [r2, #4]
  4018d2:	e729      	b.n	401728 <_malloc_r+0x300>
  4018d4:	f240 5254 	movw	r2, #1364	; 0x554
  4018d8:	4293      	cmp	r3, r2
  4018da:	d822      	bhi.n	401922 <_malloc_r+0x4fa>
  4018dc:	0cb3      	lsrs	r3, r6, #18
  4018de:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4018e2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4018e6:	00c3      	lsls	r3, r0, #3
  4018e8:	e5c0      	b.n	40146c <_malloc_r+0x44>
  4018ea:	f103 0b10 	add.w	fp, r3, #16
  4018ee:	e6ae      	b.n	40164e <_malloc_r+0x226>
  4018f0:	2a54      	cmp	r2, #84	; 0x54
  4018f2:	d829      	bhi.n	401948 <_malloc_r+0x520>
  4018f4:	0b1a      	lsrs	r2, r3, #12
  4018f6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4018fa:	00c9      	lsls	r1, r1, #3
  4018fc:	326e      	adds	r2, #110	; 0x6e
  4018fe:	e74d      	b.n	40179c <_malloc_r+0x374>
  401900:	4b20      	ldr	r3, [pc, #128]	; (401984 <_malloc_r+0x55c>)
  401902:	6819      	ldr	r1, [r3, #0]
  401904:	4459      	add	r1, fp
  401906:	6019      	str	r1, [r3, #0]
  401908:	e6b2      	b.n	401670 <_malloc_r+0x248>
  40190a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40190e:	2800      	cmp	r0, #0
  401910:	f47f aeae 	bne.w	401670 <_malloc_r+0x248>
  401914:	eb08 030b 	add.w	r3, r8, fp
  401918:	68ba      	ldr	r2, [r7, #8]
  40191a:	f043 0301 	orr.w	r3, r3, #1
  40191e:	6053      	str	r3, [r2, #4]
  401920:	e6ee      	b.n	401700 <_malloc_r+0x2d8>
  401922:	207f      	movs	r0, #127	; 0x7f
  401924:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  401928:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40192c:	e59e      	b.n	40146c <_malloc_r+0x44>
  40192e:	f104 0108 	add.w	r1, r4, #8
  401932:	4628      	mov	r0, r5
  401934:	9300      	str	r3, [sp, #0]
  401936:	f7ff fc29 	bl	40118c <_free_r>
  40193a:	9b00      	ldr	r3, [sp, #0]
  40193c:	6819      	ldr	r1, [r3, #0]
  40193e:	e6df      	b.n	401700 <_malloc_r+0x2d8>
  401940:	2001      	movs	r0, #1
  401942:	f04f 0900 	mov.w	r9, #0
  401946:	e6bc      	b.n	4016c2 <_malloc_r+0x29a>
  401948:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40194c:	d805      	bhi.n	40195a <_malloc_r+0x532>
  40194e:	0bda      	lsrs	r2, r3, #15
  401950:	f102 0178 	add.w	r1, r2, #120	; 0x78
  401954:	00c9      	lsls	r1, r1, #3
  401956:	3277      	adds	r2, #119	; 0x77
  401958:	e720      	b.n	40179c <_malloc_r+0x374>
  40195a:	f240 5154 	movw	r1, #1364	; 0x554
  40195e:	428a      	cmp	r2, r1
  401960:	d805      	bhi.n	40196e <_malloc_r+0x546>
  401962:	0c9a      	lsrs	r2, r3, #18
  401964:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  401968:	00c9      	lsls	r1, r1, #3
  40196a:	327c      	adds	r2, #124	; 0x7c
  40196c:	e716      	b.n	40179c <_malloc_r+0x374>
  40196e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  401972:	227e      	movs	r2, #126	; 0x7e
  401974:	e712      	b.n	40179c <_malloc_r+0x374>
  401976:	687b      	ldr	r3, [r7, #4]
  401978:	e780      	b.n	40187c <_malloc_r+0x454>
  40197a:	08f0      	lsrs	r0, r6, #3
  40197c:	f106 0308 	add.w	r3, r6, #8
  401980:	e600      	b.n	401584 <_malloc_r+0x15c>
  401982:	bf00      	nop
  401984:	20000a70 	.word	0x20000a70

00401988 <__malloc_lock>:
  401988:	4801      	ldr	r0, [pc, #4]	; (401990 <__malloc_lock+0x8>)
  40198a:	f7ff bd13 	b.w	4013b4 <__retarget_lock_acquire_recursive>
  40198e:	bf00      	nop
  401990:	20000ac0 	.word	0x20000ac0

00401994 <__malloc_unlock>:
  401994:	4801      	ldr	r0, [pc, #4]	; (40199c <__malloc_unlock+0x8>)
  401996:	f7ff bd0f 	b.w	4013b8 <__retarget_lock_release_recursive>
  40199a:	bf00      	nop
  40199c:	20000ac0 	.word	0x20000ac0

004019a0 <_sbrk_r>:
  4019a0:	b538      	push	{r3, r4, r5, lr}
  4019a2:	4c07      	ldr	r4, [pc, #28]	; (4019c0 <_sbrk_r+0x20>)
  4019a4:	2300      	movs	r3, #0
  4019a6:	4605      	mov	r5, r0
  4019a8:	4608      	mov	r0, r1
  4019aa:	6023      	str	r3, [r4, #0]
  4019ac:	f7fe ff94 	bl	4008d8 <_sbrk>
  4019b0:	1c43      	adds	r3, r0, #1
  4019b2:	d000      	beq.n	4019b6 <_sbrk_r+0x16>
  4019b4:	bd38      	pop	{r3, r4, r5, pc}
  4019b6:	6823      	ldr	r3, [r4, #0]
  4019b8:	2b00      	cmp	r3, #0
  4019ba:	d0fb      	beq.n	4019b4 <_sbrk_r+0x14>
  4019bc:	602b      	str	r3, [r5, #0]
  4019be:	bd38      	pop	{r3, r4, r5, pc}
  4019c0:	20000ad4 	.word	0x20000ad4

004019c4 <__sread>:
  4019c4:	b510      	push	{r4, lr}
  4019c6:	460c      	mov	r4, r1
  4019c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4019cc:	f000 f954 	bl	401c78 <_read_r>
  4019d0:	2800      	cmp	r0, #0
  4019d2:	db03      	blt.n	4019dc <__sread+0x18>
  4019d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4019d6:	4403      	add	r3, r0
  4019d8:	6523      	str	r3, [r4, #80]	; 0x50
  4019da:	bd10      	pop	{r4, pc}
  4019dc:	89a3      	ldrh	r3, [r4, #12]
  4019de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4019e2:	81a3      	strh	r3, [r4, #12]
  4019e4:	bd10      	pop	{r4, pc}
  4019e6:	bf00      	nop

004019e8 <__swrite>:
  4019e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4019ec:	4616      	mov	r6, r2
  4019ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4019f2:	461f      	mov	r7, r3
  4019f4:	05d3      	lsls	r3, r2, #23
  4019f6:	460c      	mov	r4, r1
  4019f8:	4605      	mov	r5, r0
  4019fa:	d507      	bpl.n	401a0c <__swrite+0x24>
  4019fc:	2200      	movs	r2, #0
  4019fe:	2302      	movs	r3, #2
  401a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401a04:	f000 f922 	bl	401c4c <_lseek_r>
  401a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401a14:	81a2      	strh	r2, [r4, #12]
  401a16:	463b      	mov	r3, r7
  401a18:	4632      	mov	r2, r6
  401a1a:	4628      	mov	r0, r5
  401a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401a20:	f000 b814 	b.w	401a4c <_write_r>

00401a24 <__sseek>:
  401a24:	b510      	push	{r4, lr}
  401a26:	460c      	mov	r4, r1
  401a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401a2c:	f000 f90e 	bl	401c4c <_lseek_r>
  401a30:	89a3      	ldrh	r3, [r4, #12]
  401a32:	1c42      	adds	r2, r0, #1
  401a34:	bf0e      	itee	eq
  401a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  401a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  401a3e:	6520      	strne	r0, [r4, #80]	; 0x50
  401a40:	81a3      	strh	r3, [r4, #12]
  401a42:	bd10      	pop	{r4, pc}

00401a44 <__sclose>:
  401a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401a48:	f000 b878 	b.w	401b3c <_close_r>

00401a4c <_write_r>:
  401a4c:	b570      	push	{r4, r5, r6, lr}
  401a4e:	460d      	mov	r5, r1
  401a50:	4c08      	ldr	r4, [pc, #32]	; (401a74 <_write_r+0x28>)
  401a52:	4611      	mov	r1, r2
  401a54:	4606      	mov	r6, r0
  401a56:	461a      	mov	r2, r3
  401a58:	4628      	mov	r0, r5
  401a5a:	2300      	movs	r3, #0
  401a5c:	6023      	str	r3, [r4, #0]
  401a5e:	f7fe fbd1 	bl	400204 <_write>
  401a62:	1c43      	adds	r3, r0, #1
  401a64:	d000      	beq.n	401a68 <_write_r+0x1c>
  401a66:	bd70      	pop	{r4, r5, r6, pc}
  401a68:	6823      	ldr	r3, [r4, #0]
  401a6a:	2b00      	cmp	r3, #0
  401a6c:	d0fb      	beq.n	401a66 <_write_r+0x1a>
  401a6e:	6033      	str	r3, [r6, #0]
  401a70:	bd70      	pop	{r4, r5, r6, pc}
  401a72:	bf00      	nop
  401a74:	20000ad4 	.word	0x20000ad4

00401a78 <__register_exitproc>:
  401a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a7c:	4d2c      	ldr	r5, [pc, #176]	; (401b30 <__register_exitproc+0xb8>)
  401a7e:	4606      	mov	r6, r0
  401a80:	6828      	ldr	r0, [r5, #0]
  401a82:	4698      	mov	r8, r3
  401a84:	460f      	mov	r7, r1
  401a86:	4691      	mov	r9, r2
  401a88:	f7ff fc94 	bl	4013b4 <__retarget_lock_acquire_recursive>
  401a8c:	4b29      	ldr	r3, [pc, #164]	; (401b34 <__register_exitproc+0xbc>)
  401a8e:	681c      	ldr	r4, [r3, #0]
  401a90:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401a94:	2b00      	cmp	r3, #0
  401a96:	d03e      	beq.n	401b16 <__register_exitproc+0x9e>
  401a98:	685a      	ldr	r2, [r3, #4]
  401a9a:	2a1f      	cmp	r2, #31
  401a9c:	dc1c      	bgt.n	401ad8 <__register_exitproc+0x60>
  401a9e:	f102 0e01 	add.w	lr, r2, #1
  401aa2:	b176      	cbz	r6, 401ac2 <__register_exitproc+0x4a>
  401aa4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401aa8:	2401      	movs	r4, #1
  401aaa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401aae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401ab2:	4094      	lsls	r4, r2
  401ab4:	4320      	orrs	r0, r4
  401ab6:	2e02      	cmp	r6, #2
  401ab8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401abc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401ac0:	d023      	beq.n	401b0a <__register_exitproc+0x92>
  401ac2:	3202      	adds	r2, #2
  401ac4:	f8c3 e004 	str.w	lr, [r3, #4]
  401ac8:	6828      	ldr	r0, [r5, #0]
  401aca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401ace:	f7ff fc73 	bl	4013b8 <__retarget_lock_release_recursive>
  401ad2:	2000      	movs	r0, #0
  401ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ad8:	4b17      	ldr	r3, [pc, #92]	; (401b38 <__register_exitproc+0xc0>)
  401ada:	b30b      	cbz	r3, 401b20 <__register_exitproc+0xa8>
  401adc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401ae0:	f7ff fc9a 	bl	401418 <malloc>
  401ae4:	4603      	mov	r3, r0
  401ae6:	b1d8      	cbz	r0, 401b20 <__register_exitproc+0xa8>
  401ae8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401aec:	6002      	str	r2, [r0, #0]
  401aee:	2100      	movs	r1, #0
  401af0:	6041      	str	r1, [r0, #4]
  401af2:	460a      	mov	r2, r1
  401af4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401af8:	f04f 0e01 	mov.w	lr, #1
  401afc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401b00:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401b04:	2e00      	cmp	r6, #0
  401b06:	d0dc      	beq.n	401ac2 <__register_exitproc+0x4a>
  401b08:	e7cc      	b.n	401aa4 <__register_exitproc+0x2c>
  401b0a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401b0e:	430c      	orrs	r4, r1
  401b10:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401b14:	e7d5      	b.n	401ac2 <__register_exitproc+0x4a>
  401b16:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401b1a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401b1e:	e7bb      	b.n	401a98 <__register_exitproc+0x20>
  401b20:	6828      	ldr	r0, [r5, #0]
  401b22:	f7ff fc49 	bl	4013b8 <__retarget_lock_release_recursive>
  401b26:	f04f 30ff 	mov.w	r0, #4294967295
  401b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b2e:	bf00      	nop
  401b30:	20000438 	.word	0x20000438
  401b34:	00401ca4 	.word	0x00401ca4
  401b38:	00401419 	.word	0x00401419

00401b3c <_close_r>:
  401b3c:	b538      	push	{r3, r4, r5, lr}
  401b3e:	4c07      	ldr	r4, [pc, #28]	; (401b5c <_close_r+0x20>)
  401b40:	2300      	movs	r3, #0
  401b42:	4605      	mov	r5, r0
  401b44:	4608      	mov	r0, r1
  401b46:	6023      	str	r3, [r4, #0]
  401b48:	f7fe fee2 	bl	400910 <_close>
  401b4c:	1c43      	adds	r3, r0, #1
  401b4e:	d000      	beq.n	401b52 <_close_r+0x16>
  401b50:	bd38      	pop	{r3, r4, r5, pc}
  401b52:	6823      	ldr	r3, [r4, #0]
  401b54:	2b00      	cmp	r3, #0
  401b56:	d0fb      	beq.n	401b50 <_close_r+0x14>
  401b58:	602b      	str	r3, [r5, #0]
  401b5a:	bd38      	pop	{r3, r4, r5, pc}
  401b5c:	20000ad4 	.word	0x20000ad4

00401b60 <_fclose_r>:
  401b60:	b570      	push	{r4, r5, r6, lr}
  401b62:	b159      	cbz	r1, 401b7c <_fclose_r+0x1c>
  401b64:	4605      	mov	r5, r0
  401b66:	460c      	mov	r4, r1
  401b68:	b110      	cbz	r0, 401b70 <_fclose_r+0x10>
  401b6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401b6c:	2b00      	cmp	r3, #0
  401b6e:	d03c      	beq.n	401bea <_fclose_r+0x8a>
  401b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401b72:	07d8      	lsls	r0, r3, #31
  401b74:	d505      	bpl.n	401b82 <_fclose_r+0x22>
  401b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401b7a:	b92b      	cbnz	r3, 401b88 <_fclose_r+0x28>
  401b7c:	2600      	movs	r6, #0
  401b7e:	4630      	mov	r0, r6
  401b80:	bd70      	pop	{r4, r5, r6, pc}
  401b82:	89a3      	ldrh	r3, [r4, #12]
  401b84:	0599      	lsls	r1, r3, #22
  401b86:	d53c      	bpl.n	401c02 <_fclose_r+0xa2>
  401b88:	4621      	mov	r1, r4
  401b8a:	4628      	mov	r0, r5
  401b8c:	f7ff f964 	bl	400e58 <__sflush_r>
  401b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401b92:	4606      	mov	r6, r0
  401b94:	b133      	cbz	r3, 401ba4 <_fclose_r+0x44>
  401b96:	69e1      	ldr	r1, [r4, #28]
  401b98:	4628      	mov	r0, r5
  401b9a:	4798      	blx	r3
  401b9c:	2800      	cmp	r0, #0
  401b9e:	bfb8      	it	lt
  401ba0:	f04f 36ff 	movlt.w	r6, #4294967295
  401ba4:	89a3      	ldrh	r3, [r4, #12]
  401ba6:	061a      	lsls	r2, r3, #24
  401ba8:	d422      	bmi.n	401bf0 <_fclose_r+0x90>
  401baa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401bac:	b141      	cbz	r1, 401bc0 <_fclose_r+0x60>
  401bae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401bb2:	4299      	cmp	r1, r3
  401bb4:	d002      	beq.n	401bbc <_fclose_r+0x5c>
  401bb6:	4628      	mov	r0, r5
  401bb8:	f7ff fae8 	bl	40118c <_free_r>
  401bbc:	2300      	movs	r3, #0
  401bbe:	6323      	str	r3, [r4, #48]	; 0x30
  401bc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401bc2:	b121      	cbz	r1, 401bce <_fclose_r+0x6e>
  401bc4:	4628      	mov	r0, r5
  401bc6:	f7ff fae1 	bl	40118c <_free_r>
  401bca:	2300      	movs	r3, #0
  401bcc:	6463      	str	r3, [r4, #68]	; 0x44
  401bce:	f7ff fa67 	bl	4010a0 <__sfp_lock_acquire>
  401bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401bd4:	2200      	movs	r2, #0
  401bd6:	07db      	lsls	r3, r3, #31
  401bd8:	81a2      	strh	r2, [r4, #12]
  401bda:	d50e      	bpl.n	401bfa <_fclose_r+0x9a>
  401bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401bde:	f7ff fbe7 	bl	4013b0 <__retarget_lock_close_recursive>
  401be2:	f7ff fa63 	bl	4010ac <__sfp_lock_release>
  401be6:	4630      	mov	r0, r6
  401be8:	bd70      	pop	{r4, r5, r6, pc}
  401bea:	f7ff fa2d 	bl	401048 <__sinit>
  401bee:	e7bf      	b.n	401b70 <_fclose_r+0x10>
  401bf0:	6921      	ldr	r1, [r4, #16]
  401bf2:	4628      	mov	r0, r5
  401bf4:	f7ff faca 	bl	40118c <_free_r>
  401bf8:	e7d7      	b.n	401baa <_fclose_r+0x4a>
  401bfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401bfc:	f7ff fbdc 	bl	4013b8 <__retarget_lock_release_recursive>
  401c00:	e7ec      	b.n	401bdc <_fclose_r+0x7c>
  401c02:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401c04:	f7ff fbd6 	bl	4013b4 <__retarget_lock_acquire_recursive>
  401c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	d1bb      	bne.n	401b88 <_fclose_r+0x28>
  401c10:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401c12:	f016 0601 	ands.w	r6, r6, #1
  401c16:	d1b1      	bne.n	401b7c <_fclose_r+0x1c>
  401c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401c1a:	f7ff fbcd 	bl	4013b8 <__retarget_lock_release_recursive>
  401c1e:	4630      	mov	r0, r6
  401c20:	bd70      	pop	{r4, r5, r6, pc}
  401c22:	bf00      	nop

00401c24 <_fstat_r>:
  401c24:	b538      	push	{r3, r4, r5, lr}
  401c26:	460b      	mov	r3, r1
  401c28:	4c07      	ldr	r4, [pc, #28]	; (401c48 <_fstat_r+0x24>)
  401c2a:	4605      	mov	r5, r0
  401c2c:	4611      	mov	r1, r2
  401c2e:	4618      	mov	r0, r3
  401c30:	2300      	movs	r3, #0
  401c32:	6023      	str	r3, [r4, #0]
  401c34:	f7fe fe6f 	bl	400916 <_fstat>
  401c38:	1c43      	adds	r3, r0, #1
  401c3a:	d000      	beq.n	401c3e <_fstat_r+0x1a>
  401c3c:	bd38      	pop	{r3, r4, r5, pc}
  401c3e:	6823      	ldr	r3, [r4, #0]
  401c40:	2b00      	cmp	r3, #0
  401c42:	d0fb      	beq.n	401c3c <_fstat_r+0x18>
  401c44:	602b      	str	r3, [r5, #0]
  401c46:	bd38      	pop	{r3, r4, r5, pc}
  401c48:	20000ad4 	.word	0x20000ad4

00401c4c <_lseek_r>:
  401c4c:	b570      	push	{r4, r5, r6, lr}
  401c4e:	460d      	mov	r5, r1
  401c50:	4c08      	ldr	r4, [pc, #32]	; (401c74 <_lseek_r+0x28>)
  401c52:	4611      	mov	r1, r2
  401c54:	4606      	mov	r6, r0
  401c56:	461a      	mov	r2, r3
  401c58:	4628      	mov	r0, r5
  401c5a:	2300      	movs	r3, #0
  401c5c:	6023      	str	r3, [r4, #0]
  401c5e:	f7fe fe5f 	bl	400920 <_lseek>
  401c62:	1c43      	adds	r3, r0, #1
  401c64:	d000      	beq.n	401c68 <_lseek_r+0x1c>
  401c66:	bd70      	pop	{r4, r5, r6, pc}
  401c68:	6823      	ldr	r3, [r4, #0]
  401c6a:	2b00      	cmp	r3, #0
  401c6c:	d0fb      	beq.n	401c66 <_lseek_r+0x1a>
  401c6e:	6033      	str	r3, [r6, #0]
  401c70:	bd70      	pop	{r4, r5, r6, pc}
  401c72:	bf00      	nop
  401c74:	20000ad4 	.word	0x20000ad4

00401c78 <_read_r>:
  401c78:	b570      	push	{r4, r5, r6, lr}
  401c7a:	460d      	mov	r5, r1
  401c7c:	4c08      	ldr	r4, [pc, #32]	; (401ca0 <_read_r+0x28>)
  401c7e:	4611      	mov	r1, r2
  401c80:	4606      	mov	r6, r0
  401c82:	461a      	mov	r2, r3
  401c84:	4628      	mov	r0, r5
  401c86:	2300      	movs	r3, #0
  401c88:	6023      	str	r3, [r4, #0]
  401c8a:	f7fe fa9d 	bl	4001c8 <_read>
  401c8e:	1c43      	adds	r3, r0, #1
  401c90:	d000      	beq.n	401c94 <_read_r+0x1c>
  401c92:	bd70      	pop	{r4, r5, r6, pc}
  401c94:	6823      	ldr	r3, [r4, #0]
  401c96:	2b00      	cmp	r3, #0
  401c98:	d0fb      	beq.n	401c92 <_read_r+0x1a>
  401c9a:	6033      	str	r3, [r6, #0]
  401c9c:	bd70      	pop	{r4, r5, r6, pc}
  401c9e:	bf00      	nop
  401ca0:	20000ad4 	.word	0x20000ad4

00401ca4 <_global_impure_ptr>:
  401ca4:	20000010                                ... 

00401ca8 <_init>:
  401ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401caa:	bf00      	nop
  401cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401cae:	bc08      	pop	{r3}
  401cb0:	469e      	mov	lr, r3
  401cb2:	4770      	bx	lr

00401cb4 <__init_array_start>:
  401cb4:	00400e39 	.word	0x00400e39

00401cb8 <__frame_dummy_init_array_entry>:
  401cb8:	0040011d                                ..@.

00401cbc <_fini>:
  401cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401cbe:	bf00      	nop
  401cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401cc2:	bc08      	pop	{r3}
  401cc4:	469e      	mov	lr, r3
  401cc6:	4770      	bx	lr

00401cc8 <__fini_array_start>:
  401cc8:	004000f9 	.word	0x004000f9
