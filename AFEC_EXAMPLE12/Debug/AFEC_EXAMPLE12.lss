
AFEC_EXAMPLE12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002490  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20000000  00402490  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004ff0  2000084c  00402cdc  0002084c  2**2
                  ALLOC
  3 .stack        00003004  2000583c  00407ccc  0002084c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018aa3  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000354d  00000000  00000000  00039376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000054a1  00000000  00000000  0003c8c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ad8  00000000  00000000  00041d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a60  00000000  00000000  0004283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018bff  00000000  00000000  0004329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c928  00000000  00000000  0005be9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00065f7e  00000000  00000000  000687c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e88  00000000  00000000  000ce744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 88 00 20 dd 10 40 00 db 10 40 00 db 10 40 00     @.. ..@...@...@.
  400010:	db 10 40 00 db 10 40 00 db 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	db 10 40 00 db 10 40 00 00 00 00 00 db 10 40 00     ..@...@.......@.
  40003c:	db 10 40 00 db 10 40 00 db 10 40 00 db 10 40 00     ..@...@...@...@.
  40004c:	db 10 40 00 db 10 40 00 db 10 40 00 db 10 40 00     ..@...@...@...@.
  40005c:	db 10 40 00 db 10 40 00 59 0d 40 00 6d 0d 40 00     ..@...@.Y.@.m.@.
  40006c:	81 0d 40 00 95 0d 40 00 a9 0d 40 00 db 10 40 00     ..@...@...@...@.
  40007c:	db 10 40 00 db 10 40 00 db 10 40 00 db 10 40 00     ..@...@...@...@.
  40008c:	d1 03 40 00 db 10 40 00 3d 04 40 00 db 10 40 00     ..@...@.=.@...@.
  40009c:	db 10 40 00 db 10 40 00 db 10 40 00 db 10 40 00     ..@...@...@...@.
  4000ac:	db 10 40 00 db 10 40 00 db 10 40 00 5d 0c 40 00     ..@...@...@.].@.
  4000bc:	71 0c 40 00 db 10 40 00 db 10 40 00 db 10 40 00     q.@...@...@...@.
  4000cc:	db 10 40 00 db 10 40 00 db 10 40 00 db 10 40 00     ..@...@...@...@.
  4000dc:	db 10 40 00 db 10 40 00 db 10 40 00 db 10 40 00     ..@...@...@...@.
  4000ec:	db 10 40 00 db 10 40 00 db 10 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000084c 	.word	0x2000084c
  400114:	00000000 	.word	0x00000000
  400118:	00402490 	.word	0x00402490

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00402490 	.word	0x00402490
  400158:	20000850 	.word	0x20000850
  40015c:	00402490 	.word	0x00402490
  400160:	00000000 	.word	0x00000000

00400164 <configure_tc>:
		get_data();
}

/* Configure Timer Counter 0 to generate an interrupt every (period) ms. */
static void configure_tc(void)
{
  400164:	b530      	push	{r4, r5, lr}
  400166:	b085      	sub	sp, #20
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
  400168:	2015      	movs	r0, #21
  40016a:	4b1a      	ldr	r3, [pc, #104]	; (4001d4 <configure_tc+0x70>)
  40016c:	4798      	blx	r3

	/** Configure TC for a (freq) Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  40016e:	4c1a      	ldr	r4, [pc, #104]	; (4001d8 <configure_tc+0x74>)
  400170:	9400      	str	r4, [sp, #0]
  400172:	ab02      	add	r3, sp, #8
  400174:	aa03      	add	r2, sp, #12
  400176:	4621      	mov	r1, r4
  400178:	4818      	ldr	r0, [pc, #96]	; (4001dc <configure_tc+0x78>)
  40017a:	4d19      	ldr	r5, [pc, #100]	; (4001e0 <configure_tc+0x7c>)
  40017c:	47a8      	blx	r5
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40017e:	4d19      	ldr	r5, [pc, #100]	; (4001e4 <configure_tc+0x80>)
  400180:	9a02      	ldr	r2, [sp, #8]
  400182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400186:	2100      	movs	r1, #0
  400188:	4628      	mov	r0, r5
  40018a:	4b17      	ldr	r3, [pc, #92]	; (4001e8 <configure_tc+0x84>)
  40018c:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / freq);
  40018e:	9a03      	ldr	r2, [sp, #12]
  400190:	fbb4 f4f2 	udiv	r4, r4, r2
  400194:	4a15      	ldr	r2, [pc, #84]	; (4001ec <configure_tc+0x88>)
  400196:	fba2 3204 	umull	r3, r2, r2, r4
  40019a:	0c52      	lsrs	r2, r2, #17
  40019c:	2100      	movs	r1, #0
  40019e:	4628      	mov	r0, r5
  4001a0:	4b13      	ldr	r3, [pc, #76]	; (4001f0 <configure_tc+0x8c>)
  4001a2:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4001a4:	4b13      	ldr	r3, [pc, #76]	; (4001f4 <configure_tc+0x90>)
  4001a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4001aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4001ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4001b2:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4001b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4001ba:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_DisableIRQ(SPI_IRQn);
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4001bc:	2210      	movs	r2, #16
  4001be:	2100      	movs	r1, #0
  4001c0:	4628      	mov	r0, r5
  4001c2:	4b0d      	ldr	r3, [pc, #52]	; (4001f8 <configure_tc+0x94>)
  4001c4:	4798      	blx	r3
	
	tc_start(TC0, 0);
  4001c6:	2100      	movs	r1, #0
  4001c8:	4628      	mov	r0, r5
  4001ca:	4b0c      	ldr	r3, [pc, #48]	; (4001fc <configure_tc+0x98>)
  4001cc:	4798      	blx	r3
}
  4001ce:	b005      	add	sp, #20
  4001d0:	bd30      	pop	{r4, r5, pc}
  4001d2:	bf00      	nop
  4001d4:	00400ea5 	.word	0x00400ea5
  4001d8:	07270e00 	.word	0x07270e00
  4001dc:	0007a120 	.word	0x0007a120
  4001e0:	00400fe5 	.word	0x00400fe5
  4001e4:	40090000 	.word	0x40090000
  4001e8:	00400fa3 	.word	0x00400fa3
  4001ec:	431bde83 	.word	0x431bde83
  4001f0:	00400fcd 	.word	0x00400fcd
  4001f4:	e000e100 	.word	0xe000e100
  4001f8:	00400fd5 	.word	0x00400fd5
  4001fc:	00400fbd 	.word	0x00400fbd

00400200 <restart>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400200:	4b15      	ldr	r3, [pc, #84]	; (400258 <restart+0x58>)
  400202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400204:	0fdb      	lsrs	r3, r3, #31
	GO_status = ioport_get_pin_level(GO_pin);
  400206:	4a15      	ldr	r2, [pc, #84]	; (40025c <restart+0x5c>)
  400208:	7013      	strb	r3, [r2, #0]
	if (!GO_status)
  40020a:	7813      	ldrb	r3, [r2, #0]
  40020c:	b103      	cbz	r3, 400210 <restart+0x10>
  40020e:	4770      	bx	lr
{
  400210:	b510      	push	{r4, lr}
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400212:	4b11      	ldr	r3, [pc, #68]	; (400258 <restart+0x58>)
  400214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400218:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40021a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40021e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400220:	2201      	movs	r2, #1
  400222:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400226:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400228:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40022c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400230:	631a      	str	r2, [r3, #48]	; 0x30
  400232:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400236:	631a      	str	r2, [r3, #48]	; 0x30
		i = 0;
  400238:	2400      	movs	r4, #0
  40023a:	4b09      	ldr	r3, [pc, #36]	; (400260 <restart+0x60>)
  40023c:	601c      	str	r4, [r3, #0]
		state = SL_READY;
  40023e:	4b09      	ldr	r3, [pc, #36]	; (400264 <restart+0x64>)
  400240:	701c      	strb	r4, [r3, #0]
		configure_tc();
  400242:	4b09      	ldr	r3, [pc, #36]	; (400268 <restart+0x68>)
  400244:	4798      	blx	r3
		buffer_full = false;
  400246:	4b09      	ldr	r3, [pc, #36]	; (40026c <restart+0x6c>)
  400248:	701c      	strb	r4, [r3, #0]
		trigger_hit = false;
  40024a:	4b09      	ldr	r3, [pc, #36]	; (400270 <restart+0x70>)
  40024c:	701c      	strb	r4, [r3, #0]
		channel_to_write = 2;
  40024e:	2202      	movs	r2, #2
  400250:	4b08      	ldr	r3, [pc, #32]	; (400274 <restart+0x74>)
  400252:	701a      	strb	r2, [r3, #0]
  400254:	bd10      	pop	{r4, pc}
  400256:	bf00      	nop
  400258:	400e1200 	.word	0x400e1200
  40025c:	20000868 	.word	0x20000868
  400260:	2000568c 	.word	0x2000568c
  400264:	20005740 	.word	0x20005740
  400268:	00400165 	.word	0x00400165
  40026c:	20000869 	.word	0x20000869
  400270:	20005690 	.word	0x20005690
  400274:	20000001 	.word	0x20000001

00400278 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400278:	b5f0      	push	{r4, r5, r6, r7, lr}
  40027a:	b083      	sub	sp, #12
  40027c:	4605      	mov	r5, r0
  40027e:	460c      	mov	r4, r1
	uint32_t val = 0;
  400280:	2300      	movs	r3, #0
  400282:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400284:	4b18      	ldr	r3, [pc, #96]	; (4002e8 <usart_serial_getchar+0x70>)
  400286:	4298      	cmp	r0, r3
  400288:	d00a      	beq.n	4002a0 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40028a:	4b18      	ldr	r3, [pc, #96]	; (4002ec <usart_serial_getchar+0x74>)
  40028c:	4298      	cmp	r0, r3
  40028e:	d00f      	beq.n	4002b0 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400290:	4b17      	ldr	r3, [pc, #92]	; (4002f0 <usart_serial_getchar+0x78>)
  400292:	4298      	cmp	r0, r3
  400294:	d014      	beq.n	4002c0 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400296:	4b17      	ldr	r3, [pc, #92]	; (4002f4 <usart_serial_getchar+0x7c>)
  400298:	429d      	cmp	r5, r3
  40029a:	d01b      	beq.n	4002d4 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40029c:	b003      	add	sp, #12
  40029e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4002a0:	461f      	mov	r7, r3
  4002a2:	4e15      	ldr	r6, [pc, #84]	; (4002f8 <usart_serial_getchar+0x80>)
  4002a4:	4621      	mov	r1, r4
  4002a6:	4638      	mov	r0, r7
  4002a8:	47b0      	blx	r6
  4002aa:	2800      	cmp	r0, #0
  4002ac:	d1fa      	bne.n	4002a4 <usart_serial_getchar+0x2c>
  4002ae:	e7f2      	b.n	400296 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4002b0:	461e      	mov	r6, r3
  4002b2:	4d11      	ldr	r5, [pc, #68]	; (4002f8 <usart_serial_getchar+0x80>)
  4002b4:	4621      	mov	r1, r4
  4002b6:	4630      	mov	r0, r6
  4002b8:	47a8      	blx	r5
  4002ba:	2800      	cmp	r0, #0
  4002bc:	d1fa      	bne.n	4002b4 <usart_serial_getchar+0x3c>
  4002be:	e7ed      	b.n	40029c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4002c0:	461e      	mov	r6, r3
  4002c2:	4d0e      	ldr	r5, [pc, #56]	; (4002fc <usart_serial_getchar+0x84>)
  4002c4:	a901      	add	r1, sp, #4
  4002c6:	4630      	mov	r0, r6
  4002c8:	47a8      	blx	r5
  4002ca:	2800      	cmp	r0, #0
  4002cc:	d1fa      	bne.n	4002c4 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  4002ce:	9b01      	ldr	r3, [sp, #4]
  4002d0:	7023      	strb	r3, [r4, #0]
  4002d2:	e7e3      	b.n	40029c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4002d4:	461e      	mov	r6, r3
  4002d6:	4d09      	ldr	r5, [pc, #36]	; (4002fc <usart_serial_getchar+0x84>)
  4002d8:	a901      	add	r1, sp, #4
  4002da:	4630      	mov	r0, r6
  4002dc:	47a8      	blx	r5
  4002de:	2800      	cmp	r0, #0
  4002e0:	d1fa      	bne.n	4002d8 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  4002e2:	9b01      	ldr	r3, [sp, #4]
  4002e4:	7023      	strb	r3, [r4, #0]
}
  4002e6:	e7d9      	b.n	40029c <usart_serial_getchar+0x24>
  4002e8:	400e0600 	.word	0x400e0600
  4002ec:	40060600 	.word	0x40060600
  4002f0:	400a0000 	.word	0x400a0000
  4002f4:	400a4000 	.word	0x400a4000
  4002f8:	0040109d 	.word	0x0040109d
  4002fc:	004010c3 	.word	0x004010c3

00400300 <usart_serial_putchar>:
{
  400300:	b570      	push	{r4, r5, r6, lr}
  400302:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400304:	4b18      	ldr	r3, [pc, #96]	; (400368 <usart_serial_putchar+0x68>)
  400306:	4298      	cmp	r0, r3
  400308:	d00a      	beq.n	400320 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  40030a:	4b18      	ldr	r3, [pc, #96]	; (40036c <usart_serial_putchar+0x6c>)
  40030c:	4298      	cmp	r0, r3
  40030e:	d010      	beq.n	400332 <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400310:	4b17      	ldr	r3, [pc, #92]	; (400370 <usart_serial_putchar+0x70>)
  400312:	4298      	cmp	r0, r3
  400314:	d016      	beq.n	400344 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400316:	4b17      	ldr	r3, [pc, #92]	; (400374 <usart_serial_putchar+0x74>)
  400318:	4298      	cmp	r0, r3
  40031a:	d01c      	beq.n	400356 <usart_serial_putchar+0x56>
	return 0;
  40031c:	2000      	movs	r0, #0
}
  40031e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400320:	461e      	mov	r6, r3
  400322:	4d15      	ldr	r5, [pc, #84]	; (400378 <usart_serial_putchar+0x78>)
  400324:	4621      	mov	r1, r4
  400326:	4630      	mov	r0, r6
  400328:	47a8      	blx	r5
  40032a:	2800      	cmp	r0, #0
  40032c:	d1fa      	bne.n	400324 <usart_serial_putchar+0x24>
		return 1;
  40032e:	2001      	movs	r0, #1
  400330:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400332:	461e      	mov	r6, r3
  400334:	4d10      	ldr	r5, [pc, #64]	; (400378 <usart_serial_putchar+0x78>)
  400336:	4621      	mov	r1, r4
  400338:	4630      	mov	r0, r6
  40033a:	47a8      	blx	r5
  40033c:	2800      	cmp	r0, #0
  40033e:	d1fa      	bne.n	400336 <usart_serial_putchar+0x36>
		return 1;
  400340:	2001      	movs	r0, #1
  400342:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400344:	461e      	mov	r6, r3
  400346:	4d0d      	ldr	r5, [pc, #52]	; (40037c <usart_serial_putchar+0x7c>)
  400348:	4621      	mov	r1, r4
  40034a:	4630      	mov	r0, r6
  40034c:	47a8      	blx	r5
  40034e:	2800      	cmp	r0, #0
  400350:	d1fa      	bne.n	400348 <usart_serial_putchar+0x48>
		return 1;
  400352:	2001      	movs	r0, #1
  400354:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400356:	461e      	mov	r6, r3
  400358:	4d08      	ldr	r5, [pc, #32]	; (40037c <usart_serial_putchar+0x7c>)
  40035a:	4621      	mov	r1, r4
  40035c:	4630      	mov	r0, r6
  40035e:	47a8      	blx	r5
  400360:	2800      	cmp	r0, #0
  400362:	d1fa      	bne.n	40035a <usart_serial_putchar+0x5a>
		return 1;
  400364:	2001      	movs	r0, #1
  400366:	bd70      	pop	{r4, r5, r6, pc}
  400368:	400e0600 	.word	0x400e0600
  40036c:	40060600 	.word	0x40060600
  400370:	400a0000 	.word	0x400a0000
  400374:	400a4000 	.word	0x400a4000
  400378:	0040108d 	.word	0x0040108d
  40037c:	004010af 	.word	0x004010af

00400380 <configure_channel>:

static void configure_channel(int chan)
{
  400380:	b570      	push	{r4, r5, r6, lr}
  400382:	b082      	sub	sp, #8
  400384:	4604      	mov	r4, r0
	afec_channel_enable(AFEC0, chan);
  400386:	b286      	uxth	r6, r0
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  400388:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40038c:	429e      	cmp	r6, r3
  40038e:	bf1d      	ittte	ne
  400390:	4632      	movne	r2, r6
  400392:	2301      	movne	r3, #1
  400394:	4093      	lslne	r3, r2
  400396:	f64f 73ff 	movweq	r3, #65535	; 0xffff
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40039a:	4d0a      	ldr	r5, [pc, #40]	; (4003c4 <configure_channel+0x44>)
  40039c:	616b      	str	r3, [r5, #20]
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40039e:	a801      	add	r0, sp, #4
  4003a0:	4b09      	ldr	r3, [pc, #36]	; (4003c8 <configure_channel+0x48>)
  4003a2:	4798      	blx	r3
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  4003a4:	aa01      	add	r2, sp, #4
  4003a6:	4631      	mov	r1, r6
  4003a8:	4628      	mov	r0, r5
  4003aa:	4b08      	ldr	r3, [pc, #32]	; (4003cc <configure_channel+0x4c>)
  4003ac:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC0, chan, (chan == channel_0) ? 2000 : 2940);
  4003ae:	2c03      	cmp	r4, #3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4003b0:	b2a4      	uxth	r4, r4
  4003b2:	666c      	str	r4, [r5, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4003b4:	f640 337c 	movw	r3, #2940	; 0xb7c
  4003b8:	bf08      	it	eq
  4003ba:	f44f 63fa 	moveq.w	r3, #2000	; 0x7d0
  4003be:	66eb      	str	r3, [r5, #108]	; 0x6c
}
  4003c0:	b002      	add	sp, #8
  4003c2:	bd70      	pop	{r4, r5, r6, pc}
  4003c4:	400b0000 	.word	0x400b0000
  4003c8:	00400b7d 	.word	0x00400b7d
  4003cc:	00400b1d 	.word	0x00400b1d

004003d0 <SPI_Handler>:
{
  4003d0:	b538      	push	{r3, r4, r5, lr}
	if(channel_to_write > 1)
  4003d2:	4b13      	ldr	r3, [pc, #76]	; (400420 <SPI_Handler+0x50>)
  4003d4:	781b      	ldrb	r3, [r3, #0]
  4003d6:	b2db      	uxtb	r3, r3
  4003d8:	2b01      	cmp	r3, #1
  4003da:	d902      	bls.n	4003e2 <SPI_Handler+0x12>
	restart();
  4003dc:	4b11      	ldr	r3, [pc, #68]	; (400424 <SPI_Handler+0x54>)
  4003de:	4798      	blx	r3
  4003e0:	bd38      	pop	{r3, r4, r5, pc}
	if(i < DATA_SIZE)
  4003e2:	4b11      	ldr	r3, [pc, #68]	; (400428 <SPI_Handler+0x58>)
  4003e4:	681a      	ldr	r2, [r3, #0]
  4003e6:	f241 3387 	movw	r3, #4999	; 0x1387
  4003ea:	429a      	cmp	r2, r3
  4003ec:	d903      	bls.n	4003f6 <SPI_Handler+0x26>
	else ch_written = true;
  4003ee:	2201      	movs	r2, #1
  4003f0:	4b0e      	ldr	r3, [pc, #56]	; (40042c <SPI_Handler+0x5c>)
  4003f2:	701a      	strb	r2, [r3, #0]
  4003f4:	e7f2      	b.n	4003dc <SPI_Handler+0xc>
		spi_write(SPI_SLAVE_BASE, data[channel_to_write][i], 0, 0);
  4003f6:	4b0a      	ldr	r3, [pc, #40]	; (400420 <SPI_Handler+0x50>)
  4003f8:	781a      	ldrb	r2, [r3, #0]
  4003fa:	4c0b      	ldr	r4, [pc, #44]	; (400428 <SPI_Handler+0x58>)
  4003fc:	6823      	ldr	r3, [r4, #0]
  4003fe:	f241 3188 	movw	r1, #5000	; 0x1388
  400402:	fb02 3101 	mla	r1, r2, r1, r3
  400406:	2300      	movs	r3, #0
  400408:	461a      	mov	r2, r3
  40040a:	4809      	ldr	r0, [pc, #36]	; (400430 <SPI_Handler+0x60>)
  40040c:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
  400410:	4808      	ldr	r0, [pc, #32]	; (400434 <SPI_Handler+0x64>)
  400412:	4d09      	ldr	r5, [pc, #36]	; (400438 <SPI_Handler+0x68>)
  400414:	47a8      	blx	r5
		i++;
  400416:	6823      	ldr	r3, [r4, #0]
  400418:	3301      	adds	r3, #1
  40041a:	6023      	str	r3, [r4, #0]
  40041c:	e7de      	b.n	4003dc <SPI_Handler+0xc>
  40041e:	bf00      	nop
  400420:	20000001 	.word	0x20000001
  400424:	00400201 	.word	0x00400201
  400428:	2000568c 	.word	0x2000568c
  40042c:	2000086a 	.word	0x2000086a
  400430:	2000086c 	.word	0x2000086c
  400434:	40088000 	.word	0x40088000
  400438:	00400f1f 	.word	0x00400f1f

0040043c <TC0_Handler>:
{
  40043c:	b530      	push	{r4, r5, lr}
  40043e:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 0);
  400440:	2100      	movs	r1, #0
  400442:	4827      	ldr	r0, [pc, #156]	; (4004e0 <TC0_Handler+0xa4>)
  400444:	4b27      	ldr	r3, [pc, #156]	; (4004e4 <TC0_Handler+0xa8>)
  400446:	4798      	blx	r3
  400448:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  40044a:	9b01      	ldr	r3, [sp, #4]
	if (state == SL_READY)
  40044c:	4b26      	ldr	r3, [pc, #152]	; (4004e8 <TC0_Handler+0xac>)
  40044e:	781b      	ldrb	r3, [r3, #0]
  400450:	2b00      	cmp	r3, #0
  400452:	d030      	beq.n	4004b6 <TC0_Handler+0x7a>
	if (i < DATA_SIZE)
  400454:	4b25      	ldr	r3, [pc, #148]	; (4004ec <TC0_Handler+0xb0>)
  400456:	681a      	ldr	r2, [r3, #0]
  400458:	f241 3387 	movw	r3, #4999	; 0x1387
  40045c:	429a      	cmp	r2, r3
  40045e:	d83a      	bhi.n	4004d6 <TC0_Handler+0x9a>
	afec->AFEC_CR = AFEC_CR_START;
  400460:	4a23      	ldr	r2, [pc, #140]	; (4004f0 <TC0_Handler+0xb4>)
  400462:	2402      	movs	r4, #2
  400464:	6014      	str	r4, [r2, #0]
		data[0][i] = afec_channel_get_value(AFEC0, channel_0);
  400466:	4821      	ldr	r0, [pc, #132]	; (4004ec <TC0_Handler+0xb0>)
  400468:	6803      	ldr	r3, [r0, #0]
	afec->AFEC_CSELR = afec_ch;
  40046a:	2103      	movs	r1, #3
  40046c:	6651      	str	r1, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  40046e:	6e95      	ldr	r5, [r2, #104]	; 0x68
  400470:	4920      	ldr	r1, [pc, #128]	; (4004f4 <TC0_Handler+0xb8>)
  400472:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
		data[1][i] = afec_channel_get_value(AFEC0, channel_1);
  400476:	6803      	ldr	r3, [r0, #0]
	afec->AFEC_CSELR = afec_ch;
  400478:	6654      	str	r4, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  40047a:	6e92      	ldr	r2, [r2, #104]	; 0x68
  40047c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
  400480:	3308      	adds	r3, #8
  400482:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if (data[TRIGGER_CHANNEL][i] >= trigger_level)
  400486:	6802      	ldr	r2, [r0, #0]
  400488:	4b1b      	ldr	r3, [pc, #108]	; (4004f8 <TC0_Handler+0xbc>)
  40048a:	881b      	ldrh	r3, [r3, #0]
  40048c:	b29b      	uxth	r3, r3
  40048e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  400492:	429a      	cmp	r2, r3
  400494:	d302      	bcc.n	40049c <TC0_Handler+0x60>
			trigger_hit = true;
  400496:	2201      	movs	r2, #1
  400498:	4b18      	ldr	r3, [pc, #96]	; (4004fc <TC0_Handler+0xc0>)
  40049a:	701a      	strb	r2, [r3, #0]
		if ((i >= PRE_TRIGGER_SAMPLES) && (!trigger_hit)) {
  40049c:	4b13      	ldr	r3, [pc, #76]	; (4004ec <TC0_Handler+0xb0>)
  40049e:	681a      	ldr	r2, [r3, #0]
  4004a0:	f640 13c3 	movw	r3, #2499	; 0x9c3
  4004a4:	429a      	cmp	r2, r3
  4004a6:	d911      	bls.n	4004cc <TC0_Handler+0x90>
  4004a8:	4b14      	ldr	r3, [pc, #80]	; (4004fc <TC0_Handler+0xc0>)
  4004aa:	781b      	ldrb	r3, [r3, #0]
  4004ac:	b973      	cbnz	r3, 4004cc <TC0_Handler+0x90>
			i = 0;
  4004ae:	2200      	movs	r2, #0
  4004b0:	4b0e      	ldr	r3, [pc, #56]	; (4004ec <TC0_Handler+0xb0>)
  4004b2:	601a      	str	r2, [r3, #0]
  4004b4:	e008      	b.n	4004c8 <TC0_Handler+0x8c>
	afec->AFEC_CR = AFEC_CR_START;
  4004b6:	4b0e      	ldr	r3, [pc, #56]	; (4004f0 <TC0_Handler+0xb4>)
  4004b8:	2202      	movs	r2, #2
  4004ba:	601a      	str	r2, [r3, #0]
	afec->AFEC_CSELR = afec_ch;
  4004bc:	2205      	movs	r2, #5
  4004be:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4004c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	trigger_level = afec_channel_get_value(AFEC0, set_trigger_level_ch);
  4004c2:	b29b      	uxth	r3, r3
  4004c4:	4a0c      	ldr	r2, [pc, #48]	; (4004f8 <TC0_Handler+0xbc>)
  4004c6:	8013      	strh	r3, [r2, #0]
}
  4004c8:	b003      	add	sp, #12
  4004ca:	bd30      	pop	{r4, r5, pc}
			i++;
  4004cc:	4a07      	ldr	r2, [pc, #28]	; (4004ec <TC0_Handler+0xb0>)
  4004ce:	6813      	ldr	r3, [r2, #0]
  4004d0:	3301      	adds	r3, #1
  4004d2:	6013      	str	r3, [r2, #0]
  4004d4:	e7f8      	b.n	4004c8 <TC0_Handler+0x8c>
	else buffer_full = true;
  4004d6:	2201      	movs	r2, #1
  4004d8:	4b09      	ldr	r3, [pc, #36]	; (400500 <TC0_Handler+0xc4>)
  4004da:	701a      	strb	r2, [r3, #0]
}
  4004dc:	e7f4      	b.n	4004c8 <TC0_Handler+0x8c>
  4004de:	bf00      	nop
  4004e0:	40090000 	.word	0x40090000
  4004e4:	00400fdd 	.word	0x00400fdd
  4004e8:	20005740 	.word	0x20005740
  4004ec:	2000568c 	.word	0x2000568c
  4004f0:	400b0000 	.word	0x400b0000
  4004f4:	2000086c 	.word	0x2000086c
  4004f8:	20005692 	.word	0x20005692
  4004fc:	20005690 	.word	0x20005690
  400500:	20000869 	.word	0x20000869

00400504 <main>:
		sample = sample->next;
	}
}*/

int main(void)
{
  400504:	b580      	push	{r7, lr}
  400506:	b08a      	sub	sp, #40	; 0x28
	/* Initialize the SAM system. */
	sysclk_init();
  400508:	4b87      	ldr	r3, [pc, #540]	; (400728 <main+0x224>)
  40050a:	4798      	blx	r3
	board_init();
  40050c:	4b87      	ldr	r3, [pc, #540]	; (40072c <main+0x228>)
  40050e:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400510:	2009      	movs	r0, #9
  400512:	4c87      	ldr	r4, [pc, #540]	; (400730 <main+0x22c>)
  400514:	47a0      	blx	r4
  400516:	200a      	movs	r0, #10
  400518:	47a0      	blx	r4
  40051a:	200b      	movs	r0, #11
  40051c:	47a0      	blx	r4
  40051e:	200c      	movs	r0, #12
  400520:	47a0      	blx	r4
  400522:	200d      	movs	r0, #13
  400524:	47a0      	blx	r4
  400526:	2007      	movs	r0, #7
  400528:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40052a:	4d82      	ldr	r5, [pc, #520]	; (400734 <main+0x230>)
  40052c:	4b82      	ldr	r3, [pc, #520]	; (400738 <main+0x234>)
  40052e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400530:	4a82      	ldr	r2, [pc, #520]	; (40073c <main+0x238>)
  400532:	4b83      	ldr	r3, [pc, #524]	; (400740 <main+0x23c>)
  400534:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400536:	4a83      	ldr	r2, [pc, #524]	; (400744 <main+0x240>)
  400538:	4b83      	ldr	r3, [pc, #524]	; (400748 <main+0x244>)
  40053a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40053c:	4b83      	ldr	r3, [pc, #524]	; (40074c <main+0x248>)
  40053e:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
  400540:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400544:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  400546:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40054a:	9302      	str	r3, [sp, #8]
  40054c:	2007      	movs	r0, #7
  40054e:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  400550:	4669      	mov	r1, sp
  400552:	4628      	mov	r0, r5
  400554:	4b7e      	ldr	r3, [pc, #504]	; (400750 <main+0x24c>)
  400556:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400558:	4d7e      	ldr	r5, [pc, #504]	; (400754 <main+0x250>)
  40055a:	682b      	ldr	r3, [r5, #0]
  40055c:	2100      	movs	r1, #0
  40055e:	6898      	ldr	r0, [r3, #8]
  400560:	4c7d      	ldr	r4, [pc, #500]	; (400758 <main+0x254>)
  400562:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400564:	682b      	ldr	r3, [r5, #0]
  400566:	2100      	movs	r1, #0
  400568:	6858      	ldr	r0, [r3, #4]
  40056a:	47a0      	blx	r4
	ioport_init();

	configure_console();

	afec_enable(AFEC0);
  40056c:	4c7b      	ldr	r4, [pc, #492]	; (40075c <main+0x258>)
  40056e:	4620      	mov	r0, r4
  400570:	4b7b      	ldr	r3, [pc, #492]	; (400760 <main+0x25c>)
  400572:	4798      	blx	r3
	struct afec_config afec_cfg;
	afec_get_config_defaults(&afec_cfg);
  400574:	a803      	add	r0, sp, #12
  400576:	4b7b      	ldr	r3, [pc, #492]	; (400764 <main+0x260>)
  400578:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  40057a:	a903      	add	r1, sp, #12
  40057c:	4620      	mov	r0, r4
  40057e:	4b7a      	ldr	r3, [pc, #488]	; (400768 <main+0x264>)
  400580:	4798      	blx	r3
	
	configure_channel(channel_0);
  400582:	2003      	movs	r0, #3
  400584:	4c79      	ldr	r4, [pc, #484]	; (40076c <main+0x268>)
  400586:	47a0      	blx	r4
	configure_channel(channel_1);
  400588:	2002      	movs	r0, #2
  40058a:	47a0      	blx	r4
	configure_channel(set_trigger_level_ch);
  40058c:	2005      	movs	r0, #5
  40058e:	47a0      	blx	r4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400590:	4b77      	ldr	r3, [pc, #476]	; (400770 <main+0x26c>)
  400592:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400596:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400598:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40059c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4005a0:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005a2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4005aa:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4005b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4005b4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005ba:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4005bc:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005be:	2201      	movs	r2, #1
  4005c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4005c4:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4005c6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4005ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4005ce:	631a      	str	r2, [r3, #48]	; 0x30
  4005d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4005d4:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Configuring PIO */
	configure_pio();
	set_default_pin_levels();
	
	state = SL_READY;
  4005d6:	2200      	movs	r2, #0
  4005d8:	4b66      	ldr	r3, [pc, #408]	; (400774 <main+0x270>)
  4005da:	701a      	strb	r2, [r3, #0]
	configure_tc();
  4005dc:	4b66      	ldr	r3, [pc, #408]	; (400778 <main+0x274>)
  4005de:	4798      	blx	r3
  4005e0:	4e66      	ldr	r6, [pc, #408]	; (40077c <main+0x278>)
  4005e2:	4d63      	ldr	r5, [pc, #396]	; (400770 <main+0x26c>)
  4005e4:	4f66      	ldr	r7, [pc, #408]	; (400780 <main+0x27c>)
  4005e6:	e013      	b.n	400610 <main+0x10c>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4005e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4005ea:	0fdb      	lsrs	r3, r3, #31
	sample_last = prev;*/

	while (1) {
		switch (state){
			case SL_READY:
				GO_status = ioport_get_pin_level(GO_pin);
  4005ec:	4a65      	ldr	r2, [pc, #404]	; (400784 <main+0x280>)
  4005ee:	7013      	strb	r3, [r2, #0]
				if (GO_status)
  4005f0:	7813      	ldrb	r3, [r2, #0]
  4005f2:	b16b      	cbz	r3, 400610 <main+0x10c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4005f4:	2301      	movs	r3, #1
  4005f6:	633b      	str	r3, [r7, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4005fc:	6372      	str	r2, [r6, #52]	; 0x34
				{	
					ioport_set_pin_level(LED0_GPIO, 1);
					ioport_set_pin_level(LED1_GPIO, 0);
					state = SL_SAMPLING;
  4005fe:	4a5d      	ldr	r2, [pc, #372]	; (400774 <main+0x270>)
  400600:	7013      	strb	r3, [r2, #0]
  400602:	e005      	b.n	400610 <main+0x10c>
				}
				break;
			case SL_SAMPLING:
				//mk_sound();
				if (buffer_full) 
  400604:	4b60      	ldr	r3, [pc, #384]	; (400788 <main+0x284>)
  400606:	781b      	ldrb	r3, [r3, #0]
  400608:	2b00      	cmp	r3, #0
  40060a:	d13a      	bne.n	400682 <main+0x17e>
					tc_stop(TC0, 0);
					state = SL_WRITING;
					spi_slave_initialize();
				}

				restart();
  40060c:	4b5f      	ldr	r3, [pc, #380]	; (40078c <main+0x288>)
  40060e:	4798      	blx	r3
		switch (state){
  400610:	4a58      	ldr	r2, [pc, #352]	; (400774 <main+0x270>)
  400612:	7813      	ldrb	r3, [r2, #0]
  400614:	b2db      	uxtb	r3, r3
  400616:	2b01      	cmp	r3, #1
  400618:	d0f4      	beq.n	400604 <main+0x100>
  40061a:	2b00      	cmp	r3, #0
  40061c:	d0e4      	beq.n	4005e8 <main+0xe4>
  40061e:	2b02      	cmp	r3, #2
  400620:	d1f7      	bne.n	400612 <main+0x10e>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400622:	6beb      	ldr	r3, [r5, #60]	; 0x3c
				break;

			case SL_WRITING:
				ch_select = ioport_get_pin_level(ch_select_pin);
  400624:	f3c3 7340 	ubfx	r3, r3, #29, #1
  400628:	4a59      	ldr	r2, [pc, #356]	; (400790 <main+0x28c>)
  40062a:	7013      	strb	r3, [r2, #0]
				if(channel_to_write != ch_select)
  40062c:	4b59      	ldr	r3, [pc, #356]	; (400794 <main+0x290>)
  40062e:	781b      	ldrb	r3, [r3, #0]
  400630:	7812      	ldrb	r2, [r2, #0]
  400632:	b2db      	uxtb	r3, r3
  400634:	4293      	cmp	r3, r2
  400636:	d012      	beq.n	40065e <main+0x15a>
				{
					restart();
  400638:	4b54      	ldr	r3, [pc, #336]	; (40078c <main+0x288>)
  40063a:	4798      	blx	r3
					channel_to_write = ch_select;
  40063c:	4b54      	ldr	r3, [pc, #336]	; (400790 <main+0x28c>)
  40063e:	781b      	ldrb	r3, [r3, #0]
  400640:	b2db      	uxtb	r3, r3
  400642:	4a54      	ldr	r2, [pc, #336]	; (400794 <main+0x290>)
  400644:	7013      	strb	r3, [r2, #0]
					i = 0;
  400646:	2300      	movs	r3, #0
  400648:	4a53      	ldr	r2, [pc, #332]	; (400798 <main+0x294>)
  40064a:	6013      	str	r3, [r2, #0]
					ch_written = false;
  40064c:	4a53      	ldr	r2, [pc, #332]	; (40079c <main+0x298>)
  40064e:	7013      	strb	r3, [r2, #0]
  400650:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400654:	4b52      	ldr	r3, [pc, #328]	; (4007a0 <main+0x29c>)
  400656:	601a      	str	r2, [r3, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400658:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40065c:	636b      	str	r3, [r5, #52]	; 0x34
					NVIC_EnableIRQ(SPI_IRQn);
					ioport_set_pin_level(is_written_pin, 0);
				}
				
				if(ch_written)
  40065e:	4b4f      	ldr	r3, [pc, #316]	; (40079c <main+0x298>)
  400660:	781b      	ldrb	r3, [r3, #0]
  400662:	b15b      	cbz	r3, 40067c <main+0x178>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400668:	632b      	str	r3, [r5, #48]	; 0x30
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40066a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40066e:	4b4c      	ldr	r3, [pc, #304]	; (4007a0 <main+0x29c>)
  400670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400678:	f3bf 8f6f 	isb	sy
				{
					ioport_set_pin_level(is_written_pin, 1);
					NVIC_DisableIRQ(SPI_IRQn);
				}
				
				restart();
  40067c:	4b43      	ldr	r3, [pc, #268]	; (40078c <main+0x288>)
  40067e:	4798      	blx	r3
				break;
  400680:	e7c6      	b.n	400610 <main+0x10c>
  400682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400686:	6333      	str	r3, [r6, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400688:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
  40068c:	6374      	str	r4, [r6, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40068e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400692:	632b      	str	r3, [r5, #48]	; 0x30
					tc_stop(TC0, 0);
  400694:	2100      	movs	r1, #0
  400696:	4843      	ldr	r0, [pc, #268]	; (4007a4 <main+0x2a0>)
  400698:	4b43      	ldr	r3, [pc, #268]	; (4007a8 <main+0x2a4>)
  40069a:	4798      	blx	r3
					state = SL_WRITING;
  40069c:	f04f 0902 	mov.w	r9, #2
  4006a0:	4b34      	ldr	r3, [pc, #208]	; (400774 <main+0x270>)
  4006a2:	f883 9000 	strb.w	r9, [r3]
  4006a6:	4b3e      	ldr	r3, [pc, #248]	; (4007a0 <main+0x29c>)
  4006a8:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4006ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006b0:	f3bf 8f6f 	isb	sy
  4006b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4006bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4006c0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4006c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4006c8:	f04f 0800 	mov.w	r8, #0
  4006cc:	f883 8313 	strb.w	r8, [r3, #787]	; 0x313
	spi_enable_clock(SPI_SLAVE_BASE);
  4006d0:	4c36      	ldr	r4, [pc, #216]	; (4007ac <main+0x2a8>)
  4006d2:	4620      	mov	r0, r4
  4006d4:	4b36      	ldr	r3, [pc, #216]	; (4007b0 <main+0x2ac>)
  4006d6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4006d8:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4006dc:	f04f 0980 	mov.w	r9, #128	; 0x80
  4006e0:	f8c4 9000 	str.w	r9, [r4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  4006e4:	6863      	ldr	r3, [r4, #4]
  4006e6:	f023 0301 	bic.w	r3, r3, #1
  4006ea:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4006ec:	6863      	ldr	r3, [r4, #4]
  4006ee:	f043 0310 	orr.w	r3, r3, #16
  4006f2:	6063      	str	r3, [r4, #4]
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
  4006f4:	210e      	movs	r1, #14
  4006f6:	4620      	mov	r0, r4
  4006f8:	4b2e      	ldr	r3, [pc, #184]	; (4007b4 <main+0x2b0>)
  4006fa:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  4006fc:	4642      	mov	r2, r8
  4006fe:	4641      	mov	r1, r8
  400700:	4620      	mov	r0, r4
  400702:	4b2d      	ldr	r3, [pc, #180]	; (4007b8 <main+0x2b4>)
  400704:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400706:	4642      	mov	r2, r8
  400708:	4641      	mov	r1, r8
  40070a:	4620      	mov	r0, r4
  40070c:	4b2b      	ldr	r3, [pc, #172]	; (4007bc <main+0x2b8>)
  40070e:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, BITS_PER_TRANSFER);
  400710:	464a      	mov	r2, r9
  400712:	4641      	mov	r1, r8
  400714:	4620      	mov	r0, r4
  400716:	4b2a      	ldr	r3, [pc, #168]	; (4007c0 <main+0x2bc>)
  400718:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  40071a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40071e:	6163      	str	r3, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400720:	2301      	movs	r3, #1
  400722:	6023      	str	r3, [r4, #0]
  400724:	e772      	b.n	40060c <main+0x108>
  400726:	bf00      	nop
  400728:	004007c5 	.word	0x004007c5
  40072c:	004008b5 	.word	0x004008b5
  400730:	00400ea5 	.word	0x00400ea5
  400734:	400e0600 	.word	0x400e0600
  400738:	20005754 	.word	0x20005754
  40073c:	00400301 	.word	0x00400301
  400740:	20005750 	.word	0x20005750
  400744:	00400279 	.word	0x00400279
  400748:	2000574c 	.word	0x2000574c
  40074c:	07270e00 	.word	0x07270e00
  400750:	00401055 	.word	0x00401055
  400754:	20000008 	.word	0x20000008
  400758:	0040145d 	.word	0x0040145d
  40075c:	400b0000 	.word	0x400b0000
  400760:	00400c85 	.word	0x00400c85
  400764:	00400b4d 	.word	0x00400b4d
  400768:	00400b89 	.word	0x00400b89
  40076c:	00400381 	.word	0x00400381
  400770:	400e1200 	.word	0x400e1200
  400774:	20005740 	.word	0x20005740
  400778:	00400165 	.word	0x00400165
  40077c:	400e1400 	.word	0x400e1400
  400780:	400e0e00 	.word	0x400e0e00
  400784:	20000868 	.word	0x20000868
  400788:	20000869 	.word	0x20000869
  40078c:	00400201 	.word	0x00400201
  400790:	20000000 	.word	0x20000000
  400794:	20000001 	.word	0x20000001
  400798:	2000568c 	.word	0x2000568c
  40079c:	2000086a 	.word	0x2000086a
  4007a0:	e000e100 	.word	0xe000e100
  4007a4:	40090000 	.word	0x40090000
  4007a8:	00400fc5 	.word	0x00400fc5
  4007ac:	40088000 	.word	0x40088000
  4007b0:	00400ef9 	.word	0x00400ef9
  4007b4:	00400f09 	.word	0x00400f09
  4007b8:	00400f53 	.word	0x00400f53
  4007bc:	00400f71 	.word	0x00400f71
  4007c0:	00400f8f 	.word	0x00400f8f

004007c4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4007c4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4007c6:	480e      	ldr	r0, [pc, #56]	; (400800 <sysclk_init+0x3c>)
  4007c8:	4b0e      	ldr	r3, [pc, #56]	; (400804 <sysclk_init+0x40>)
  4007ca:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4007cc:	213e      	movs	r1, #62	; 0x3e
  4007ce:	2000      	movs	r0, #0
  4007d0:	4b0d      	ldr	r3, [pc, #52]	; (400808 <sysclk_init+0x44>)
  4007d2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4007d4:	4c0d      	ldr	r4, [pc, #52]	; (40080c <sysclk_init+0x48>)
  4007d6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4007d8:	2800      	cmp	r0, #0
  4007da:	d0fc      	beq.n	4007d6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4007dc:	4b0c      	ldr	r3, [pc, #48]	; (400810 <sysclk_init+0x4c>)
  4007de:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4007e0:	4a0c      	ldr	r2, [pc, #48]	; (400814 <sysclk_init+0x50>)
  4007e2:	4b0d      	ldr	r3, [pc, #52]	; (400818 <sysclk_init+0x54>)
  4007e4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4007e6:	4c0d      	ldr	r4, [pc, #52]	; (40081c <sysclk_init+0x58>)
  4007e8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4007ea:	2800      	cmp	r0, #0
  4007ec:	d0fc      	beq.n	4007e8 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4007ee:	2010      	movs	r0, #16
  4007f0:	4b0b      	ldr	r3, [pc, #44]	; (400820 <sysclk_init+0x5c>)
  4007f2:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4007f4:	4b0b      	ldr	r3, [pc, #44]	; (400824 <sysclk_init+0x60>)
  4007f6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4007f8:	4801      	ldr	r0, [pc, #4]	; (400800 <sysclk_init+0x3c>)
  4007fa:	4b02      	ldr	r3, [pc, #8]	; (400804 <sysclk_init+0x40>)
  4007fc:	4798      	blx	r3
  4007fe:	bd10      	pop	{r4, pc}
  400800:	07270e00 	.word	0x07270e00
  400804:	004012b1 	.word	0x004012b1
  400808:	00400e21 	.word	0x00400e21
  40080c:	00400e75 	.word	0x00400e75
  400810:	00400e85 	.word	0x00400e85
  400814:	20133f01 	.word	0x20133f01
  400818:	400e0400 	.word	0x400e0400
  40081c:	00400e95 	.word	0x00400e95
  400820:	00400dbd 	.word	0x00400dbd
  400824:	004011a5 	.word	0x004011a5

00400828 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40082c:	b980      	cbnz	r0, 400850 <_read+0x28>
  40082e:	460c      	mov	r4, r1
  400830:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400832:	2a00      	cmp	r2, #0
  400834:	dd0f      	ble.n	400856 <_read+0x2e>
  400836:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400838:	4e08      	ldr	r6, [pc, #32]	; (40085c <_read+0x34>)
  40083a:	4d09      	ldr	r5, [pc, #36]	; (400860 <_read+0x38>)
  40083c:	6830      	ldr	r0, [r6, #0]
  40083e:	4621      	mov	r1, r4
  400840:	682b      	ldr	r3, [r5, #0]
  400842:	4798      	blx	r3
		ptr++;
  400844:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400846:	42bc      	cmp	r4, r7
  400848:	d1f8      	bne.n	40083c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40084a:	4640      	mov	r0, r8
  40084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400850:	f04f 38ff 	mov.w	r8, #4294967295
  400854:	e7f9      	b.n	40084a <_read+0x22>
	for (; len > 0; --len) {
  400856:	4680      	mov	r8, r0
  400858:	e7f7      	b.n	40084a <_read+0x22>
  40085a:	bf00      	nop
  40085c:	20005754 	.word	0x20005754
  400860:	2000574c 	.word	0x2000574c

00400864 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400864:	3801      	subs	r0, #1
  400866:	2802      	cmp	r0, #2
  400868:	d815      	bhi.n	400896 <_write+0x32>
{
  40086a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40086e:	460e      	mov	r6, r1
  400870:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400872:	b19a      	cbz	r2, 40089c <_write+0x38>
  400874:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400876:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4008b0 <_write+0x4c>
  40087a:	4f0c      	ldr	r7, [pc, #48]	; (4008ac <_write+0x48>)
  40087c:	f8d8 0000 	ldr.w	r0, [r8]
  400880:	f815 1b01 	ldrb.w	r1, [r5], #1
  400884:	683b      	ldr	r3, [r7, #0]
  400886:	4798      	blx	r3
  400888:	2800      	cmp	r0, #0
  40088a:	db0a      	blt.n	4008a2 <_write+0x3e>
  40088c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40088e:	3c01      	subs	r4, #1
  400890:	d1f4      	bne.n	40087c <_write+0x18>
  400892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400896:	f04f 30ff 	mov.w	r0, #4294967295
  40089a:	4770      	bx	lr
	for (; len != 0; --len) {
  40089c:	4610      	mov	r0, r2
  40089e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4008a2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008aa:	bf00      	nop
  4008ac:	20005750 	.word	0x20005750
  4008b0:	20005754 	.word	0x20005754

004008b4 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4008b4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4008b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4008ba:	4b6d      	ldr	r3, [pc, #436]	; (400a70 <board_init+0x1bc>)
  4008bc:	605a      	str	r2, [r3, #4]
  4008be:	2009      	movs	r0, #9
  4008c0:	4c6c      	ldr	r4, [pc, #432]	; (400a74 <board_init+0x1c0>)
  4008c2:	47a0      	blx	r4
  4008c4:	200a      	movs	r0, #10
  4008c6:	47a0      	blx	r4
  4008c8:	200b      	movs	r0, #11
  4008ca:	47a0      	blx	r4
  4008cc:	200c      	movs	r0, #12
  4008ce:	47a0      	blx	r4
  4008d0:	200d      	movs	r0, #13
  4008d2:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008d4:	4b68      	ldr	r3, [pc, #416]	; (400a78 <board_init+0x1c4>)
  4008d6:	2201      	movs	r2, #1
  4008d8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008de:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008e0:	4966      	ldr	r1, [pc, #408]	; (400a7c <board_init+0x1c8>)
  4008e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4008e6:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008e8:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008ec:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4008f2:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008f4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008f8:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008fa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4008fe:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400900:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400904:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400906:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40090a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40090c:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40090e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400912:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400914:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400918:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40091a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40091c:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400920:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400922:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400926:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40092a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40092e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400930:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400934:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40093a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40093c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40093e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400942:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400944:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400948:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40094a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40094c:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400950:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  400952:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400956:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  40095a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40095e:	2202      	movs	r2, #2
  400960:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400962:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400966:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400968:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40096c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40096e:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400974:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400976:	f021 0102 	bic.w	r1, r1, #2
  40097a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40097c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40097e:	f021 0102 	bic.w	r1, r1, #2
  400982:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400984:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400988:	2204      	movs	r2, #4
  40098a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40098c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400990:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400996:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400998:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40099a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40099e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4009a0:	f021 0104 	bic.w	r1, r1, #4
  4009a4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009a6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009a8:	f021 0104 	bic.w	r1, r1, #4
  4009ac:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4009ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4009b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4009b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4009ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4009be:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4009c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009c4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009c6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4009ce:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4009d2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009d4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009d6:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4009da:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4009dc:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4009de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4009e2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4009e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009e8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009ea:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4009f2:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4009f6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009fa:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4009fe:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a00:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a06:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a0c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a0e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a14:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400a16:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400a1a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a1c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400a1e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400a22:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a24:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400a2a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a30:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a32:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a38:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400a3a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400a3e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a40:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400a42:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400a46:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a48:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400a4e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a54:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a56:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a5c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400a5e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400a62:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a64:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400a66:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400a6a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a6c:	605a      	str	r2, [r3, #4]
  400a6e:	bd10      	pop	{r4, pc}
  400a70:	400e1850 	.word	0x400e1850
  400a74:	00400ea5 	.word	0x00400ea5
  400a78:	400e0e00 	.word	0x400e0e00
  400a7c:	400e1400 	.word	0x400e1400

00400a80 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400a80:	b570      	push	{r4, r5, r6, lr}
  400a82:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400a84:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400a86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400a88:	4013      	ands	r3, r2
  400a8a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400a8c:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400a8e:	4d21      	ldr	r5, [pc, #132]	; (400b14 <afec_process_callback+0x94>)
  400a90:	42a8      	cmp	r0, r5
  400a92:	bf14      	ite	ne
  400a94:	2500      	movne	r5, #0
  400a96:	2501      	moveq	r5, #1
  400a98:	006e      	lsls	r6, r5, #1
  400a9a:	442e      	add	r6, r5
  400a9c:	e00b      	b.n	400ab6 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400a9e:	2c14      	cmp	r4, #20
  400aa0:	d824      	bhi.n	400aec <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  400aa2:	9a01      	ldr	r2, [sp, #4]
  400aa4:	f104 0108 	add.w	r1, r4, #8
  400aa8:	2301      	movs	r3, #1
  400aaa:	408b      	lsls	r3, r1
  400aac:	4213      	tst	r3, r2
  400aae:	d113      	bne.n	400ad8 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400ab0:	3401      	adds	r4, #1
  400ab2:	2c17      	cmp	r4, #23
  400ab4:	d02b      	beq.n	400b0e <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  400ab6:	2c0f      	cmp	r4, #15
  400ab8:	d8f1      	bhi.n	400a9e <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400aba:	9a01      	ldr	r2, [sp, #4]
  400abc:	2301      	movs	r3, #1
  400abe:	40a3      	lsls	r3, r4
  400ac0:	4213      	tst	r3, r2
  400ac2:	d0f5      	beq.n	400ab0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400ac4:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400ac8:	4423      	add	r3, r4
  400aca:	4a13      	ldr	r2, [pc, #76]	; (400b18 <afec_process_callback+0x98>)
  400acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400ad0:	2b00      	cmp	r3, #0
  400ad2:	d0ed      	beq.n	400ab0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400ad4:	4798      	blx	r3
  400ad6:	e7eb      	b.n	400ab0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400ad8:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400adc:	4423      	add	r3, r4
  400ade:	4a0e      	ldr	r2, [pc, #56]	; (400b18 <afec_process_callback+0x98>)
  400ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400ae4:	2b00      	cmp	r3, #0
  400ae6:	d0e3      	beq.n	400ab0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400ae8:	4798      	blx	r3
  400aea:	e7e1      	b.n	400ab0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400aec:	9a01      	ldr	r2, [sp, #4]
  400aee:	f104 0109 	add.w	r1, r4, #9
  400af2:	2301      	movs	r3, #1
  400af4:	408b      	lsls	r3, r1
  400af6:	4213      	tst	r3, r2
  400af8:	d0da      	beq.n	400ab0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400afa:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400afe:	4423      	add	r3, r4
  400b00:	4a05      	ldr	r2, [pc, #20]	; (400b18 <afec_process_callback+0x98>)
  400b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400b06:	2b00      	cmp	r3, #0
  400b08:	d0d2      	beq.n	400ab0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400b0a:	4798      	blx	r3
  400b0c:	e7d0      	b.n	400ab0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400b0e:	b002      	add	sp, #8
  400b10:	bd70      	pop	{r4, r5, r6, pc}
  400b12:	bf00      	nop
  400b14:	400b4000 	.word	0x400b4000
  400b18:	20005758 	.word	0x20005758

00400b1c <afec_ch_set_config>:
{
  400b1c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400b1e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400b20:	2301      	movs	r3, #1
  400b22:	408b      	lsls	r3, r1
  400b24:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400b28:	7815      	ldrb	r5, [r2, #0]
  400b2a:	2d00      	cmp	r5, #0
  400b2c:	bf08      	it	eq
  400b2e:	2300      	moveq	r3, #0
  400b30:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400b32:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400b34:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400b36:	004b      	lsls	r3, r1, #1
  400b38:	2103      	movs	r1, #3
  400b3a:	4099      	lsls	r1, r3
  400b3c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400b40:	7851      	ldrb	r1, [r2, #1]
  400b42:	4099      	lsls	r1, r3
  400b44:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400b46:	6541      	str	r1, [r0, #84]	; 0x54
}
  400b48:	bc30      	pop	{r4, r5}
  400b4a:	4770      	bx	lr

00400b4c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400b4c:	2200      	movs	r2, #0
  400b4e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400b50:	4b08      	ldr	r3, [pc, #32]	; (400b74 <afec_get_config_defaults+0x28>)
  400b52:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400b54:	4b08      	ldr	r3, [pc, #32]	; (400b78 <afec_get_config_defaults+0x2c>)
  400b56:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400b58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400b5c:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400b5e:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400b60:	2302      	movs	r3, #2
  400b62:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400b64:	2301      	movs	r3, #1
  400b66:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400b68:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400b6a:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400b6c:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400b6e:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400b70:	7683      	strb	r3, [r0, #26]
  400b72:	4770      	bx	lr
  400b74:	07270e00 	.word	0x07270e00
  400b78:	005b8d80 	.word	0x005b8d80

00400b7c <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400b7c:	2300      	movs	r3, #0
  400b7e:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400b80:	2301      	movs	r3, #1
  400b82:	7043      	strb	r3, [r0, #1]
  400b84:	4770      	bx	lr
	...

00400b88 <afec_init>:
	return afec->AFEC_ISR;
  400b88:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400b8a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b8e:	d001      	beq.n	400b94 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400b90:	2019      	movs	r0, #25
  400b92:	4770      	bx	lr
{
  400b94:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400b96:	2301      	movs	r3, #1
  400b98:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400b9a:	7dcb      	ldrb	r3, [r1, #23]
  400b9c:	2b00      	cmp	r3, #0
  400b9e:	bf14      	ite	ne
  400ba0:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400ba4:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400ba6:	7d8b      	ldrb	r3, [r1, #22]
  400ba8:	2b00      	cmp	r3, #0
  400baa:	bf14      	ite	ne
  400bac:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  400bb0:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  400bb2:	7d0b      	ldrb	r3, [r1, #20]
  400bb4:	061b      	lsls	r3, r3, #24
  400bb6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400bba:	690a      	ldr	r2, [r1, #16]
  400bbc:	68ce      	ldr	r6, [r1, #12]
  400bbe:	4332      	orrs	r2, r6
  400bc0:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  400bc2:	7d4a      	ldrb	r2, [r1, #21]
  400bc4:	0712      	lsls	r2, r2, #28
  400bc6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400bca:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  400bcc:	688a      	ldr	r2, [r1, #8]
  400bce:	0056      	lsls	r6, r2, #1
  400bd0:	684a      	ldr	r2, [r1, #4]
  400bd2:	fbb2 f2f6 	udiv	r2, r2, r6
  400bd6:	3a01      	subs	r2, #1
  400bd8:	0212      	lsls	r2, r2, #8
  400bda:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400bdc:	4313      	orrs	r3, r2
  400bde:	432b      	orrs	r3, r5
  400be0:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  400be2:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400be4:	7e0b      	ldrb	r3, [r1, #24]
  400be6:	2b00      	cmp	r3, #0
  400be8:	bf14      	ite	ne
  400bea:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400bee:	2300      	moveq	r3, #0
  400bf0:	680a      	ldr	r2, [r1, #0]
  400bf2:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400bf4:	7e4a      	ldrb	r2, [r1, #25]
  400bf6:	2a00      	cmp	r2, #0
  400bf8:	bf14      	ite	ne
  400bfa:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400bfe:	2200      	moveq	r2, #0
			(config->resolution) |
  400c00:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400c02:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  400c04:	7e8b      	ldrb	r3, [r1, #26]
  400c06:	021b      	lsls	r3, r3, #8
  400c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400c0c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400c10:	4b0e      	ldr	r3, [pc, #56]	; (400c4c <afec_init+0xc4>)
  400c12:	4298      	cmp	r0, r3
  400c14:	d005      	beq.n	400c22 <afec_init+0x9a>
	if(afec == AFEC1) {
  400c16:	4b0e      	ldr	r3, [pc, #56]	; (400c50 <afec_init+0xc8>)
  400c18:	4298      	cmp	r0, r3
  400c1a:	d00c      	beq.n	400c36 <afec_init+0xae>
	return STATUS_OK;
  400c1c:	2000      	movs	r0, #0
}
  400c1e:	bc70      	pop	{r4, r5, r6}
  400c20:	4770      	bx	lr
  400c22:	4b0c      	ldr	r3, [pc, #48]	; (400c54 <afec_init+0xcc>)
  400c24:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400c28:	2200      	movs	r2, #0
  400c2a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400c2e:	428b      	cmp	r3, r1
  400c30:	d1fb      	bne.n	400c2a <afec_init+0xa2>
	return STATUS_OK;
  400c32:	2000      	movs	r0, #0
  400c34:	e7f3      	b.n	400c1e <afec_init+0x96>
  400c36:	4b08      	ldr	r3, [pc, #32]	; (400c58 <afec_init+0xd0>)
  400c38:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400c3c:	2200      	movs	r2, #0
  400c3e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400c42:	428b      	cmp	r3, r1
  400c44:	d1fb      	bne.n	400c3e <afec_init+0xb6>
	return STATUS_OK;
  400c46:	2000      	movs	r0, #0
  400c48:	e7e9      	b.n	400c1e <afec_init+0x96>
  400c4a:	bf00      	nop
  400c4c:	400b0000 	.word	0x400b0000
  400c50:	400b4000 	.word	0x400b4000
  400c54:	20005754 	.word	0x20005754
  400c58:	200057b0 	.word	0x200057b0

00400c5c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400c5c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400c5e:	4802      	ldr	r0, [pc, #8]	; (400c68 <AFEC0_Handler+0xc>)
  400c60:	4b02      	ldr	r3, [pc, #8]	; (400c6c <AFEC0_Handler+0x10>)
  400c62:	4798      	blx	r3
  400c64:	bd08      	pop	{r3, pc}
  400c66:	bf00      	nop
  400c68:	400b0000 	.word	0x400b0000
  400c6c:	00400a81 	.word	0x00400a81

00400c70 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400c70:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400c72:	4802      	ldr	r0, [pc, #8]	; (400c7c <AFEC1_Handler+0xc>)
  400c74:	4b02      	ldr	r3, [pc, #8]	; (400c80 <AFEC1_Handler+0x10>)
  400c76:	4798      	blx	r3
  400c78:	bd08      	pop	{r3, pc}
  400c7a:	bf00      	nop
  400c7c:	400b4000 	.word	0x400b4000
  400c80:	00400a81 	.word	0x00400a81

00400c84 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400c84:	b500      	push	{lr}
  400c86:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400c88:	4b13      	ldr	r3, [pc, #76]	; (400cd8 <afec_enable+0x54>)
  400c8a:	4298      	cmp	r0, r3
  400c8c:	bf0c      	ite	eq
  400c8e:	201f      	moveq	r0, #31
  400c90:	201e      	movne	r0, #30
  400c92:	4b12      	ldr	r3, [pc, #72]	; (400cdc <afec_enable+0x58>)
  400c94:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400c96:	4b12      	ldr	r3, [pc, #72]	; (400ce0 <afec_enable+0x5c>)
  400c98:	789b      	ldrb	r3, [r3, #2]
  400c9a:	2bff      	cmp	r3, #255	; 0xff
  400c9c:	d01a      	beq.n	400cd4 <afec_enable+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400c9e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400ca2:	fab3 f383 	clz	r3, r3
  400ca6:	095b      	lsrs	r3, r3, #5
  400ca8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400caa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400cac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400cb0:	2200      	movs	r2, #0
  400cb2:	4b0c      	ldr	r3, [pc, #48]	; (400ce4 <afec_enable+0x60>)
  400cb4:	701a      	strb	r2, [r3, #0]
	return flags;
  400cb6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400cb8:	4a09      	ldr	r2, [pc, #36]	; (400ce0 <afec_enable+0x5c>)
  400cba:	7893      	ldrb	r3, [r2, #2]
  400cbc:	3301      	adds	r3, #1
  400cbe:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400cc0:	b129      	cbz	r1, 400cce <afec_enable+0x4a>
		cpu_irq_enable();
  400cc2:	2201      	movs	r2, #1
  400cc4:	4b07      	ldr	r3, [pc, #28]	; (400ce4 <afec_enable+0x60>)
  400cc6:	701a      	strb	r2, [r3, #0]
  400cc8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400ccc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400cce:	b003      	add	sp, #12
  400cd0:	f85d fb04 	ldr.w	pc, [sp], #4
  400cd4:	e7fe      	b.n	400cd4 <afec_enable+0x50>
  400cd6:	bf00      	nop
  400cd8:	400b4000 	.word	0x400b4000
  400cdc:	00400ea5 	.word	0x00400ea5
  400ce0:	20005744 	.word	0x20005744
  400ce4:	20000002 	.word	0x20000002

00400ce8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400ce8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400cea:	4770      	bx	lr

00400cec <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400cec:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400cee:	4770      	bx	lr

00400cf0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400cf4:	4681      	mov	r9, r0
  400cf6:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400cf8:	4b12      	ldr	r3, [pc, #72]	; (400d44 <pio_handler_process+0x54>)
  400cfa:	4798      	blx	r3
  400cfc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400cfe:	4648      	mov	r0, r9
  400d00:	4b11      	ldr	r3, [pc, #68]	; (400d48 <pio_handler_process+0x58>)
  400d02:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400d04:	4005      	ands	r5, r0
  400d06:	d013      	beq.n	400d30 <pio_handler_process+0x40>
  400d08:	4c10      	ldr	r4, [pc, #64]	; (400d4c <pio_handler_process+0x5c>)
  400d0a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400d0e:	e003      	b.n	400d18 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d10:	42b4      	cmp	r4, r6
  400d12:	d00d      	beq.n	400d30 <pio_handler_process+0x40>
  400d14:	3410      	adds	r4, #16
		while (status != 0) {
  400d16:	b15d      	cbz	r5, 400d30 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400d18:	6820      	ldr	r0, [r4, #0]
  400d1a:	42b8      	cmp	r0, r7
  400d1c:	d1f8      	bne.n	400d10 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d1e:	6861      	ldr	r1, [r4, #4]
  400d20:	4229      	tst	r1, r5
  400d22:	d0f5      	beq.n	400d10 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d24:	68e3      	ldr	r3, [r4, #12]
  400d26:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400d28:	6863      	ldr	r3, [r4, #4]
  400d2a:	ea25 0503 	bic.w	r5, r5, r3
  400d2e:	e7ef      	b.n	400d10 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400d30:	4b07      	ldr	r3, [pc, #28]	; (400d50 <pio_handler_process+0x60>)
  400d32:	681b      	ldr	r3, [r3, #0]
  400d34:	b123      	cbz	r3, 400d40 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400d36:	4b07      	ldr	r3, [pc, #28]	; (400d54 <pio_handler_process+0x64>)
  400d38:	681b      	ldr	r3, [r3, #0]
  400d3a:	b10b      	cbz	r3, 400d40 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400d3c:	4648      	mov	r0, r9
  400d3e:	4798      	blx	r3
  400d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d44:	00400ce9 	.word	0x00400ce9
  400d48:	00400ced 	.word	0x00400ced
  400d4c:	20005694 	.word	0x20005694
  400d50:	20005810 	.word	0x20005810
  400d54:	20005704 	.word	0x20005704

00400d58 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d58:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d5a:	2109      	movs	r1, #9
  400d5c:	4801      	ldr	r0, [pc, #4]	; (400d64 <PIOA_Handler+0xc>)
  400d5e:	4b02      	ldr	r3, [pc, #8]	; (400d68 <PIOA_Handler+0x10>)
  400d60:	4798      	blx	r3
  400d62:	bd08      	pop	{r3, pc}
  400d64:	400e0e00 	.word	0x400e0e00
  400d68:	00400cf1 	.word	0x00400cf1

00400d6c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d6c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d6e:	210a      	movs	r1, #10
  400d70:	4801      	ldr	r0, [pc, #4]	; (400d78 <PIOB_Handler+0xc>)
  400d72:	4b02      	ldr	r3, [pc, #8]	; (400d7c <PIOB_Handler+0x10>)
  400d74:	4798      	blx	r3
  400d76:	bd08      	pop	{r3, pc}
  400d78:	400e1000 	.word	0x400e1000
  400d7c:	00400cf1 	.word	0x00400cf1

00400d80 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d80:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d82:	210b      	movs	r1, #11
  400d84:	4801      	ldr	r0, [pc, #4]	; (400d8c <PIOC_Handler+0xc>)
  400d86:	4b02      	ldr	r3, [pc, #8]	; (400d90 <PIOC_Handler+0x10>)
  400d88:	4798      	blx	r3
  400d8a:	bd08      	pop	{r3, pc}
  400d8c:	400e1200 	.word	0x400e1200
  400d90:	00400cf1 	.word	0x00400cf1

00400d94 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400d94:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400d96:	210c      	movs	r1, #12
  400d98:	4801      	ldr	r0, [pc, #4]	; (400da0 <PIOD_Handler+0xc>)
  400d9a:	4b02      	ldr	r3, [pc, #8]	; (400da4 <PIOD_Handler+0x10>)
  400d9c:	4798      	blx	r3
  400d9e:	bd08      	pop	{r3, pc}
  400da0:	400e1400 	.word	0x400e1400
  400da4:	00400cf1 	.word	0x00400cf1

00400da8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400da8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400daa:	210d      	movs	r1, #13
  400dac:	4801      	ldr	r0, [pc, #4]	; (400db4 <PIOE_Handler+0xc>)
  400dae:	4b02      	ldr	r3, [pc, #8]	; (400db8 <PIOE_Handler+0x10>)
  400db0:	4798      	blx	r3
  400db2:	bd08      	pop	{r3, pc}
  400db4:	400e1600 	.word	0x400e1600
  400db8:	00400cf1 	.word	0x00400cf1

00400dbc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400dbc:	4a17      	ldr	r2, [pc, #92]	; (400e1c <pmc_switch_mck_to_pllack+0x60>)
  400dbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400dc4:	4318      	orrs	r0, r3
  400dc6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dc8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400dca:	f013 0f08 	tst.w	r3, #8
  400dce:	d10a      	bne.n	400de6 <pmc_switch_mck_to_pllack+0x2a>
  400dd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400dd4:	4911      	ldr	r1, [pc, #68]	; (400e1c <pmc_switch_mck_to_pllack+0x60>)
  400dd6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400dd8:	f012 0f08 	tst.w	r2, #8
  400ddc:	d103      	bne.n	400de6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dde:	3b01      	subs	r3, #1
  400de0:	d1f9      	bne.n	400dd6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400de2:	2001      	movs	r0, #1
  400de4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400de6:	4a0d      	ldr	r2, [pc, #52]	; (400e1c <pmc_switch_mck_to_pllack+0x60>)
  400de8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400dea:	f023 0303 	bic.w	r3, r3, #3
  400dee:	f043 0302 	orr.w	r3, r3, #2
  400df2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400df4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400df6:	f013 0f08 	tst.w	r3, #8
  400dfa:	d10a      	bne.n	400e12 <pmc_switch_mck_to_pllack+0x56>
  400dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e00:	4906      	ldr	r1, [pc, #24]	; (400e1c <pmc_switch_mck_to_pllack+0x60>)
  400e02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400e04:	f012 0f08 	tst.w	r2, #8
  400e08:	d105      	bne.n	400e16 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e0a:	3b01      	subs	r3, #1
  400e0c:	d1f9      	bne.n	400e02 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400e0e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400e10:	4770      	bx	lr
	return 0;
  400e12:	2000      	movs	r0, #0
  400e14:	4770      	bx	lr
  400e16:	2000      	movs	r0, #0
  400e18:	4770      	bx	lr
  400e1a:	bf00      	nop
  400e1c:	400e0400 	.word	0x400e0400

00400e20 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400e20:	b9c8      	cbnz	r0, 400e56 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e22:	4a11      	ldr	r2, [pc, #68]	; (400e68 <pmc_switch_mainck_to_xtal+0x48>)
  400e24:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e26:	0209      	lsls	r1, r1, #8
  400e28:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e2a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400e2e:	f023 0303 	bic.w	r3, r3, #3
  400e32:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e36:	f043 0301 	orr.w	r3, r3, #1
  400e3a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e3c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e3e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e40:	f013 0f01 	tst.w	r3, #1
  400e44:	d0fb      	beq.n	400e3e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e46:	4a08      	ldr	r2, [pc, #32]	; (400e68 <pmc_switch_mainck_to_xtal+0x48>)
  400e48:	6a13      	ldr	r3, [r2, #32]
  400e4a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400e52:	6213      	str	r3, [r2, #32]
  400e54:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e56:	4904      	ldr	r1, [pc, #16]	; (400e68 <pmc_switch_mainck_to_xtal+0x48>)
  400e58:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400e5a:	4a04      	ldr	r2, [pc, #16]	; (400e6c <pmc_switch_mainck_to_xtal+0x4c>)
  400e5c:	401a      	ands	r2, r3
  400e5e:	4b04      	ldr	r3, [pc, #16]	; (400e70 <pmc_switch_mainck_to_xtal+0x50>)
  400e60:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400e62:	620b      	str	r3, [r1, #32]
  400e64:	4770      	bx	lr
  400e66:	bf00      	nop
  400e68:	400e0400 	.word	0x400e0400
  400e6c:	fec8fffc 	.word	0xfec8fffc
  400e70:	01370002 	.word	0x01370002

00400e74 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e74:	4b02      	ldr	r3, [pc, #8]	; (400e80 <pmc_osc_is_ready_mainck+0xc>)
  400e76:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e78:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e7c:	4770      	bx	lr
  400e7e:	bf00      	nop
  400e80:	400e0400 	.word	0x400e0400

00400e84 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e88:	4b01      	ldr	r3, [pc, #4]	; (400e90 <pmc_disable_pllack+0xc>)
  400e8a:	629a      	str	r2, [r3, #40]	; 0x28
  400e8c:	4770      	bx	lr
  400e8e:	bf00      	nop
  400e90:	400e0400 	.word	0x400e0400

00400e94 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e94:	4b02      	ldr	r3, [pc, #8]	; (400ea0 <pmc_is_locked_pllack+0xc>)
  400e96:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e98:	f000 0002 	and.w	r0, r0, #2
  400e9c:	4770      	bx	lr
  400e9e:	bf00      	nop
  400ea0:	400e0400 	.word	0x400e0400

00400ea4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400ea4:	282f      	cmp	r0, #47	; 0x2f
  400ea6:	d81e      	bhi.n	400ee6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400ea8:	281f      	cmp	r0, #31
  400eaa:	d80c      	bhi.n	400ec6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400eac:	4b11      	ldr	r3, [pc, #68]	; (400ef4 <pmc_enable_periph_clk+0x50>)
  400eae:	699a      	ldr	r2, [r3, #24]
  400eb0:	2301      	movs	r3, #1
  400eb2:	4083      	lsls	r3, r0
  400eb4:	4393      	bics	r3, r2
  400eb6:	d018      	beq.n	400eea <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400eb8:	2301      	movs	r3, #1
  400eba:	fa03 f000 	lsl.w	r0, r3, r0
  400ebe:	4b0d      	ldr	r3, [pc, #52]	; (400ef4 <pmc_enable_periph_clk+0x50>)
  400ec0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400ec2:	2000      	movs	r0, #0
  400ec4:	4770      	bx	lr
		ul_id -= 32;
  400ec6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ec8:	4b0a      	ldr	r3, [pc, #40]	; (400ef4 <pmc_enable_periph_clk+0x50>)
  400eca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ece:	2301      	movs	r3, #1
  400ed0:	4083      	lsls	r3, r0
  400ed2:	4393      	bics	r3, r2
  400ed4:	d00b      	beq.n	400eee <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400ed6:	2301      	movs	r3, #1
  400ed8:	fa03 f000 	lsl.w	r0, r3, r0
  400edc:	4b05      	ldr	r3, [pc, #20]	; (400ef4 <pmc_enable_periph_clk+0x50>)
  400ede:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400ee2:	2000      	movs	r0, #0
  400ee4:	4770      	bx	lr
		return 1;
  400ee6:	2001      	movs	r0, #1
  400ee8:	4770      	bx	lr
	return 0;
  400eea:	2000      	movs	r0, #0
  400eec:	4770      	bx	lr
  400eee:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400ef0:	4770      	bx	lr
  400ef2:	bf00      	nop
  400ef4:	400e0400 	.word	0x400e0400

00400ef8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400ef8:	b508      	push	{r3, lr}
  400efa:	2013      	movs	r0, #19
  400efc:	4b01      	ldr	r3, [pc, #4]	; (400f04 <spi_enable_clock+0xc>)
  400efe:	4798      	blx	r3
  400f00:	bd08      	pop	{r3, pc}
  400f02:	bf00      	nop
  400f04:	00400ea5 	.word	0x00400ea5

00400f08 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400f08:	6843      	ldr	r3, [r0, #4]
  400f0a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400f0e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400f10:	6843      	ldr	r3, [r0, #4]
  400f12:	0409      	lsls	r1, r1, #16
  400f14:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400f18:	4319      	orrs	r1, r3
  400f1a:	6041      	str	r1, [r0, #4]
  400f1c:	4770      	bx	lr

00400f1e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400f1e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400f20:	f643 2499 	movw	r4, #15001	; 0x3a99
  400f24:	6905      	ldr	r5, [r0, #16]
  400f26:	f015 0f02 	tst.w	r5, #2
  400f2a:	d103      	bne.n	400f34 <spi_write+0x16>
		if (!timeout--) {
  400f2c:	3c01      	subs	r4, #1
  400f2e:	d1f9      	bne.n	400f24 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400f30:	2001      	movs	r0, #1
  400f32:	e00c      	b.n	400f4e <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400f34:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400f36:	f014 0f02 	tst.w	r4, #2
  400f3a:	d006      	beq.n	400f4a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400f3c:	0412      	lsls	r2, r2, #16
  400f3e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400f42:	4311      	orrs	r1, r2
		if (uc_last) {
  400f44:	b10b      	cbz	r3, 400f4a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400f46:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400f4a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400f4c:	2000      	movs	r0, #0
}
  400f4e:	bc30      	pop	{r4, r5}
  400f50:	4770      	bx	lr

00400f52 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400f52:	b932      	cbnz	r2, 400f62 <spi_set_clock_polarity+0x10>
  400f54:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400f58:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f5a:	f023 0301 	bic.w	r3, r3, #1
  400f5e:	6303      	str	r3, [r0, #48]	; 0x30
  400f60:	4770      	bx	lr
  400f62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400f66:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f68:	f043 0301 	orr.w	r3, r3, #1
  400f6c:	6303      	str	r3, [r0, #48]	; 0x30
  400f6e:	4770      	bx	lr

00400f70 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400f70:	b932      	cbnz	r2, 400f80 <spi_set_clock_phase+0x10>
  400f72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400f76:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f78:	f023 0302 	bic.w	r3, r3, #2
  400f7c:	6303      	str	r3, [r0, #48]	; 0x30
  400f7e:	4770      	bx	lr
  400f80:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400f84:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400f86:	f043 0302 	orr.w	r3, r3, #2
  400f8a:	6303      	str	r3, [r0, #48]	; 0x30
  400f8c:	4770      	bx	lr

00400f8e <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400f8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400f92:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400f98:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400f9a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400f9c:	431a      	orrs	r2, r3
  400f9e:	630a      	str	r2, [r1, #48]	; 0x30
  400fa0:	4770      	bx	lr

00400fa2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400fa2:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400fa4:	0189      	lsls	r1, r1, #6
  400fa6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400fa8:	2402      	movs	r4, #2
  400faa:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400fac:	f04f 31ff 	mov.w	r1, #4294967295
  400fb0:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400fb2:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400fb4:	605a      	str	r2, [r3, #4]
}
  400fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fba:	4770      	bx	lr

00400fbc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400fbc:	0189      	lsls	r1, r1, #6
  400fbe:	2305      	movs	r3, #5
  400fc0:	5043      	str	r3, [r0, r1]
  400fc2:	4770      	bx	lr

00400fc4 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400fc4:	0189      	lsls	r1, r1, #6
  400fc6:	2302      	movs	r3, #2
  400fc8:	5043      	str	r3, [r0, r1]
  400fca:	4770      	bx	lr

00400fcc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400fcc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400fd0:	61ca      	str	r2, [r1, #28]
  400fd2:	4770      	bx	lr

00400fd4 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400fd4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400fd8:	624a      	str	r2, [r1, #36]	; 0x24
  400fda:	4770      	bx	lr

00400fdc <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400fdc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400fe0:	6a08      	ldr	r0, [r1, #32]
}
  400fe2:	4770      	bx	lr

00400fe4 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400fe4:	b4f0      	push	{r4, r5, r6, r7}
  400fe6:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400fe8:	2402      	movs	r4, #2
  400fea:	9401      	str	r4, [sp, #4]
  400fec:	2408      	movs	r4, #8
  400fee:	9402      	str	r4, [sp, #8]
  400ff0:	2420      	movs	r4, #32
  400ff2:	9403      	str	r4, [sp, #12]
  400ff4:	2480      	movs	r4, #128	; 0x80
  400ff6:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400ff8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400ffa:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400ffc:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400ffe:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  401002:	d814      	bhi.n	40102e <tc_find_mck_divisor+0x4a>
  401004:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  401006:	42a0      	cmp	r0, r4
  401008:	d217      	bcs.n	40103a <tc_find_mck_divisor+0x56>
  40100a:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  40100c:	af01      	add	r7, sp, #4
  40100e:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  401012:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  401016:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  401018:	4284      	cmp	r4, r0
  40101a:	d30a      	bcc.n	401032 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  40101c:	4286      	cmp	r6, r0
  40101e:	d90d      	bls.n	40103c <tc_find_mck_divisor+0x58>
			ul_index++) {
  401020:	3501      	adds	r5, #1
	for (ul_index = 0;
  401022:	2d05      	cmp	r5, #5
  401024:	d1f3      	bne.n	40100e <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  401026:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  401028:	b006      	add	sp, #24
  40102a:	bcf0      	pop	{r4, r5, r6, r7}
  40102c:	4770      	bx	lr
			return 0;
  40102e:	2000      	movs	r0, #0
  401030:	e7fa      	b.n	401028 <tc_find_mck_divisor+0x44>
  401032:	2000      	movs	r0, #0
  401034:	e7f8      	b.n	401028 <tc_find_mck_divisor+0x44>
	return 1;
  401036:	2001      	movs	r0, #1
  401038:	e7f6      	b.n	401028 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40103a:	2500      	movs	r5, #0
	if (p_uldiv) {
  40103c:	b12a      	cbz	r2, 40104a <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40103e:	a906      	add	r1, sp, #24
  401040:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  401044:	f851 1c14 	ldr.w	r1, [r1, #-20]
  401048:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  40104a:	2b00      	cmp	r3, #0
  40104c:	d0f3      	beq.n	401036 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40104e:	601d      	str	r5, [r3, #0]
	return 1;
  401050:	2001      	movs	r0, #1
  401052:	e7e9      	b.n	401028 <tc_find_mck_divisor+0x44>

00401054 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  401054:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  401056:	23ac      	movs	r3, #172	; 0xac
  401058:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40105a:	680b      	ldr	r3, [r1, #0]
  40105c:	684a      	ldr	r2, [r1, #4]
  40105e:	fbb3 f3f2 	udiv	r3, r3, r2
  401062:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  401064:	1e5c      	subs	r4, r3, #1
  401066:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40106a:	4294      	cmp	r4, r2
  40106c:	d80c      	bhi.n	401088 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  40106e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401070:	688b      	ldr	r3, [r1, #8]
  401072:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  401074:	f240 2302 	movw	r3, #514	; 0x202
  401078:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40107c:	2350      	movs	r3, #80	; 0x50
  40107e:	6003      	str	r3, [r0, #0]

	return 0;
  401080:	2000      	movs	r0, #0
}
  401082:	f85d 4b04 	ldr.w	r4, [sp], #4
  401086:	4770      	bx	lr
		return 1;
  401088:	2001      	movs	r0, #1
  40108a:	e7fa      	b.n	401082 <uart_init+0x2e>

0040108c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40108c:	6943      	ldr	r3, [r0, #20]
  40108e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401092:	bf1a      	itte	ne
  401094:	61c1      	strne	r1, [r0, #28]
	return 0;
  401096:	2000      	movne	r0, #0
		return 1;
  401098:	2001      	moveq	r0, #1
}
  40109a:	4770      	bx	lr

0040109c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40109c:	6943      	ldr	r3, [r0, #20]
  40109e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4010a2:	bf1d      	ittte	ne
  4010a4:	6983      	ldrne	r3, [r0, #24]
  4010a6:	700b      	strbne	r3, [r1, #0]
	return 0;
  4010a8:	2000      	movne	r0, #0
		return 1;
  4010aa:	2001      	moveq	r0, #1
}
  4010ac:	4770      	bx	lr

004010ae <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4010ae:	6943      	ldr	r3, [r0, #20]
  4010b0:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  4010b4:	bf1d      	ittte	ne
  4010b6:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4010ba:	61c1      	strne	r1, [r0, #28]
	return 0;
  4010bc:	2000      	movne	r0, #0
		return 1;
  4010be:	2001      	moveq	r0, #1
}
  4010c0:	4770      	bx	lr

004010c2 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4010c2:	6943      	ldr	r3, [r0, #20]
  4010c4:	f013 0f01 	tst.w	r3, #1
  4010c8:	d005      	beq.n	4010d6 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4010ca:	6983      	ldr	r3, [r0, #24]
  4010cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4010d0:	600b      	str	r3, [r1, #0]

	return 0;
  4010d2:	2000      	movs	r0, #0
  4010d4:	4770      	bx	lr
		return 1;
  4010d6:	2001      	movs	r0, #1
}
  4010d8:	4770      	bx	lr

004010da <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4010da:	e7fe      	b.n	4010da <Dummy_Handler>

004010dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4010dc:	b500      	push	{lr}
  4010de:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4010e0:	4b25      	ldr	r3, [pc, #148]	; (401178 <Reset_Handler+0x9c>)
  4010e2:	4a26      	ldr	r2, [pc, #152]	; (40117c <Reset_Handler+0xa0>)
  4010e4:	429a      	cmp	r2, r3
  4010e6:	d010      	beq.n	40110a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4010e8:	4b25      	ldr	r3, [pc, #148]	; (401180 <Reset_Handler+0xa4>)
  4010ea:	4a23      	ldr	r2, [pc, #140]	; (401178 <Reset_Handler+0x9c>)
  4010ec:	429a      	cmp	r2, r3
  4010ee:	d20c      	bcs.n	40110a <Reset_Handler+0x2e>
  4010f0:	3b01      	subs	r3, #1
  4010f2:	1a9b      	subs	r3, r3, r2
  4010f4:	f023 0303 	bic.w	r3, r3, #3
  4010f8:	3304      	adds	r3, #4
  4010fa:	4413      	add	r3, r2
  4010fc:	491f      	ldr	r1, [pc, #124]	; (40117c <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  4010fe:	f851 0b04 	ldr.w	r0, [r1], #4
  401102:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401106:	429a      	cmp	r2, r3
  401108:	d1f9      	bne.n	4010fe <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40110a:	4b1e      	ldr	r3, [pc, #120]	; (401184 <Reset_Handler+0xa8>)
  40110c:	4a1e      	ldr	r2, [pc, #120]	; (401188 <Reset_Handler+0xac>)
  40110e:	429a      	cmp	r2, r3
  401110:	d20a      	bcs.n	401128 <Reset_Handler+0x4c>
  401112:	3b01      	subs	r3, #1
  401114:	1a9b      	subs	r3, r3, r2
  401116:	f023 0303 	bic.w	r3, r3, #3
  40111a:	3304      	adds	r3, #4
  40111c:	4413      	add	r3, r2
		*pDest++ = 0;
  40111e:	2100      	movs	r1, #0
  401120:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401124:	4293      	cmp	r3, r2
  401126:	d1fb      	bne.n	401120 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401128:	4a18      	ldr	r2, [pc, #96]	; (40118c <Reset_Handler+0xb0>)
  40112a:	4b19      	ldr	r3, [pc, #100]	; (401190 <Reset_Handler+0xb4>)
  40112c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401130:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401132:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401136:	fab3 f383 	clz	r3, r3
  40113a:	095b      	lsrs	r3, r3, #5
  40113c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40113e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401140:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401144:	2200      	movs	r2, #0
  401146:	4b13      	ldr	r3, [pc, #76]	; (401194 <Reset_Handler+0xb8>)
  401148:	701a      	strb	r2, [r3, #0]
	return flags;
  40114a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40114c:	4a12      	ldr	r2, [pc, #72]	; (401198 <Reset_Handler+0xbc>)
  40114e:	6813      	ldr	r3, [r2, #0]
  401150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401154:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401156:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40115a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40115e:	b129      	cbz	r1, 40116c <Reset_Handler+0x90>
		cpu_irq_enable();
  401160:	2201      	movs	r2, #1
  401162:	4b0c      	ldr	r3, [pc, #48]	; (401194 <Reset_Handler+0xb8>)
  401164:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401166:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40116a:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  40116c:	4b0b      	ldr	r3, [pc, #44]	; (40119c <Reset_Handler+0xc0>)
  40116e:	4798      	blx	r3

	/* Branch to main function */
	main();
  401170:	4b0b      	ldr	r3, [pc, #44]	; (4011a0 <Reset_Handler+0xc4>)
  401172:	4798      	blx	r3
  401174:	e7fe      	b.n	401174 <Reset_Handler+0x98>
  401176:	bf00      	nop
  401178:	20000000 	.word	0x20000000
  40117c:	00402490 	.word	0x00402490
  401180:	2000084c 	.word	0x2000084c
  401184:	2000583c 	.word	0x2000583c
  401188:	2000084c 	.word	0x2000084c
  40118c:	e000ed00 	.word	0xe000ed00
  401190:	00400000 	.word	0x00400000
  401194:	20000002 	.word	0x20000002
  401198:	e000ed88 	.word	0xe000ed88
  40119c:	00401371 	.word	0x00401371
  4011a0:	00400505 	.word	0x00400505

004011a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4011a4:	4b3b      	ldr	r3, [pc, #236]	; (401294 <SystemCoreClockUpdate+0xf0>)
  4011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011a8:	f003 0303 	and.w	r3, r3, #3
  4011ac:	2b01      	cmp	r3, #1
  4011ae:	d01d      	beq.n	4011ec <SystemCoreClockUpdate+0x48>
  4011b0:	b183      	cbz	r3, 4011d4 <SystemCoreClockUpdate+0x30>
  4011b2:	2b02      	cmp	r3, #2
  4011b4:	d036      	beq.n	401224 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4011b6:	4b37      	ldr	r3, [pc, #220]	; (401294 <SystemCoreClockUpdate+0xf0>)
  4011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011be:	2b70      	cmp	r3, #112	; 0x70
  4011c0:	d05f      	beq.n	401282 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4011c2:	4b34      	ldr	r3, [pc, #208]	; (401294 <SystemCoreClockUpdate+0xf0>)
  4011c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4011c6:	4934      	ldr	r1, [pc, #208]	; (401298 <SystemCoreClockUpdate+0xf4>)
  4011c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4011cc:	680b      	ldr	r3, [r1, #0]
  4011ce:	40d3      	lsrs	r3, r2
  4011d0:	600b      	str	r3, [r1, #0]
  4011d2:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4011d4:	4b31      	ldr	r3, [pc, #196]	; (40129c <SystemCoreClockUpdate+0xf8>)
  4011d6:	695b      	ldr	r3, [r3, #20]
  4011d8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4011dc:	bf14      	ite	ne
  4011de:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4011e2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4011e6:	4b2c      	ldr	r3, [pc, #176]	; (401298 <SystemCoreClockUpdate+0xf4>)
  4011e8:	601a      	str	r2, [r3, #0]
  4011ea:	e7e4      	b.n	4011b6 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4011ec:	4b29      	ldr	r3, [pc, #164]	; (401294 <SystemCoreClockUpdate+0xf0>)
  4011ee:	6a1b      	ldr	r3, [r3, #32]
  4011f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4011f4:	d003      	beq.n	4011fe <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4011f6:	4a2a      	ldr	r2, [pc, #168]	; (4012a0 <SystemCoreClockUpdate+0xfc>)
  4011f8:	4b27      	ldr	r3, [pc, #156]	; (401298 <SystemCoreClockUpdate+0xf4>)
  4011fa:	601a      	str	r2, [r3, #0]
  4011fc:	e7db      	b.n	4011b6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4011fe:	4a29      	ldr	r2, [pc, #164]	; (4012a4 <SystemCoreClockUpdate+0x100>)
  401200:	4b25      	ldr	r3, [pc, #148]	; (401298 <SystemCoreClockUpdate+0xf4>)
  401202:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401204:	4b23      	ldr	r3, [pc, #140]	; (401294 <SystemCoreClockUpdate+0xf0>)
  401206:	6a1b      	ldr	r3, [r3, #32]
  401208:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40120c:	2b10      	cmp	r3, #16
  40120e:	d005      	beq.n	40121c <SystemCoreClockUpdate+0x78>
  401210:	2b20      	cmp	r3, #32
  401212:	d1d0      	bne.n	4011b6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401214:	4a22      	ldr	r2, [pc, #136]	; (4012a0 <SystemCoreClockUpdate+0xfc>)
  401216:	4b20      	ldr	r3, [pc, #128]	; (401298 <SystemCoreClockUpdate+0xf4>)
  401218:	601a      	str	r2, [r3, #0]
				break;
  40121a:	e7cc      	b.n	4011b6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40121c:	4a22      	ldr	r2, [pc, #136]	; (4012a8 <SystemCoreClockUpdate+0x104>)
  40121e:	4b1e      	ldr	r3, [pc, #120]	; (401298 <SystemCoreClockUpdate+0xf4>)
  401220:	601a      	str	r2, [r3, #0]
				break;
  401222:	e7c8      	b.n	4011b6 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401224:	4b1b      	ldr	r3, [pc, #108]	; (401294 <SystemCoreClockUpdate+0xf0>)
  401226:	6a1b      	ldr	r3, [r3, #32]
  401228:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40122c:	d016      	beq.n	40125c <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40122e:	4a1c      	ldr	r2, [pc, #112]	; (4012a0 <SystemCoreClockUpdate+0xfc>)
  401230:	4b19      	ldr	r3, [pc, #100]	; (401298 <SystemCoreClockUpdate+0xf4>)
  401232:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  401234:	4b17      	ldr	r3, [pc, #92]	; (401294 <SystemCoreClockUpdate+0xf0>)
  401236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401238:	f003 0303 	and.w	r3, r3, #3
  40123c:	2b02      	cmp	r3, #2
  40123e:	d1ba      	bne.n	4011b6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401240:	4a14      	ldr	r2, [pc, #80]	; (401294 <SystemCoreClockUpdate+0xf0>)
  401242:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401244:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401246:	4814      	ldr	r0, [pc, #80]	; (401298 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401248:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40124c:	6803      	ldr	r3, [r0, #0]
  40124e:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401252:	b2d2      	uxtb	r2, r2
  401254:	fbb3 f3f2 	udiv	r3, r3, r2
  401258:	6003      	str	r3, [r0, #0]
  40125a:	e7ac      	b.n	4011b6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40125c:	4a11      	ldr	r2, [pc, #68]	; (4012a4 <SystemCoreClockUpdate+0x100>)
  40125e:	4b0e      	ldr	r3, [pc, #56]	; (401298 <SystemCoreClockUpdate+0xf4>)
  401260:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401262:	4b0c      	ldr	r3, [pc, #48]	; (401294 <SystemCoreClockUpdate+0xf0>)
  401264:	6a1b      	ldr	r3, [r3, #32]
  401266:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40126a:	2b10      	cmp	r3, #16
  40126c:	d005      	beq.n	40127a <SystemCoreClockUpdate+0xd6>
  40126e:	2b20      	cmp	r3, #32
  401270:	d1e0      	bne.n	401234 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  401272:	4a0b      	ldr	r2, [pc, #44]	; (4012a0 <SystemCoreClockUpdate+0xfc>)
  401274:	4b08      	ldr	r3, [pc, #32]	; (401298 <SystemCoreClockUpdate+0xf4>)
  401276:	601a      	str	r2, [r3, #0]
				break;
  401278:	e7dc      	b.n	401234 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  40127a:	4a0b      	ldr	r2, [pc, #44]	; (4012a8 <SystemCoreClockUpdate+0x104>)
  40127c:	4b06      	ldr	r3, [pc, #24]	; (401298 <SystemCoreClockUpdate+0xf4>)
  40127e:	601a      	str	r2, [r3, #0]
				break;
  401280:	e7d8      	b.n	401234 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  401282:	4a05      	ldr	r2, [pc, #20]	; (401298 <SystemCoreClockUpdate+0xf4>)
  401284:	6813      	ldr	r3, [r2, #0]
  401286:	4909      	ldr	r1, [pc, #36]	; (4012ac <SystemCoreClockUpdate+0x108>)
  401288:	fba1 1303 	umull	r1, r3, r1, r3
  40128c:	085b      	lsrs	r3, r3, #1
  40128e:	6013      	str	r3, [r2, #0]
  401290:	4770      	bx	lr
  401292:	bf00      	nop
  401294:	400e0400 	.word	0x400e0400
  401298:	20000004 	.word	0x20000004
  40129c:	400e1810 	.word	0x400e1810
  4012a0:	00b71b00 	.word	0x00b71b00
  4012a4:	003d0900 	.word	0x003d0900
  4012a8:	007a1200 	.word	0x007a1200
  4012ac:	aaaaaaab 	.word	0xaaaaaaab

004012b0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4012b0:	4b12      	ldr	r3, [pc, #72]	; (4012fc <system_init_flash+0x4c>)
  4012b2:	4298      	cmp	r0, r3
  4012b4:	d911      	bls.n	4012da <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4012b6:	4b12      	ldr	r3, [pc, #72]	; (401300 <system_init_flash+0x50>)
  4012b8:	4298      	cmp	r0, r3
  4012ba:	d913      	bls.n	4012e4 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4012bc:	4b11      	ldr	r3, [pc, #68]	; (401304 <system_init_flash+0x54>)
  4012be:	4298      	cmp	r0, r3
  4012c0:	d914      	bls.n	4012ec <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4012c2:	4b11      	ldr	r3, [pc, #68]	; (401308 <system_init_flash+0x58>)
  4012c4:	4298      	cmp	r0, r3
  4012c6:	d915      	bls.n	4012f4 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4012c8:	4b10      	ldr	r3, [pc, #64]	; (40130c <system_init_flash+0x5c>)
  4012ca:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4012cc:	bf94      	ite	ls
  4012ce:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4012d2:	4a0f      	ldrhi	r2, [pc, #60]	; (401310 <system_init_flash+0x60>)
  4012d4:	4b0f      	ldr	r3, [pc, #60]	; (401314 <system_init_flash+0x64>)
  4012d6:	601a      	str	r2, [r3, #0]
  4012d8:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4012da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4012de:	4b0d      	ldr	r3, [pc, #52]	; (401314 <system_init_flash+0x64>)
  4012e0:	601a      	str	r2, [r3, #0]
  4012e2:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4012e4:	4a0c      	ldr	r2, [pc, #48]	; (401318 <system_init_flash+0x68>)
  4012e6:	4b0b      	ldr	r3, [pc, #44]	; (401314 <system_init_flash+0x64>)
  4012e8:	601a      	str	r2, [r3, #0]
  4012ea:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4012ec:	4a0b      	ldr	r2, [pc, #44]	; (40131c <system_init_flash+0x6c>)
  4012ee:	4b09      	ldr	r3, [pc, #36]	; (401314 <system_init_flash+0x64>)
  4012f0:	601a      	str	r2, [r3, #0]
  4012f2:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4012f4:	4a0a      	ldr	r2, [pc, #40]	; (401320 <system_init_flash+0x70>)
  4012f6:	4b07      	ldr	r3, [pc, #28]	; (401314 <system_init_flash+0x64>)
  4012f8:	601a      	str	r2, [r3, #0]
  4012fa:	4770      	bx	lr
  4012fc:	01312cff 	.word	0x01312cff
  401300:	026259ff 	.word	0x026259ff
  401304:	039386ff 	.word	0x039386ff
  401308:	04c4b3ff 	.word	0x04c4b3ff
  40130c:	05f5e0ff 	.word	0x05f5e0ff
  401310:	04000500 	.word	0x04000500
  401314:	400e0a00 	.word	0x400e0a00
  401318:	04000100 	.word	0x04000100
  40131c:	04000200 	.word	0x04000200
  401320:	04000300 	.word	0x04000300

00401324 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401324:	4b0a      	ldr	r3, [pc, #40]	; (401350 <_sbrk+0x2c>)
  401326:	681b      	ldr	r3, [r3, #0]
  401328:	b153      	cbz	r3, 401340 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40132a:	4b09      	ldr	r3, [pc, #36]	; (401350 <_sbrk+0x2c>)
  40132c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40132e:	181a      	adds	r2, r3, r0
  401330:	4908      	ldr	r1, [pc, #32]	; (401354 <_sbrk+0x30>)
  401332:	4291      	cmp	r1, r2
  401334:	db08      	blt.n	401348 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401336:	4610      	mov	r0, r2
  401338:	4a05      	ldr	r2, [pc, #20]	; (401350 <_sbrk+0x2c>)
  40133a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40133c:	4618      	mov	r0, r3
  40133e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401340:	4a05      	ldr	r2, [pc, #20]	; (401358 <_sbrk+0x34>)
  401342:	4b03      	ldr	r3, [pc, #12]	; (401350 <_sbrk+0x2c>)
  401344:	601a      	str	r2, [r3, #0]
  401346:	e7f0      	b.n	40132a <_sbrk+0x6>
		return (caddr_t) -1;	
  401348:	f04f 30ff 	mov.w	r0, #4294967295
}
  40134c:	4770      	bx	lr
  40134e:	bf00      	nop
  401350:	20005708 	.word	0x20005708
  401354:	2001fffc 	.word	0x2001fffc
  401358:	20008840 	.word	0x20008840

0040135c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40135c:	f04f 30ff 	mov.w	r0, #4294967295
  401360:	4770      	bx	lr

00401362 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401366:	604b      	str	r3, [r1, #4]

	return 0;
}
  401368:	2000      	movs	r0, #0
  40136a:	4770      	bx	lr

0040136c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40136c:	2000      	movs	r0, #0
  40136e:	4770      	bx	lr

00401370 <__libc_init_array>:
  401370:	b570      	push	{r4, r5, r6, lr}
  401372:	4e0f      	ldr	r6, [pc, #60]	; (4013b0 <__libc_init_array+0x40>)
  401374:	4d0f      	ldr	r5, [pc, #60]	; (4013b4 <__libc_init_array+0x44>)
  401376:	1b76      	subs	r6, r6, r5
  401378:	10b6      	asrs	r6, r6, #2
  40137a:	bf18      	it	ne
  40137c:	2400      	movne	r4, #0
  40137e:	d005      	beq.n	40138c <__libc_init_array+0x1c>
  401380:	3401      	adds	r4, #1
  401382:	f855 3b04 	ldr.w	r3, [r5], #4
  401386:	4798      	blx	r3
  401388:	42a6      	cmp	r6, r4
  40138a:	d1f9      	bne.n	401380 <__libc_init_array+0x10>
  40138c:	4e0a      	ldr	r6, [pc, #40]	; (4013b8 <__libc_init_array+0x48>)
  40138e:	4d0b      	ldr	r5, [pc, #44]	; (4013bc <__libc_init_array+0x4c>)
  401390:	1b76      	subs	r6, r6, r5
  401392:	f001 f86b 	bl	40246c <_init>
  401396:	10b6      	asrs	r6, r6, #2
  401398:	bf18      	it	ne
  40139a:	2400      	movne	r4, #0
  40139c:	d006      	beq.n	4013ac <__libc_init_array+0x3c>
  40139e:	3401      	adds	r4, #1
  4013a0:	f855 3b04 	ldr.w	r3, [r5], #4
  4013a4:	4798      	blx	r3
  4013a6:	42a6      	cmp	r6, r4
  4013a8:	d1f9      	bne.n	40139e <__libc_init_array+0x2e>
  4013aa:	bd70      	pop	{r4, r5, r6, pc}
  4013ac:	bd70      	pop	{r4, r5, r6, pc}
  4013ae:	bf00      	nop
  4013b0:	00402478 	.word	0x00402478
  4013b4:	00402478 	.word	0x00402478
  4013b8:	00402480 	.word	0x00402480
  4013bc:	00402478 	.word	0x00402478

004013c0 <memset>:
  4013c0:	b470      	push	{r4, r5, r6}
  4013c2:	0786      	lsls	r6, r0, #30
  4013c4:	d046      	beq.n	401454 <memset+0x94>
  4013c6:	1e54      	subs	r4, r2, #1
  4013c8:	2a00      	cmp	r2, #0
  4013ca:	d041      	beq.n	401450 <memset+0x90>
  4013cc:	b2ca      	uxtb	r2, r1
  4013ce:	4603      	mov	r3, r0
  4013d0:	e002      	b.n	4013d8 <memset+0x18>
  4013d2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4013d6:	d33b      	bcc.n	401450 <memset+0x90>
  4013d8:	f803 2b01 	strb.w	r2, [r3], #1
  4013dc:	079d      	lsls	r5, r3, #30
  4013de:	d1f8      	bne.n	4013d2 <memset+0x12>
  4013e0:	2c03      	cmp	r4, #3
  4013e2:	d92e      	bls.n	401442 <memset+0x82>
  4013e4:	b2cd      	uxtb	r5, r1
  4013e6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4013ea:	2c0f      	cmp	r4, #15
  4013ec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4013f0:	d919      	bls.n	401426 <memset+0x66>
  4013f2:	f103 0210 	add.w	r2, r3, #16
  4013f6:	4626      	mov	r6, r4
  4013f8:	3e10      	subs	r6, #16
  4013fa:	2e0f      	cmp	r6, #15
  4013fc:	f842 5c10 	str.w	r5, [r2, #-16]
  401400:	f842 5c0c 	str.w	r5, [r2, #-12]
  401404:	f842 5c08 	str.w	r5, [r2, #-8]
  401408:	f842 5c04 	str.w	r5, [r2, #-4]
  40140c:	f102 0210 	add.w	r2, r2, #16
  401410:	d8f2      	bhi.n	4013f8 <memset+0x38>
  401412:	f1a4 0210 	sub.w	r2, r4, #16
  401416:	f022 020f 	bic.w	r2, r2, #15
  40141a:	f004 040f 	and.w	r4, r4, #15
  40141e:	3210      	adds	r2, #16
  401420:	2c03      	cmp	r4, #3
  401422:	4413      	add	r3, r2
  401424:	d90d      	bls.n	401442 <memset+0x82>
  401426:	461e      	mov	r6, r3
  401428:	4622      	mov	r2, r4
  40142a:	3a04      	subs	r2, #4
  40142c:	2a03      	cmp	r2, #3
  40142e:	f846 5b04 	str.w	r5, [r6], #4
  401432:	d8fa      	bhi.n	40142a <memset+0x6a>
  401434:	1f22      	subs	r2, r4, #4
  401436:	f022 0203 	bic.w	r2, r2, #3
  40143a:	3204      	adds	r2, #4
  40143c:	4413      	add	r3, r2
  40143e:	f004 0403 	and.w	r4, r4, #3
  401442:	b12c      	cbz	r4, 401450 <memset+0x90>
  401444:	b2c9      	uxtb	r1, r1
  401446:	441c      	add	r4, r3
  401448:	f803 1b01 	strb.w	r1, [r3], #1
  40144c:	429c      	cmp	r4, r3
  40144e:	d1fb      	bne.n	401448 <memset+0x88>
  401450:	bc70      	pop	{r4, r5, r6}
  401452:	4770      	bx	lr
  401454:	4614      	mov	r4, r2
  401456:	4603      	mov	r3, r0
  401458:	e7c2      	b.n	4013e0 <memset+0x20>
  40145a:	bf00      	nop

0040145c <setbuf>:
  40145c:	2900      	cmp	r1, #0
  40145e:	bf0c      	ite	eq
  401460:	2202      	moveq	r2, #2
  401462:	2200      	movne	r2, #0
  401464:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401468:	f000 b800 	b.w	40146c <setvbuf>

0040146c <setvbuf>:
  40146c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401470:	4c61      	ldr	r4, [pc, #388]	; (4015f8 <setvbuf+0x18c>)
  401472:	6825      	ldr	r5, [r4, #0]
  401474:	b083      	sub	sp, #12
  401476:	4604      	mov	r4, r0
  401478:	460f      	mov	r7, r1
  40147a:	4690      	mov	r8, r2
  40147c:	461e      	mov	r6, r3
  40147e:	b115      	cbz	r5, 401486 <setvbuf+0x1a>
  401480:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401482:	2b00      	cmp	r3, #0
  401484:	d064      	beq.n	401550 <setvbuf+0xe4>
  401486:	f1b8 0f02 	cmp.w	r8, #2
  40148a:	d006      	beq.n	40149a <setvbuf+0x2e>
  40148c:	f1b8 0f01 	cmp.w	r8, #1
  401490:	f200 809f 	bhi.w	4015d2 <setvbuf+0x166>
  401494:	2e00      	cmp	r6, #0
  401496:	f2c0 809c 	blt.w	4015d2 <setvbuf+0x166>
  40149a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40149c:	07d8      	lsls	r0, r3, #31
  40149e:	d534      	bpl.n	40150a <setvbuf+0x9e>
  4014a0:	4621      	mov	r1, r4
  4014a2:	4628      	mov	r0, r5
  4014a4:	f000 f95a 	bl	40175c <_fflush_r>
  4014a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4014aa:	b141      	cbz	r1, 4014be <setvbuf+0x52>
  4014ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4014b0:	4299      	cmp	r1, r3
  4014b2:	d002      	beq.n	4014ba <setvbuf+0x4e>
  4014b4:	4628      	mov	r0, r5
  4014b6:	f000 fa4b 	bl	401950 <_free_r>
  4014ba:	2300      	movs	r3, #0
  4014bc:	6323      	str	r3, [r4, #48]	; 0x30
  4014be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4014c2:	2200      	movs	r2, #0
  4014c4:	61a2      	str	r2, [r4, #24]
  4014c6:	6062      	str	r2, [r4, #4]
  4014c8:	061a      	lsls	r2, r3, #24
  4014ca:	d43a      	bmi.n	401542 <setvbuf+0xd6>
  4014cc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4014d0:	f023 0303 	bic.w	r3, r3, #3
  4014d4:	f1b8 0f02 	cmp.w	r8, #2
  4014d8:	81a3      	strh	r3, [r4, #12]
  4014da:	d01d      	beq.n	401518 <setvbuf+0xac>
  4014dc:	ab01      	add	r3, sp, #4
  4014de:	466a      	mov	r2, sp
  4014e0:	4621      	mov	r1, r4
  4014e2:	4628      	mov	r0, r5
  4014e4:	f000 fb4c 	bl	401b80 <__swhatbuf_r>
  4014e8:	89a3      	ldrh	r3, [r4, #12]
  4014ea:	4318      	orrs	r0, r3
  4014ec:	81a0      	strh	r0, [r4, #12]
  4014ee:	2e00      	cmp	r6, #0
  4014f0:	d132      	bne.n	401558 <setvbuf+0xec>
  4014f2:	9e00      	ldr	r6, [sp, #0]
  4014f4:	4630      	mov	r0, r6
  4014f6:	f000 fb71 	bl	401bdc <malloc>
  4014fa:	4607      	mov	r7, r0
  4014fc:	2800      	cmp	r0, #0
  4014fe:	d06b      	beq.n	4015d8 <setvbuf+0x16c>
  401500:	89a3      	ldrh	r3, [r4, #12]
  401502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401506:	81a3      	strh	r3, [r4, #12]
  401508:	e028      	b.n	40155c <setvbuf+0xf0>
  40150a:	89a3      	ldrh	r3, [r4, #12]
  40150c:	0599      	lsls	r1, r3, #22
  40150e:	d4c7      	bmi.n	4014a0 <setvbuf+0x34>
  401510:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401512:	f000 fb31 	bl	401b78 <__retarget_lock_acquire_recursive>
  401516:	e7c3      	b.n	4014a0 <setvbuf+0x34>
  401518:	2500      	movs	r5, #0
  40151a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40151c:	2600      	movs	r6, #0
  40151e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401522:	f043 0302 	orr.w	r3, r3, #2
  401526:	2001      	movs	r0, #1
  401528:	60a6      	str	r6, [r4, #8]
  40152a:	07ce      	lsls	r6, r1, #31
  40152c:	81a3      	strh	r3, [r4, #12]
  40152e:	6022      	str	r2, [r4, #0]
  401530:	6122      	str	r2, [r4, #16]
  401532:	6160      	str	r0, [r4, #20]
  401534:	d401      	bmi.n	40153a <setvbuf+0xce>
  401536:	0598      	lsls	r0, r3, #22
  401538:	d53e      	bpl.n	4015b8 <setvbuf+0x14c>
  40153a:	4628      	mov	r0, r5
  40153c:	b003      	add	sp, #12
  40153e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401542:	6921      	ldr	r1, [r4, #16]
  401544:	4628      	mov	r0, r5
  401546:	f000 fa03 	bl	401950 <_free_r>
  40154a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40154e:	e7bd      	b.n	4014cc <setvbuf+0x60>
  401550:	4628      	mov	r0, r5
  401552:	f000 f95b 	bl	40180c <__sinit>
  401556:	e796      	b.n	401486 <setvbuf+0x1a>
  401558:	2f00      	cmp	r7, #0
  40155a:	d0cb      	beq.n	4014f4 <setvbuf+0x88>
  40155c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40155e:	2b00      	cmp	r3, #0
  401560:	d033      	beq.n	4015ca <setvbuf+0x15e>
  401562:	9b00      	ldr	r3, [sp, #0]
  401564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401568:	6027      	str	r7, [r4, #0]
  40156a:	429e      	cmp	r6, r3
  40156c:	bf1c      	itt	ne
  40156e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  401572:	81a2      	strhne	r2, [r4, #12]
  401574:	f1b8 0f01 	cmp.w	r8, #1
  401578:	bf04      	itt	eq
  40157a:	f042 0201 	orreq.w	r2, r2, #1
  40157e:	81a2      	strheq	r2, [r4, #12]
  401580:	b292      	uxth	r2, r2
  401582:	f012 0308 	ands.w	r3, r2, #8
  401586:	6127      	str	r7, [r4, #16]
  401588:	6166      	str	r6, [r4, #20]
  40158a:	d00e      	beq.n	4015aa <setvbuf+0x13e>
  40158c:	07d1      	lsls	r1, r2, #31
  40158e:	d51a      	bpl.n	4015c6 <setvbuf+0x15a>
  401590:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401592:	4276      	negs	r6, r6
  401594:	2300      	movs	r3, #0
  401596:	f015 0501 	ands.w	r5, r5, #1
  40159a:	61a6      	str	r6, [r4, #24]
  40159c:	60a3      	str	r3, [r4, #8]
  40159e:	d009      	beq.n	4015b4 <setvbuf+0x148>
  4015a0:	2500      	movs	r5, #0
  4015a2:	4628      	mov	r0, r5
  4015a4:	b003      	add	sp, #12
  4015a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4015aa:	60a3      	str	r3, [r4, #8]
  4015ac:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4015ae:	f015 0501 	ands.w	r5, r5, #1
  4015b2:	d1f5      	bne.n	4015a0 <setvbuf+0x134>
  4015b4:	0593      	lsls	r3, r2, #22
  4015b6:	d4c0      	bmi.n	40153a <setvbuf+0xce>
  4015b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4015ba:	f000 fadf 	bl	401b7c <__retarget_lock_release_recursive>
  4015be:	4628      	mov	r0, r5
  4015c0:	b003      	add	sp, #12
  4015c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4015c6:	60a6      	str	r6, [r4, #8]
  4015c8:	e7f0      	b.n	4015ac <setvbuf+0x140>
  4015ca:	4628      	mov	r0, r5
  4015cc:	f000 f91e 	bl	40180c <__sinit>
  4015d0:	e7c7      	b.n	401562 <setvbuf+0xf6>
  4015d2:	f04f 35ff 	mov.w	r5, #4294967295
  4015d6:	e7b0      	b.n	40153a <setvbuf+0xce>
  4015d8:	f8dd 9000 	ldr.w	r9, [sp]
  4015dc:	45b1      	cmp	r9, r6
  4015de:	d004      	beq.n	4015ea <setvbuf+0x17e>
  4015e0:	4648      	mov	r0, r9
  4015e2:	f000 fafb 	bl	401bdc <malloc>
  4015e6:	4607      	mov	r7, r0
  4015e8:	b920      	cbnz	r0, 4015f4 <setvbuf+0x188>
  4015ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4015ee:	f04f 35ff 	mov.w	r5, #4294967295
  4015f2:	e792      	b.n	40151a <setvbuf+0xae>
  4015f4:	464e      	mov	r6, r9
  4015f6:	e783      	b.n	401500 <setvbuf+0x94>
  4015f8:	20000008 	.word	0x20000008

004015fc <register_fini>:
  4015fc:	4b02      	ldr	r3, [pc, #8]	; (401608 <register_fini+0xc>)
  4015fe:	b113      	cbz	r3, 401606 <register_fini+0xa>
  401600:	4802      	ldr	r0, [pc, #8]	; (40160c <register_fini+0x10>)
  401602:	f000 b805 	b.w	401610 <atexit>
  401606:	4770      	bx	lr
  401608:	00000000 	.word	0x00000000
  40160c:	0040187d 	.word	0x0040187d

00401610 <atexit>:
  401610:	2300      	movs	r3, #0
  401612:	4601      	mov	r1, r0
  401614:	461a      	mov	r2, r3
  401616:	4618      	mov	r0, r3
  401618:	f000 be10 	b.w	40223c <__register_exitproc>

0040161c <__sflush_r>:
  40161c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401620:	b29a      	uxth	r2, r3
  401622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401626:	460d      	mov	r5, r1
  401628:	0711      	lsls	r1, r2, #28
  40162a:	4680      	mov	r8, r0
  40162c:	d43a      	bmi.n	4016a4 <__sflush_r+0x88>
  40162e:	686a      	ldr	r2, [r5, #4]
  401630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401634:	2a00      	cmp	r2, #0
  401636:	81ab      	strh	r3, [r5, #12]
  401638:	dd6f      	ble.n	40171a <__sflush_r+0xfe>
  40163a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40163c:	2c00      	cmp	r4, #0
  40163e:	d049      	beq.n	4016d4 <__sflush_r+0xb8>
  401640:	2200      	movs	r2, #0
  401642:	b29b      	uxth	r3, r3
  401644:	f8d8 6000 	ldr.w	r6, [r8]
  401648:	f8c8 2000 	str.w	r2, [r8]
  40164c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401650:	d067      	beq.n	401722 <__sflush_r+0x106>
  401652:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401654:	075f      	lsls	r7, r3, #29
  401656:	d505      	bpl.n	401664 <__sflush_r+0x48>
  401658:	6869      	ldr	r1, [r5, #4]
  40165a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40165c:	1a52      	subs	r2, r2, r1
  40165e:	b10b      	cbz	r3, 401664 <__sflush_r+0x48>
  401660:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401662:	1ad2      	subs	r2, r2, r3
  401664:	2300      	movs	r3, #0
  401666:	69e9      	ldr	r1, [r5, #28]
  401668:	4640      	mov	r0, r8
  40166a:	47a0      	blx	r4
  40166c:	1c44      	adds	r4, r0, #1
  40166e:	d03c      	beq.n	4016ea <__sflush_r+0xce>
  401670:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401674:	692a      	ldr	r2, [r5, #16]
  401676:	602a      	str	r2, [r5, #0]
  401678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40167c:	2200      	movs	r2, #0
  40167e:	81ab      	strh	r3, [r5, #12]
  401680:	04db      	lsls	r3, r3, #19
  401682:	606a      	str	r2, [r5, #4]
  401684:	d447      	bmi.n	401716 <__sflush_r+0xfa>
  401686:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401688:	f8c8 6000 	str.w	r6, [r8]
  40168c:	b311      	cbz	r1, 4016d4 <__sflush_r+0xb8>
  40168e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  401692:	4299      	cmp	r1, r3
  401694:	d002      	beq.n	40169c <__sflush_r+0x80>
  401696:	4640      	mov	r0, r8
  401698:	f000 f95a 	bl	401950 <_free_r>
  40169c:	2000      	movs	r0, #0
  40169e:	6328      	str	r0, [r5, #48]	; 0x30
  4016a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016a4:	692e      	ldr	r6, [r5, #16]
  4016a6:	b1ae      	cbz	r6, 4016d4 <__sflush_r+0xb8>
  4016a8:	682c      	ldr	r4, [r5, #0]
  4016aa:	602e      	str	r6, [r5, #0]
  4016ac:	0791      	lsls	r1, r2, #30
  4016ae:	bf0c      	ite	eq
  4016b0:	696b      	ldreq	r3, [r5, #20]
  4016b2:	2300      	movne	r3, #0
  4016b4:	1ba4      	subs	r4, r4, r6
  4016b6:	60ab      	str	r3, [r5, #8]
  4016b8:	e00a      	b.n	4016d0 <__sflush_r+0xb4>
  4016ba:	4623      	mov	r3, r4
  4016bc:	4632      	mov	r2, r6
  4016be:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4016c0:	69e9      	ldr	r1, [r5, #28]
  4016c2:	4640      	mov	r0, r8
  4016c4:	47b8      	blx	r7
  4016c6:	2800      	cmp	r0, #0
  4016c8:	eba4 0400 	sub.w	r4, r4, r0
  4016cc:	4406      	add	r6, r0
  4016ce:	dd04      	ble.n	4016da <__sflush_r+0xbe>
  4016d0:	2c00      	cmp	r4, #0
  4016d2:	dcf2      	bgt.n	4016ba <__sflush_r+0x9e>
  4016d4:	2000      	movs	r0, #0
  4016d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016da:	89ab      	ldrh	r3, [r5, #12]
  4016dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4016e0:	81ab      	strh	r3, [r5, #12]
  4016e2:	f04f 30ff 	mov.w	r0, #4294967295
  4016e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016ea:	f8d8 4000 	ldr.w	r4, [r8]
  4016ee:	2c1d      	cmp	r4, #29
  4016f0:	d8f3      	bhi.n	4016da <__sflush_r+0xbe>
  4016f2:	4b19      	ldr	r3, [pc, #100]	; (401758 <__sflush_r+0x13c>)
  4016f4:	40e3      	lsrs	r3, r4
  4016f6:	43db      	mvns	r3, r3
  4016f8:	f013 0301 	ands.w	r3, r3, #1
  4016fc:	d1ed      	bne.n	4016da <__sflush_r+0xbe>
  4016fe:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  401702:	606b      	str	r3, [r5, #4]
  401704:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401708:	6929      	ldr	r1, [r5, #16]
  40170a:	81ab      	strh	r3, [r5, #12]
  40170c:	04da      	lsls	r2, r3, #19
  40170e:	6029      	str	r1, [r5, #0]
  401710:	d5b9      	bpl.n	401686 <__sflush_r+0x6a>
  401712:	2c00      	cmp	r4, #0
  401714:	d1b7      	bne.n	401686 <__sflush_r+0x6a>
  401716:	6528      	str	r0, [r5, #80]	; 0x50
  401718:	e7b5      	b.n	401686 <__sflush_r+0x6a>
  40171a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40171c:	2a00      	cmp	r2, #0
  40171e:	dc8c      	bgt.n	40163a <__sflush_r+0x1e>
  401720:	e7d8      	b.n	4016d4 <__sflush_r+0xb8>
  401722:	2301      	movs	r3, #1
  401724:	69e9      	ldr	r1, [r5, #28]
  401726:	4640      	mov	r0, r8
  401728:	47a0      	blx	r4
  40172a:	1c43      	adds	r3, r0, #1
  40172c:	4602      	mov	r2, r0
  40172e:	d002      	beq.n	401736 <__sflush_r+0x11a>
  401730:	89ab      	ldrh	r3, [r5, #12]
  401732:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401734:	e78e      	b.n	401654 <__sflush_r+0x38>
  401736:	f8d8 3000 	ldr.w	r3, [r8]
  40173a:	2b00      	cmp	r3, #0
  40173c:	d0f8      	beq.n	401730 <__sflush_r+0x114>
  40173e:	2b1d      	cmp	r3, #29
  401740:	d001      	beq.n	401746 <__sflush_r+0x12a>
  401742:	2b16      	cmp	r3, #22
  401744:	d102      	bne.n	40174c <__sflush_r+0x130>
  401746:	f8c8 6000 	str.w	r6, [r8]
  40174a:	e7c3      	b.n	4016d4 <__sflush_r+0xb8>
  40174c:	89ab      	ldrh	r3, [r5, #12]
  40174e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401752:	81ab      	strh	r3, [r5, #12]
  401754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401758:	20400001 	.word	0x20400001

0040175c <_fflush_r>:
  40175c:	b538      	push	{r3, r4, r5, lr}
  40175e:	460d      	mov	r5, r1
  401760:	4604      	mov	r4, r0
  401762:	b108      	cbz	r0, 401768 <_fflush_r+0xc>
  401764:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401766:	b1bb      	cbz	r3, 401798 <_fflush_r+0x3c>
  401768:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40176c:	b188      	cbz	r0, 401792 <_fflush_r+0x36>
  40176e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401770:	07db      	lsls	r3, r3, #31
  401772:	d401      	bmi.n	401778 <_fflush_r+0x1c>
  401774:	0581      	lsls	r1, r0, #22
  401776:	d517      	bpl.n	4017a8 <_fflush_r+0x4c>
  401778:	4620      	mov	r0, r4
  40177a:	4629      	mov	r1, r5
  40177c:	f7ff ff4e 	bl	40161c <__sflush_r>
  401780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401782:	07da      	lsls	r2, r3, #31
  401784:	4604      	mov	r4, r0
  401786:	d402      	bmi.n	40178e <_fflush_r+0x32>
  401788:	89ab      	ldrh	r3, [r5, #12]
  40178a:	059b      	lsls	r3, r3, #22
  40178c:	d507      	bpl.n	40179e <_fflush_r+0x42>
  40178e:	4620      	mov	r0, r4
  401790:	bd38      	pop	{r3, r4, r5, pc}
  401792:	4604      	mov	r4, r0
  401794:	4620      	mov	r0, r4
  401796:	bd38      	pop	{r3, r4, r5, pc}
  401798:	f000 f838 	bl	40180c <__sinit>
  40179c:	e7e4      	b.n	401768 <_fflush_r+0xc>
  40179e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4017a0:	f000 f9ec 	bl	401b7c <__retarget_lock_release_recursive>
  4017a4:	4620      	mov	r0, r4
  4017a6:	bd38      	pop	{r3, r4, r5, pc}
  4017a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4017aa:	f000 f9e5 	bl	401b78 <__retarget_lock_acquire_recursive>
  4017ae:	e7e3      	b.n	401778 <_fflush_r+0x1c>

004017b0 <_cleanup_r>:
  4017b0:	4901      	ldr	r1, [pc, #4]	; (4017b8 <_cleanup_r+0x8>)
  4017b2:	f000 b9b3 	b.w	401b1c <_fwalk_reent>
  4017b6:	bf00      	nop
  4017b8:	00402325 	.word	0x00402325

004017bc <std.isra.0>:
  4017bc:	b510      	push	{r4, lr}
  4017be:	2300      	movs	r3, #0
  4017c0:	4604      	mov	r4, r0
  4017c2:	8181      	strh	r1, [r0, #12]
  4017c4:	81c2      	strh	r2, [r0, #14]
  4017c6:	6003      	str	r3, [r0, #0]
  4017c8:	6043      	str	r3, [r0, #4]
  4017ca:	6083      	str	r3, [r0, #8]
  4017cc:	6643      	str	r3, [r0, #100]	; 0x64
  4017ce:	6103      	str	r3, [r0, #16]
  4017d0:	6143      	str	r3, [r0, #20]
  4017d2:	6183      	str	r3, [r0, #24]
  4017d4:	4619      	mov	r1, r3
  4017d6:	2208      	movs	r2, #8
  4017d8:	305c      	adds	r0, #92	; 0x5c
  4017da:	f7ff fdf1 	bl	4013c0 <memset>
  4017de:	4807      	ldr	r0, [pc, #28]	; (4017fc <std.isra.0+0x40>)
  4017e0:	4907      	ldr	r1, [pc, #28]	; (401800 <std.isra.0+0x44>)
  4017e2:	4a08      	ldr	r2, [pc, #32]	; (401804 <std.isra.0+0x48>)
  4017e4:	4b08      	ldr	r3, [pc, #32]	; (401808 <std.isra.0+0x4c>)
  4017e6:	6220      	str	r0, [r4, #32]
  4017e8:	61e4      	str	r4, [r4, #28]
  4017ea:	6261      	str	r1, [r4, #36]	; 0x24
  4017ec:	62a2      	str	r2, [r4, #40]	; 0x28
  4017ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  4017f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4017f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4017f8:	f000 b9ba 	b.w	401b70 <__retarget_lock_init_recursive>
  4017fc:	00402189 	.word	0x00402189
  401800:	004021ad 	.word	0x004021ad
  401804:	004021e9 	.word	0x004021e9
  401808:	00402209 	.word	0x00402209

0040180c <__sinit>:
  40180c:	b510      	push	{r4, lr}
  40180e:	4604      	mov	r4, r0
  401810:	4812      	ldr	r0, [pc, #72]	; (40185c <__sinit+0x50>)
  401812:	f000 f9b1 	bl	401b78 <__retarget_lock_acquire_recursive>
  401816:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401818:	b9d2      	cbnz	r2, 401850 <__sinit+0x44>
  40181a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40181e:	4810      	ldr	r0, [pc, #64]	; (401860 <__sinit+0x54>)
  401820:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401824:	2103      	movs	r1, #3
  401826:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40182a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40182c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401830:	6860      	ldr	r0, [r4, #4]
  401832:	2104      	movs	r1, #4
  401834:	f7ff ffc2 	bl	4017bc <std.isra.0>
  401838:	2201      	movs	r2, #1
  40183a:	2109      	movs	r1, #9
  40183c:	68a0      	ldr	r0, [r4, #8]
  40183e:	f7ff ffbd 	bl	4017bc <std.isra.0>
  401842:	2202      	movs	r2, #2
  401844:	2112      	movs	r1, #18
  401846:	68e0      	ldr	r0, [r4, #12]
  401848:	f7ff ffb8 	bl	4017bc <std.isra.0>
  40184c:	2301      	movs	r3, #1
  40184e:	63a3      	str	r3, [r4, #56]	; 0x38
  401850:	4802      	ldr	r0, [pc, #8]	; (40185c <__sinit+0x50>)
  401852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401856:	f000 b991 	b.w	401b7c <__retarget_lock_release_recursive>
  40185a:	bf00      	nop
  40185c:	20005820 	.word	0x20005820
  401860:	004017b1 	.word	0x004017b1

00401864 <__sfp_lock_acquire>:
  401864:	4801      	ldr	r0, [pc, #4]	; (40186c <__sfp_lock_acquire+0x8>)
  401866:	f000 b987 	b.w	401b78 <__retarget_lock_acquire_recursive>
  40186a:	bf00      	nop
  40186c:	20005834 	.word	0x20005834

00401870 <__sfp_lock_release>:
  401870:	4801      	ldr	r0, [pc, #4]	; (401878 <__sfp_lock_release+0x8>)
  401872:	f000 b983 	b.w	401b7c <__retarget_lock_release_recursive>
  401876:	bf00      	nop
  401878:	20005834 	.word	0x20005834

0040187c <__libc_fini_array>:
  40187c:	b538      	push	{r3, r4, r5, lr}
  40187e:	4c0a      	ldr	r4, [pc, #40]	; (4018a8 <__libc_fini_array+0x2c>)
  401880:	4d0a      	ldr	r5, [pc, #40]	; (4018ac <__libc_fini_array+0x30>)
  401882:	1b64      	subs	r4, r4, r5
  401884:	10a4      	asrs	r4, r4, #2
  401886:	d00a      	beq.n	40189e <__libc_fini_array+0x22>
  401888:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40188c:	3b01      	subs	r3, #1
  40188e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401892:	3c01      	subs	r4, #1
  401894:	f855 3904 	ldr.w	r3, [r5], #-4
  401898:	4798      	blx	r3
  40189a:	2c00      	cmp	r4, #0
  40189c:	d1f9      	bne.n	401892 <__libc_fini_array+0x16>
  40189e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4018a2:	f000 bded 	b.w	402480 <_fini>
  4018a6:	bf00      	nop
  4018a8:	00402490 	.word	0x00402490
  4018ac:	0040248c 	.word	0x0040248c

004018b0 <_malloc_trim_r>:
  4018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018b2:	4f24      	ldr	r7, [pc, #144]	; (401944 <_malloc_trim_r+0x94>)
  4018b4:	460c      	mov	r4, r1
  4018b6:	4606      	mov	r6, r0
  4018b8:	f000 fc48 	bl	40214c <__malloc_lock>
  4018bc:	68bb      	ldr	r3, [r7, #8]
  4018be:	685d      	ldr	r5, [r3, #4]
  4018c0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4018c4:	310f      	adds	r1, #15
  4018c6:	f025 0503 	bic.w	r5, r5, #3
  4018ca:	4429      	add	r1, r5
  4018cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4018d0:	f021 010f 	bic.w	r1, r1, #15
  4018d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4018d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4018dc:	db07      	blt.n	4018ee <_malloc_trim_r+0x3e>
  4018de:	2100      	movs	r1, #0
  4018e0:	4630      	mov	r0, r6
  4018e2:	f000 fc3f 	bl	402164 <_sbrk_r>
  4018e6:	68bb      	ldr	r3, [r7, #8]
  4018e8:	442b      	add	r3, r5
  4018ea:	4298      	cmp	r0, r3
  4018ec:	d004      	beq.n	4018f8 <_malloc_trim_r+0x48>
  4018ee:	4630      	mov	r0, r6
  4018f0:	f000 fc32 	bl	402158 <__malloc_unlock>
  4018f4:	2000      	movs	r0, #0
  4018f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4018f8:	4261      	negs	r1, r4
  4018fa:	4630      	mov	r0, r6
  4018fc:	f000 fc32 	bl	402164 <_sbrk_r>
  401900:	3001      	adds	r0, #1
  401902:	d00d      	beq.n	401920 <_malloc_trim_r+0x70>
  401904:	4b10      	ldr	r3, [pc, #64]	; (401948 <_malloc_trim_r+0x98>)
  401906:	68ba      	ldr	r2, [r7, #8]
  401908:	6819      	ldr	r1, [r3, #0]
  40190a:	1b2d      	subs	r5, r5, r4
  40190c:	f045 0501 	orr.w	r5, r5, #1
  401910:	4630      	mov	r0, r6
  401912:	1b09      	subs	r1, r1, r4
  401914:	6055      	str	r5, [r2, #4]
  401916:	6019      	str	r1, [r3, #0]
  401918:	f000 fc1e 	bl	402158 <__malloc_unlock>
  40191c:	2001      	movs	r0, #1
  40191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401920:	2100      	movs	r1, #0
  401922:	4630      	mov	r0, r6
  401924:	f000 fc1e 	bl	402164 <_sbrk_r>
  401928:	68ba      	ldr	r2, [r7, #8]
  40192a:	1a83      	subs	r3, r0, r2
  40192c:	2b0f      	cmp	r3, #15
  40192e:	ddde      	ble.n	4018ee <_malloc_trim_r+0x3e>
  401930:	4c06      	ldr	r4, [pc, #24]	; (40194c <_malloc_trim_r+0x9c>)
  401932:	4905      	ldr	r1, [pc, #20]	; (401948 <_malloc_trim_r+0x98>)
  401934:	6824      	ldr	r4, [r4, #0]
  401936:	f043 0301 	orr.w	r3, r3, #1
  40193a:	1b00      	subs	r0, r0, r4
  40193c:	6053      	str	r3, [r2, #4]
  40193e:	6008      	str	r0, [r1, #0]
  401940:	e7d5      	b.n	4018ee <_malloc_trim_r+0x3e>
  401942:	bf00      	nop
  401944:	2000043c 	.word	0x2000043c
  401948:	2000570c 	.word	0x2000570c
  40194c:	20000844 	.word	0x20000844

00401950 <_free_r>:
  401950:	2900      	cmp	r1, #0
  401952:	d044      	beq.n	4019de <_free_r+0x8e>
  401954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401958:	460d      	mov	r5, r1
  40195a:	4680      	mov	r8, r0
  40195c:	f000 fbf6 	bl	40214c <__malloc_lock>
  401960:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401964:	4969      	ldr	r1, [pc, #420]	; (401b0c <_free_r+0x1bc>)
  401966:	f027 0301 	bic.w	r3, r7, #1
  40196a:	f1a5 0408 	sub.w	r4, r5, #8
  40196e:	18e2      	adds	r2, r4, r3
  401970:	688e      	ldr	r6, [r1, #8]
  401972:	6850      	ldr	r0, [r2, #4]
  401974:	42b2      	cmp	r2, r6
  401976:	f020 0003 	bic.w	r0, r0, #3
  40197a:	d05e      	beq.n	401a3a <_free_r+0xea>
  40197c:	07fe      	lsls	r6, r7, #31
  40197e:	6050      	str	r0, [r2, #4]
  401980:	d40b      	bmi.n	40199a <_free_r+0x4a>
  401982:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401986:	1be4      	subs	r4, r4, r7
  401988:	f101 0e08 	add.w	lr, r1, #8
  40198c:	68a5      	ldr	r5, [r4, #8]
  40198e:	4575      	cmp	r5, lr
  401990:	443b      	add	r3, r7
  401992:	d06d      	beq.n	401a70 <_free_r+0x120>
  401994:	68e7      	ldr	r7, [r4, #12]
  401996:	60ef      	str	r7, [r5, #12]
  401998:	60bd      	str	r5, [r7, #8]
  40199a:	1815      	adds	r5, r2, r0
  40199c:	686d      	ldr	r5, [r5, #4]
  40199e:	07ed      	lsls	r5, r5, #31
  4019a0:	d53e      	bpl.n	401a20 <_free_r+0xd0>
  4019a2:	f043 0201 	orr.w	r2, r3, #1
  4019a6:	6062      	str	r2, [r4, #4]
  4019a8:	50e3      	str	r3, [r4, r3]
  4019aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4019ae:	d217      	bcs.n	4019e0 <_free_r+0x90>
  4019b0:	08db      	lsrs	r3, r3, #3
  4019b2:	1c58      	adds	r0, r3, #1
  4019b4:	109a      	asrs	r2, r3, #2
  4019b6:	684d      	ldr	r5, [r1, #4]
  4019b8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4019bc:	60a7      	str	r7, [r4, #8]
  4019be:	2301      	movs	r3, #1
  4019c0:	4093      	lsls	r3, r2
  4019c2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4019c6:	432b      	orrs	r3, r5
  4019c8:	3a08      	subs	r2, #8
  4019ca:	60e2      	str	r2, [r4, #12]
  4019cc:	604b      	str	r3, [r1, #4]
  4019ce:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4019d2:	60fc      	str	r4, [r7, #12]
  4019d4:	4640      	mov	r0, r8
  4019d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4019da:	f000 bbbd 	b.w	402158 <__malloc_unlock>
  4019de:	4770      	bx	lr
  4019e0:	0a5a      	lsrs	r2, r3, #9
  4019e2:	2a04      	cmp	r2, #4
  4019e4:	d852      	bhi.n	401a8c <_free_r+0x13c>
  4019e6:	099a      	lsrs	r2, r3, #6
  4019e8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4019ec:	00ff      	lsls	r7, r7, #3
  4019ee:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4019f2:	19c8      	adds	r0, r1, r7
  4019f4:	59ca      	ldr	r2, [r1, r7]
  4019f6:	3808      	subs	r0, #8
  4019f8:	4290      	cmp	r0, r2
  4019fa:	d04f      	beq.n	401a9c <_free_r+0x14c>
  4019fc:	6851      	ldr	r1, [r2, #4]
  4019fe:	f021 0103 	bic.w	r1, r1, #3
  401a02:	428b      	cmp	r3, r1
  401a04:	d232      	bcs.n	401a6c <_free_r+0x11c>
  401a06:	6892      	ldr	r2, [r2, #8]
  401a08:	4290      	cmp	r0, r2
  401a0a:	d1f7      	bne.n	4019fc <_free_r+0xac>
  401a0c:	68c3      	ldr	r3, [r0, #12]
  401a0e:	60a0      	str	r0, [r4, #8]
  401a10:	60e3      	str	r3, [r4, #12]
  401a12:	609c      	str	r4, [r3, #8]
  401a14:	60c4      	str	r4, [r0, #12]
  401a16:	4640      	mov	r0, r8
  401a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401a1c:	f000 bb9c 	b.w	402158 <__malloc_unlock>
  401a20:	6895      	ldr	r5, [r2, #8]
  401a22:	4f3b      	ldr	r7, [pc, #236]	; (401b10 <_free_r+0x1c0>)
  401a24:	42bd      	cmp	r5, r7
  401a26:	4403      	add	r3, r0
  401a28:	d040      	beq.n	401aac <_free_r+0x15c>
  401a2a:	68d0      	ldr	r0, [r2, #12]
  401a2c:	60e8      	str	r0, [r5, #12]
  401a2e:	f043 0201 	orr.w	r2, r3, #1
  401a32:	6085      	str	r5, [r0, #8]
  401a34:	6062      	str	r2, [r4, #4]
  401a36:	50e3      	str	r3, [r4, r3]
  401a38:	e7b7      	b.n	4019aa <_free_r+0x5a>
  401a3a:	07ff      	lsls	r7, r7, #31
  401a3c:	4403      	add	r3, r0
  401a3e:	d407      	bmi.n	401a50 <_free_r+0x100>
  401a40:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401a44:	1aa4      	subs	r4, r4, r2
  401a46:	4413      	add	r3, r2
  401a48:	68a0      	ldr	r0, [r4, #8]
  401a4a:	68e2      	ldr	r2, [r4, #12]
  401a4c:	60c2      	str	r2, [r0, #12]
  401a4e:	6090      	str	r0, [r2, #8]
  401a50:	4a30      	ldr	r2, [pc, #192]	; (401b14 <_free_r+0x1c4>)
  401a52:	6812      	ldr	r2, [r2, #0]
  401a54:	f043 0001 	orr.w	r0, r3, #1
  401a58:	4293      	cmp	r3, r2
  401a5a:	6060      	str	r0, [r4, #4]
  401a5c:	608c      	str	r4, [r1, #8]
  401a5e:	d3b9      	bcc.n	4019d4 <_free_r+0x84>
  401a60:	4b2d      	ldr	r3, [pc, #180]	; (401b18 <_free_r+0x1c8>)
  401a62:	4640      	mov	r0, r8
  401a64:	6819      	ldr	r1, [r3, #0]
  401a66:	f7ff ff23 	bl	4018b0 <_malloc_trim_r>
  401a6a:	e7b3      	b.n	4019d4 <_free_r+0x84>
  401a6c:	4610      	mov	r0, r2
  401a6e:	e7cd      	b.n	401a0c <_free_r+0xbc>
  401a70:	1811      	adds	r1, r2, r0
  401a72:	6849      	ldr	r1, [r1, #4]
  401a74:	07c9      	lsls	r1, r1, #31
  401a76:	d444      	bmi.n	401b02 <_free_r+0x1b2>
  401a78:	6891      	ldr	r1, [r2, #8]
  401a7a:	68d2      	ldr	r2, [r2, #12]
  401a7c:	60ca      	str	r2, [r1, #12]
  401a7e:	4403      	add	r3, r0
  401a80:	f043 0001 	orr.w	r0, r3, #1
  401a84:	6091      	str	r1, [r2, #8]
  401a86:	6060      	str	r0, [r4, #4]
  401a88:	50e3      	str	r3, [r4, r3]
  401a8a:	e7a3      	b.n	4019d4 <_free_r+0x84>
  401a8c:	2a14      	cmp	r2, #20
  401a8e:	d816      	bhi.n	401abe <_free_r+0x16e>
  401a90:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401a94:	00ff      	lsls	r7, r7, #3
  401a96:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  401a9a:	e7aa      	b.n	4019f2 <_free_r+0xa2>
  401a9c:	10aa      	asrs	r2, r5, #2
  401a9e:	2301      	movs	r3, #1
  401aa0:	684d      	ldr	r5, [r1, #4]
  401aa2:	4093      	lsls	r3, r2
  401aa4:	432b      	orrs	r3, r5
  401aa6:	604b      	str	r3, [r1, #4]
  401aa8:	4603      	mov	r3, r0
  401aaa:	e7b0      	b.n	401a0e <_free_r+0xbe>
  401aac:	f043 0201 	orr.w	r2, r3, #1
  401ab0:	614c      	str	r4, [r1, #20]
  401ab2:	610c      	str	r4, [r1, #16]
  401ab4:	60e5      	str	r5, [r4, #12]
  401ab6:	60a5      	str	r5, [r4, #8]
  401ab8:	6062      	str	r2, [r4, #4]
  401aba:	50e3      	str	r3, [r4, r3]
  401abc:	e78a      	b.n	4019d4 <_free_r+0x84>
  401abe:	2a54      	cmp	r2, #84	; 0x54
  401ac0:	d806      	bhi.n	401ad0 <_free_r+0x180>
  401ac2:	0b1a      	lsrs	r2, r3, #12
  401ac4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401ac8:	00ff      	lsls	r7, r7, #3
  401aca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401ace:	e790      	b.n	4019f2 <_free_r+0xa2>
  401ad0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401ad4:	d806      	bhi.n	401ae4 <_free_r+0x194>
  401ad6:	0bda      	lsrs	r2, r3, #15
  401ad8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401adc:	00ff      	lsls	r7, r7, #3
  401ade:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401ae2:	e786      	b.n	4019f2 <_free_r+0xa2>
  401ae4:	f240 5054 	movw	r0, #1364	; 0x554
  401ae8:	4282      	cmp	r2, r0
  401aea:	d806      	bhi.n	401afa <_free_r+0x1aa>
  401aec:	0c9a      	lsrs	r2, r3, #18
  401aee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401af2:	00ff      	lsls	r7, r7, #3
  401af4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401af8:	e77b      	b.n	4019f2 <_free_r+0xa2>
  401afa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  401afe:	257e      	movs	r5, #126	; 0x7e
  401b00:	e777      	b.n	4019f2 <_free_r+0xa2>
  401b02:	f043 0101 	orr.w	r1, r3, #1
  401b06:	6061      	str	r1, [r4, #4]
  401b08:	6013      	str	r3, [r2, #0]
  401b0a:	e763      	b.n	4019d4 <_free_r+0x84>
  401b0c:	2000043c 	.word	0x2000043c
  401b10:	20000444 	.word	0x20000444
  401b14:	20000848 	.word	0x20000848
  401b18:	2000573c 	.word	0x2000573c

00401b1c <_fwalk_reent>:
  401b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401b20:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401b24:	d01f      	beq.n	401b66 <_fwalk_reent+0x4a>
  401b26:	4688      	mov	r8, r1
  401b28:	4606      	mov	r6, r0
  401b2a:	f04f 0900 	mov.w	r9, #0
  401b2e:	687d      	ldr	r5, [r7, #4]
  401b30:	68bc      	ldr	r4, [r7, #8]
  401b32:	3d01      	subs	r5, #1
  401b34:	d411      	bmi.n	401b5a <_fwalk_reent+0x3e>
  401b36:	89a3      	ldrh	r3, [r4, #12]
  401b38:	2b01      	cmp	r3, #1
  401b3a:	f105 35ff 	add.w	r5, r5, #4294967295
  401b3e:	d908      	bls.n	401b52 <_fwalk_reent+0x36>
  401b40:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401b44:	3301      	adds	r3, #1
  401b46:	4621      	mov	r1, r4
  401b48:	4630      	mov	r0, r6
  401b4a:	d002      	beq.n	401b52 <_fwalk_reent+0x36>
  401b4c:	47c0      	blx	r8
  401b4e:	ea49 0900 	orr.w	r9, r9, r0
  401b52:	1c6b      	adds	r3, r5, #1
  401b54:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401b58:	d1ed      	bne.n	401b36 <_fwalk_reent+0x1a>
  401b5a:	683f      	ldr	r7, [r7, #0]
  401b5c:	2f00      	cmp	r7, #0
  401b5e:	d1e6      	bne.n	401b2e <_fwalk_reent+0x12>
  401b60:	4648      	mov	r0, r9
  401b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b66:	46b9      	mov	r9, r7
  401b68:	4648      	mov	r0, r9
  401b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b6e:	bf00      	nop

00401b70 <__retarget_lock_init_recursive>:
  401b70:	4770      	bx	lr
  401b72:	bf00      	nop

00401b74 <__retarget_lock_close_recursive>:
  401b74:	4770      	bx	lr
  401b76:	bf00      	nop

00401b78 <__retarget_lock_acquire_recursive>:
  401b78:	4770      	bx	lr
  401b7a:	bf00      	nop

00401b7c <__retarget_lock_release_recursive>:
  401b7c:	4770      	bx	lr
  401b7e:	bf00      	nop

00401b80 <__swhatbuf_r>:
  401b80:	b570      	push	{r4, r5, r6, lr}
  401b82:	460c      	mov	r4, r1
  401b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401b88:	2900      	cmp	r1, #0
  401b8a:	b090      	sub	sp, #64	; 0x40
  401b8c:	4615      	mov	r5, r2
  401b8e:	461e      	mov	r6, r3
  401b90:	db14      	blt.n	401bbc <__swhatbuf_r+0x3c>
  401b92:	aa01      	add	r2, sp, #4
  401b94:	f000 fc28 	bl	4023e8 <_fstat_r>
  401b98:	2800      	cmp	r0, #0
  401b9a:	db0f      	blt.n	401bbc <__swhatbuf_r+0x3c>
  401b9c:	9a02      	ldr	r2, [sp, #8]
  401b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401ba2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401ba6:	fab2 f282 	clz	r2, r2
  401baa:	0952      	lsrs	r2, r2, #5
  401bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401bb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401bb4:	6032      	str	r2, [r6, #0]
  401bb6:	602b      	str	r3, [r5, #0]
  401bb8:	b010      	add	sp, #64	; 0x40
  401bba:	bd70      	pop	{r4, r5, r6, pc}
  401bbc:	89a2      	ldrh	r2, [r4, #12]
  401bbe:	2300      	movs	r3, #0
  401bc0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401bc4:	6033      	str	r3, [r6, #0]
  401bc6:	d004      	beq.n	401bd2 <__swhatbuf_r+0x52>
  401bc8:	2240      	movs	r2, #64	; 0x40
  401bca:	4618      	mov	r0, r3
  401bcc:	602a      	str	r2, [r5, #0]
  401bce:	b010      	add	sp, #64	; 0x40
  401bd0:	bd70      	pop	{r4, r5, r6, pc}
  401bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401bd6:	602b      	str	r3, [r5, #0]
  401bd8:	b010      	add	sp, #64	; 0x40
  401bda:	bd70      	pop	{r4, r5, r6, pc}

00401bdc <malloc>:
  401bdc:	4b02      	ldr	r3, [pc, #8]	; (401be8 <malloc+0xc>)
  401bde:	4601      	mov	r1, r0
  401be0:	6818      	ldr	r0, [r3, #0]
  401be2:	f000 b803 	b.w	401bec <_malloc_r>
  401be6:	bf00      	nop
  401be8:	20000008 	.word	0x20000008

00401bec <_malloc_r>:
  401bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bf0:	f101 060b 	add.w	r6, r1, #11
  401bf4:	2e16      	cmp	r6, #22
  401bf6:	b083      	sub	sp, #12
  401bf8:	4605      	mov	r5, r0
  401bfa:	f240 809e 	bls.w	401d3a <_malloc_r+0x14e>
  401bfe:	f036 0607 	bics.w	r6, r6, #7
  401c02:	f100 80bd 	bmi.w	401d80 <_malloc_r+0x194>
  401c06:	42b1      	cmp	r1, r6
  401c08:	f200 80ba 	bhi.w	401d80 <_malloc_r+0x194>
  401c0c:	f000 fa9e 	bl	40214c <__malloc_lock>
  401c10:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401c14:	f0c0 8293 	bcc.w	40213e <_malloc_r+0x552>
  401c18:	0a73      	lsrs	r3, r6, #9
  401c1a:	f000 80b8 	beq.w	401d8e <_malloc_r+0x1a2>
  401c1e:	2b04      	cmp	r3, #4
  401c20:	f200 8179 	bhi.w	401f16 <_malloc_r+0x32a>
  401c24:	09b3      	lsrs	r3, r6, #6
  401c26:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401c2a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401c2e:	00c3      	lsls	r3, r0, #3
  401c30:	4fbf      	ldr	r7, [pc, #764]	; (401f30 <_malloc_r+0x344>)
  401c32:	443b      	add	r3, r7
  401c34:	f1a3 0108 	sub.w	r1, r3, #8
  401c38:	685c      	ldr	r4, [r3, #4]
  401c3a:	42a1      	cmp	r1, r4
  401c3c:	d106      	bne.n	401c4c <_malloc_r+0x60>
  401c3e:	e00c      	b.n	401c5a <_malloc_r+0x6e>
  401c40:	2a00      	cmp	r2, #0
  401c42:	f280 80aa 	bge.w	401d9a <_malloc_r+0x1ae>
  401c46:	68e4      	ldr	r4, [r4, #12]
  401c48:	42a1      	cmp	r1, r4
  401c4a:	d006      	beq.n	401c5a <_malloc_r+0x6e>
  401c4c:	6863      	ldr	r3, [r4, #4]
  401c4e:	f023 0303 	bic.w	r3, r3, #3
  401c52:	1b9a      	subs	r2, r3, r6
  401c54:	2a0f      	cmp	r2, #15
  401c56:	ddf3      	ble.n	401c40 <_malloc_r+0x54>
  401c58:	4670      	mov	r0, lr
  401c5a:	693c      	ldr	r4, [r7, #16]
  401c5c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401f44 <_malloc_r+0x358>
  401c60:	4574      	cmp	r4, lr
  401c62:	f000 81ab 	beq.w	401fbc <_malloc_r+0x3d0>
  401c66:	6863      	ldr	r3, [r4, #4]
  401c68:	f023 0303 	bic.w	r3, r3, #3
  401c6c:	1b9a      	subs	r2, r3, r6
  401c6e:	2a0f      	cmp	r2, #15
  401c70:	f300 8190 	bgt.w	401f94 <_malloc_r+0x3a8>
  401c74:	2a00      	cmp	r2, #0
  401c76:	f8c7 e014 	str.w	lr, [r7, #20]
  401c7a:	f8c7 e010 	str.w	lr, [r7, #16]
  401c7e:	f280 809d 	bge.w	401dbc <_malloc_r+0x1d0>
  401c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401c86:	f080 8161 	bcs.w	401f4c <_malloc_r+0x360>
  401c8a:	08db      	lsrs	r3, r3, #3
  401c8c:	f103 0c01 	add.w	ip, r3, #1
  401c90:	1099      	asrs	r1, r3, #2
  401c92:	687a      	ldr	r2, [r7, #4]
  401c94:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401c98:	f8c4 8008 	str.w	r8, [r4, #8]
  401c9c:	2301      	movs	r3, #1
  401c9e:	408b      	lsls	r3, r1
  401ca0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401ca4:	4313      	orrs	r3, r2
  401ca6:	3908      	subs	r1, #8
  401ca8:	60e1      	str	r1, [r4, #12]
  401caa:	607b      	str	r3, [r7, #4]
  401cac:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401cb0:	f8c8 400c 	str.w	r4, [r8, #12]
  401cb4:	1082      	asrs	r2, r0, #2
  401cb6:	2401      	movs	r4, #1
  401cb8:	4094      	lsls	r4, r2
  401cba:	429c      	cmp	r4, r3
  401cbc:	f200 808b 	bhi.w	401dd6 <_malloc_r+0x1ea>
  401cc0:	421c      	tst	r4, r3
  401cc2:	d106      	bne.n	401cd2 <_malloc_r+0xe6>
  401cc4:	f020 0003 	bic.w	r0, r0, #3
  401cc8:	0064      	lsls	r4, r4, #1
  401cca:	421c      	tst	r4, r3
  401ccc:	f100 0004 	add.w	r0, r0, #4
  401cd0:	d0fa      	beq.n	401cc8 <_malloc_r+0xdc>
  401cd2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401cd6:	46cc      	mov	ip, r9
  401cd8:	4680      	mov	r8, r0
  401cda:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401cde:	459c      	cmp	ip, r3
  401ce0:	d107      	bne.n	401cf2 <_malloc_r+0x106>
  401ce2:	e16d      	b.n	401fc0 <_malloc_r+0x3d4>
  401ce4:	2a00      	cmp	r2, #0
  401ce6:	f280 817b 	bge.w	401fe0 <_malloc_r+0x3f4>
  401cea:	68db      	ldr	r3, [r3, #12]
  401cec:	459c      	cmp	ip, r3
  401cee:	f000 8167 	beq.w	401fc0 <_malloc_r+0x3d4>
  401cf2:	6859      	ldr	r1, [r3, #4]
  401cf4:	f021 0103 	bic.w	r1, r1, #3
  401cf8:	1b8a      	subs	r2, r1, r6
  401cfa:	2a0f      	cmp	r2, #15
  401cfc:	ddf2      	ble.n	401ce4 <_malloc_r+0xf8>
  401cfe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401d02:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401d06:	9300      	str	r3, [sp, #0]
  401d08:	199c      	adds	r4, r3, r6
  401d0a:	4628      	mov	r0, r5
  401d0c:	f046 0601 	orr.w	r6, r6, #1
  401d10:	f042 0501 	orr.w	r5, r2, #1
  401d14:	605e      	str	r6, [r3, #4]
  401d16:	f8c8 c00c 	str.w	ip, [r8, #12]
  401d1a:	f8cc 8008 	str.w	r8, [ip, #8]
  401d1e:	617c      	str	r4, [r7, #20]
  401d20:	613c      	str	r4, [r7, #16]
  401d22:	f8c4 e00c 	str.w	lr, [r4, #12]
  401d26:	f8c4 e008 	str.w	lr, [r4, #8]
  401d2a:	6065      	str	r5, [r4, #4]
  401d2c:	505a      	str	r2, [r3, r1]
  401d2e:	f000 fa13 	bl	402158 <__malloc_unlock>
  401d32:	9b00      	ldr	r3, [sp, #0]
  401d34:	f103 0408 	add.w	r4, r3, #8
  401d38:	e01e      	b.n	401d78 <_malloc_r+0x18c>
  401d3a:	2910      	cmp	r1, #16
  401d3c:	d820      	bhi.n	401d80 <_malloc_r+0x194>
  401d3e:	f000 fa05 	bl	40214c <__malloc_lock>
  401d42:	2610      	movs	r6, #16
  401d44:	2318      	movs	r3, #24
  401d46:	2002      	movs	r0, #2
  401d48:	4f79      	ldr	r7, [pc, #484]	; (401f30 <_malloc_r+0x344>)
  401d4a:	443b      	add	r3, r7
  401d4c:	f1a3 0208 	sub.w	r2, r3, #8
  401d50:	685c      	ldr	r4, [r3, #4]
  401d52:	4294      	cmp	r4, r2
  401d54:	f000 813d 	beq.w	401fd2 <_malloc_r+0x3e6>
  401d58:	6863      	ldr	r3, [r4, #4]
  401d5a:	68e1      	ldr	r1, [r4, #12]
  401d5c:	68a6      	ldr	r6, [r4, #8]
  401d5e:	f023 0303 	bic.w	r3, r3, #3
  401d62:	4423      	add	r3, r4
  401d64:	4628      	mov	r0, r5
  401d66:	685a      	ldr	r2, [r3, #4]
  401d68:	60f1      	str	r1, [r6, #12]
  401d6a:	f042 0201 	orr.w	r2, r2, #1
  401d6e:	608e      	str	r6, [r1, #8]
  401d70:	605a      	str	r2, [r3, #4]
  401d72:	f000 f9f1 	bl	402158 <__malloc_unlock>
  401d76:	3408      	adds	r4, #8
  401d78:	4620      	mov	r0, r4
  401d7a:	b003      	add	sp, #12
  401d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d80:	2400      	movs	r4, #0
  401d82:	230c      	movs	r3, #12
  401d84:	4620      	mov	r0, r4
  401d86:	602b      	str	r3, [r5, #0]
  401d88:	b003      	add	sp, #12
  401d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d8e:	2040      	movs	r0, #64	; 0x40
  401d90:	f44f 7300 	mov.w	r3, #512	; 0x200
  401d94:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401d98:	e74a      	b.n	401c30 <_malloc_r+0x44>
  401d9a:	4423      	add	r3, r4
  401d9c:	68e1      	ldr	r1, [r4, #12]
  401d9e:	685a      	ldr	r2, [r3, #4]
  401da0:	68a6      	ldr	r6, [r4, #8]
  401da2:	f042 0201 	orr.w	r2, r2, #1
  401da6:	60f1      	str	r1, [r6, #12]
  401da8:	4628      	mov	r0, r5
  401daa:	608e      	str	r6, [r1, #8]
  401dac:	605a      	str	r2, [r3, #4]
  401dae:	f000 f9d3 	bl	402158 <__malloc_unlock>
  401db2:	3408      	adds	r4, #8
  401db4:	4620      	mov	r0, r4
  401db6:	b003      	add	sp, #12
  401db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dbc:	4423      	add	r3, r4
  401dbe:	4628      	mov	r0, r5
  401dc0:	685a      	ldr	r2, [r3, #4]
  401dc2:	f042 0201 	orr.w	r2, r2, #1
  401dc6:	605a      	str	r2, [r3, #4]
  401dc8:	f000 f9c6 	bl	402158 <__malloc_unlock>
  401dcc:	3408      	adds	r4, #8
  401dce:	4620      	mov	r0, r4
  401dd0:	b003      	add	sp, #12
  401dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dd6:	68bc      	ldr	r4, [r7, #8]
  401dd8:	6863      	ldr	r3, [r4, #4]
  401dda:	f023 0803 	bic.w	r8, r3, #3
  401dde:	45b0      	cmp	r8, r6
  401de0:	d304      	bcc.n	401dec <_malloc_r+0x200>
  401de2:	eba8 0306 	sub.w	r3, r8, r6
  401de6:	2b0f      	cmp	r3, #15
  401de8:	f300 8085 	bgt.w	401ef6 <_malloc_r+0x30a>
  401dec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401f48 <_malloc_r+0x35c>
  401df0:	4b50      	ldr	r3, [pc, #320]	; (401f34 <_malloc_r+0x348>)
  401df2:	f8d9 2000 	ldr.w	r2, [r9]
  401df6:	681b      	ldr	r3, [r3, #0]
  401df8:	3201      	adds	r2, #1
  401dfa:	4433      	add	r3, r6
  401dfc:	eb04 0a08 	add.w	sl, r4, r8
  401e00:	f000 8155 	beq.w	4020ae <_malloc_r+0x4c2>
  401e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401e08:	330f      	adds	r3, #15
  401e0a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401e0e:	f02b 0b0f 	bic.w	fp, fp, #15
  401e12:	4659      	mov	r1, fp
  401e14:	4628      	mov	r0, r5
  401e16:	f000 f9a5 	bl	402164 <_sbrk_r>
  401e1a:	1c41      	adds	r1, r0, #1
  401e1c:	4602      	mov	r2, r0
  401e1e:	f000 80fc 	beq.w	40201a <_malloc_r+0x42e>
  401e22:	4582      	cmp	sl, r0
  401e24:	f200 80f7 	bhi.w	402016 <_malloc_r+0x42a>
  401e28:	4b43      	ldr	r3, [pc, #268]	; (401f38 <_malloc_r+0x34c>)
  401e2a:	6819      	ldr	r1, [r3, #0]
  401e2c:	4459      	add	r1, fp
  401e2e:	6019      	str	r1, [r3, #0]
  401e30:	f000 814d 	beq.w	4020ce <_malloc_r+0x4e2>
  401e34:	f8d9 0000 	ldr.w	r0, [r9]
  401e38:	3001      	adds	r0, #1
  401e3a:	bf1b      	ittet	ne
  401e3c:	eba2 0a0a 	subne.w	sl, r2, sl
  401e40:	4451      	addne	r1, sl
  401e42:	f8c9 2000 	streq.w	r2, [r9]
  401e46:	6019      	strne	r1, [r3, #0]
  401e48:	f012 0107 	ands.w	r1, r2, #7
  401e4c:	f000 8115 	beq.w	40207a <_malloc_r+0x48e>
  401e50:	f1c1 0008 	rsb	r0, r1, #8
  401e54:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401e58:	4402      	add	r2, r0
  401e5a:	3108      	adds	r1, #8
  401e5c:	eb02 090b 	add.w	r9, r2, fp
  401e60:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401e64:	eba1 0909 	sub.w	r9, r1, r9
  401e68:	4649      	mov	r1, r9
  401e6a:	4628      	mov	r0, r5
  401e6c:	9301      	str	r3, [sp, #4]
  401e6e:	9200      	str	r2, [sp, #0]
  401e70:	f000 f978 	bl	402164 <_sbrk_r>
  401e74:	1c43      	adds	r3, r0, #1
  401e76:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401e7a:	f000 8143 	beq.w	402104 <_malloc_r+0x518>
  401e7e:	1a80      	subs	r0, r0, r2
  401e80:	4448      	add	r0, r9
  401e82:	f040 0001 	orr.w	r0, r0, #1
  401e86:	6819      	ldr	r1, [r3, #0]
  401e88:	60ba      	str	r2, [r7, #8]
  401e8a:	4449      	add	r1, r9
  401e8c:	42bc      	cmp	r4, r7
  401e8e:	6050      	str	r0, [r2, #4]
  401e90:	6019      	str	r1, [r3, #0]
  401e92:	d017      	beq.n	401ec4 <_malloc_r+0x2d8>
  401e94:	f1b8 0f0f 	cmp.w	r8, #15
  401e98:	f240 80fb 	bls.w	402092 <_malloc_r+0x4a6>
  401e9c:	6860      	ldr	r0, [r4, #4]
  401e9e:	f1a8 020c 	sub.w	r2, r8, #12
  401ea2:	f022 0207 	bic.w	r2, r2, #7
  401ea6:	eb04 0e02 	add.w	lr, r4, r2
  401eaa:	f000 0001 	and.w	r0, r0, #1
  401eae:	f04f 0c05 	mov.w	ip, #5
  401eb2:	4310      	orrs	r0, r2
  401eb4:	2a0f      	cmp	r2, #15
  401eb6:	6060      	str	r0, [r4, #4]
  401eb8:	f8ce c004 	str.w	ip, [lr, #4]
  401ebc:	f8ce c008 	str.w	ip, [lr, #8]
  401ec0:	f200 8117 	bhi.w	4020f2 <_malloc_r+0x506>
  401ec4:	4b1d      	ldr	r3, [pc, #116]	; (401f3c <_malloc_r+0x350>)
  401ec6:	68bc      	ldr	r4, [r7, #8]
  401ec8:	681a      	ldr	r2, [r3, #0]
  401eca:	4291      	cmp	r1, r2
  401ecc:	bf88      	it	hi
  401ece:	6019      	strhi	r1, [r3, #0]
  401ed0:	4b1b      	ldr	r3, [pc, #108]	; (401f40 <_malloc_r+0x354>)
  401ed2:	681a      	ldr	r2, [r3, #0]
  401ed4:	4291      	cmp	r1, r2
  401ed6:	6862      	ldr	r2, [r4, #4]
  401ed8:	bf88      	it	hi
  401eda:	6019      	strhi	r1, [r3, #0]
  401edc:	f022 0203 	bic.w	r2, r2, #3
  401ee0:	4296      	cmp	r6, r2
  401ee2:	eba2 0306 	sub.w	r3, r2, r6
  401ee6:	d801      	bhi.n	401eec <_malloc_r+0x300>
  401ee8:	2b0f      	cmp	r3, #15
  401eea:	dc04      	bgt.n	401ef6 <_malloc_r+0x30a>
  401eec:	4628      	mov	r0, r5
  401eee:	f000 f933 	bl	402158 <__malloc_unlock>
  401ef2:	2400      	movs	r4, #0
  401ef4:	e740      	b.n	401d78 <_malloc_r+0x18c>
  401ef6:	19a2      	adds	r2, r4, r6
  401ef8:	f043 0301 	orr.w	r3, r3, #1
  401efc:	f046 0601 	orr.w	r6, r6, #1
  401f00:	6066      	str	r6, [r4, #4]
  401f02:	4628      	mov	r0, r5
  401f04:	60ba      	str	r2, [r7, #8]
  401f06:	6053      	str	r3, [r2, #4]
  401f08:	f000 f926 	bl	402158 <__malloc_unlock>
  401f0c:	3408      	adds	r4, #8
  401f0e:	4620      	mov	r0, r4
  401f10:	b003      	add	sp, #12
  401f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f16:	2b14      	cmp	r3, #20
  401f18:	d971      	bls.n	401ffe <_malloc_r+0x412>
  401f1a:	2b54      	cmp	r3, #84	; 0x54
  401f1c:	f200 80a3 	bhi.w	402066 <_malloc_r+0x47a>
  401f20:	0b33      	lsrs	r3, r6, #12
  401f22:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401f26:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401f2a:	00c3      	lsls	r3, r0, #3
  401f2c:	e680      	b.n	401c30 <_malloc_r+0x44>
  401f2e:	bf00      	nop
  401f30:	2000043c 	.word	0x2000043c
  401f34:	2000573c 	.word	0x2000573c
  401f38:	2000570c 	.word	0x2000570c
  401f3c:	20005734 	.word	0x20005734
  401f40:	20005738 	.word	0x20005738
  401f44:	20000444 	.word	0x20000444
  401f48:	20000844 	.word	0x20000844
  401f4c:	0a5a      	lsrs	r2, r3, #9
  401f4e:	2a04      	cmp	r2, #4
  401f50:	d95b      	bls.n	40200a <_malloc_r+0x41e>
  401f52:	2a14      	cmp	r2, #20
  401f54:	f200 80ae 	bhi.w	4020b4 <_malloc_r+0x4c8>
  401f58:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401f5c:	00c9      	lsls	r1, r1, #3
  401f5e:	325b      	adds	r2, #91	; 0x5b
  401f60:	eb07 0c01 	add.w	ip, r7, r1
  401f64:	5879      	ldr	r1, [r7, r1]
  401f66:	f1ac 0c08 	sub.w	ip, ip, #8
  401f6a:	458c      	cmp	ip, r1
  401f6c:	f000 8088 	beq.w	402080 <_malloc_r+0x494>
  401f70:	684a      	ldr	r2, [r1, #4]
  401f72:	f022 0203 	bic.w	r2, r2, #3
  401f76:	4293      	cmp	r3, r2
  401f78:	d273      	bcs.n	402062 <_malloc_r+0x476>
  401f7a:	6889      	ldr	r1, [r1, #8]
  401f7c:	458c      	cmp	ip, r1
  401f7e:	d1f7      	bne.n	401f70 <_malloc_r+0x384>
  401f80:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401f84:	687b      	ldr	r3, [r7, #4]
  401f86:	60e2      	str	r2, [r4, #12]
  401f88:	f8c4 c008 	str.w	ip, [r4, #8]
  401f8c:	6094      	str	r4, [r2, #8]
  401f8e:	f8cc 400c 	str.w	r4, [ip, #12]
  401f92:	e68f      	b.n	401cb4 <_malloc_r+0xc8>
  401f94:	19a1      	adds	r1, r4, r6
  401f96:	f046 0c01 	orr.w	ip, r6, #1
  401f9a:	f042 0601 	orr.w	r6, r2, #1
  401f9e:	f8c4 c004 	str.w	ip, [r4, #4]
  401fa2:	4628      	mov	r0, r5
  401fa4:	6179      	str	r1, [r7, #20]
  401fa6:	6139      	str	r1, [r7, #16]
  401fa8:	f8c1 e00c 	str.w	lr, [r1, #12]
  401fac:	f8c1 e008 	str.w	lr, [r1, #8]
  401fb0:	604e      	str	r6, [r1, #4]
  401fb2:	50e2      	str	r2, [r4, r3]
  401fb4:	f000 f8d0 	bl	402158 <__malloc_unlock>
  401fb8:	3408      	adds	r4, #8
  401fba:	e6dd      	b.n	401d78 <_malloc_r+0x18c>
  401fbc:	687b      	ldr	r3, [r7, #4]
  401fbe:	e679      	b.n	401cb4 <_malloc_r+0xc8>
  401fc0:	f108 0801 	add.w	r8, r8, #1
  401fc4:	f018 0f03 	tst.w	r8, #3
  401fc8:	f10c 0c08 	add.w	ip, ip, #8
  401fcc:	f47f ae85 	bne.w	401cda <_malloc_r+0xee>
  401fd0:	e02d      	b.n	40202e <_malloc_r+0x442>
  401fd2:	68dc      	ldr	r4, [r3, #12]
  401fd4:	42a3      	cmp	r3, r4
  401fd6:	bf08      	it	eq
  401fd8:	3002      	addeq	r0, #2
  401fda:	f43f ae3e 	beq.w	401c5a <_malloc_r+0x6e>
  401fde:	e6bb      	b.n	401d58 <_malloc_r+0x16c>
  401fe0:	4419      	add	r1, r3
  401fe2:	461c      	mov	r4, r3
  401fe4:	684a      	ldr	r2, [r1, #4]
  401fe6:	68db      	ldr	r3, [r3, #12]
  401fe8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401fec:	f042 0201 	orr.w	r2, r2, #1
  401ff0:	604a      	str	r2, [r1, #4]
  401ff2:	4628      	mov	r0, r5
  401ff4:	60f3      	str	r3, [r6, #12]
  401ff6:	609e      	str	r6, [r3, #8]
  401ff8:	f000 f8ae 	bl	402158 <__malloc_unlock>
  401ffc:	e6bc      	b.n	401d78 <_malloc_r+0x18c>
  401ffe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402002:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  402006:	00c3      	lsls	r3, r0, #3
  402008:	e612      	b.n	401c30 <_malloc_r+0x44>
  40200a:	099a      	lsrs	r2, r3, #6
  40200c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402010:	00c9      	lsls	r1, r1, #3
  402012:	3238      	adds	r2, #56	; 0x38
  402014:	e7a4      	b.n	401f60 <_malloc_r+0x374>
  402016:	42bc      	cmp	r4, r7
  402018:	d054      	beq.n	4020c4 <_malloc_r+0x4d8>
  40201a:	68bc      	ldr	r4, [r7, #8]
  40201c:	6862      	ldr	r2, [r4, #4]
  40201e:	f022 0203 	bic.w	r2, r2, #3
  402022:	e75d      	b.n	401ee0 <_malloc_r+0x2f4>
  402024:	f859 3908 	ldr.w	r3, [r9], #-8
  402028:	4599      	cmp	r9, r3
  40202a:	f040 8086 	bne.w	40213a <_malloc_r+0x54e>
  40202e:	f010 0f03 	tst.w	r0, #3
  402032:	f100 30ff 	add.w	r0, r0, #4294967295
  402036:	d1f5      	bne.n	402024 <_malloc_r+0x438>
  402038:	687b      	ldr	r3, [r7, #4]
  40203a:	ea23 0304 	bic.w	r3, r3, r4
  40203e:	607b      	str	r3, [r7, #4]
  402040:	0064      	lsls	r4, r4, #1
  402042:	429c      	cmp	r4, r3
  402044:	f63f aec7 	bhi.w	401dd6 <_malloc_r+0x1ea>
  402048:	2c00      	cmp	r4, #0
  40204a:	f43f aec4 	beq.w	401dd6 <_malloc_r+0x1ea>
  40204e:	421c      	tst	r4, r3
  402050:	4640      	mov	r0, r8
  402052:	f47f ae3e 	bne.w	401cd2 <_malloc_r+0xe6>
  402056:	0064      	lsls	r4, r4, #1
  402058:	421c      	tst	r4, r3
  40205a:	f100 0004 	add.w	r0, r0, #4
  40205e:	d0fa      	beq.n	402056 <_malloc_r+0x46a>
  402060:	e637      	b.n	401cd2 <_malloc_r+0xe6>
  402062:	468c      	mov	ip, r1
  402064:	e78c      	b.n	401f80 <_malloc_r+0x394>
  402066:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40206a:	d815      	bhi.n	402098 <_malloc_r+0x4ac>
  40206c:	0bf3      	lsrs	r3, r6, #15
  40206e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  402072:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  402076:	00c3      	lsls	r3, r0, #3
  402078:	e5da      	b.n	401c30 <_malloc_r+0x44>
  40207a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40207e:	e6ed      	b.n	401e5c <_malloc_r+0x270>
  402080:	687b      	ldr	r3, [r7, #4]
  402082:	1092      	asrs	r2, r2, #2
  402084:	2101      	movs	r1, #1
  402086:	fa01 f202 	lsl.w	r2, r1, r2
  40208a:	4313      	orrs	r3, r2
  40208c:	607b      	str	r3, [r7, #4]
  40208e:	4662      	mov	r2, ip
  402090:	e779      	b.n	401f86 <_malloc_r+0x39a>
  402092:	2301      	movs	r3, #1
  402094:	6053      	str	r3, [r2, #4]
  402096:	e729      	b.n	401eec <_malloc_r+0x300>
  402098:	f240 5254 	movw	r2, #1364	; 0x554
  40209c:	4293      	cmp	r3, r2
  40209e:	d822      	bhi.n	4020e6 <_malloc_r+0x4fa>
  4020a0:	0cb3      	lsrs	r3, r6, #18
  4020a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4020a6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4020aa:	00c3      	lsls	r3, r0, #3
  4020ac:	e5c0      	b.n	401c30 <_malloc_r+0x44>
  4020ae:	f103 0b10 	add.w	fp, r3, #16
  4020b2:	e6ae      	b.n	401e12 <_malloc_r+0x226>
  4020b4:	2a54      	cmp	r2, #84	; 0x54
  4020b6:	d829      	bhi.n	40210c <_malloc_r+0x520>
  4020b8:	0b1a      	lsrs	r2, r3, #12
  4020ba:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4020be:	00c9      	lsls	r1, r1, #3
  4020c0:	326e      	adds	r2, #110	; 0x6e
  4020c2:	e74d      	b.n	401f60 <_malloc_r+0x374>
  4020c4:	4b20      	ldr	r3, [pc, #128]	; (402148 <_malloc_r+0x55c>)
  4020c6:	6819      	ldr	r1, [r3, #0]
  4020c8:	4459      	add	r1, fp
  4020ca:	6019      	str	r1, [r3, #0]
  4020cc:	e6b2      	b.n	401e34 <_malloc_r+0x248>
  4020ce:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4020d2:	2800      	cmp	r0, #0
  4020d4:	f47f aeae 	bne.w	401e34 <_malloc_r+0x248>
  4020d8:	eb08 030b 	add.w	r3, r8, fp
  4020dc:	68ba      	ldr	r2, [r7, #8]
  4020de:	f043 0301 	orr.w	r3, r3, #1
  4020e2:	6053      	str	r3, [r2, #4]
  4020e4:	e6ee      	b.n	401ec4 <_malloc_r+0x2d8>
  4020e6:	207f      	movs	r0, #127	; 0x7f
  4020e8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4020ec:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4020f0:	e59e      	b.n	401c30 <_malloc_r+0x44>
  4020f2:	f104 0108 	add.w	r1, r4, #8
  4020f6:	4628      	mov	r0, r5
  4020f8:	9300      	str	r3, [sp, #0]
  4020fa:	f7ff fc29 	bl	401950 <_free_r>
  4020fe:	9b00      	ldr	r3, [sp, #0]
  402100:	6819      	ldr	r1, [r3, #0]
  402102:	e6df      	b.n	401ec4 <_malloc_r+0x2d8>
  402104:	2001      	movs	r0, #1
  402106:	f04f 0900 	mov.w	r9, #0
  40210a:	e6bc      	b.n	401e86 <_malloc_r+0x29a>
  40210c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402110:	d805      	bhi.n	40211e <_malloc_r+0x532>
  402112:	0bda      	lsrs	r2, r3, #15
  402114:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402118:	00c9      	lsls	r1, r1, #3
  40211a:	3277      	adds	r2, #119	; 0x77
  40211c:	e720      	b.n	401f60 <_malloc_r+0x374>
  40211e:	f240 5154 	movw	r1, #1364	; 0x554
  402122:	428a      	cmp	r2, r1
  402124:	d805      	bhi.n	402132 <_malloc_r+0x546>
  402126:	0c9a      	lsrs	r2, r3, #18
  402128:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40212c:	00c9      	lsls	r1, r1, #3
  40212e:	327c      	adds	r2, #124	; 0x7c
  402130:	e716      	b.n	401f60 <_malloc_r+0x374>
  402132:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402136:	227e      	movs	r2, #126	; 0x7e
  402138:	e712      	b.n	401f60 <_malloc_r+0x374>
  40213a:	687b      	ldr	r3, [r7, #4]
  40213c:	e780      	b.n	402040 <_malloc_r+0x454>
  40213e:	08f0      	lsrs	r0, r6, #3
  402140:	f106 0308 	add.w	r3, r6, #8
  402144:	e600      	b.n	401d48 <_malloc_r+0x15c>
  402146:	bf00      	nop
  402148:	2000570c 	.word	0x2000570c

0040214c <__malloc_lock>:
  40214c:	4801      	ldr	r0, [pc, #4]	; (402154 <__malloc_lock+0x8>)
  40214e:	f7ff bd13 	b.w	401b78 <__retarget_lock_acquire_recursive>
  402152:	bf00      	nop
  402154:	20005824 	.word	0x20005824

00402158 <__malloc_unlock>:
  402158:	4801      	ldr	r0, [pc, #4]	; (402160 <__malloc_unlock+0x8>)
  40215a:	f7ff bd0f 	b.w	401b7c <__retarget_lock_release_recursive>
  40215e:	bf00      	nop
  402160:	20005824 	.word	0x20005824

00402164 <_sbrk_r>:
  402164:	b538      	push	{r3, r4, r5, lr}
  402166:	4c07      	ldr	r4, [pc, #28]	; (402184 <_sbrk_r+0x20>)
  402168:	2300      	movs	r3, #0
  40216a:	4605      	mov	r5, r0
  40216c:	4608      	mov	r0, r1
  40216e:	6023      	str	r3, [r4, #0]
  402170:	f7ff f8d8 	bl	401324 <_sbrk>
  402174:	1c43      	adds	r3, r0, #1
  402176:	d000      	beq.n	40217a <_sbrk_r+0x16>
  402178:	bd38      	pop	{r3, r4, r5, pc}
  40217a:	6823      	ldr	r3, [r4, #0]
  40217c:	2b00      	cmp	r3, #0
  40217e:	d0fb      	beq.n	402178 <_sbrk_r+0x14>
  402180:	602b      	str	r3, [r5, #0]
  402182:	bd38      	pop	{r3, r4, r5, pc}
  402184:	20005838 	.word	0x20005838

00402188 <__sread>:
  402188:	b510      	push	{r4, lr}
  40218a:	460c      	mov	r4, r1
  40218c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402190:	f000 f954 	bl	40243c <_read_r>
  402194:	2800      	cmp	r0, #0
  402196:	db03      	blt.n	4021a0 <__sread+0x18>
  402198:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40219a:	4403      	add	r3, r0
  40219c:	6523      	str	r3, [r4, #80]	; 0x50
  40219e:	bd10      	pop	{r4, pc}
  4021a0:	89a3      	ldrh	r3, [r4, #12]
  4021a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4021a6:	81a3      	strh	r3, [r4, #12]
  4021a8:	bd10      	pop	{r4, pc}
  4021aa:	bf00      	nop

004021ac <__swrite>:
  4021ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4021b0:	4616      	mov	r6, r2
  4021b2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4021b6:	461f      	mov	r7, r3
  4021b8:	05d3      	lsls	r3, r2, #23
  4021ba:	460c      	mov	r4, r1
  4021bc:	4605      	mov	r5, r0
  4021be:	d507      	bpl.n	4021d0 <__swrite+0x24>
  4021c0:	2200      	movs	r2, #0
  4021c2:	2302      	movs	r3, #2
  4021c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4021c8:	f000 f922 	bl	402410 <_lseek_r>
  4021cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4021d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4021d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4021d8:	81a2      	strh	r2, [r4, #12]
  4021da:	463b      	mov	r3, r7
  4021dc:	4632      	mov	r2, r6
  4021de:	4628      	mov	r0, r5
  4021e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4021e4:	f000 b814 	b.w	402210 <_write_r>

004021e8 <__sseek>:
  4021e8:	b510      	push	{r4, lr}
  4021ea:	460c      	mov	r4, r1
  4021ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4021f0:	f000 f90e 	bl	402410 <_lseek_r>
  4021f4:	89a3      	ldrh	r3, [r4, #12]
  4021f6:	1c42      	adds	r2, r0, #1
  4021f8:	bf0e      	itee	eq
  4021fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4021fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402202:	6520      	strne	r0, [r4, #80]	; 0x50
  402204:	81a3      	strh	r3, [r4, #12]
  402206:	bd10      	pop	{r4, pc}

00402208 <__sclose>:
  402208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40220c:	f000 b878 	b.w	402300 <_close_r>

00402210 <_write_r>:
  402210:	b570      	push	{r4, r5, r6, lr}
  402212:	460d      	mov	r5, r1
  402214:	4c08      	ldr	r4, [pc, #32]	; (402238 <_write_r+0x28>)
  402216:	4611      	mov	r1, r2
  402218:	4606      	mov	r6, r0
  40221a:	461a      	mov	r2, r3
  40221c:	4628      	mov	r0, r5
  40221e:	2300      	movs	r3, #0
  402220:	6023      	str	r3, [r4, #0]
  402222:	f7fe fb1f 	bl	400864 <_write>
  402226:	1c43      	adds	r3, r0, #1
  402228:	d000      	beq.n	40222c <_write_r+0x1c>
  40222a:	bd70      	pop	{r4, r5, r6, pc}
  40222c:	6823      	ldr	r3, [r4, #0]
  40222e:	2b00      	cmp	r3, #0
  402230:	d0fb      	beq.n	40222a <_write_r+0x1a>
  402232:	6033      	str	r3, [r6, #0]
  402234:	bd70      	pop	{r4, r5, r6, pc}
  402236:	bf00      	nop
  402238:	20005838 	.word	0x20005838

0040223c <__register_exitproc>:
  40223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402240:	4d2c      	ldr	r5, [pc, #176]	; (4022f4 <__register_exitproc+0xb8>)
  402242:	4606      	mov	r6, r0
  402244:	6828      	ldr	r0, [r5, #0]
  402246:	4698      	mov	r8, r3
  402248:	460f      	mov	r7, r1
  40224a:	4691      	mov	r9, r2
  40224c:	f7ff fc94 	bl	401b78 <__retarget_lock_acquire_recursive>
  402250:	4b29      	ldr	r3, [pc, #164]	; (4022f8 <__register_exitproc+0xbc>)
  402252:	681c      	ldr	r4, [r3, #0]
  402254:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402258:	2b00      	cmp	r3, #0
  40225a:	d03e      	beq.n	4022da <__register_exitproc+0x9e>
  40225c:	685a      	ldr	r2, [r3, #4]
  40225e:	2a1f      	cmp	r2, #31
  402260:	dc1c      	bgt.n	40229c <__register_exitproc+0x60>
  402262:	f102 0e01 	add.w	lr, r2, #1
  402266:	b176      	cbz	r6, 402286 <__register_exitproc+0x4a>
  402268:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40226c:	2401      	movs	r4, #1
  40226e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402272:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402276:	4094      	lsls	r4, r2
  402278:	4320      	orrs	r0, r4
  40227a:	2e02      	cmp	r6, #2
  40227c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402280:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402284:	d023      	beq.n	4022ce <__register_exitproc+0x92>
  402286:	3202      	adds	r2, #2
  402288:	f8c3 e004 	str.w	lr, [r3, #4]
  40228c:	6828      	ldr	r0, [r5, #0]
  40228e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402292:	f7ff fc73 	bl	401b7c <__retarget_lock_release_recursive>
  402296:	2000      	movs	r0, #0
  402298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40229c:	4b17      	ldr	r3, [pc, #92]	; (4022fc <__register_exitproc+0xc0>)
  40229e:	b30b      	cbz	r3, 4022e4 <__register_exitproc+0xa8>
  4022a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4022a4:	f7ff fc9a 	bl	401bdc <malloc>
  4022a8:	4603      	mov	r3, r0
  4022aa:	b1d8      	cbz	r0, 4022e4 <__register_exitproc+0xa8>
  4022ac:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4022b0:	6002      	str	r2, [r0, #0]
  4022b2:	2100      	movs	r1, #0
  4022b4:	6041      	str	r1, [r0, #4]
  4022b6:	460a      	mov	r2, r1
  4022b8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4022bc:	f04f 0e01 	mov.w	lr, #1
  4022c0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4022c4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4022c8:	2e00      	cmp	r6, #0
  4022ca:	d0dc      	beq.n	402286 <__register_exitproc+0x4a>
  4022cc:	e7cc      	b.n	402268 <__register_exitproc+0x2c>
  4022ce:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4022d2:	430c      	orrs	r4, r1
  4022d4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4022d8:	e7d5      	b.n	402286 <__register_exitproc+0x4a>
  4022da:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4022de:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4022e2:	e7bb      	b.n	40225c <__register_exitproc+0x20>
  4022e4:	6828      	ldr	r0, [r5, #0]
  4022e6:	f7ff fc49 	bl	401b7c <__retarget_lock_release_recursive>
  4022ea:	f04f 30ff 	mov.w	r0, #4294967295
  4022ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4022f2:	bf00      	nop
  4022f4:	20000438 	.word	0x20000438
  4022f8:	00402468 	.word	0x00402468
  4022fc:	00401bdd 	.word	0x00401bdd

00402300 <_close_r>:
  402300:	b538      	push	{r3, r4, r5, lr}
  402302:	4c07      	ldr	r4, [pc, #28]	; (402320 <_close_r+0x20>)
  402304:	2300      	movs	r3, #0
  402306:	4605      	mov	r5, r0
  402308:	4608      	mov	r0, r1
  40230a:	6023      	str	r3, [r4, #0]
  40230c:	f7ff f826 	bl	40135c <_close>
  402310:	1c43      	adds	r3, r0, #1
  402312:	d000      	beq.n	402316 <_close_r+0x16>
  402314:	bd38      	pop	{r3, r4, r5, pc}
  402316:	6823      	ldr	r3, [r4, #0]
  402318:	2b00      	cmp	r3, #0
  40231a:	d0fb      	beq.n	402314 <_close_r+0x14>
  40231c:	602b      	str	r3, [r5, #0]
  40231e:	bd38      	pop	{r3, r4, r5, pc}
  402320:	20005838 	.word	0x20005838

00402324 <_fclose_r>:
  402324:	b570      	push	{r4, r5, r6, lr}
  402326:	b159      	cbz	r1, 402340 <_fclose_r+0x1c>
  402328:	4605      	mov	r5, r0
  40232a:	460c      	mov	r4, r1
  40232c:	b110      	cbz	r0, 402334 <_fclose_r+0x10>
  40232e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402330:	2b00      	cmp	r3, #0
  402332:	d03c      	beq.n	4023ae <_fclose_r+0x8a>
  402334:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402336:	07d8      	lsls	r0, r3, #31
  402338:	d505      	bpl.n	402346 <_fclose_r+0x22>
  40233a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40233e:	b92b      	cbnz	r3, 40234c <_fclose_r+0x28>
  402340:	2600      	movs	r6, #0
  402342:	4630      	mov	r0, r6
  402344:	bd70      	pop	{r4, r5, r6, pc}
  402346:	89a3      	ldrh	r3, [r4, #12]
  402348:	0599      	lsls	r1, r3, #22
  40234a:	d53c      	bpl.n	4023c6 <_fclose_r+0xa2>
  40234c:	4621      	mov	r1, r4
  40234e:	4628      	mov	r0, r5
  402350:	f7ff f964 	bl	40161c <__sflush_r>
  402354:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402356:	4606      	mov	r6, r0
  402358:	b133      	cbz	r3, 402368 <_fclose_r+0x44>
  40235a:	69e1      	ldr	r1, [r4, #28]
  40235c:	4628      	mov	r0, r5
  40235e:	4798      	blx	r3
  402360:	2800      	cmp	r0, #0
  402362:	bfb8      	it	lt
  402364:	f04f 36ff 	movlt.w	r6, #4294967295
  402368:	89a3      	ldrh	r3, [r4, #12]
  40236a:	061a      	lsls	r2, r3, #24
  40236c:	d422      	bmi.n	4023b4 <_fclose_r+0x90>
  40236e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402370:	b141      	cbz	r1, 402384 <_fclose_r+0x60>
  402372:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402376:	4299      	cmp	r1, r3
  402378:	d002      	beq.n	402380 <_fclose_r+0x5c>
  40237a:	4628      	mov	r0, r5
  40237c:	f7ff fae8 	bl	401950 <_free_r>
  402380:	2300      	movs	r3, #0
  402382:	6323      	str	r3, [r4, #48]	; 0x30
  402384:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402386:	b121      	cbz	r1, 402392 <_fclose_r+0x6e>
  402388:	4628      	mov	r0, r5
  40238a:	f7ff fae1 	bl	401950 <_free_r>
  40238e:	2300      	movs	r3, #0
  402390:	6463      	str	r3, [r4, #68]	; 0x44
  402392:	f7ff fa67 	bl	401864 <__sfp_lock_acquire>
  402396:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402398:	2200      	movs	r2, #0
  40239a:	07db      	lsls	r3, r3, #31
  40239c:	81a2      	strh	r2, [r4, #12]
  40239e:	d50e      	bpl.n	4023be <_fclose_r+0x9a>
  4023a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4023a2:	f7ff fbe7 	bl	401b74 <__retarget_lock_close_recursive>
  4023a6:	f7ff fa63 	bl	401870 <__sfp_lock_release>
  4023aa:	4630      	mov	r0, r6
  4023ac:	bd70      	pop	{r4, r5, r6, pc}
  4023ae:	f7ff fa2d 	bl	40180c <__sinit>
  4023b2:	e7bf      	b.n	402334 <_fclose_r+0x10>
  4023b4:	6921      	ldr	r1, [r4, #16]
  4023b6:	4628      	mov	r0, r5
  4023b8:	f7ff faca 	bl	401950 <_free_r>
  4023bc:	e7d7      	b.n	40236e <_fclose_r+0x4a>
  4023be:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4023c0:	f7ff fbdc 	bl	401b7c <__retarget_lock_release_recursive>
  4023c4:	e7ec      	b.n	4023a0 <_fclose_r+0x7c>
  4023c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4023c8:	f7ff fbd6 	bl	401b78 <__retarget_lock_acquire_recursive>
  4023cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4023d0:	2b00      	cmp	r3, #0
  4023d2:	d1bb      	bne.n	40234c <_fclose_r+0x28>
  4023d4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4023d6:	f016 0601 	ands.w	r6, r6, #1
  4023da:	d1b1      	bne.n	402340 <_fclose_r+0x1c>
  4023dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4023de:	f7ff fbcd 	bl	401b7c <__retarget_lock_release_recursive>
  4023e2:	4630      	mov	r0, r6
  4023e4:	bd70      	pop	{r4, r5, r6, pc}
  4023e6:	bf00      	nop

004023e8 <_fstat_r>:
  4023e8:	b538      	push	{r3, r4, r5, lr}
  4023ea:	460b      	mov	r3, r1
  4023ec:	4c07      	ldr	r4, [pc, #28]	; (40240c <_fstat_r+0x24>)
  4023ee:	4605      	mov	r5, r0
  4023f0:	4611      	mov	r1, r2
  4023f2:	4618      	mov	r0, r3
  4023f4:	2300      	movs	r3, #0
  4023f6:	6023      	str	r3, [r4, #0]
  4023f8:	f7fe ffb3 	bl	401362 <_fstat>
  4023fc:	1c43      	adds	r3, r0, #1
  4023fe:	d000      	beq.n	402402 <_fstat_r+0x1a>
  402400:	bd38      	pop	{r3, r4, r5, pc}
  402402:	6823      	ldr	r3, [r4, #0]
  402404:	2b00      	cmp	r3, #0
  402406:	d0fb      	beq.n	402400 <_fstat_r+0x18>
  402408:	602b      	str	r3, [r5, #0]
  40240a:	bd38      	pop	{r3, r4, r5, pc}
  40240c:	20005838 	.word	0x20005838

00402410 <_lseek_r>:
  402410:	b570      	push	{r4, r5, r6, lr}
  402412:	460d      	mov	r5, r1
  402414:	4c08      	ldr	r4, [pc, #32]	; (402438 <_lseek_r+0x28>)
  402416:	4611      	mov	r1, r2
  402418:	4606      	mov	r6, r0
  40241a:	461a      	mov	r2, r3
  40241c:	4628      	mov	r0, r5
  40241e:	2300      	movs	r3, #0
  402420:	6023      	str	r3, [r4, #0]
  402422:	f7fe ffa3 	bl	40136c <_lseek>
  402426:	1c43      	adds	r3, r0, #1
  402428:	d000      	beq.n	40242c <_lseek_r+0x1c>
  40242a:	bd70      	pop	{r4, r5, r6, pc}
  40242c:	6823      	ldr	r3, [r4, #0]
  40242e:	2b00      	cmp	r3, #0
  402430:	d0fb      	beq.n	40242a <_lseek_r+0x1a>
  402432:	6033      	str	r3, [r6, #0]
  402434:	bd70      	pop	{r4, r5, r6, pc}
  402436:	bf00      	nop
  402438:	20005838 	.word	0x20005838

0040243c <_read_r>:
  40243c:	b570      	push	{r4, r5, r6, lr}
  40243e:	460d      	mov	r5, r1
  402440:	4c08      	ldr	r4, [pc, #32]	; (402464 <_read_r+0x28>)
  402442:	4611      	mov	r1, r2
  402444:	4606      	mov	r6, r0
  402446:	461a      	mov	r2, r3
  402448:	4628      	mov	r0, r5
  40244a:	2300      	movs	r3, #0
  40244c:	6023      	str	r3, [r4, #0]
  40244e:	f7fe f9eb 	bl	400828 <_read>
  402452:	1c43      	adds	r3, r0, #1
  402454:	d000      	beq.n	402458 <_read_r+0x1c>
  402456:	bd70      	pop	{r4, r5, r6, pc}
  402458:	6823      	ldr	r3, [r4, #0]
  40245a:	2b00      	cmp	r3, #0
  40245c:	d0fb      	beq.n	402456 <_read_r+0x1a>
  40245e:	6033      	str	r3, [r6, #0]
  402460:	bd70      	pop	{r4, r5, r6, pc}
  402462:	bf00      	nop
  402464:	20005838 	.word	0x20005838

00402468 <_global_impure_ptr>:
  402468:	20000010                                ... 

0040246c <_init>:
  40246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40246e:	bf00      	nop
  402470:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402472:	bc08      	pop	{r3}
  402474:	469e      	mov	lr, r3
  402476:	4770      	bx	lr

00402478 <__init_array_start>:
  402478:	004015fd 	.word	0x004015fd

0040247c <__frame_dummy_init_array_entry>:
  40247c:	0040011d                                ..@.

00402480 <_fini>:
  402480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402482:	bf00      	nop
  402484:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402486:	bc08      	pop	{r3}
  402488:	469e      	mov	lr, r3
  40248a:	4770      	bx	lr

0040248c <__fini_array_start>:
  40248c:	004000f9 	.word	0x004000f9
