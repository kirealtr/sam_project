
AFEC_EXAMPLE12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d50  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000854  20000000  00401d50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000014c  20000854  004025a4  00020854  2**2
                  ALLOC
  3 .stack        00003000  200009a0  004026f0  00020854  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020882  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010f07  00000000  00000000  000208db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000280a  00000000  00000000  000317e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002db4  00000000  00000000  00033fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000760  00000000  00000000  00036da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000688  00000000  00000000  00037500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017f00  00000000  00000000  00037b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a1b5  00000000  00000000  0004fa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00064a19  00000000  00000000  00059c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001678  00000000  00000000  000be658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a0 39 00 20 9d 09 40 00 9b 09 40 00 9b 09 40 00     .9. ..@...@...@.
  400010:	9b 09 40 00 9b 09 40 00 9b 09 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	9b 09 40 00 9b 09 40 00 00 00 00 00 9b 09 40 00     ..@...@.......@.
  40003c:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  40004c:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  40005c:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  40006c:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  40007c:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  40008c:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  40009c:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  4000ac:	9b 09 40 00 9b 09 40 00 9b 09 40 00 4d 07 40 00     ..@...@...@.M.@.
  4000bc:	61 07 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     a.@...@...@...@.
  4000cc:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  4000dc:	9b 09 40 00 9b 09 40 00 9b 09 40 00 9b 09 40 00     ..@...@...@...@.
  4000ec:	9b 09 40 00 9b 09 40 00 9b 09 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000854 	.word	0x20000854
  400114:	00000000 	.word	0x00000000
  400118:	00401d50 	.word	0x00401d50

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00401d50 	.word	0x00401d50
  400158:	20000858 	.word	0x20000858
  40015c:	00401d50 	.word	0x00401d50
  400160:	00000000 	.word	0x00000000

00400164 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400164:	b5f0      	push	{r4, r5, r6, r7, lr}
  400166:	b083      	sub	sp, #12
  400168:	4605      	mov	r5, r0
  40016a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40016c:	2300      	movs	r3, #0
  40016e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400170:	4b18      	ldr	r3, [pc, #96]	; (4001d4 <usart_serial_getchar+0x70>)
  400172:	4298      	cmp	r0, r3
  400174:	d00a      	beq.n	40018c <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400176:	4b18      	ldr	r3, [pc, #96]	; (4001d8 <usart_serial_getchar+0x74>)
  400178:	4298      	cmp	r0, r3
  40017a:	d00f      	beq.n	40019c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40017c:	4b17      	ldr	r3, [pc, #92]	; (4001dc <usart_serial_getchar+0x78>)
  40017e:	4298      	cmp	r0, r3
  400180:	d014      	beq.n	4001ac <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400182:	4b17      	ldr	r3, [pc, #92]	; (4001e0 <usart_serial_getchar+0x7c>)
  400184:	429d      	cmp	r5, r3
  400186:	d01b      	beq.n	4001c0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400188:	b003      	add	sp, #12
  40018a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40018c:	461f      	mov	r7, r3
  40018e:	4e15      	ldr	r6, [pc, #84]	; (4001e4 <usart_serial_getchar+0x80>)
  400190:	4621      	mov	r1, r4
  400192:	4638      	mov	r0, r7
  400194:	47b0      	blx	r6
  400196:	2800      	cmp	r0, #0
  400198:	d1fa      	bne.n	400190 <usart_serial_getchar+0x2c>
  40019a:	e7f2      	b.n	400182 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40019c:	461e      	mov	r6, r3
  40019e:	4d11      	ldr	r5, [pc, #68]	; (4001e4 <usart_serial_getchar+0x80>)
  4001a0:	4621      	mov	r1, r4
  4001a2:	4630      	mov	r0, r6
  4001a4:	47a8      	blx	r5
  4001a6:	2800      	cmp	r0, #0
  4001a8:	d1fa      	bne.n	4001a0 <usart_serial_getchar+0x3c>
  4001aa:	e7ed      	b.n	400188 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4001ac:	461e      	mov	r6, r3
  4001ae:	4d0e      	ldr	r5, [pc, #56]	; (4001e8 <usart_serial_getchar+0x84>)
  4001b0:	a901      	add	r1, sp, #4
  4001b2:	4630      	mov	r0, r6
  4001b4:	47a8      	blx	r5
  4001b6:	2800      	cmp	r0, #0
  4001b8:	d1fa      	bne.n	4001b0 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  4001ba:	9b01      	ldr	r3, [sp, #4]
  4001bc:	7023      	strb	r3, [r4, #0]
  4001be:	e7e3      	b.n	400188 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4001c0:	461e      	mov	r6, r3
  4001c2:	4d09      	ldr	r5, [pc, #36]	; (4001e8 <usart_serial_getchar+0x84>)
  4001c4:	a901      	add	r1, sp, #4
  4001c6:	4630      	mov	r0, r6
  4001c8:	47a8      	blx	r5
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d1fa      	bne.n	4001c4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  4001ce:	9b01      	ldr	r3, [sp, #4]
  4001d0:	7023      	strb	r3, [r4, #0]
}
  4001d2:	e7d9      	b.n	400188 <usart_serial_getchar+0x24>
  4001d4:	400e0600 	.word	0x400e0600
  4001d8:	40060600 	.word	0x40060600
  4001dc:	400a0000 	.word	0x400a0000
  4001e0:	400a4000 	.word	0x400a4000
  4001e4:	0040095d 	.word	0x0040095d
  4001e8:	00400983 	.word	0x00400983

004001ec <usart_serial_putchar>:
{
  4001ec:	b570      	push	{r4, r5, r6, lr}
  4001ee:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4001f0:	4b18      	ldr	r3, [pc, #96]	; (400254 <usart_serial_putchar+0x68>)
  4001f2:	4298      	cmp	r0, r3
  4001f4:	d00a      	beq.n	40020c <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  4001f6:	4b18      	ldr	r3, [pc, #96]	; (400258 <usart_serial_putchar+0x6c>)
  4001f8:	4298      	cmp	r0, r3
  4001fa:	d010      	beq.n	40021e <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  4001fc:	4b17      	ldr	r3, [pc, #92]	; (40025c <usart_serial_putchar+0x70>)
  4001fe:	4298      	cmp	r0, r3
  400200:	d016      	beq.n	400230 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400202:	4b17      	ldr	r3, [pc, #92]	; (400260 <usart_serial_putchar+0x74>)
  400204:	4298      	cmp	r0, r3
  400206:	d01c      	beq.n	400242 <usart_serial_putchar+0x56>
	return 0;
  400208:	2000      	movs	r0, #0
}
  40020a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40020c:	461e      	mov	r6, r3
  40020e:	4d15      	ldr	r5, [pc, #84]	; (400264 <usart_serial_putchar+0x78>)
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	47a8      	blx	r5
  400216:	2800      	cmp	r0, #0
  400218:	d1fa      	bne.n	400210 <usart_serial_putchar+0x24>
		return 1;
  40021a:	2001      	movs	r0, #1
  40021c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40021e:	461e      	mov	r6, r3
  400220:	4d10      	ldr	r5, [pc, #64]	; (400264 <usart_serial_putchar+0x78>)
  400222:	4621      	mov	r1, r4
  400224:	4630      	mov	r0, r6
  400226:	47a8      	blx	r5
  400228:	2800      	cmp	r0, #0
  40022a:	d1fa      	bne.n	400222 <usart_serial_putchar+0x36>
		return 1;
  40022c:	2001      	movs	r0, #1
  40022e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400230:	461e      	mov	r6, r3
  400232:	4d0d      	ldr	r5, [pc, #52]	; (400268 <usart_serial_putchar+0x7c>)
  400234:	4621      	mov	r1, r4
  400236:	4630      	mov	r0, r6
  400238:	47a8      	blx	r5
  40023a:	2800      	cmp	r0, #0
  40023c:	d1fa      	bne.n	400234 <usart_serial_putchar+0x48>
		return 1;
  40023e:	2001      	movs	r0, #1
  400240:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400242:	461e      	mov	r6, r3
  400244:	4d08      	ldr	r5, [pc, #32]	; (400268 <usart_serial_putchar+0x7c>)
  400246:	4621      	mov	r1, r4
  400248:	4630      	mov	r0, r6
  40024a:	47a8      	blx	r5
  40024c:	2800      	cmp	r0, #0
  40024e:	d1fa      	bne.n	400246 <usart_serial_putchar+0x5a>
		return 1;
  400250:	2001      	movs	r0, #1
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	400e0600 	.word	0x400e0600
  400258:	40060600 	.word	0x40060600
  40025c:	400a0000 	.word	0x400a0000
  400260:	400a4000 	.word	0x400a4000
  400264:	0040094d 	.word	0x0040094d
  400268:	0040096f 	.word	0x0040096f

0040026c <main>:
	stdio_serial_init(CONF_UART, &uart_serial_options);
}


int main(void)
{
  40026c:	b500      	push	{lr}
  40026e:	b08d      	sub	sp, #52	; 0x34
	
	/* Initialize the SAM system. */
	sysclk_init();
  400270:	4b23      	ldr	r3, [pc, #140]	; (400300 <main+0x94>)
  400272:	4798      	blx	r3
	board_init();
  400274:	4b23      	ldr	r3, [pc, #140]	; (400304 <main+0x98>)
  400276:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400278:	2007      	movs	r0, #7
  40027a:	4d23      	ldr	r5, [pc, #140]	; (400308 <main+0x9c>)
  40027c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40027e:	4c23      	ldr	r4, [pc, #140]	; (40030c <main+0xa0>)
  400280:	4b23      	ldr	r3, [pc, #140]	; (400310 <main+0xa4>)
  400282:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400284:	4a23      	ldr	r2, [pc, #140]	; (400314 <main+0xa8>)
  400286:	4b24      	ldr	r3, [pc, #144]	; (400318 <main+0xac>)
  400288:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40028a:	4a24      	ldr	r2, [pc, #144]	; (40031c <main+0xb0>)
  40028c:	4b24      	ldr	r3, [pc, #144]	; (400320 <main+0xb4>)
  40028e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400290:	4b24      	ldr	r3, [pc, #144]	; (400324 <main+0xb8>)
  400292:	9300      	str	r3, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
  400294:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400298:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  40029a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40029e:	9302      	str	r3, [sp, #8]
  4002a0:	2007      	movs	r0, #7
  4002a2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
  4002a4:	4669      	mov	r1, sp
  4002a6:	4620      	mov	r0, r4
  4002a8:	4b1f      	ldr	r3, [pc, #124]	; (400328 <main+0xbc>)
  4002aa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4002ac:	4d1f      	ldr	r5, [pc, #124]	; (40032c <main+0xc0>)
  4002ae:	682b      	ldr	r3, [r5, #0]
  4002b0:	2100      	movs	r1, #0
  4002b2:	6898      	ldr	r0, [r3, #8]
  4002b4:	4c1e      	ldr	r4, [pc, #120]	; (400330 <main+0xc4>)
  4002b6:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4002b8:	682b      	ldr	r3, [r5, #0]
  4002ba:	2100      	movs	r1, #0
  4002bc:	6858      	ldr	r0, [r3, #4]
  4002be:	47a0      	blx	r4

	configure_console();

	afec_enable(AFEC0);
  4002c0:	4c1c      	ldr	r4, [pc, #112]	; (400334 <main+0xc8>)
  4002c2:	4620      	mov	r0, r4
  4002c4:	4b1c      	ldr	r3, [pc, #112]	; (400338 <main+0xcc>)
  4002c6:	4798      	blx	r3

	struct afec_config afec_cfg;

	afec_get_config_defaults(&afec_cfg);
  4002c8:	a805      	add	r0, sp, #20
  4002ca:	4b1c      	ldr	r3, [pc, #112]	; (40033c <main+0xd0>)
  4002cc:	4798      	blx	r3

	afec_init(AFEC0, &afec_cfg);
  4002ce:	a905      	add	r1, sp, #20
  4002d0:	4620      	mov	r0, r4
  4002d2:	4b1b      	ldr	r3, [pc, #108]	; (400340 <main+0xd4>)
  4002d4:	4798      	blx	r3

	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  4002d6:	a803      	add	r0, sp, #12
  4002d8:	4b1a      	ldr	r3, [pc, #104]	; (400344 <main+0xd8>)
  4002da:	4798      	blx	r3
	afec_temp_sensor_cfg.rctc = true;
  4002dc:	2301      	movs	r3, #1
  4002de:	f88d 300c 	strb.w	r3, [sp, #12]
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  4002e2:	a903      	add	r1, sp, #12
  4002e4:	4620      	mov	r0, r4
  4002e6:	4b18      	ldr	r3, [pc, #96]	; (400348 <main+0xdc>)
  4002e8:	4798      	blx	r3
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4002ea:	260f      	movs	r6, #15
	
	
	while (1) {
			data = afec_channel_get_value(AFEC0, AFEC_TEMPERATURE_SENSOR);
			delay_ms(1000);
  4002ec:	4d17      	ldr	r5, [pc, #92]	; (40034c <main+0xe0>)
  4002ee:	6666      	str	r6, [r4, #100]	; 0x64
	return afec->AFEC_CDR;
  4002f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
			data = afec_channel_get_value(AFEC0, AFEC_TEMPERATURE_SENSOR);
  4002f2:	b29b      	uxth	r3, r3
  4002f4:	4a16      	ldr	r2, [pc, #88]	; (400350 <main+0xe4>)
  4002f6:	8013      	strh	r3, [r2, #0]
			delay_ms(1000);
  4002f8:	4628      	mov	r0, r5
  4002fa:	4b16      	ldr	r3, [pc, #88]	; (400354 <main+0xe8>)
  4002fc:	4798      	blx	r3
  4002fe:	e7f6      	b.n	4002ee <main+0x82>
  400300:	00400359 	.word	0x00400359
  400304:	00400449 	.word	0x00400449
  400308:	004008c1 	.word	0x004008c1
  40030c:	400e0600 	.word	0x400e0600
  400310:	200008bc 	.word	0x200008bc
  400314:	004001ed 	.word	0x004001ed
  400318:	200008b8 	.word	0x200008b8
  40031c:	00400165 	.word	0x00400165
  400320:	200008b4 	.word	0x200008b4
  400324:	07270e00 	.word	0x07270e00
  400328:	00400915 	.word	0x00400915
  40032c:	20000010 	.word	0x20000010
  400330:	00400d1d 	.word	0x00400d1d
  400334:	400b0000 	.word	0x400b0000
  400338:	00400775 	.word	0x00400775
  40033c:	00400635 	.word	0x00400635
  400340:	00400679 	.word	0x00400679
  400344:	00400665 	.word	0x00400665
  400348:	00400621 	.word	0x00400621
  40034c:	0082ca25 	.word	0x0082ca25
  400350:	200008a8 	.word	0x200008a8
  400354:	20000001 	.word	0x20000001

00400358 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400358:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40035a:	480e      	ldr	r0, [pc, #56]	; (400394 <sysclk_init+0x3c>)
  40035c:	4b0e      	ldr	r3, [pc, #56]	; (400398 <sysclk_init+0x40>)
  40035e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400360:	213e      	movs	r1, #62	; 0x3e
  400362:	2000      	movs	r0, #0
  400364:	4b0d      	ldr	r3, [pc, #52]	; (40039c <sysclk_init+0x44>)
  400366:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400368:	4c0d      	ldr	r4, [pc, #52]	; (4003a0 <sysclk_init+0x48>)
  40036a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40036c:	2800      	cmp	r0, #0
  40036e:	d0fc      	beq.n	40036a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400370:	4b0c      	ldr	r3, [pc, #48]	; (4003a4 <sysclk_init+0x4c>)
  400372:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400374:	4a0c      	ldr	r2, [pc, #48]	; (4003a8 <sysclk_init+0x50>)
  400376:	4b0d      	ldr	r3, [pc, #52]	; (4003ac <sysclk_init+0x54>)
  400378:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40037a:	4c0d      	ldr	r4, [pc, #52]	; (4003b0 <sysclk_init+0x58>)
  40037c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40037e:	2800      	cmp	r0, #0
  400380:	d0fc      	beq.n	40037c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400382:	2010      	movs	r0, #16
  400384:	4b0b      	ldr	r3, [pc, #44]	; (4003b4 <sysclk_init+0x5c>)
  400386:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400388:	4b0b      	ldr	r3, [pc, #44]	; (4003b8 <sysclk_init+0x60>)
  40038a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40038c:	4801      	ldr	r0, [pc, #4]	; (400394 <sysclk_init+0x3c>)
  40038e:	4b02      	ldr	r3, [pc, #8]	; (400398 <sysclk_init+0x40>)
  400390:	4798      	blx	r3
  400392:	bd10      	pop	{r4, pc}
  400394:	07270e00 	.word	0x07270e00
  400398:	00400b71 	.word	0x00400b71
  40039c:	0040083d 	.word	0x0040083d
  4003a0:	00400891 	.word	0x00400891
  4003a4:	004008a1 	.word	0x004008a1
  4003a8:	20133f01 	.word	0x20133f01
  4003ac:	400e0400 	.word	0x400e0400
  4003b0:	004008b1 	.word	0x004008b1
  4003b4:	004007d9 	.word	0x004007d9
  4003b8:	00400a65 	.word	0x00400a65

004003bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4003c0:	b980      	cbnz	r0, 4003e4 <_read+0x28>
  4003c2:	460c      	mov	r4, r1
  4003c4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4003c6:	2a00      	cmp	r2, #0
  4003c8:	dd0f      	ble.n	4003ea <_read+0x2e>
  4003ca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4003cc:	4e08      	ldr	r6, [pc, #32]	; (4003f0 <_read+0x34>)
  4003ce:	4d09      	ldr	r5, [pc, #36]	; (4003f4 <_read+0x38>)
  4003d0:	6830      	ldr	r0, [r6, #0]
  4003d2:	4621      	mov	r1, r4
  4003d4:	682b      	ldr	r3, [r5, #0]
  4003d6:	4798      	blx	r3
		ptr++;
  4003d8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4003da:	42bc      	cmp	r4, r7
  4003dc:	d1f8      	bne.n	4003d0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4003de:	4640      	mov	r0, r8
  4003e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4003e4:	f04f 38ff 	mov.w	r8, #4294967295
  4003e8:	e7f9      	b.n	4003de <_read+0x22>
	for (; len > 0; --len) {
  4003ea:	4680      	mov	r8, r0
  4003ec:	e7f7      	b.n	4003de <_read+0x22>
  4003ee:	bf00      	nop
  4003f0:	200008bc 	.word	0x200008bc
  4003f4:	200008b4 	.word	0x200008b4

004003f8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4003f8:	3801      	subs	r0, #1
  4003fa:	2802      	cmp	r0, #2
  4003fc:	d815      	bhi.n	40042a <_write+0x32>
{
  4003fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400402:	460e      	mov	r6, r1
  400404:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400406:	b19a      	cbz	r2, 400430 <_write+0x38>
  400408:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40040a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400444 <_write+0x4c>
  40040e:	4f0c      	ldr	r7, [pc, #48]	; (400440 <_write+0x48>)
  400410:	f8d8 0000 	ldr.w	r0, [r8]
  400414:	f815 1b01 	ldrb.w	r1, [r5], #1
  400418:	683b      	ldr	r3, [r7, #0]
  40041a:	4798      	blx	r3
  40041c:	2800      	cmp	r0, #0
  40041e:	db0a      	blt.n	400436 <_write+0x3e>
  400420:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400422:	3c01      	subs	r4, #1
  400424:	d1f4      	bne.n	400410 <_write+0x18>
  400426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40042a:	f04f 30ff 	mov.w	r0, #4294967295
  40042e:	4770      	bx	lr
	for (; len != 0; --len) {
  400430:	4610      	mov	r0, r2
  400432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400436:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40043e:	bf00      	nop
  400440:	200008b8 	.word	0x200008b8
  400444:	200008bc 	.word	0x200008bc

00400448 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400448:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40044a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40044e:	4b49      	ldr	r3, [pc, #292]	; (400574 <board_init+0x12c>)
  400450:	605a      	str	r2, [r3, #4]
  400452:	2009      	movs	r0, #9
  400454:	4c48      	ldr	r4, [pc, #288]	; (400578 <board_init+0x130>)
  400456:	47a0      	blx	r4
  400458:	200a      	movs	r0, #10
  40045a:	47a0      	blx	r4
  40045c:	200b      	movs	r0, #11
  40045e:	47a0      	blx	r4
  400460:	200c      	movs	r0, #12
  400462:	47a0      	blx	r4
  400464:	200d      	movs	r0, #13
  400466:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400468:	4b44      	ldr	r3, [pc, #272]	; (40057c <board_init+0x134>)
  40046a:	2201      	movs	r2, #1
  40046c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40046e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400472:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400474:	4942      	ldr	r1, [pc, #264]	; (400580 <board_init+0x138>)
  400476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40047a:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40047c:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400480:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400482:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400486:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400488:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40048c:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40048e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400492:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400494:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400498:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40049a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40049e:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4004a0:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  4004a2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4004a6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  4004a8:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4004ac:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004ae:	6f58      	ldr	r0, [r3, #116]	; 0x74
  4004b0:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  4004b4:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4004b6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4004ba:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4004be:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004c2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4004c8:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4004ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004ce:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4004d0:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4004d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4004d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004d8:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4004dc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004de:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004e0:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4004e4:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4004e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4004ea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  4004ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4004f2:	2202      	movs	r2, #2
  4004f4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4004f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4004fa:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4004fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400500:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400502:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400508:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40050a:	f021 0102 	bic.w	r1, r1, #2
  40050e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400510:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400512:	f021 0102 	bic.w	r1, r1, #2
  400516:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400518:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40051c:	2204      	movs	r2, #4
  40051e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400520:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400524:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40052a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40052c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40052e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400532:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400534:	f021 0104 	bic.w	r1, r1, #4
  400538:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40053a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40053c:	f021 0104 	bic.w	r1, r1, #4
  400540:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  400542:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400546:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  40054a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  40054e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  400552:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400554:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400558:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40055a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40055c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400560:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400562:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400566:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400568:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40056a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40056e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400570:	605a      	str	r2, [r3, #4]
  400572:	bd10      	pop	{r4, pc}
  400574:	400e1850 	.word	0x400e1850
  400578:	004008c1 	.word	0x004008c1
  40057c:	400e0e00 	.word	0x400e0e00
  400580:	400e1400 	.word	0x400e1400

00400584 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400584:	b570      	push	{r4, r5, r6, lr}
  400586:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400588:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40058a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  40058c:	4013      	ands	r3, r2
  40058e:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400590:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400592:	4d21      	ldr	r5, [pc, #132]	; (400618 <afec_process_callback+0x94>)
  400594:	42a8      	cmp	r0, r5
  400596:	bf14      	ite	ne
  400598:	2500      	movne	r5, #0
  40059a:	2501      	moveq	r5, #1
  40059c:	006e      	lsls	r6, r5, #1
  40059e:	442e      	add	r6, r5
  4005a0:	e00b      	b.n	4005ba <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4005a2:	2c14      	cmp	r4, #20
  4005a4:	d824      	bhi.n	4005f0 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4005a6:	9a01      	ldr	r2, [sp, #4]
  4005a8:	f104 0108 	add.w	r1, r4, #8
  4005ac:	2301      	movs	r3, #1
  4005ae:	408b      	lsls	r3, r1
  4005b0:	4213      	tst	r3, r2
  4005b2:	d113      	bne.n	4005dc <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4005b4:	3401      	adds	r4, #1
  4005b6:	2c17      	cmp	r4, #23
  4005b8:	d02b      	beq.n	400612 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4005ba:	2c0f      	cmp	r4, #15
  4005bc:	d8f1      	bhi.n	4005a2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4005be:	9a01      	ldr	r2, [sp, #4]
  4005c0:	2301      	movs	r3, #1
  4005c2:	40a3      	lsls	r3, r4
  4005c4:	4213      	tst	r3, r2
  4005c6:	d0f5      	beq.n	4005b4 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4005c8:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4005cc:	4423      	add	r3, r4
  4005ce:	4a13      	ldr	r2, [pc, #76]	; (40061c <afec_process_callback+0x98>)
  4005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4005d4:	2b00      	cmp	r3, #0
  4005d6:	d0ed      	beq.n	4005b4 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4005d8:	4798      	blx	r3
  4005da:	e7eb      	b.n	4005b4 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4005dc:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4005e0:	4423      	add	r3, r4
  4005e2:	4a0e      	ldr	r2, [pc, #56]	; (40061c <afec_process_callback+0x98>)
  4005e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4005e8:	2b00      	cmp	r3, #0
  4005ea:	d0e3      	beq.n	4005b4 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4005ec:	4798      	blx	r3
  4005ee:	e7e1      	b.n	4005b4 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4005f0:	9a01      	ldr	r2, [sp, #4]
  4005f2:	f104 0109 	add.w	r1, r4, #9
  4005f6:	2301      	movs	r3, #1
  4005f8:	408b      	lsls	r3, r1
  4005fa:	4213      	tst	r3, r2
  4005fc:	d0da      	beq.n	4005b4 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4005fe:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400602:	4423      	add	r3, r4
  400604:	4a05      	ldr	r2, [pc, #20]	; (40061c <afec_process_callback+0x98>)
  400606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40060a:	2b00      	cmp	r3, #0
  40060c:	d0d2      	beq.n	4005b4 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40060e:	4798      	blx	r3
  400610:	e7d0      	b.n	4005b4 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400612:	b002      	add	sp, #8
  400614:	bd70      	pop	{r4, r5, r6, pc}
  400616:	bf00      	nop
  400618:	400b4000 	.word	0x400b4000
  40061c:	200008c0 	.word	0x200008c0

00400620 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400620:	784b      	ldrb	r3, [r1, #1]
  400622:	780a      	ldrb	r2, [r1, #0]
  400624:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  400626:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  400628:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40062a:	884b      	ldrh	r3, [r1, #2]
  40062c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400630:	6743      	str	r3, [r0, #116]	; 0x74
  400632:	4770      	bx	lr

00400634 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400634:	2200      	movs	r2, #0
  400636:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400638:	4b08      	ldr	r3, [pc, #32]	; (40065c <afec_get_config_defaults+0x28>)
  40063a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40063c:	4b08      	ldr	r3, [pc, #32]	; (400660 <afec_get_config_defaults+0x2c>)
  40063e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400640:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400644:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400646:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400648:	2302      	movs	r3, #2
  40064a:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  40064c:	2301      	movs	r3, #1
  40064e:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400650:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400652:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400654:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400656:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400658:	7683      	strb	r3, [r0, #26]
  40065a:	4770      	bx	lr
  40065c:	07270e00 	.word	0x07270e00
  400660:	005b8d80 	.word	0x005b8d80

00400664 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  400664:	2300      	movs	r3, #0
  400666:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  400668:	2320      	movs	r3, #32
  40066a:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  40066c:	23ff      	movs	r3, #255	; 0xff
  40066e:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  400670:	f640 73ff 	movw	r3, #4095	; 0xfff
  400674:	8083      	strh	r3, [r0, #4]
  400676:	4770      	bx	lr

00400678 <afec_init>:
	return afec->AFEC_ISR;
  400678:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40067a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40067e:	d001      	beq.n	400684 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400680:	2019      	movs	r0, #25
  400682:	4770      	bx	lr
{
  400684:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400686:	2301      	movs	r3, #1
  400688:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40068a:	7dcb      	ldrb	r3, [r1, #23]
  40068c:	2b00      	cmp	r3, #0
  40068e:	bf14      	ite	ne
  400690:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400694:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400696:	7d8b      	ldrb	r3, [r1, #22]
  400698:	2b00      	cmp	r3, #0
  40069a:	bf14      	ite	ne
  40069c:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  4006a0:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  4006a2:	7d0b      	ldrb	r3, [r1, #20]
  4006a4:	061b      	lsls	r3, r3, #24
  4006a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4006aa:	690a      	ldr	r2, [r1, #16]
  4006ac:	68ce      	ldr	r6, [r1, #12]
  4006ae:	4332      	orrs	r2, r6
  4006b0:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4006b2:	7d4a      	ldrb	r2, [r1, #21]
  4006b4:	0712      	lsls	r2, r2, #28
  4006b6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4006ba:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4006bc:	688a      	ldr	r2, [r1, #8]
  4006be:	0056      	lsls	r6, r2, #1
  4006c0:	684a      	ldr	r2, [r1, #4]
  4006c2:	fbb2 f2f6 	udiv	r2, r2, r6
  4006c6:	3a01      	subs	r2, #1
  4006c8:	0212      	lsls	r2, r2, #8
  4006ca:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4006cc:	4313      	orrs	r3, r2
  4006ce:	432b      	orrs	r3, r5
  4006d0:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4006d2:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4006d4:	7e0b      	ldrb	r3, [r1, #24]
  4006d6:	2b00      	cmp	r3, #0
  4006d8:	bf14      	ite	ne
  4006da:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4006de:	2300      	moveq	r3, #0
  4006e0:	680a      	ldr	r2, [r1, #0]
  4006e2:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4006e4:	7e4a      	ldrb	r2, [r1, #25]
  4006e6:	2a00      	cmp	r2, #0
  4006e8:	bf14      	ite	ne
  4006ea:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4006ee:	2200      	moveq	r2, #0
			(config->resolution) |
  4006f0:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4006f2:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4006f4:	7e8b      	ldrb	r3, [r1, #26]
  4006f6:	021b      	lsls	r3, r3, #8
  4006f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4006fc:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400700:	4b0e      	ldr	r3, [pc, #56]	; (40073c <afec_init+0xc4>)
  400702:	4298      	cmp	r0, r3
  400704:	d005      	beq.n	400712 <afec_init+0x9a>
	if(afec == AFEC1) {
  400706:	4b0e      	ldr	r3, [pc, #56]	; (400740 <afec_init+0xc8>)
  400708:	4298      	cmp	r0, r3
  40070a:	d00c      	beq.n	400726 <afec_init+0xae>
	return STATUS_OK;
  40070c:	2000      	movs	r0, #0
}
  40070e:	bc70      	pop	{r4, r5, r6}
  400710:	4770      	bx	lr
  400712:	4b0c      	ldr	r3, [pc, #48]	; (400744 <afec_init+0xcc>)
  400714:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400718:	2200      	movs	r2, #0
  40071a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40071e:	428b      	cmp	r3, r1
  400720:	d1fb      	bne.n	40071a <afec_init+0xa2>
	return STATUS_OK;
  400722:	2000      	movs	r0, #0
  400724:	e7f3      	b.n	40070e <afec_init+0x96>
  400726:	4b08      	ldr	r3, [pc, #32]	; (400748 <afec_init+0xd0>)
  400728:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  40072c:	2200      	movs	r2, #0
  40072e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400732:	428b      	cmp	r3, r1
  400734:	d1fb      	bne.n	40072e <afec_init+0xb6>
	return STATUS_OK;
  400736:	2000      	movs	r0, #0
  400738:	e7e9      	b.n	40070e <afec_init+0x96>
  40073a:	bf00      	nop
  40073c:	400b0000 	.word	0x400b0000
  400740:	400b4000 	.word	0x400b4000
  400744:	200008bc 	.word	0x200008bc
  400748:	20000918 	.word	0x20000918

0040074c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40074c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40074e:	4802      	ldr	r0, [pc, #8]	; (400758 <AFEC0_Handler+0xc>)
  400750:	4b02      	ldr	r3, [pc, #8]	; (40075c <AFEC0_Handler+0x10>)
  400752:	4798      	blx	r3
  400754:	bd08      	pop	{r3, pc}
  400756:	bf00      	nop
  400758:	400b0000 	.word	0x400b0000
  40075c:	00400585 	.word	0x00400585

00400760 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400760:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400762:	4802      	ldr	r0, [pc, #8]	; (40076c <AFEC1_Handler+0xc>)
  400764:	4b02      	ldr	r3, [pc, #8]	; (400770 <AFEC1_Handler+0x10>)
  400766:	4798      	blx	r3
  400768:	bd08      	pop	{r3, pc}
  40076a:	bf00      	nop
  40076c:	400b4000 	.word	0x400b4000
  400770:	00400585 	.word	0x00400585

00400774 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400774:	b500      	push	{lr}
  400776:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400778:	4b13      	ldr	r3, [pc, #76]	; (4007c8 <afec_enable+0x54>)
  40077a:	4298      	cmp	r0, r3
  40077c:	bf0c      	ite	eq
  40077e:	201f      	moveq	r0, #31
  400780:	201e      	movne	r0, #30
  400782:	4b12      	ldr	r3, [pc, #72]	; (4007cc <afec_enable+0x58>)
  400784:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400786:	4b12      	ldr	r3, [pc, #72]	; (4007d0 <afec_enable+0x5c>)
  400788:	789b      	ldrb	r3, [r3, #2]
  40078a:	2bff      	cmp	r3, #255	; 0xff
  40078c:	d01a      	beq.n	4007c4 <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40078e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400792:	fab3 f383 	clz	r3, r3
  400796:	095b      	lsrs	r3, r3, #5
  400798:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40079a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40079c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4007a0:	2200      	movs	r2, #0
  4007a2:	4b0c      	ldr	r3, [pc, #48]	; (4007d4 <afec_enable+0x60>)
  4007a4:	701a      	strb	r2, [r3, #0]
	return flags;
  4007a6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4007a8:	4a09      	ldr	r2, [pc, #36]	; (4007d0 <afec_enable+0x5c>)
  4007aa:	7893      	ldrb	r3, [r2, #2]
  4007ac:	3301      	adds	r3, #1
  4007ae:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007b0:	b129      	cbz	r1, 4007be <afec_enable+0x4a>
		cpu_irq_enable();
  4007b2:	2201      	movs	r2, #1
  4007b4:	4b07      	ldr	r3, [pc, #28]	; (4007d4 <afec_enable+0x60>)
  4007b6:	701a      	strb	r2, [r3, #0]
  4007b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007bc:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4007be:	b003      	add	sp, #12
  4007c0:	f85d fb04 	ldr.w	pc, [sp], #4
  4007c4:	e7fe      	b.n	4007c4 <afec_enable+0x50>
  4007c6:	bf00      	nop
  4007c8:	400b4000 	.word	0x400b4000
  4007cc:	004008c1 	.word	0x004008c1
  4007d0:	200008ac 	.word	0x200008ac
  4007d4:	2000000a 	.word	0x2000000a

004007d8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4007d8:	4a17      	ldr	r2, [pc, #92]	; (400838 <pmc_switch_mck_to_pllack+0x60>)
  4007da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007e0:	4318      	orrs	r0, r3
  4007e2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007e6:	f013 0f08 	tst.w	r3, #8
  4007ea:	d10a      	bne.n	400802 <pmc_switch_mck_to_pllack+0x2a>
  4007ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007f0:	4911      	ldr	r1, [pc, #68]	; (400838 <pmc_switch_mck_to_pllack+0x60>)
  4007f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007f4:	f012 0f08 	tst.w	r2, #8
  4007f8:	d103      	bne.n	400802 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007fa:	3b01      	subs	r3, #1
  4007fc:	d1f9      	bne.n	4007f2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4007fe:	2001      	movs	r0, #1
  400800:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400802:	4a0d      	ldr	r2, [pc, #52]	; (400838 <pmc_switch_mck_to_pllack+0x60>)
  400804:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400806:	f023 0303 	bic.w	r3, r3, #3
  40080a:	f043 0302 	orr.w	r3, r3, #2
  40080e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400810:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400812:	f013 0f08 	tst.w	r3, #8
  400816:	d10a      	bne.n	40082e <pmc_switch_mck_to_pllack+0x56>
  400818:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40081c:	4906      	ldr	r1, [pc, #24]	; (400838 <pmc_switch_mck_to_pllack+0x60>)
  40081e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400820:	f012 0f08 	tst.w	r2, #8
  400824:	d105      	bne.n	400832 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400826:	3b01      	subs	r3, #1
  400828:	d1f9      	bne.n	40081e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40082a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40082c:	4770      	bx	lr
	return 0;
  40082e:	2000      	movs	r0, #0
  400830:	4770      	bx	lr
  400832:	2000      	movs	r0, #0
  400834:	4770      	bx	lr
  400836:	bf00      	nop
  400838:	400e0400 	.word	0x400e0400

0040083c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40083c:	b9c8      	cbnz	r0, 400872 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40083e:	4a11      	ldr	r2, [pc, #68]	; (400884 <pmc_switch_mainck_to_xtal+0x48>)
  400840:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400842:	0209      	lsls	r1, r1, #8
  400844:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400846:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40084a:	f023 0303 	bic.w	r3, r3, #3
  40084e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400852:	f043 0301 	orr.w	r3, r3, #1
  400856:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400858:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40085a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40085c:	f013 0f01 	tst.w	r3, #1
  400860:	d0fb      	beq.n	40085a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400862:	4a08      	ldr	r2, [pc, #32]	; (400884 <pmc_switch_mainck_to_xtal+0x48>)
  400864:	6a13      	ldr	r3, [r2, #32]
  400866:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40086a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40086e:	6213      	str	r3, [r2, #32]
  400870:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400872:	4904      	ldr	r1, [pc, #16]	; (400884 <pmc_switch_mainck_to_xtal+0x48>)
  400874:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400876:	4a04      	ldr	r2, [pc, #16]	; (400888 <pmc_switch_mainck_to_xtal+0x4c>)
  400878:	401a      	ands	r2, r3
  40087a:	4b04      	ldr	r3, [pc, #16]	; (40088c <pmc_switch_mainck_to_xtal+0x50>)
  40087c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40087e:	620b      	str	r3, [r1, #32]
  400880:	4770      	bx	lr
  400882:	bf00      	nop
  400884:	400e0400 	.word	0x400e0400
  400888:	fec8fffc 	.word	0xfec8fffc
  40088c:	01370002 	.word	0x01370002

00400890 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400890:	4b02      	ldr	r3, [pc, #8]	; (40089c <pmc_osc_is_ready_mainck+0xc>)
  400892:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400894:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400898:	4770      	bx	lr
  40089a:	bf00      	nop
  40089c:	400e0400 	.word	0x400e0400

004008a0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4008a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4008a4:	4b01      	ldr	r3, [pc, #4]	; (4008ac <pmc_disable_pllack+0xc>)
  4008a6:	629a      	str	r2, [r3, #40]	; 0x28
  4008a8:	4770      	bx	lr
  4008aa:	bf00      	nop
  4008ac:	400e0400 	.word	0x400e0400

004008b0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4008b0:	4b02      	ldr	r3, [pc, #8]	; (4008bc <pmc_is_locked_pllack+0xc>)
  4008b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4008b4:	f000 0002 	and.w	r0, r0, #2
  4008b8:	4770      	bx	lr
  4008ba:	bf00      	nop
  4008bc:	400e0400 	.word	0x400e0400

004008c0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4008c0:	282f      	cmp	r0, #47	; 0x2f
  4008c2:	d81e      	bhi.n	400902 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4008c4:	281f      	cmp	r0, #31
  4008c6:	d80c      	bhi.n	4008e2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4008c8:	4b11      	ldr	r3, [pc, #68]	; (400910 <pmc_enable_periph_clk+0x50>)
  4008ca:	699a      	ldr	r2, [r3, #24]
  4008cc:	2301      	movs	r3, #1
  4008ce:	4083      	lsls	r3, r0
  4008d0:	4393      	bics	r3, r2
  4008d2:	d018      	beq.n	400906 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4008d4:	2301      	movs	r3, #1
  4008d6:	fa03 f000 	lsl.w	r0, r3, r0
  4008da:	4b0d      	ldr	r3, [pc, #52]	; (400910 <pmc_enable_periph_clk+0x50>)
  4008dc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008de:	2000      	movs	r0, #0
  4008e0:	4770      	bx	lr
		ul_id -= 32;
  4008e2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008e4:	4b0a      	ldr	r3, [pc, #40]	; (400910 <pmc_enable_periph_clk+0x50>)
  4008e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4008ea:	2301      	movs	r3, #1
  4008ec:	4083      	lsls	r3, r0
  4008ee:	4393      	bics	r3, r2
  4008f0:	d00b      	beq.n	40090a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4008f2:	2301      	movs	r3, #1
  4008f4:	fa03 f000 	lsl.w	r0, r3, r0
  4008f8:	4b05      	ldr	r3, [pc, #20]	; (400910 <pmc_enable_periph_clk+0x50>)
  4008fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4008fe:	2000      	movs	r0, #0
  400900:	4770      	bx	lr
		return 1;
  400902:	2001      	movs	r0, #1
  400904:	4770      	bx	lr
	return 0;
  400906:	2000      	movs	r0, #0
  400908:	4770      	bx	lr
  40090a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40090c:	4770      	bx	lr
  40090e:	bf00      	nop
  400910:	400e0400 	.word	0x400e0400

00400914 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400914:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400916:	23ac      	movs	r3, #172	; 0xac
  400918:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40091a:	680b      	ldr	r3, [r1, #0]
  40091c:	684a      	ldr	r2, [r1, #4]
  40091e:	fbb3 f3f2 	udiv	r3, r3, r2
  400922:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400924:	1e5c      	subs	r4, r3, #1
  400926:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  40092a:	4294      	cmp	r4, r2
  40092c:	d80c      	bhi.n	400948 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  40092e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400930:	688b      	ldr	r3, [r1, #8]
  400932:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400934:	f240 2302 	movw	r3, #514	; 0x202
  400938:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40093c:	2350      	movs	r3, #80	; 0x50
  40093e:	6003      	str	r3, [r0, #0]

	return 0;
  400940:	2000      	movs	r0, #0
}
  400942:	f85d 4b04 	ldr.w	r4, [sp], #4
  400946:	4770      	bx	lr
		return 1;
  400948:	2001      	movs	r0, #1
  40094a:	e7fa      	b.n	400942 <uart_init+0x2e>

0040094c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40094c:	6943      	ldr	r3, [r0, #20]
  40094e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400952:	bf1a      	itte	ne
  400954:	61c1      	strne	r1, [r0, #28]
	return 0;
  400956:	2000      	movne	r0, #0
		return 1;
  400958:	2001      	moveq	r0, #1
}
  40095a:	4770      	bx	lr

0040095c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40095c:	6943      	ldr	r3, [r0, #20]
  40095e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400962:	bf1d      	ittte	ne
  400964:	6983      	ldrne	r3, [r0, #24]
  400966:	700b      	strbne	r3, [r1, #0]
	return 0;
  400968:	2000      	movne	r0, #0
		return 1;
  40096a:	2001      	moveq	r0, #1
}
  40096c:	4770      	bx	lr

0040096e <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40096e:	6943      	ldr	r3, [r0, #20]
  400970:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400974:	bf1d      	ittte	ne
  400976:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  40097a:	61c1      	strne	r1, [r0, #28]
	return 0;
  40097c:	2000      	movne	r0, #0
		return 1;
  40097e:	2001      	moveq	r0, #1
}
  400980:	4770      	bx	lr

00400982 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400982:	6943      	ldr	r3, [r0, #20]
  400984:	f013 0f01 	tst.w	r3, #1
  400988:	d005      	beq.n	400996 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40098a:	6983      	ldr	r3, [r0, #24]
  40098c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400990:	600b      	str	r3, [r1, #0]

	return 0;
  400992:	2000      	movs	r0, #0
  400994:	4770      	bx	lr
		return 1;
  400996:	2001      	movs	r0, #1
}
  400998:	4770      	bx	lr

0040099a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40099a:	e7fe      	b.n	40099a <Dummy_Handler>

0040099c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40099c:	b500      	push	{lr}
  40099e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4009a0:	4b25      	ldr	r3, [pc, #148]	; (400a38 <Reset_Handler+0x9c>)
  4009a2:	4a26      	ldr	r2, [pc, #152]	; (400a3c <Reset_Handler+0xa0>)
  4009a4:	429a      	cmp	r2, r3
  4009a6:	d010      	beq.n	4009ca <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  4009a8:	4b25      	ldr	r3, [pc, #148]	; (400a40 <Reset_Handler+0xa4>)
  4009aa:	4a23      	ldr	r2, [pc, #140]	; (400a38 <Reset_Handler+0x9c>)
  4009ac:	429a      	cmp	r2, r3
  4009ae:	d20c      	bcs.n	4009ca <Reset_Handler+0x2e>
  4009b0:	3b01      	subs	r3, #1
  4009b2:	1a9b      	subs	r3, r3, r2
  4009b4:	f023 0303 	bic.w	r3, r3, #3
  4009b8:	3304      	adds	r3, #4
  4009ba:	4413      	add	r3, r2
  4009bc:	491f      	ldr	r1, [pc, #124]	; (400a3c <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  4009be:	f851 0b04 	ldr.w	r0, [r1], #4
  4009c2:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  4009c6:	429a      	cmp	r2, r3
  4009c8:	d1f9      	bne.n	4009be <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4009ca:	4b1e      	ldr	r3, [pc, #120]	; (400a44 <Reset_Handler+0xa8>)
  4009cc:	4a1e      	ldr	r2, [pc, #120]	; (400a48 <Reset_Handler+0xac>)
  4009ce:	429a      	cmp	r2, r3
  4009d0:	d20a      	bcs.n	4009e8 <Reset_Handler+0x4c>
  4009d2:	3b01      	subs	r3, #1
  4009d4:	1a9b      	subs	r3, r3, r2
  4009d6:	f023 0303 	bic.w	r3, r3, #3
  4009da:	3304      	adds	r3, #4
  4009dc:	4413      	add	r3, r2
		*pDest++ = 0;
  4009de:	2100      	movs	r1, #0
  4009e0:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4009e4:	4293      	cmp	r3, r2
  4009e6:	d1fb      	bne.n	4009e0 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4009e8:	4a18      	ldr	r2, [pc, #96]	; (400a4c <Reset_Handler+0xb0>)
  4009ea:	4b19      	ldr	r3, [pc, #100]	; (400a50 <Reset_Handler+0xb4>)
  4009ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4009f0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4009f2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4009f6:	fab3 f383 	clz	r3, r3
  4009fa:	095b      	lsrs	r3, r3, #5
  4009fc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4009fe:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400a00:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a04:	2200      	movs	r2, #0
  400a06:	4b13      	ldr	r3, [pc, #76]	; (400a54 <Reset_Handler+0xb8>)
  400a08:	701a      	strb	r2, [r3, #0]
	return flags;
  400a0a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400a0c:	4a12      	ldr	r2, [pc, #72]	; (400a58 <Reset_Handler+0xbc>)
  400a0e:	6813      	ldr	r3, [r2, #0]
  400a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400a14:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400a16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400a1a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400a1e:	b129      	cbz	r1, 400a2c <Reset_Handler+0x90>
		cpu_irq_enable();
  400a20:	2201      	movs	r2, #1
  400a22:	4b0c      	ldr	r3, [pc, #48]	; (400a54 <Reset_Handler+0xb8>)
  400a24:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400a26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a2a:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400a2c:	4b0b      	ldr	r3, [pc, #44]	; (400a5c <Reset_Handler+0xc0>)
  400a2e:	4798      	blx	r3

	/* Branch to main function */
	main();
  400a30:	4b0b      	ldr	r3, [pc, #44]	; (400a60 <Reset_Handler+0xc4>)
  400a32:	4798      	blx	r3
  400a34:	e7fe      	b.n	400a34 <Reset_Handler+0x98>
  400a36:	bf00      	nop
  400a38:	20000000 	.word	0x20000000
  400a3c:	00401d50 	.word	0x00401d50
  400a40:	20000854 	.word	0x20000854
  400a44:	200009a0 	.word	0x200009a0
  400a48:	20000854 	.word	0x20000854
  400a4c:	e000ed00 	.word	0xe000ed00
  400a50:	00400000 	.word	0x00400000
  400a54:	2000000a 	.word	0x2000000a
  400a58:	e000ed88 	.word	0xe000ed88
  400a5c:	00400c31 	.word	0x00400c31
  400a60:	0040026d 	.word	0x0040026d

00400a64 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400a64:	4b3b      	ldr	r3, [pc, #236]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a68:	f003 0303 	and.w	r3, r3, #3
  400a6c:	2b01      	cmp	r3, #1
  400a6e:	d01d      	beq.n	400aac <SystemCoreClockUpdate+0x48>
  400a70:	b183      	cbz	r3, 400a94 <SystemCoreClockUpdate+0x30>
  400a72:	2b02      	cmp	r3, #2
  400a74:	d036      	beq.n	400ae4 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400a76:	4b37      	ldr	r3, [pc, #220]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a7e:	2b70      	cmp	r3, #112	; 0x70
  400a80:	d05f      	beq.n	400b42 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400a82:	4b34      	ldr	r3, [pc, #208]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a86:	4934      	ldr	r1, [pc, #208]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400a88:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400a8c:	680b      	ldr	r3, [r1, #0]
  400a8e:	40d3      	lsrs	r3, r2
  400a90:	600b      	str	r3, [r1, #0]
  400a92:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400a94:	4b31      	ldr	r3, [pc, #196]	; (400b5c <SystemCoreClockUpdate+0xf8>)
  400a96:	695b      	ldr	r3, [r3, #20]
  400a98:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a9c:	bf14      	ite	ne
  400a9e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400aa2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400aa6:	4b2c      	ldr	r3, [pc, #176]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400aa8:	601a      	str	r2, [r3, #0]
  400aaa:	e7e4      	b.n	400a76 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400aac:	4b29      	ldr	r3, [pc, #164]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400aae:	6a1b      	ldr	r3, [r3, #32]
  400ab0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ab4:	d003      	beq.n	400abe <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400ab6:	4a2a      	ldr	r2, [pc, #168]	; (400b60 <SystemCoreClockUpdate+0xfc>)
  400ab8:	4b27      	ldr	r3, [pc, #156]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400aba:	601a      	str	r2, [r3, #0]
  400abc:	e7db      	b.n	400a76 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400abe:	4a29      	ldr	r2, [pc, #164]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400ac0:	4b25      	ldr	r3, [pc, #148]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400ac2:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ac4:	4b23      	ldr	r3, [pc, #140]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400ac6:	6a1b      	ldr	r3, [r3, #32]
  400ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400acc:	2b10      	cmp	r3, #16
  400ace:	d005      	beq.n	400adc <SystemCoreClockUpdate+0x78>
  400ad0:	2b20      	cmp	r3, #32
  400ad2:	d1d0      	bne.n	400a76 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400ad4:	4a22      	ldr	r2, [pc, #136]	; (400b60 <SystemCoreClockUpdate+0xfc>)
  400ad6:	4b20      	ldr	r3, [pc, #128]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400ad8:	601a      	str	r2, [r3, #0]
				break;
  400ada:	e7cc      	b.n	400a76 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400adc:	4a22      	ldr	r2, [pc, #136]	; (400b68 <SystemCoreClockUpdate+0x104>)
  400ade:	4b1e      	ldr	r3, [pc, #120]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400ae0:	601a      	str	r2, [r3, #0]
				break;
  400ae2:	e7c8      	b.n	400a76 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400ae4:	4b1b      	ldr	r3, [pc, #108]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400ae6:	6a1b      	ldr	r3, [r3, #32]
  400ae8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400aec:	d016      	beq.n	400b1c <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400aee:	4a1c      	ldr	r2, [pc, #112]	; (400b60 <SystemCoreClockUpdate+0xfc>)
  400af0:	4b19      	ldr	r3, [pc, #100]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400af2:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400af4:	4b17      	ldr	r3, [pc, #92]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400af8:	f003 0303 	and.w	r3, r3, #3
  400afc:	2b02      	cmp	r3, #2
  400afe:	d1ba      	bne.n	400a76 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b00:	4a14      	ldr	r2, [pc, #80]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400b02:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b04:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400b06:	4814      	ldr	r0, [pc, #80]	; (400b58 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400b08:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400b0c:	6803      	ldr	r3, [r0, #0]
  400b0e:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400b12:	b2d2      	uxtb	r2, r2
  400b14:	fbb3 f3f2 	udiv	r3, r3, r2
  400b18:	6003      	str	r3, [r0, #0]
  400b1a:	e7ac      	b.n	400a76 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b1c:	4a11      	ldr	r2, [pc, #68]	; (400b64 <SystemCoreClockUpdate+0x100>)
  400b1e:	4b0e      	ldr	r3, [pc, #56]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400b20:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b22:	4b0c      	ldr	r3, [pc, #48]	; (400b54 <SystemCoreClockUpdate+0xf0>)
  400b24:	6a1b      	ldr	r3, [r3, #32]
  400b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b2a:	2b10      	cmp	r3, #16
  400b2c:	d005      	beq.n	400b3a <SystemCoreClockUpdate+0xd6>
  400b2e:	2b20      	cmp	r3, #32
  400b30:	d1e0      	bne.n	400af4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400b32:	4a0b      	ldr	r2, [pc, #44]	; (400b60 <SystemCoreClockUpdate+0xfc>)
  400b34:	4b08      	ldr	r3, [pc, #32]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400b36:	601a      	str	r2, [r3, #0]
				break;
  400b38:	e7dc      	b.n	400af4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400b3a:	4a0b      	ldr	r2, [pc, #44]	; (400b68 <SystemCoreClockUpdate+0x104>)
  400b3c:	4b06      	ldr	r3, [pc, #24]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400b3e:	601a      	str	r2, [r3, #0]
				break;
  400b40:	e7d8      	b.n	400af4 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400b42:	4a05      	ldr	r2, [pc, #20]	; (400b58 <SystemCoreClockUpdate+0xf4>)
  400b44:	6813      	ldr	r3, [r2, #0]
  400b46:	4909      	ldr	r1, [pc, #36]	; (400b6c <SystemCoreClockUpdate+0x108>)
  400b48:	fba1 1303 	umull	r1, r3, r1, r3
  400b4c:	085b      	lsrs	r3, r3, #1
  400b4e:	6013      	str	r3, [r2, #0]
  400b50:	4770      	bx	lr
  400b52:	bf00      	nop
  400b54:	400e0400 	.word	0x400e0400
  400b58:	2000000c 	.word	0x2000000c
  400b5c:	400e1810 	.word	0x400e1810
  400b60:	00b71b00 	.word	0x00b71b00
  400b64:	003d0900 	.word	0x003d0900
  400b68:	007a1200 	.word	0x007a1200
  400b6c:	aaaaaaab 	.word	0xaaaaaaab

00400b70 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400b70:	4b12      	ldr	r3, [pc, #72]	; (400bbc <system_init_flash+0x4c>)
  400b72:	4298      	cmp	r0, r3
  400b74:	d911      	bls.n	400b9a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400b76:	4b12      	ldr	r3, [pc, #72]	; (400bc0 <system_init_flash+0x50>)
  400b78:	4298      	cmp	r0, r3
  400b7a:	d913      	bls.n	400ba4 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400b7c:	4b11      	ldr	r3, [pc, #68]	; (400bc4 <system_init_flash+0x54>)
  400b7e:	4298      	cmp	r0, r3
  400b80:	d914      	bls.n	400bac <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400b82:	4b11      	ldr	r3, [pc, #68]	; (400bc8 <system_init_flash+0x58>)
  400b84:	4298      	cmp	r0, r3
  400b86:	d915      	bls.n	400bb4 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400b88:	4b10      	ldr	r3, [pc, #64]	; (400bcc <system_init_flash+0x5c>)
  400b8a:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b8c:	bf94      	ite	ls
  400b8e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b92:	4a0f      	ldrhi	r2, [pc, #60]	; (400bd0 <system_init_flash+0x60>)
  400b94:	4b0f      	ldr	r3, [pc, #60]	; (400bd4 <system_init_flash+0x64>)
  400b96:	601a      	str	r2, [r3, #0]
  400b98:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b9e:	4b0d      	ldr	r3, [pc, #52]	; (400bd4 <system_init_flash+0x64>)
  400ba0:	601a      	str	r2, [r3, #0]
  400ba2:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ba4:	4a0c      	ldr	r2, [pc, #48]	; (400bd8 <system_init_flash+0x68>)
  400ba6:	4b0b      	ldr	r3, [pc, #44]	; (400bd4 <system_init_flash+0x64>)
  400ba8:	601a      	str	r2, [r3, #0]
  400baa:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400bac:	4a0b      	ldr	r2, [pc, #44]	; (400bdc <system_init_flash+0x6c>)
  400bae:	4b09      	ldr	r3, [pc, #36]	; (400bd4 <system_init_flash+0x64>)
  400bb0:	601a      	str	r2, [r3, #0]
  400bb2:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400bb4:	4a0a      	ldr	r2, [pc, #40]	; (400be0 <system_init_flash+0x70>)
  400bb6:	4b07      	ldr	r3, [pc, #28]	; (400bd4 <system_init_flash+0x64>)
  400bb8:	601a      	str	r2, [r3, #0]
  400bba:	4770      	bx	lr
  400bbc:	01312cff 	.word	0x01312cff
  400bc0:	026259ff 	.word	0x026259ff
  400bc4:	039386ff 	.word	0x039386ff
  400bc8:	04c4b3ff 	.word	0x04c4b3ff
  400bcc:	05f5e0ff 	.word	0x05f5e0ff
  400bd0:	04000500 	.word	0x04000500
  400bd4:	400e0a00 	.word	0x400e0a00
  400bd8:	04000100 	.word	0x04000100
  400bdc:	04000200 	.word	0x04000200
  400be0:	04000300 	.word	0x04000300

00400be4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400be4:	4b0a      	ldr	r3, [pc, #40]	; (400c10 <_sbrk+0x2c>)
  400be6:	681b      	ldr	r3, [r3, #0]
  400be8:	b153      	cbz	r3, 400c00 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400bea:	4b09      	ldr	r3, [pc, #36]	; (400c10 <_sbrk+0x2c>)
  400bec:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400bee:	181a      	adds	r2, r3, r0
  400bf0:	4908      	ldr	r1, [pc, #32]	; (400c14 <_sbrk+0x30>)
  400bf2:	4291      	cmp	r1, r2
  400bf4:	db08      	blt.n	400c08 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400bf6:	4610      	mov	r0, r2
  400bf8:	4a05      	ldr	r2, [pc, #20]	; (400c10 <_sbrk+0x2c>)
  400bfa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400bfc:	4618      	mov	r0, r3
  400bfe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400c00:	4a05      	ldr	r2, [pc, #20]	; (400c18 <_sbrk+0x34>)
  400c02:	4b03      	ldr	r3, [pc, #12]	; (400c10 <_sbrk+0x2c>)
  400c04:	601a      	str	r2, [r3, #0]
  400c06:	e7f0      	b.n	400bea <_sbrk+0x6>
		return (caddr_t) -1;	
  400c08:	f04f 30ff 	mov.w	r0, #4294967295
}
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop
  400c10:	20000870 	.word	0x20000870
  400c14:	2001fffc 	.word	0x2001fffc
  400c18:	200039a0 	.word	0x200039a0

00400c1c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400c1c:	f04f 30ff 	mov.w	r0, #4294967295
  400c20:	4770      	bx	lr

00400c22 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400c26:	604b      	str	r3, [r1, #4]

	return 0;
}
  400c28:	2000      	movs	r0, #0
  400c2a:	4770      	bx	lr

00400c2c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400c2c:	2000      	movs	r0, #0
  400c2e:	4770      	bx	lr

00400c30 <__libc_init_array>:
  400c30:	b570      	push	{r4, r5, r6, lr}
  400c32:	4e0f      	ldr	r6, [pc, #60]	; (400c70 <__libc_init_array+0x40>)
  400c34:	4d0f      	ldr	r5, [pc, #60]	; (400c74 <__libc_init_array+0x44>)
  400c36:	1b76      	subs	r6, r6, r5
  400c38:	10b6      	asrs	r6, r6, #2
  400c3a:	bf18      	it	ne
  400c3c:	2400      	movne	r4, #0
  400c3e:	d005      	beq.n	400c4c <__libc_init_array+0x1c>
  400c40:	3401      	adds	r4, #1
  400c42:	f855 3b04 	ldr.w	r3, [r5], #4
  400c46:	4798      	blx	r3
  400c48:	42a6      	cmp	r6, r4
  400c4a:	d1f9      	bne.n	400c40 <__libc_init_array+0x10>
  400c4c:	4e0a      	ldr	r6, [pc, #40]	; (400c78 <__libc_init_array+0x48>)
  400c4e:	4d0b      	ldr	r5, [pc, #44]	; (400c7c <__libc_init_array+0x4c>)
  400c50:	1b76      	subs	r6, r6, r5
  400c52:	f001 f86b 	bl	401d2c <_init>
  400c56:	10b6      	asrs	r6, r6, #2
  400c58:	bf18      	it	ne
  400c5a:	2400      	movne	r4, #0
  400c5c:	d006      	beq.n	400c6c <__libc_init_array+0x3c>
  400c5e:	3401      	adds	r4, #1
  400c60:	f855 3b04 	ldr.w	r3, [r5], #4
  400c64:	4798      	blx	r3
  400c66:	42a6      	cmp	r6, r4
  400c68:	d1f9      	bne.n	400c5e <__libc_init_array+0x2e>
  400c6a:	bd70      	pop	{r4, r5, r6, pc}
  400c6c:	bd70      	pop	{r4, r5, r6, pc}
  400c6e:	bf00      	nop
  400c70:	00401d38 	.word	0x00401d38
  400c74:	00401d38 	.word	0x00401d38
  400c78:	00401d40 	.word	0x00401d40
  400c7c:	00401d38 	.word	0x00401d38

00400c80 <memset>:
  400c80:	b470      	push	{r4, r5, r6}
  400c82:	0786      	lsls	r6, r0, #30
  400c84:	d046      	beq.n	400d14 <memset+0x94>
  400c86:	1e54      	subs	r4, r2, #1
  400c88:	2a00      	cmp	r2, #0
  400c8a:	d041      	beq.n	400d10 <memset+0x90>
  400c8c:	b2ca      	uxtb	r2, r1
  400c8e:	4603      	mov	r3, r0
  400c90:	e002      	b.n	400c98 <memset+0x18>
  400c92:	f114 34ff 	adds.w	r4, r4, #4294967295
  400c96:	d33b      	bcc.n	400d10 <memset+0x90>
  400c98:	f803 2b01 	strb.w	r2, [r3], #1
  400c9c:	079d      	lsls	r5, r3, #30
  400c9e:	d1f8      	bne.n	400c92 <memset+0x12>
  400ca0:	2c03      	cmp	r4, #3
  400ca2:	d92e      	bls.n	400d02 <memset+0x82>
  400ca4:	b2cd      	uxtb	r5, r1
  400ca6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400caa:	2c0f      	cmp	r4, #15
  400cac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400cb0:	d919      	bls.n	400ce6 <memset+0x66>
  400cb2:	f103 0210 	add.w	r2, r3, #16
  400cb6:	4626      	mov	r6, r4
  400cb8:	3e10      	subs	r6, #16
  400cba:	2e0f      	cmp	r6, #15
  400cbc:	f842 5c10 	str.w	r5, [r2, #-16]
  400cc0:	f842 5c0c 	str.w	r5, [r2, #-12]
  400cc4:	f842 5c08 	str.w	r5, [r2, #-8]
  400cc8:	f842 5c04 	str.w	r5, [r2, #-4]
  400ccc:	f102 0210 	add.w	r2, r2, #16
  400cd0:	d8f2      	bhi.n	400cb8 <memset+0x38>
  400cd2:	f1a4 0210 	sub.w	r2, r4, #16
  400cd6:	f022 020f 	bic.w	r2, r2, #15
  400cda:	f004 040f 	and.w	r4, r4, #15
  400cde:	3210      	adds	r2, #16
  400ce0:	2c03      	cmp	r4, #3
  400ce2:	4413      	add	r3, r2
  400ce4:	d90d      	bls.n	400d02 <memset+0x82>
  400ce6:	461e      	mov	r6, r3
  400ce8:	4622      	mov	r2, r4
  400cea:	3a04      	subs	r2, #4
  400cec:	2a03      	cmp	r2, #3
  400cee:	f846 5b04 	str.w	r5, [r6], #4
  400cf2:	d8fa      	bhi.n	400cea <memset+0x6a>
  400cf4:	1f22      	subs	r2, r4, #4
  400cf6:	f022 0203 	bic.w	r2, r2, #3
  400cfa:	3204      	adds	r2, #4
  400cfc:	4413      	add	r3, r2
  400cfe:	f004 0403 	and.w	r4, r4, #3
  400d02:	b12c      	cbz	r4, 400d10 <memset+0x90>
  400d04:	b2c9      	uxtb	r1, r1
  400d06:	441c      	add	r4, r3
  400d08:	f803 1b01 	strb.w	r1, [r3], #1
  400d0c:	429c      	cmp	r4, r3
  400d0e:	d1fb      	bne.n	400d08 <memset+0x88>
  400d10:	bc70      	pop	{r4, r5, r6}
  400d12:	4770      	bx	lr
  400d14:	4614      	mov	r4, r2
  400d16:	4603      	mov	r3, r0
  400d18:	e7c2      	b.n	400ca0 <memset+0x20>
  400d1a:	bf00      	nop

00400d1c <setbuf>:
  400d1c:	2900      	cmp	r1, #0
  400d1e:	bf0c      	ite	eq
  400d20:	2202      	moveq	r2, #2
  400d22:	2200      	movne	r2, #0
  400d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400d28:	f000 b800 	b.w	400d2c <setvbuf>

00400d2c <setvbuf>:
  400d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400d30:	4c61      	ldr	r4, [pc, #388]	; (400eb8 <setvbuf+0x18c>)
  400d32:	6825      	ldr	r5, [r4, #0]
  400d34:	b083      	sub	sp, #12
  400d36:	4604      	mov	r4, r0
  400d38:	460f      	mov	r7, r1
  400d3a:	4690      	mov	r8, r2
  400d3c:	461e      	mov	r6, r3
  400d3e:	b115      	cbz	r5, 400d46 <setvbuf+0x1a>
  400d40:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400d42:	2b00      	cmp	r3, #0
  400d44:	d064      	beq.n	400e10 <setvbuf+0xe4>
  400d46:	f1b8 0f02 	cmp.w	r8, #2
  400d4a:	d006      	beq.n	400d5a <setvbuf+0x2e>
  400d4c:	f1b8 0f01 	cmp.w	r8, #1
  400d50:	f200 809f 	bhi.w	400e92 <setvbuf+0x166>
  400d54:	2e00      	cmp	r6, #0
  400d56:	f2c0 809c 	blt.w	400e92 <setvbuf+0x166>
  400d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400d5c:	07d8      	lsls	r0, r3, #31
  400d5e:	d534      	bpl.n	400dca <setvbuf+0x9e>
  400d60:	4621      	mov	r1, r4
  400d62:	4628      	mov	r0, r5
  400d64:	f000 f95a 	bl	40101c <_fflush_r>
  400d68:	6b21      	ldr	r1, [r4, #48]	; 0x30
  400d6a:	b141      	cbz	r1, 400d7e <setvbuf+0x52>
  400d6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  400d70:	4299      	cmp	r1, r3
  400d72:	d002      	beq.n	400d7a <setvbuf+0x4e>
  400d74:	4628      	mov	r0, r5
  400d76:	f000 fa4b 	bl	401210 <_free_r>
  400d7a:	2300      	movs	r3, #0
  400d7c:	6323      	str	r3, [r4, #48]	; 0x30
  400d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400d82:	2200      	movs	r2, #0
  400d84:	61a2      	str	r2, [r4, #24]
  400d86:	6062      	str	r2, [r4, #4]
  400d88:	061a      	lsls	r2, r3, #24
  400d8a:	d43a      	bmi.n	400e02 <setvbuf+0xd6>
  400d8c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400d90:	f023 0303 	bic.w	r3, r3, #3
  400d94:	f1b8 0f02 	cmp.w	r8, #2
  400d98:	81a3      	strh	r3, [r4, #12]
  400d9a:	d01d      	beq.n	400dd8 <setvbuf+0xac>
  400d9c:	ab01      	add	r3, sp, #4
  400d9e:	466a      	mov	r2, sp
  400da0:	4621      	mov	r1, r4
  400da2:	4628      	mov	r0, r5
  400da4:	f000 fb4c 	bl	401440 <__swhatbuf_r>
  400da8:	89a3      	ldrh	r3, [r4, #12]
  400daa:	4318      	orrs	r0, r3
  400dac:	81a0      	strh	r0, [r4, #12]
  400dae:	2e00      	cmp	r6, #0
  400db0:	d132      	bne.n	400e18 <setvbuf+0xec>
  400db2:	9e00      	ldr	r6, [sp, #0]
  400db4:	4630      	mov	r0, r6
  400db6:	f000 fb71 	bl	40149c <malloc>
  400dba:	4607      	mov	r7, r0
  400dbc:	2800      	cmp	r0, #0
  400dbe:	d06b      	beq.n	400e98 <setvbuf+0x16c>
  400dc0:	89a3      	ldrh	r3, [r4, #12]
  400dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400dc6:	81a3      	strh	r3, [r4, #12]
  400dc8:	e028      	b.n	400e1c <setvbuf+0xf0>
  400dca:	89a3      	ldrh	r3, [r4, #12]
  400dcc:	0599      	lsls	r1, r3, #22
  400dce:	d4c7      	bmi.n	400d60 <setvbuf+0x34>
  400dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400dd2:	f000 fb31 	bl	401438 <__retarget_lock_acquire_recursive>
  400dd6:	e7c3      	b.n	400d60 <setvbuf+0x34>
  400dd8:	2500      	movs	r5, #0
  400dda:	6e61      	ldr	r1, [r4, #100]	; 0x64
  400ddc:	2600      	movs	r6, #0
  400dde:	f104 0243 	add.w	r2, r4, #67	; 0x43
  400de2:	f043 0302 	orr.w	r3, r3, #2
  400de6:	2001      	movs	r0, #1
  400de8:	60a6      	str	r6, [r4, #8]
  400dea:	07ce      	lsls	r6, r1, #31
  400dec:	81a3      	strh	r3, [r4, #12]
  400dee:	6022      	str	r2, [r4, #0]
  400df0:	6122      	str	r2, [r4, #16]
  400df2:	6160      	str	r0, [r4, #20]
  400df4:	d401      	bmi.n	400dfa <setvbuf+0xce>
  400df6:	0598      	lsls	r0, r3, #22
  400df8:	d53e      	bpl.n	400e78 <setvbuf+0x14c>
  400dfa:	4628      	mov	r0, r5
  400dfc:	b003      	add	sp, #12
  400dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400e02:	6921      	ldr	r1, [r4, #16]
  400e04:	4628      	mov	r0, r5
  400e06:	f000 fa03 	bl	401210 <_free_r>
  400e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400e0e:	e7bd      	b.n	400d8c <setvbuf+0x60>
  400e10:	4628      	mov	r0, r5
  400e12:	f000 f95b 	bl	4010cc <__sinit>
  400e16:	e796      	b.n	400d46 <setvbuf+0x1a>
  400e18:	2f00      	cmp	r7, #0
  400e1a:	d0cb      	beq.n	400db4 <setvbuf+0x88>
  400e1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400e1e:	2b00      	cmp	r3, #0
  400e20:	d033      	beq.n	400e8a <setvbuf+0x15e>
  400e22:	9b00      	ldr	r3, [sp, #0]
  400e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  400e28:	6027      	str	r7, [r4, #0]
  400e2a:	429e      	cmp	r6, r3
  400e2c:	bf1c      	itt	ne
  400e2e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  400e32:	81a2      	strhne	r2, [r4, #12]
  400e34:	f1b8 0f01 	cmp.w	r8, #1
  400e38:	bf04      	itt	eq
  400e3a:	f042 0201 	orreq.w	r2, r2, #1
  400e3e:	81a2      	strheq	r2, [r4, #12]
  400e40:	b292      	uxth	r2, r2
  400e42:	f012 0308 	ands.w	r3, r2, #8
  400e46:	6127      	str	r7, [r4, #16]
  400e48:	6166      	str	r6, [r4, #20]
  400e4a:	d00e      	beq.n	400e6a <setvbuf+0x13e>
  400e4c:	07d1      	lsls	r1, r2, #31
  400e4e:	d51a      	bpl.n	400e86 <setvbuf+0x15a>
  400e50:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400e52:	4276      	negs	r6, r6
  400e54:	2300      	movs	r3, #0
  400e56:	f015 0501 	ands.w	r5, r5, #1
  400e5a:	61a6      	str	r6, [r4, #24]
  400e5c:	60a3      	str	r3, [r4, #8]
  400e5e:	d009      	beq.n	400e74 <setvbuf+0x148>
  400e60:	2500      	movs	r5, #0
  400e62:	4628      	mov	r0, r5
  400e64:	b003      	add	sp, #12
  400e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400e6a:	60a3      	str	r3, [r4, #8]
  400e6c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400e6e:	f015 0501 	ands.w	r5, r5, #1
  400e72:	d1f5      	bne.n	400e60 <setvbuf+0x134>
  400e74:	0593      	lsls	r3, r2, #22
  400e76:	d4c0      	bmi.n	400dfa <setvbuf+0xce>
  400e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400e7a:	f000 fadf 	bl	40143c <__retarget_lock_release_recursive>
  400e7e:	4628      	mov	r0, r5
  400e80:	b003      	add	sp, #12
  400e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400e86:	60a6      	str	r6, [r4, #8]
  400e88:	e7f0      	b.n	400e6c <setvbuf+0x140>
  400e8a:	4628      	mov	r0, r5
  400e8c:	f000 f91e 	bl	4010cc <__sinit>
  400e90:	e7c7      	b.n	400e22 <setvbuf+0xf6>
  400e92:	f04f 35ff 	mov.w	r5, #4294967295
  400e96:	e7b0      	b.n	400dfa <setvbuf+0xce>
  400e98:	f8dd 9000 	ldr.w	r9, [sp]
  400e9c:	45b1      	cmp	r9, r6
  400e9e:	d004      	beq.n	400eaa <setvbuf+0x17e>
  400ea0:	4648      	mov	r0, r9
  400ea2:	f000 fafb 	bl	40149c <malloc>
  400ea6:	4607      	mov	r7, r0
  400ea8:	b920      	cbnz	r0, 400eb4 <setvbuf+0x188>
  400eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400eae:	f04f 35ff 	mov.w	r5, #4294967295
  400eb2:	e792      	b.n	400dda <setvbuf+0xae>
  400eb4:	464e      	mov	r6, r9
  400eb6:	e783      	b.n	400dc0 <setvbuf+0x94>
  400eb8:	20000010 	.word	0x20000010

00400ebc <register_fini>:
  400ebc:	4b02      	ldr	r3, [pc, #8]	; (400ec8 <register_fini+0xc>)
  400ebe:	b113      	cbz	r3, 400ec6 <register_fini+0xa>
  400ec0:	4802      	ldr	r0, [pc, #8]	; (400ecc <register_fini+0x10>)
  400ec2:	f000 b805 	b.w	400ed0 <atexit>
  400ec6:	4770      	bx	lr
  400ec8:	00000000 	.word	0x00000000
  400ecc:	0040113d 	.word	0x0040113d

00400ed0 <atexit>:
  400ed0:	2300      	movs	r3, #0
  400ed2:	4601      	mov	r1, r0
  400ed4:	461a      	mov	r2, r3
  400ed6:	4618      	mov	r0, r3
  400ed8:	f000 be10 	b.w	401afc <__register_exitproc>

00400edc <__sflush_r>:
  400edc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  400ee0:	b29a      	uxth	r2, r3
  400ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ee6:	460d      	mov	r5, r1
  400ee8:	0711      	lsls	r1, r2, #28
  400eea:	4680      	mov	r8, r0
  400eec:	d43a      	bmi.n	400f64 <__sflush_r+0x88>
  400eee:	686a      	ldr	r2, [r5, #4]
  400ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400ef4:	2a00      	cmp	r2, #0
  400ef6:	81ab      	strh	r3, [r5, #12]
  400ef8:	dd6f      	ble.n	400fda <__sflush_r+0xfe>
  400efa:	6aac      	ldr	r4, [r5, #40]	; 0x28
  400efc:	2c00      	cmp	r4, #0
  400efe:	d049      	beq.n	400f94 <__sflush_r+0xb8>
  400f00:	2200      	movs	r2, #0
  400f02:	b29b      	uxth	r3, r3
  400f04:	f8d8 6000 	ldr.w	r6, [r8]
  400f08:	f8c8 2000 	str.w	r2, [r8]
  400f0c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  400f10:	d067      	beq.n	400fe2 <__sflush_r+0x106>
  400f12:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  400f14:	075f      	lsls	r7, r3, #29
  400f16:	d505      	bpl.n	400f24 <__sflush_r+0x48>
  400f18:	6869      	ldr	r1, [r5, #4]
  400f1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400f1c:	1a52      	subs	r2, r2, r1
  400f1e:	b10b      	cbz	r3, 400f24 <__sflush_r+0x48>
  400f20:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  400f22:	1ad2      	subs	r2, r2, r3
  400f24:	2300      	movs	r3, #0
  400f26:	69e9      	ldr	r1, [r5, #28]
  400f28:	4640      	mov	r0, r8
  400f2a:	47a0      	blx	r4
  400f2c:	1c44      	adds	r4, r0, #1
  400f2e:	d03c      	beq.n	400faa <__sflush_r+0xce>
  400f30:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  400f34:	692a      	ldr	r2, [r5, #16]
  400f36:	602a      	str	r2, [r5, #0]
  400f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400f3c:	2200      	movs	r2, #0
  400f3e:	81ab      	strh	r3, [r5, #12]
  400f40:	04db      	lsls	r3, r3, #19
  400f42:	606a      	str	r2, [r5, #4]
  400f44:	d447      	bmi.n	400fd6 <__sflush_r+0xfa>
  400f46:	6b29      	ldr	r1, [r5, #48]	; 0x30
  400f48:	f8c8 6000 	str.w	r6, [r8]
  400f4c:	b311      	cbz	r1, 400f94 <__sflush_r+0xb8>
  400f4e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  400f52:	4299      	cmp	r1, r3
  400f54:	d002      	beq.n	400f5c <__sflush_r+0x80>
  400f56:	4640      	mov	r0, r8
  400f58:	f000 f95a 	bl	401210 <_free_r>
  400f5c:	2000      	movs	r0, #0
  400f5e:	6328      	str	r0, [r5, #48]	; 0x30
  400f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f64:	692e      	ldr	r6, [r5, #16]
  400f66:	b1ae      	cbz	r6, 400f94 <__sflush_r+0xb8>
  400f68:	682c      	ldr	r4, [r5, #0]
  400f6a:	602e      	str	r6, [r5, #0]
  400f6c:	0791      	lsls	r1, r2, #30
  400f6e:	bf0c      	ite	eq
  400f70:	696b      	ldreq	r3, [r5, #20]
  400f72:	2300      	movne	r3, #0
  400f74:	1ba4      	subs	r4, r4, r6
  400f76:	60ab      	str	r3, [r5, #8]
  400f78:	e00a      	b.n	400f90 <__sflush_r+0xb4>
  400f7a:	4623      	mov	r3, r4
  400f7c:	4632      	mov	r2, r6
  400f7e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  400f80:	69e9      	ldr	r1, [r5, #28]
  400f82:	4640      	mov	r0, r8
  400f84:	47b8      	blx	r7
  400f86:	2800      	cmp	r0, #0
  400f88:	eba4 0400 	sub.w	r4, r4, r0
  400f8c:	4406      	add	r6, r0
  400f8e:	dd04      	ble.n	400f9a <__sflush_r+0xbe>
  400f90:	2c00      	cmp	r4, #0
  400f92:	dcf2      	bgt.n	400f7a <__sflush_r+0x9e>
  400f94:	2000      	movs	r0, #0
  400f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f9a:	89ab      	ldrh	r3, [r5, #12]
  400f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400fa0:	81ab      	strh	r3, [r5, #12]
  400fa2:	f04f 30ff 	mov.w	r0, #4294967295
  400fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400faa:	f8d8 4000 	ldr.w	r4, [r8]
  400fae:	2c1d      	cmp	r4, #29
  400fb0:	d8f3      	bhi.n	400f9a <__sflush_r+0xbe>
  400fb2:	4b19      	ldr	r3, [pc, #100]	; (401018 <__sflush_r+0x13c>)
  400fb4:	40e3      	lsrs	r3, r4
  400fb6:	43db      	mvns	r3, r3
  400fb8:	f013 0301 	ands.w	r3, r3, #1
  400fbc:	d1ed      	bne.n	400f9a <__sflush_r+0xbe>
  400fbe:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  400fc2:	606b      	str	r3, [r5, #4]
  400fc4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  400fc8:	6929      	ldr	r1, [r5, #16]
  400fca:	81ab      	strh	r3, [r5, #12]
  400fcc:	04da      	lsls	r2, r3, #19
  400fce:	6029      	str	r1, [r5, #0]
  400fd0:	d5b9      	bpl.n	400f46 <__sflush_r+0x6a>
  400fd2:	2c00      	cmp	r4, #0
  400fd4:	d1b7      	bne.n	400f46 <__sflush_r+0x6a>
  400fd6:	6528      	str	r0, [r5, #80]	; 0x50
  400fd8:	e7b5      	b.n	400f46 <__sflush_r+0x6a>
  400fda:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  400fdc:	2a00      	cmp	r2, #0
  400fde:	dc8c      	bgt.n	400efa <__sflush_r+0x1e>
  400fe0:	e7d8      	b.n	400f94 <__sflush_r+0xb8>
  400fe2:	2301      	movs	r3, #1
  400fe4:	69e9      	ldr	r1, [r5, #28]
  400fe6:	4640      	mov	r0, r8
  400fe8:	47a0      	blx	r4
  400fea:	1c43      	adds	r3, r0, #1
  400fec:	4602      	mov	r2, r0
  400fee:	d002      	beq.n	400ff6 <__sflush_r+0x11a>
  400ff0:	89ab      	ldrh	r3, [r5, #12]
  400ff2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  400ff4:	e78e      	b.n	400f14 <__sflush_r+0x38>
  400ff6:	f8d8 3000 	ldr.w	r3, [r8]
  400ffa:	2b00      	cmp	r3, #0
  400ffc:	d0f8      	beq.n	400ff0 <__sflush_r+0x114>
  400ffe:	2b1d      	cmp	r3, #29
  401000:	d001      	beq.n	401006 <__sflush_r+0x12a>
  401002:	2b16      	cmp	r3, #22
  401004:	d102      	bne.n	40100c <__sflush_r+0x130>
  401006:	f8c8 6000 	str.w	r6, [r8]
  40100a:	e7c3      	b.n	400f94 <__sflush_r+0xb8>
  40100c:	89ab      	ldrh	r3, [r5, #12]
  40100e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401012:	81ab      	strh	r3, [r5, #12]
  401014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401018:	20400001 	.word	0x20400001

0040101c <_fflush_r>:
  40101c:	b538      	push	{r3, r4, r5, lr}
  40101e:	460d      	mov	r5, r1
  401020:	4604      	mov	r4, r0
  401022:	b108      	cbz	r0, 401028 <_fflush_r+0xc>
  401024:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401026:	b1bb      	cbz	r3, 401058 <_fflush_r+0x3c>
  401028:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40102c:	b188      	cbz	r0, 401052 <_fflush_r+0x36>
  40102e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401030:	07db      	lsls	r3, r3, #31
  401032:	d401      	bmi.n	401038 <_fflush_r+0x1c>
  401034:	0581      	lsls	r1, r0, #22
  401036:	d517      	bpl.n	401068 <_fflush_r+0x4c>
  401038:	4620      	mov	r0, r4
  40103a:	4629      	mov	r1, r5
  40103c:	f7ff ff4e 	bl	400edc <__sflush_r>
  401040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401042:	07da      	lsls	r2, r3, #31
  401044:	4604      	mov	r4, r0
  401046:	d402      	bmi.n	40104e <_fflush_r+0x32>
  401048:	89ab      	ldrh	r3, [r5, #12]
  40104a:	059b      	lsls	r3, r3, #22
  40104c:	d507      	bpl.n	40105e <_fflush_r+0x42>
  40104e:	4620      	mov	r0, r4
  401050:	bd38      	pop	{r3, r4, r5, pc}
  401052:	4604      	mov	r4, r0
  401054:	4620      	mov	r0, r4
  401056:	bd38      	pop	{r3, r4, r5, pc}
  401058:	f000 f838 	bl	4010cc <__sinit>
  40105c:	e7e4      	b.n	401028 <_fflush_r+0xc>
  40105e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  401060:	f000 f9ec 	bl	40143c <__retarget_lock_release_recursive>
  401064:	4620      	mov	r0, r4
  401066:	bd38      	pop	{r3, r4, r5, pc}
  401068:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40106a:	f000 f9e5 	bl	401438 <__retarget_lock_acquire_recursive>
  40106e:	e7e3      	b.n	401038 <_fflush_r+0x1c>

00401070 <_cleanup_r>:
  401070:	4901      	ldr	r1, [pc, #4]	; (401078 <_cleanup_r+0x8>)
  401072:	f000 b9b3 	b.w	4013dc <_fwalk_reent>
  401076:	bf00      	nop
  401078:	00401be5 	.word	0x00401be5

0040107c <std.isra.0>:
  40107c:	b510      	push	{r4, lr}
  40107e:	2300      	movs	r3, #0
  401080:	4604      	mov	r4, r0
  401082:	8181      	strh	r1, [r0, #12]
  401084:	81c2      	strh	r2, [r0, #14]
  401086:	6003      	str	r3, [r0, #0]
  401088:	6043      	str	r3, [r0, #4]
  40108a:	6083      	str	r3, [r0, #8]
  40108c:	6643      	str	r3, [r0, #100]	; 0x64
  40108e:	6103      	str	r3, [r0, #16]
  401090:	6143      	str	r3, [r0, #20]
  401092:	6183      	str	r3, [r0, #24]
  401094:	4619      	mov	r1, r3
  401096:	2208      	movs	r2, #8
  401098:	305c      	adds	r0, #92	; 0x5c
  40109a:	f7ff fdf1 	bl	400c80 <memset>
  40109e:	4807      	ldr	r0, [pc, #28]	; (4010bc <std.isra.0+0x40>)
  4010a0:	4907      	ldr	r1, [pc, #28]	; (4010c0 <std.isra.0+0x44>)
  4010a2:	4a08      	ldr	r2, [pc, #32]	; (4010c4 <std.isra.0+0x48>)
  4010a4:	4b08      	ldr	r3, [pc, #32]	; (4010c8 <std.isra.0+0x4c>)
  4010a6:	6220      	str	r0, [r4, #32]
  4010a8:	61e4      	str	r4, [r4, #28]
  4010aa:	6261      	str	r1, [r4, #36]	; 0x24
  4010ac:	62a2      	str	r2, [r4, #40]	; 0x28
  4010ae:	62e3      	str	r3, [r4, #44]	; 0x2c
  4010b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4010b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4010b8:	f000 b9ba 	b.w	401430 <__retarget_lock_init_recursive>
  4010bc:	00401a49 	.word	0x00401a49
  4010c0:	00401a6d 	.word	0x00401a6d
  4010c4:	00401aa9 	.word	0x00401aa9
  4010c8:	00401ac9 	.word	0x00401ac9

004010cc <__sinit>:
  4010cc:	b510      	push	{r4, lr}
  4010ce:	4604      	mov	r4, r0
  4010d0:	4812      	ldr	r0, [pc, #72]	; (40111c <__sinit+0x50>)
  4010d2:	f000 f9b1 	bl	401438 <__retarget_lock_acquire_recursive>
  4010d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4010d8:	b9d2      	cbnz	r2, 401110 <__sinit+0x44>
  4010da:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4010de:	4810      	ldr	r0, [pc, #64]	; (401120 <__sinit+0x54>)
  4010e0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4010e4:	2103      	movs	r1, #3
  4010e6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4010ea:	63e0      	str	r0, [r4, #60]	; 0x3c
  4010ec:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4010f0:	6860      	ldr	r0, [r4, #4]
  4010f2:	2104      	movs	r1, #4
  4010f4:	f7ff ffc2 	bl	40107c <std.isra.0>
  4010f8:	2201      	movs	r2, #1
  4010fa:	2109      	movs	r1, #9
  4010fc:	68a0      	ldr	r0, [r4, #8]
  4010fe:	f7ff ffbd 	bl	40107c <std.isra.0>
  401102:	2202      	movs	r2, #2
  401104:	2112      	movs	r1, #18
  401106:	68e0      	ldr	r0, [r4, #12]
  401108:	f7ff ffb8 	bl	40107c <std.isra.0>
  40110c:	2301      	movs	r3, #1
  40110e:	63a3      	str	r3, [r4, #56]	; 0x38
  401110:	4802      	ldr	r0, [pc, #8]	; (40111c <__sinit+0x50>)
  401112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401116:	f000 b991 	b.w	40143c <__retarget_lock_release_recursive>
  40111a:	bf00      	nop
  40111c:	20000984 	.word	0x20000984
  401120:	00401071 	.word	0x00401071

00401124 <__sfp_lock_acquire>:
  401124:	4801      	ldr	r0, [pc, #4]	; (40112c <__sfp_lock_acquire+0x8>)
  401126:	f000 b987 	b.w	401438 <__retarget_lock_acquire_recursive>
  40112a:	bf00      	nop
  40112c:	20000998 	.word	0x20000998

00401130 <__sfp_lock_release>:
  401130:	4801      	ldr	r0, [pc, #4]	; (401138 <__sfp_lock_release+0x8>)
  401132:	f000 b983 	b.w	40143c <__retarget_lock_release_recursive>
  401136:	bf00      	nop
  401138:	20000998 	.word	0x20000998

0040113c <__libc_fini_array>:
  40113c:	b538      	push	{r3, r4, r5, lr}
  40113e:	4c0a      	ldr	r4, [pc, #40]	; (401168 <__libc_fini_array+0x2c>)
  401140:	4d0a      	ldr	r5, [pc, #40]	; (40116c <__libc_fini_array+0x30>)
  401142:	1b64      	subs	r4, r4, r5
  401144:	10a4      	asrs	r4, r4, #2
  401146:	d00a      	beq.n	40115e <__libc_fini_array+0x22>
  401148:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40114c:	3b01      	subs	r3, #1
  40114e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401152:	3c01      	subs	r4, #1
  401154:	f855 3904 	ldr.w	r3, [r5], #-4
  401158:	4798      	blx	r3
  40115a:	2c00      	cmp	r4, #0
  40115c:	d1f9      	bne.n	401152 <__libc_fini_array+0x16>
  40115e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401162:	f000 bded 	b.w	401d40 <_fini>
  401166:	bf00      	nop
  401168:	00401d50 	.word	0x00401d50
  40116c:	00401d4c 	.word	0x00401d4c

00401170 <_malloc_trim_r>:
  401170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401172:	4f24      	ldr	r7, [pc, #144]	; (401204 <_malloc_trim_r+0x94>)
  401174:	460c      	mov	r4, r1
  401176:	4606      	mov	r6, r0
  401178:	f000 fc48 	bl	401a0c <__malloc_lock>
  40117c:	68bb      	ldr	r3, [r7, #8]
  40117e:	685d      	ldr	r5, [r3, #4]
  401180:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401184:	310f      	adds	r1, #15
  401186:	f025 0503 	bic.w	r5, r5, #3
  40118a:	4429      	add	r1, r5
  40118c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401190:	f021 010f 	bic.w	r1, r1, #15
  401194:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401198:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40119c:	db07      	blt.n	4011ae <_malloc_trim_r+0x3e>
  40119e:	2100      	movs	r1, #0
  4011a0:	4630      	mov	r0, r6
  4011a2:	f000 fc3f 	bl	401a24 <_sbrk_r>
  4011a6:	68bb      	ldr	r3, [r7, #8]
  4011a8:	442b      	add	r3, r5
  4011aa:	4298      	cmp	r0, r3
  4011ac:	d004      	beq.n	4011b8 <_malloc_trim_r+0x48>
  4011ae:	4630      	mov	r0, r6
  4011b0:	f000 fc32 	bl	401a18 <__malloc_unlock>
  4011b4:	2000      	movs	r0, #0
  4011b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011b8:	4261      	negs	r1, r4
  4011ba:	4630      	mov	r0, r6
  4011bc:	f000 fc32 	bl	401a24 <_sbrk_r>
  4011c0:	3001      	adds	r0, #1
  4011c2:	d00d      	beq.n	4011e0 <_malloc_trim_r+0x70>
  4011c4:	4b10      	ldr	r3, [pc, #64]	; (401208 <_malloc_trim_r+0x98>)
  4011c6:	68ba      	ldr	r2, [r7, #8]
  4011c8:	6819      	ldr	r1, [r3, #0]
  4011ca:	1b2d      	subs	r5, r5, r4
  4011cc:	f045 0501 	orr.w	r5, r5, #1
  4011d0:	4630      	mov	r0, r6
  4011d2:	1b09      	subs	r1, r1, r4
  4011d4:	6055      	str	r5, [r2, #4]
  4011d6:	6019      	str	r1, [r3, #0]
  4011d8:	f000 fc1e 	bl	401a18 <__malloc_unlock>
  4011dc:	2001      	movs	r0, #1
  4011de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011e0:	2100      	movs	r1, #0
  4011e2:	4630      	mov	r0, r6
  4011e4:	f000 fc1e 	bl	401a24 <_sbrk_r>
  4011e8:	68ba      	ldr	r2, [r7, #8]
  4011ea:	1a83      	subs	r3, r0, r2
  4011ec:	2b0f      	cmp	r3, #15
  4011ee:	ddde      	ble.n	4011ae <_malloc_trim_r+0x3e>
  4011f0:	4c06      	ldr	r4, [pc, #24]	; (40120c <_malloc_trim_r+0x9c>)
  4011f2:	4905      	ldr	r1, [pc, #20]	; (401208 <_malloc_trim_r+0x98>)
  4011f4:	6824      	ldr	r4, [r4, #0]
  4011f6:	f043 0301 	orr.w	r3, r3, #1
  4011fa:	1b00      	subs	r0, r0, r4
  4011fc:	6053      	str	r3, [r2, #4]
  4011fe:	6008      	str	r0, [r1, #0]
  401200:	e7d5      	b.n	4011ae <_malloc_trim_r+0x3e>
  401202:	bf00      	nop
  401204:	20000444 	.word	0x20000444
  401208:	20000874 	.word	0x20000874
  40120c:	2000084c 	.word	0x2000084c

00401210 <_free_r>:
  401210:	2900      	cmp	r1, #0
  401212:	d044      	beq.n	40129e <_free_r+0x8e>
  401214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401218:	460d      	mov	r5, r1
  40121a:	4680      	mov	r8, r0
  40121c:	f000 fbf6 	bl	401a0c <__malloc_lock>
  401220:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401224:	4969      	ldr	r1, [pc, #420]	; (4013cc <_free_r+0x1bc>)
  401226:	f027 0301 	bic.w	r3, r7, #1
  40122a:	f1a5 0408 	sub.w	r4, r5, #8
  40122e:	18e2      	adds	r2, r4, r3
  401230:	688e      	ldr	r6, [r1, #8]
  401232:	6850      	ldr	r0, [r2, #4]
  401234:	42b2      	cmp	r2, r6
  401236:	f020 0003 	bic.w	r0, r0, #3
  40123a:	d05e      	beq.n	4012fa <_free_r+0xea>
  40123c:	07fe      	lsls	r6, r7, #31
  40123e:	6050      	str	r0, [r2, #4]
  401240:	d40b      	bmi.n	40125a <_free_r+0x4a>
  401242:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401246:	1be4      	subs	r4, r4, r7
  401248:	f101 0e08 	add.w	lr, r1, #8
  40124c:	68a5      	ldr	r5, [r4, #8]
  40124e:	4575      	cmp	r5, lr
  401250:	443b      	add	r3, r7
  401252:	d06d      	beq.n	401330 <_free_r+0x120>
  401254:	68e7      	ldr	r7, [r4, #12]
  401256:	60ef      	str	r7, [r5, #12]
  401258:	60bd      	str	r5, [r7, #8]
  40125a:	1815      	adds	r5, r2, r0
  40125c:	686d      	ldr	r5, [r5, #4]
  40125e:	07ed      	lsls	r5, r5, #31
  401260:	d53e      	bpl.n	4012e0 <_free_r+0xd0>
  401262:	f043 0201 	orr.w	r2, r3, #1
  401266:	6062      	str	r2, [r4, #4]
  401268:	50e3      	str	r3, [r4, r3]
  40126a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40126e:	d217      	bcs.n	4012a0 <_free_r+0x90>
  401270:	08db      	lsrs	r3, r3, #3
  401272:	1c58      	adds	r0, r3, #1
  401274:	109a      	asrs	r2, r3, #2
  401276:	684d      	ldr	r5, [r1, #4]
  401278:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40127c:	60a7      	str	r7, [r4, #8]
  40127e:	2301      	movs	r3, #1
  401280:	4093      	lsls	r3, r2
  401282:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  401286:	432b      	orrs	r3, r5
  401288:	3a08      	subs	r2, #8
  40128a:	60e2      	str	r2, [r4, #12]
  40128c:	604b      	str	r3, [r1, #4]
  40128e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  401292:	60fc      	str	r4, [r7, #12]
  401294:	4640      	mov	r0, r8
  401296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40129a:	f000 bbbd 	b.w	401a18 <__malloc_unlock>
  40129e:	4770      	bx	lr
  4012a0:	0a5a      	lsrs	r2, r3, #9
  4012a2:	2a04      	cmp	r2, #4
  4012a4:	d852      	bhi.n	40134c <_free_r+0x13c>
  4012a6:	099a      	lsrs	r2, r3, #6
  4012a8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4012ac:	00ff      	lsls	r7, r7, #3
  4012ae:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4012b2:	19c8      	adds	r0, r1, r7
  4012b4:	59ca      	ldr	r2, [r1, r7]
  4012b6:	3808      	subs	r0, #8
  4012b8:	4290      	cmp	r0, r2
  4012ba:	d04f      	beq.n	40135c <_free_r+0x14c>
  4012bc:	6851      	ldr	r1, [r2, #4]
  4012be:	f021 0103 	bic.w	r1, r1, #3
  4012c2:	428b      	cmp	r3, r1
  4012c4:	d232      	bcs.n	40132c <_free_r+0x11c>
  4012c6:	6892      	ldr	r2, [r2, #8]
  4012c8:	4290      	cmp	r0, r2
  4012ca:	d1f7      	bne.n	4012bc <_free_r+0xac>
  4012cc:	68c3      	ldr	r3, [r0, #12]
  4012ce:	60a0      	str	r0, [r4, #8]
  4012d0:	60e3      	str	r3, [r4, #12]
  4012d2:	609c      	str	r4, [r3, #8]
  4012d4:	60c4      	str	r4, [r0, #12]
  4012d6:	4640      	mov	r0, r8
  4012d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4012dc:	f000 bb9c 	b.w	401a18 <__malloc_unlock>
  4012e0:	6895      	ldr	r5, [r2, #8]
  4012e2:	4f3b      	ldr	r7, [pc, #236]	; (4013d0 <_free_r+0x1c0>)
  4012e4:	42bd      	cmp	r5, r7
  4012e6:	4403      	add	r3, r0
  4012e8:	d040      	beq.n	40136c <_free_r+0x15c>
  4012ea:	68d0      	ldr	r0, [r2, #12]
  4012ec:	60e8      	str	r0, [r5, #12]
  4012ee:	f043 0201 	orr.w	r2, r3, #1
  4012f2:	6085      	str	r5, [r0, #8]
  4012f4:	6062      	str	r2, [r4, #4]
  4012f6:	50e3      	str	r3, [r4, r3]
  4012f8:	e7b7      	b.n	40126a <_free_r+0x5a>
  4012fa:	07ff      	lsls	r7, r7, #31
  4012fc:	4403      	add	r3, r0
  4012fe:	d407      	bmi.n	401310 <_free_r+0x100>
  401300:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401304:	1aa4      	subs	r4, r4, r2
  401306:	4413      	add	r3, r2
  401308:	68a0      	ldr	r0, [r4, #8]
  40130a:	68e2      	ldr	r2, [r4, #12]
  40130c:	60c2      	str	r2, [r0, #12]
  40130e:	6090      	str	r0, [r2, #8]
  401310:	4a30      	ldr	r2, [pc, #192]	; (4013d4 <_free_r+0x1c4>)
  401312:	6812      	ldr	r2, [r2, #0]
  401314:	f043 0001 	orr.w	r0, r3, #1
  401318:	4293      	cmp	r3, r2
  40131a:	6060      	str	r0, [r4, #4]
  40131c:	608c      	str	r4, [r1, #8]
  40131e:	d3b9      	bcc.n	401294 <_free_r+0x84>
  401320:	4b2d      	ldr	r3, [pc, #180]	; (4013d8 <_free_r+0x1c8>)
  401322:	4640      	mov	r0, r8
  401324:	6819      	ldr	r1, [r3, #0]
  401326:	f7ff ff23 	bl	401170 <_malloc_trim_r>
  40132a:	e7b3      	b.n	401294 <_free_r+0x84>
  40132c:	4610      	mov	r0, r2
  40132e:	e7cd      	b.n	4012cc <_free_r+0xbc>
  401330:	1811      	adds	r1, r2, r0
  401332:	6849      	ldr	r1, [r1, #4]
  401334:	07c9      	lsls	r1, r1, #31
  401336:	d444      	bmi.n	4013c2 <_free_r+0x1b2>
  401338:	6891      	ldr	r1, [r2, #8]
  40133a:	68d2      	ldr	r2, [r2, #12]
  40133c:	60ca      	str	r2, [r1, #12]
  40133e:	4403      	add	r3, r0
  401340:	f043 0001 	orr.w	r0, r3, #1
  401344:	6091      	str	r1, [r2, #8]
  401346:	6060      	str	r0, [r4, #4]
  401348:	50e3      	str	r3, [r4, r3]
  40134a:	e7a3      	b.n	401294 <_free_r+0x84>
  40134c:	2a14      	cmp	r2, #20
  40134e:	d816      	bhi.n	40137e <_free_r+0x16e>
  401350:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401354:	00ff      	lsls	r7, r7, #3
  401356:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40135a:	e7aa      	b.n	4012b2 <_free_r+0xa2>
  40135c:	10aa      	asrs	r2, r5, #2
  40135e:	2301      	movs	r3, #1
  401360:	684d      	ldr	r5, [r1, #4]
  401362:	4093      	lsls	r3, r2
  401364:	432b      	orrs	r3, r5
  401366:	604b      	str	r3, [r1, #4]
  401368:	4603      	mov	r3, r0
  40136a:	e7b0      	b.n	4012ce <_free_r+0xbe>
  40136c:	f043 0201 	orr.w	r2, r3, #1
  401370:	614c      	str	r4, [r1, #20]
  401372:	610c      	str	r4, [r1, #16]
  401374:	60e5      	str	r5, [r4, #12]
  401376:	60a5      	str	r5, [r4, #8]
  401378:	6062      	str	r2, [r4, #4]
  40137a:	50e3      	str	r3, [r4, r3]
  40137c:	e78a      	b.n	401294 <_free_r+0x84>
  40137e:	2a54      	cmp	r2, #84	; 0x54
  401380:	d806      	bhi.n	401390 <_free_r+0x180>
  401382:	0b1a      	lsrs	r2, r3, #12
  401384:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401388:	00ff      	lsls	r7, r7, #3
  40138a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40138e:	e790      	b.n	4012b2 <_free_r+0xa2>
  401390:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401394:	d806      	bhi.n	4013a4 <_free_r+0x194>
  401396:	0bda      	lsrs	r2, r3, #15
  401398:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40139c:	00ff      	lsls	r7, r7, #3
  40139e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4013a2:	e786      	b.n	4012b2 <_free_r+0xa2>
  4013a4:	f240 5054 	movw	r0, #1364	; 0x554
  4013a8:	4282      	cmp	r2, r0
  4013aa:	d806      	bhi.n	4013ba <_free_r+0x1aa>
  4013ac:	0c9a      	lsrs	r2, r3, #18
  4013ae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4013b2:	00ff      	lsls	r7, r7, #3
  4013b4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4013b8:	e77b      	b.n	4012b2 <_free_r+0xa2>
  4013ba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4013be:	257e      	movs	r5, #126	; 0x7e
  4013c0:	e777      	b.n	4012b2 <_free_r+0xa2>
  4013c2:	f043 0101 	orr.w	r1, r3, #1
  4013c6:	6061      	str	r1, [r4, #4]
  4013c8:	6013      	str	r3, [r2, #0]
  4013ca:	e763      	b.n	401294 <_free_r+0x84>
  4013cc:	20000444 	.word	0x20000444
  4013d0:	2000044c 	.word	0x2000044c
  4013d4:	20000850 	.word	0x20000850
  4013d8:	200008a4 	.word	0x200008a4

004013dc <_fwalk_reent>:
  4013dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4013e0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4013e4:	d01f      	beq.n	401426 <_fwalk_reent+0x4a>
  4013e6:	4688      	mov	r8, r1
  4013e8:	4606      	mov	r6, r0
  4013ea:	f04f 0900 	mov.w	r9, #0
  4013ee:	687d      	ldr	r5, [r7, #4]
  4013f0:	68bc      	ldr	r4, [r7, #8]
  4013f2:	3d01      	subs	r5, #1
  4013f4:	d411      	bmi.n	40141a <_fwalk_reent+0x3e>
  4013f6:	89a3      	ldrh	r3, [r4, #12]
  4013f8:	2b01      	cmp	r3, #1
  4013fa:	f105 35ff 	add.w	r5, r5, #4294967295
  4013fe:	d908      	bls.n	401412 <_fwalk_reent+0x36>
  401400:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401404:	3301      	adds	r3, #1
  401406:	4621      	mov	r1, r4
  401408:	4630      	mov	r0, r6
  40140a:	d002      	beq.n	401412 <_fwalk_reent+0x36>
  40140c:	47c0      	blx	r8
  40140e:	ea49 0900 	orr.w	r9, r9, r0
  401412:	1c6b      	adds	r3, r5, #1
  401414:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401418:	d1ed      	bne.n	4013f6 <_fwalk_reent+0x1a>
  40141a:	683f      	ldr	r7, [r7, #0]
  40141c:	2f00      	cmp	r7, #0
  40141e:	d1e6      	bne.n	4013ee <_fwalk_reent+0x12>
  401420:	4648      	mov	r0, r9
  401422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401426:	46b9      	mov	r9, r7
  401428:	4648      	mov	r0, r9
  40142a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40142e:	bf00      	nop

00401430 <__retarget_lock_init_recursive>:
  401430:	4770      	bx	lr
  401432:	bf00      	nop

00401434 <__retarget_lock_close_recursive>:
  401434:	4770      	bx	lr
  401436:	bf00      	nop

00401438 <__retarget_lock_acquire_recursive>:
  401438:	4770      	bx	lr
  40143a:	bf00      	nop

0040143c <__retarget_lock_release_recursive>:
  40143c:	4770      	bx	lr
  40143e:	bf00      	nop

00401440 <__swhatbuf_r>:
  401440:	b570      	push	{r4, r5, r6, lr}
  401442:	460c      	mov	r4, r1
  401444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401448:	2900      	cmp	r1, #0
  40144a:	b090      	sub	sp, #64	; 0x40
  40144c:	4615      	mov	r5, r2
  40144e:	461e      	mov	r6, r3
  401450:	db14      	blt.n	40147c <__swhatbuf_r+0x3c>
  401452:	aa01      	add	r2, sp, #4
  401454:	f000 fc28 	bl	401ca8 <_fstat_r>
  401458:	2800      	cmp	r0, #0
  40145a:	db0f      	blt.n	40147c <__swhatbuf_r+0x3c>
  40145c:	9a02      	ldr	r2, [sp, #8]
  40145e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401462:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401466:	fab2 f282 	clz	r2, r2
  40146a:	0952      	lsrs	r2, r2, #5
  40146c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401470:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401474:	6032      	str	r2, [r6, #0]
  401476:	602b      	str	r3, [r5, #0]
  401478:	b010      	add	sp, #64	; 0x40
  40147a:	bd70      	pop	{r4, r5, r6, pc}
  40147c:	89a2      	ldrh	r2, [r4, #12]
  40147e:	2300      	movs	r3, #0
  401480:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401484:	6033      	str	r3, [r6, #0]
  401486:	d004      	beq.n	401492 <__swhatbuf_r+0x52>
  401488:	2240      	movs	r2, #64	; 0x40
  40148a:	4618      	mov	r0, r3
  40148c:	602a      	str	r2, [r5, #0]
  40148e:	b010      	add	sp, #64	; 0x40
  401490:	bd70      	pop	{r4, r5, r6, pc}
  401492:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401496:	602b      	str	r3, [r5, #0]
  401498:	b010      	add	sp, #64	; 0x40
  40149a:	bd70      	pop	{r4, r5, r6, pc}

0040149c <malloc>:
  40149c:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <malloc+0xc>)
  40149e:	4601      	mov	r1, r0
  4014a0:	6818      	ldr	r0, [r3, #0]
  4014a2:	f000 b803 	b.w	4014ac <_malloc_r>
  4014a6:	bf00      	nop
  4014a8:	20000010 	.word	0x20000010

004014ac <_malloc_r>:
  4014ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014b0:	f101 060b 	add.w	r6, r1, #11
  4014b4:	2e16      	cmp	r6, #22
  4014b6:	b083      	sub	sp, #12
  4014b8:	4605      	mov	r5, r0
  4014ba:	f240 809e 	bls.w	4015fa <_malloc_r+0x14e>
  4014be:	f036 0607 	bics.w	r6, r6, #7
  4014c2:	f100 80bd 	bmi.w	401640 <_malloc_r+0x194>
  4014c6:	42b1      	cmp	r1, r6
  4014c8:	f200 80ba 	bhi.w	401640 <_malloc_r+0x194>
  4014cc:	f000 fa9e 	bl	401a0c <__malloc_lock>
  4014d0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4014d4:	f0c0 8293 	bcc.w	4019fe <_malloc_r+0x552>
  4014d8:	0a73      	lsrs	r3, r6, #9
  4014da:	f000 80b8 	beq.w	40164e <_malloc_r+0x1a2>
  4014de:	2b04      	cmp	r3, #4
  4014e0:	f200 8179 	bhi.w	4017d6 <_malloc_r+0x32a>
  4014e4:	09b3      	lsrs	r3, r6, #6
  4014e6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4014ea:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4014ee:	00c3      	lsls	r3, r0, #3
  4014f0:	4fbf      	ldr	r7, [pc, #764]	; (4017f0 <_malloc_r+0x344>)
  4014f2:	443b      	add	r3, r7
  4014f4:	f1a3 0108 	sub.w	r1, r3, #8
  4014f8:	685c      	ldr	r4, [r3, #4]
  4014fa:	42a1      	cmp	r1, r4
  4014fc:	d106      	bne.n	40150c <_malloc_r+0x60>
  4014fe:	e00c      	b.n	40151a <_malloc_r+0x6e>
  401500:	2a00      	cmp	r2, #0
  401502:	f280 80aa 	bge.w	40165a <_malloc_r+0x1ae>
  401506:	68e4      	ldr	r4, [r4, #12]
  401508:	42a1      	cmp	r1, r4
  40150a:	d006      	beq.n	40151a <_malloc_r+0x6e>
  40150c:	6863      	ldr	r3, [r4, #4]
  40150e:	f023 0303 	bic.w	r3, r3, #3
  401512:	1b9a      	subs	r2, r3, r6
  401514:	2a0f      	cmp	r2, #15
  401516:	ddf3      	ble.n	401500 <_malloc_r+0x54>
  401518:	4670      	mov	r0, lr
  40151a:	693c      	ldr	r4, [r7, #16]
  40151c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401804 <_malloc_r+0x358>
  401520:	4574      	cmp	r4, lr
  401522:	f000 81ab 	beq.w	40187c <_malloc_r+0x3d0>
  401526:	6863      	ldr	r3, [r4, #4]
  401528:	f023 0303 	bic.w	r3, r3, #3
  40152c:	1b9a      	subs	r2, r3, r6
  40152e:	2a0f      	cmp	r2, #15
  401530:	f300 8190 	bgt.w	401854 <_malloc_r+0x3a8>
  401534:	2a00      	cmp	r2, #0
  401536:	f8c7 e014 	str.w	lr, [r7, #20]
  40153a:	f8c7 e010 	str.w	lr, [r7, #16]
  40153e:	f280 809d 	bge.w	40167c <_malloc_r+0x1d0>
  401542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401546:	f080 8161 	bcs.w	40180c <_malloc_r+0x360>
  40154a:	08db      	lsrs	r3, r3, #3
  40154c:	f103 0c01 	add.w	ip, r3, #1
  401550:	1099      	asrs	r1, r3, #2
  401552:	687a      	ldr	r2, [r7, #4]
  401554:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401558:	f8c4 8008 	str.w	r8, [r4, #8]
  40155c:	2301      	movs	r3, #1
  40155e:	408b      	lsls	r3, r1
  401560:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401564:	4313      	orrs	r3, r2
  401566:	3908      	subs	r1, #8
  401568:	60e1      	str	r1, [r4, #12]
  40156a:	607b      	str	r3, [r7, #4]
  40156c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401570:	f8c8 400c 	str.w	r4, [r8, #12]
  401574:	1082      	asrs	r2, r0, #2
  401576:	2401      	movs	r4, #1
  401578:	4094      	lsls	r4, r2
  40157a:	429c      	cmp	r4, r3
  40157c:	f200 808b 	bhi.w	401696 <_malloc_r+0x1ea>
  401580:	421c      	tst	r4, r3
  401582:	d106      	bne.n	401592 <_malloc_r+0xe6>
  401584:	f020 0003 	bic.w	r0, r0, #3
  401588:	0064      	lsls	r4, r4, #1
  40158a:	421c      	tst	r4, r3
  40158c:	f100 0004 	add.w	r0, r0, #4
  401590:	d0fa      	beq.n	401588 <_malloc_r+0xdc>
  401592:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401596:	46cc      	mov	ip, r9
  401598:	4680      	mov	r8, r0
  40159a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40159e:	459c      	cmp	ip, r3
  4015a0:	d107      	bne.n	4015b2 <_malloc_r+0x106>
  4015a2:	e16d      	b.n	401880 <_malloc_r+0x3d4>
  4015a4:	2a00      	cmp	r2, #0
  4015a6:	f280 817b 	bge.w	4018a0 <_malloc_r+0x3f4>
  4015aa:	68db      	ldr	r3, [r3, #12]
  4015ac:	459c      	cmp	ip, r3
  4015ae:	f000 8167 	beq.w	401880 <_malloc_r+0x3d4>
  4015b2:	6859      	ldr	r1, [r3, #4]
  4015b4:	f021 0103 	bic.w	r1, r1, #3
  4015b8:	1b8a      	subs	r2, r1, r6
  4015ba:	2a0f      	cmp	r2, #15
  4015bc:	ddf2      	ble.n	4015a4 <_malloc_r+0xf8>
  4015be:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4015c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4015c6:	9300      	str	r3, [sp, #0]
  4015c8:	199c      	adds	r4, r3, r6
  4015ca:	4628      	mov	r0, r5
  4015cc:	f046 0601 	orr.w	r6, r6, #1
  4015d0:	f042 0501 	orr.w	r5, r2, #1
  4015d4:	605e      	str	r6, [r3, #4]
  4015d6:	f8c8 c00c 	str.w	ip, [r8, #12]
  4015da:	f8cc 8008 	str.w	r8, [ip, #8]
  4015de:	617c      	str	r4, [r7, #20]
  4015e0:	613c      	str	r4, [r7, #16]
  4015e2:	f8c4 e00c 	str.w	lr, [r4, #12]
  4015e6:	f8c4 e008 	str.w	lr, [r4, #8]
  4015ea:	6065      	str	r5, [r4, #4]
  4015ec:	505a      	str	r2, [r3, r1]
  4015ee:	f000 fa13 	bl	401a18 <__malloc_unlock>
  4015f2:	9b00      	ldr	r3, [sp, #0]
  4015f4:	f103 0408 	add.w	r4, r3, #8
  4015f8:	e01e      	b.n	401638 <_malloc_r+0x18c>
  4015fa:	2910      	cmp	r1, #16
  4015fc:	d820      	bhi.n	401640 <_malloc_r+0x194>
  4015fe:	f000 fa05 	bl	401a0c <__malloc_lock>
  401602:	2610      	movs	r6, #16
  401604:	2318      	movs	r3, #24
  401606:	2002      	movs	r0, #2
  401608:	4f79      	ldr	r7, [pc, #484]	; (4017f0 <_malloc_r+0x344>)
  40160a:	443b      	add	r3, r7
  40160c:	f1a3 0208 	sub.w	r2, r3, #8
  401610:	685c      	ldr	r4, [r3, #4]
  401612:	4294      	cmp	r4, r2
  401614:	f000 813d 	beq.w	401892 <_malloc_r+0x3e6>
  401618:	6863      	ldr	r3, [r4, #4]
  40161a:	68e1      	ldr	r1, [r4, #12]
  40161c:	68a6      	ldr	r6, [r4, #8]
  40161e:	f023 0303 	bic.w	r3, r3, #3
  401622:	4423      	add	r3, r4
  401624:	4628      	mov	r0, r5
  401626:	685a      	ldr	r2, [r3, #4]
  401628:	60f1      	str	r1, [r6, #12]
  40162a:	f042 0201 	orr.w	r2, r2, #1
  40162e:	608e      	str	r6, [r1, #8]
  401630:	605a      	str	r2, [r3, #4]
  401632:	f000 f9f1 	bl	401a18 <__malloc_unlock>
  401636:	3408      	adds	r4, #8
  401638:	4620      	mov	r0, r4
  40163a:	b003      	add	sp, #12
  40163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401640:	2400      	movs	r4, #0
  401642:	230c      	movs	r3, #12
  401644:	4620      	mov	r0, r4
  401646:	602b      	str	r3, [r5, #0]
  401648:	b003      	add	sp, #12
  40164a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40164e:	2040      	movs	r0, #64	; 0x40
  401650:	f44f 7300 	mov.w	r3, #512	; 0x200
  401654:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401658:	e74a      	b.n	4014f0 <_malloc_r+0x44>
  40165a:	4423      	add	r3, r4
  40165c:	68e1      	ldr	r1, [r4, #12]
  40165e:	685a      	ldr	r2, [r3, #4]
  401660:	68a6      	ldr	r6, [r4, #8]
  401662:	f042 0201 	orr.w	r2, r2, #1
  401666:	60f1      	str	r1, [r6, #12]
  401668:	4628      	mov	r0, r5
  40166a:	608e      	str	r6, [r1, #8]
  40166c:	605a      	str	r2, [r3, #4]
  40166e:	f000 f9d3 	bl	401a18 <__malloc_unlock>
  401672:	3408      	adds	r4, #8
  401674:	4620      	mov	r0, r4
  401676:	b003      	add	sp, #12
  401678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40167c:	4423      	add	r3, r4
  40167e:	4628      	mov	r0, r5
  401680:	685a      	ldr	r2, [r3, #4]
  401682:	f042 0201 	orr.w	r2, r2, #1
  401686:	605a      	str	r2, [r3, #4]
  401688:	f000 f9c6 	bl	401a18 <__malloc_unlock>
  40168c:	3408      	adds	r4, #8
  40168e:	4620      	mov	r0, r4
  401690:	b003      	add	sp, #12
  401692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401696:	68bc      	ldr	r4, [r7, #8]
  401698:	6863      	ldr	r3, [r4, #4]
  40169a:	f023 0803 	bic.w	r8, r3, #3
  40169e:	45b0      	cmp	r8, r6
  4016a0:	d304      	bcc.n	4016ac <_malloc_r+0x200>
  4016a2:	eba8 0306 	sub.w	r3, r8, r6
  4016a6:	2b0f      	cmp	r3, #15
  4016a8:	f300 8085 	bgt.w	4017b6 <_malloc_r+0x30a>
  4016ac:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401808 <_malloc_r+0x35c>
  4016b0:	4b50      	ldr	r3, [pc, #320]	; (4017f4 <_malloc_r+0x348>)
  4016b2:	f8d9 2000 	ldr.w	r2, [r9]
  4016b6:	681b      	ldr	r3, [r3, #0]
  4016b8:	3201      	adds	r2, #1
  4016ba:	4433      	add	r3, r6
  4016bc:	eb04 0a08 	add.w	sl, r4, r8
  4016c0:	f000 8155 	beq.w	40196e <_malloc_r+0x4c2>
  4016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4016c8:	330f      	adds	r3, #15
  4016ca:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4016ce:	f02b 0b0f 	bic.w	fp, fp, #15
  4016d2:	4659      	mov	r1, fp
  4016d4:	4628      	mov	r0, r5
  4016d6:	f000 f9a5 	bl	401a24 <_sbrk_r>
  4016da:	1c41      	adds	r1, r0, #1
  4016dc:	4602      	mov	r2, r0
  4016de:	f000 80fc 	beq.w	4018da <_malloc_r+0x42e>
  4016e2:	4582      	cmp	sl, r0
  4016e4:	f200 80f7 	bhi.w	4018d6 <_malloc_r+0x42a>
  4016e8:	4b43      	ldr	r3, [pc, #268]	; (4017f8 <_malloc_r+0x34c>)
  4016ea:	6819      	ldr	r1, [r3, #0]
  4016ec:	4459      	add	r1, fp
  4016ee:	6019      	str	r1, [r3, #0]
  4016f0:	f000 814d 	beq.w	40198e <_malloc_r+0x4e2>
  4016f4:	f8d9 0000 	ldr.w	r0, [r9]
  4016f8:	3001      	adds	r0, #1
  4016fa:	bf1b      	ittet	ne
  4016fc:	eba2 0a0a 	subne.w	sl, r2, sl
  401700:	4451      	addne	r1, sl
  401702:	f8c9 2000 	streq.w	r2, [r9]
  401706:	6019      	strne	r1, [r3, #0]
  401708:	f012 0107 	ands.w	r1, r2, #7
  40170c:	f000 8115 	beq.w	40193a <_malloc_r+0x48e>
  401710:	f1c1 0008 	rsb	r0, r1, #8
  401714:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401718:	4402      	add	r2, r0
  40171a:	3108      	adds	r1, #8
  40171c:	eb02 090b 	add.w	r9, r2, fp
  401720:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401724:	eba1 0909 	sub.w	r9, r1, r9
  401728:	4649      	mov	r1, r9
  40172a:	4628      	mov	r0, r5
  40172c:	9301      	str	r3, [sp, #4]
  40172e:	9200      	str	r2, [sp, #0]
  401730:	f000 f978 	bl	401a24 <_sbrk_r>
  401734:	1c43      	adds	r3, r0, #1
  401736:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40173a:	f000 8143 	beq.w	4019c4 <_malloc_r+0x518>
  40173e:	1a80      	subs	r0, r0, r2
  401740:	4448      	add	r0, r9
  401742:	f040 0001 	orr.w	r0, r0, #1
  401746:	6819      	ldr	r1, [r3, #0]
  401748:	60ba      	str	r2, [r7, #8]
  40174a:	4449      	add	r1, r9
  40174c:	42bc      	cmp	r4, r7
  40174e:	6050      	str	r0, [r2, #4]
  401750:	6019      	str	r1, [r3, #0]
  401752:	d017      	beq.n	401784 <_malloc_r+0x2d8>
  401754:	f1b8 0f0f 	cmp.w	r8, #15
  401758:	f240 80fb 	bls.w	401952 <_malloc_r+0x4a6>
  40175c:	6860      	ldr	r0, [r4, #4]
  40175e:	f1a8 020c 	sub.w	r2, r8, #12
  401762:	f022 0207 	bic.w	r2, r2, #7
  401766:	eb04 0e02 	add.w	lr, r4, r2
  40176a:	f000 0001 	and.w	r0, r0, #1
  40176e:	f04f 0c05 	mov.w	ip, #5
  401772:	4310      	orrs	r0, r2
  401774:	2a0f      	cmp	r2, #15
  401776:	6060      	str	r0, [r4, #4]
  401778:	f8ce c004 	str.w	ip, [lr, #4]
  40177c:	f8ce c008 	str.w	ip, [lr, #8]
  401780:	f200 8117 	bhi.w	4019b2 <_malloc_r+0x506>
  401784:	4b1d      	ldr	r3, [pc, #116]	; (4017fc <_malloc_r+0x350>)
  401786:	68bc      	ldr	r4, [r7, #8]
  401788:	681a      	ldr	r2, [r3, #0]
  40178a:	4291      	cmp	r1, r2
  40178c:	bf88      	it	hi
  40178e:	6019      	strhi	r1, [r3, #0]
  401790:	4b1b      	ldr	r3, [pc, #108]	; (401800 <_malloc_r+0x354>)
  401792:	681a      	ldr	r2, [r3, #0]
  401794:	4291      	cmp	r1, r2
  401796:	6862      	ldr	r2, [r4, #4]
  401798:	bf88      	it	hi
  40179a:	6019      	strhi	r1, [r3, #0]
  40179c:	f022 0203 	bic.w	r2, r2, #3
  4017a0:	4296      	cmp	r6, r2
  4017a2:	eba2 0306 	sub.w	r3, r2, r6
  4017a6:	d801      	bhi.n	4017ac <_malloc_r+0x300>
  4017a8:	2b0f      	cmp	r3, #15
  4017aa:	dc04      	bgt.n	4017b6 <_malloc_r+0x30a>
  4017ac:	4628      	mov	r0, r5
  4017ae:	f000 f933 	bl	401a18 <__malloc_unlock>
  4017b2:	2400      	movs	r4, #0
  4017b4:	e740      	b.n	401638 <_malloc_r+0x18c>
  4017b6:	19a2      	adds	r2, r4, r6
  4017b8:	f043 0301 	orr.w	r3, r3, #1
  4017bc:	f046 0601 	orr.w	r6, r6, #1
  4017c0:	6066      	str	r6, [r4, #4]
  4017c2:	4628      	mov	r0, r5
  4017c4:	60ba      	str	r2, [r7, #8]
  4017c6:	6053      	str	r3, [r2, #4]
  4017c8:	f000 f926 	bl	401a18 <__malloc_unlock>
  4017cc:	3408      	adds	r4, #8
  4017ce:	4620      	mov	r0, r4
  4017d0:	b003      	add	sp, #12
  4017d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017d6:	2b14      	cmp	r3, #20
  4017d8:	d971      	bls.n	4018be <_malloc_r+0x412>
  4017da:	2b54      	cmp	r3, #84	; 0x54
  4017dc:	f200 80a3 	bhi.w	401926 <_malloc_r+0x47a>
  4017e0:	0b33      	lsrs	r3, r6, #12
  4017e2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4017e6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4017ea:	00c3      	lsls	r3, r0, #3
  4017ec:	e680      	b.n	4014f0 <_malloc_r+0x44>
  4017ee:	bf00      	nop
  4017f0:	20000444 	.word	0x20000444
  4017f4:	200008a4 	.word	0x200008a4
  4017f8:	20000874 	.word	0x20000874
  4017fc:	2000089c 	.word	0x2000089c
  401800:	200008a0 	.word	0x200008a0
  401804:	2000044c 	.word	0x2000044c
  401808:	2000084c 	.word	0x2000084c
  40180c:	0a5a      	lsrs	r2, r3, #9
  40180e:	2a04      	cmp	r2, #4
  401810:	d95b      	bls.n	4018ca <_malloc_r+0x41e>
  401812:	2a14      	cmp	r2, #20
  401814:	f200 80ae 	bhi.w	401974 <_malloc_r+0x4c8>
  401818:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40181c:	00c9      	lsls	r1, r1, #3
  40181e:	325b      	adds	r2, #91	; 0x5b
  401820:	eb07 0c01 	add.w	ip, r7, r1
  401824:	5879      	ldr	r1, [r7, r1]
  401826:	f1ac 0c08 	sub.w	ip, ip, #8
  40182a:	458c      	cmp	ip, r1
  40182c:	f000 8088 	beq.w	401940 <_malloc_r+0x494>
  401830:	684a      	ldr	r2, [r1, #4]
  401832:	f022 0203 	bic.w	r2, r2, #3
  401836:	4293      	cmp	r3, r2
  401838:	d273      	bcs.n	401922 <_malloc_r+0x476>
  40183a:	6889      	ldr	r1, [r1, #8]
  40183c:	458c      	cmp	ip, r1
  40183e:	d1f7      	bne.n	401830 <_malloc_r+0x384>
  401840:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401844:	687b      	ldr	r3, [r7, #4]
  401846:	60e2      	str	r2, [r4, #12]
  401848:	f8c4 c008 	str.w	ip, [r4, #8]
  40184c:	6094      	str	r4, [r2, #8]
  40184e:	f8cc 400c 	str.w	r4, [ip, #12]
  401852:	e68f      	b.n	401574 <_malloc_r+0xc8>
  401854:	19a1      	adds	r1, r4, r6
  401856:	f046 0c01 	orr.w	ip, r6, #1
  40185a:	f042 0601 	orr.w	r6, r2, #1
  40185e:	f8c4 c004 	str.w	ip, [r4, #4]
  401862:	4628      	mov	r0, r5
  401864:	6179      	str	r1, [r7, #20]
  401866:	6139      	str	r1, [r7, #16]
  401868:	f8c1 e00c 	str.w	lr, [r1, #12]
  40186c:	f8c1 e008 	str.w	lr, [r1, #8]
  401870:	604e      	str	r6, [r1, #4]
  401872:	50e2      	str	r2, [r4, r3]
  401874:	f000 f8d0 	bl	401a18 <__malloc_unlock>
  401878:	3408      	adds	r4, #8
  40187a:	e6dd      	b.n	401638 <_malloc_r+0x18c>
  40187c:	687b      	ldr	r3, [r7, #4]
  40187e:	e679      	b.n	401574 <_malloc_r+0xc8>
  401880:	f108 0801 	add.w	r8, r8, #1
  401884:	f018 0f03 	tst.w	r8, #3
  401888:	f10c 0c08 	add.w	ip, ip, #8
  40188c:	f47f ae85 	bne.w	40159a <_malloc_r+0xee>
  401890:	e02d      	b.n	4018ee <_malloc_r+0x442>
  401892:	68dc      	ldr	r4, [r3, #12]
  401894:	42a3      	cmp	r3, r4
  401896:	bf08      	it	eq
  401898:	3002      	addeq	r0, #2
  40189a:	f43f ae3e 	beq.w	40151a <_malloc_r+0x6e>
  40189e:	e6bb      	b.n	401618 <_malloc_r+0x16c>
  4018a0:	4419      	add	r1, r3
  4018a2:	461c      	mov	r4, r3
  4018a4:	684a      	ldr	r2, [r1, #4]
  4018a6:	68db      	ldr	r3, [r3, #12]
  4018a8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4018ac:	f042 0201 	orr.w	r2, r2, #1
  4018b0:	604a      	str	r2, [r1, #4]
  4018b2:	4628      	mov	r0, r5
  4018b4:	60f3      	str	r3, [r6, #12]
  4018b6:	609e      	str	r6, [r3, #8]
  4018b8:	f000 f8ae 	bl	401a18 <__malloc_unlock>
  4018bc:	e6bc      	b.n	401638 <_malloc_r+0x18c>
  4018be:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4018c2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4018c6:	00c3      	lsls	r3, r0, #3
  4018c8:	e612      	b.n	4014f0 <_malloc_r+0x44>
  4018ca:	099a      	lsrs	r2, r3, #6
  4018cc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4018d0:	00c9      	lsls	r1, r1, #3
  4018d2:	3238      	adds	r2, #56	; 0x38
  4018d4:	e7a4      	b.n	401820 <_malloc_r+0x374>
  4018d6:	42bc      	cmp	r4, r7
  4018d8:	d054      	beq.n	401984 <_malloc_r+0x4d8>
  4018da:	68bc      	ldr	r4, [r7, #8]
  4018dc:	6862      	ldr	r2, [r4, #4]
  4018de:	f022 0203 	bic.w	r2, r2, #3
  4018e2:	e75d      	b.n	4017a0 <_malloc_r+0x2f4>
  4018e4:	f859 3908 	ldr.w	r3, [r9], #-8
  4018e8:	4599      	cmp	r9, r3
  4018ea:	f040 8086 	bne.w	4019fa <_malloc_r+0x54e>
  4018ee:	f010 0f03 	tst.w	r0, #3
  4018f2:	f100 30ff 	add.w	r0, r0, #4294967295
  4018f6:	d1f5      	bne.n	4018e4 <_malloc_r+0x438>
  4018f8:	687b      	ldr	r3, [r7, #4]
  4018fa:	ea23 0304 	bic.w	r3, r3, r4
  4018fe:	607b      	str	r3, [r7, #4]
  401900:	0064      	lsls	r4, r4, #1
  401902:	429c      	cmp	r4, r3
  401904:	f63f aec7 	bhi.w	401696 <_malloc_r+0x1ea>
  401908:	2c00      	cmp	r4, #0
  40190a:	f43f aec4 	beq.w	401696 <_malloc_r+0x1ea>
  40190e:	421c      	tst	r4, r3
  401910:	4640      	mov	r0, r8
  401912:	f47f ae3e 	bne.w	401592 <_malloc_r+0xe6>
  401916:	0064      	lsls	r4, r4, #1
  401918:	421c      	tst	r4, r3
  40191a:	f100 0004 	add.w	r0, r0, #4
  40191e:	d0fa      	beq.n	401916 <_malloc_r+0x46a>
  401920:	e637      	b.n	401592 <_malloc_r+0xe6>
  401922:	468c      	mov	ip, r1
  401924:	e78c      	b.n	401840 <_malloc_r+0x394>
  401926:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40192a:	d815      	bhi.n	401958 <_malloc_r+0x4ac>
  40192c:	0bf3      	lsrs	r3, r6, #15
  40192e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401932:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  401936:	00c3      	lsls	r3, r0, #3
  401938:	e5da      	b.n	4014f0 <_malloc_r+0x44>
  40193a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40193e:	e6ed      	b.n	40171c <_malloc_r+0x270>
  401940:	687b      	ldr	r3, [r7, #4]
  401942:	1092      	asrs	r2, r2, #2
  401944:	2101      	movs	r1, #1
  401946:	fa01 f202 	lsl.w	r2, r1, r2
  40194a:	4313      	orrs	r3, r2
  40194c:	607b      	str	r3, [r7, #4]
  40194e:	4662      	mov	r2, ip
  401950:	e779      	b.n	401846 <_malloc_r+0x39a>
  401952:	2301      	movs	r3, #1
  401954:	6053      	str	r3, [r2, #4]
  401956:	e729      	b.n	4017ac <_malloc_r+0x300>
  401958:	f240 5254 	movw	r2, #1364	; 0x554
  40195c:	4293      	cmp	r3, r2
  40195e:	d822      	bhi.n	4019a6 <_malloc_r+0x4fa>
  401960:	0cb3      	lsrs	r3, r6, #18
  401962:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  401966:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40196a:	00c3      	lsls	r3, r0, #3
  40196c:	e5c0      	b.n	4014f0 <_malloc_r+0x44>
  40196e:	f103 0b10 	add.w	fp, r3, #16
  401972:	e6ae      	b.n	4016d2 <_malloc_r+0x226>
  401974:	2a54      	cmp	r2, #84	; 0x54
  401976:	d829      	bhi.n	4019cc <_malloc_r+0x520>
  401978:	0b1a      	lsrs	r2, r3, #12
  40197a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40197e:	00c9      	lsls	r1, r1, #3
  401980:	326e      	adds	r2, #110	; 0x6e
  401982:	e74d      	b.n	401820 <_malloc_r+0x374>
  401984:	4b20      	ldr	r3, [pc, #128]	; (401a08 <_malloc_r+0x55c>)
  401986:	6819      	ldr	r1, [r3, #0]
  401988:	4459      	add	r1, fp
  40198a:	6019      	str	r1, [r3, #0]
  40198c:	e6b2      	b.n	4016f4 <_malloc_r+0x248>
  40198e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  401992:	2800      	cmp	r0, #0
  401994:	f47f aeae 	bne.w	4016f4 <_malloc_r+0x248>
  401998:	eb08 030b 	add.w	r3, r8, fp
  40199c:	68ba      	ldr	r2, [r7, #8]
  40199e:	f043 0301 	orr.w	r3, r3, #1
  4019a2:	6053      	str	r3, [r2, #4]
  4019a4:	e6ee      	b.n	401784 <_malloc_r+0x2d8>
  4019a6:	207f      	movs	r0, #127	; 0x7f
  4019a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4019ac:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4019b0:	e59e      	b.n	4014f0 <_malloc_r+0x44>
  4019b2:	f104 0108 	add.w	r1, r4, #8
  4019b6:	4628      	mov	r0, r5
  4019b8:	9300      	str	r3, [sp, #0]
  4019ba:	f7ff fc29 	bl	401210 <_free_r>
  4019be:	9b00      	ldr	r3, [sp, #0]
  4019c0:	6819      	ldr	r1, [r3, #0]
  4019c2:	e6df      	b.n	401784 <_malloc_r+0x2d8>
  4019c4:	2001      	movs	r0, #1
  4019c6:	f04f 0900 	mov.w	r9, #0
  4019ca:	e6bc      	b.n	401746 <_malloc_r+0x29a>
  4019cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4019d0:	d805      	bhi.n	4019de <_malloc_r+0x532>
  4019d2:	0bda      	lsrs	r2, r3, #15
  4019d4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4019d8:	00c9      	lsls	r1, r1, #3
  4019da:	3277      	adds	r2, #119	; 0x77
  4019dc:	e720      	b.n	401820 <_malloc_r+0x374>
  4019de:	f240 5154 	movw	r1, #1364	; 0x554
  4019e2:	428a      	cmp	r2, r1
  4019e4:	d805      	bhi.n	4019f2 <_malloc_r+0x546>
  4019e6:	0c9a      	lsrs	r2, r3, #18
  4019e8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4019ec:	00c9      	lsls	r1, r1, #3
  4019ee:	327c      	adds	r2, #124	; 0x7c
  4019f0:	e716      	b.n	401820 <_malloc_r+0x374>
  4019f2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4019f6:	227e      	movs	r2, #126	; 0x7e
  4019f8:	e712      	b.n	401820 <_malloc_r+0x374>
  4019fa:	687b      	ldr	r3, [r7, #4]
  4019fc:	e780      	b.n	401900 <_malloc_r+0x454>
  4019fe:	08f0      	lsrs	r0, r6, #3
  401a00:	f106 0308 	add.w	r3, r6, #8
  401a04:	e600      	b.n	401608 <_malloc_r+0x15c>
  401a06:	bf00      	nop
  401a08:	20000874 	.word	0x20000874

00401a0c <__malloc_lock>:
  401a0c:	4801      	ldr	r0, [pc, #4]	; (401a14 <__malloc_lock+0x8>)
  401a0e:	f7ff bd13 	b.w	401438 <__retarget_lock_acquire_recursive>
  401a12:	bf00      	nop
  401a14:	20000988 	.word	0x20000988

00401a18 <__malloc_unlock>:
  401a18:	4801      	ldr	r0, [pc, #4]	; (401a20 <__malloc_unlock+0x8>)
  401a1a:	f7ff bd0f 	b.w	40143c <__retarget_lock_release_recursive>
  401a1e:	bf00      	nop
  401a20:	20000988 	.word	0x20000988

00401a24 <_sbrk_r>:
  401a24:	b538      	push	{r3, r4, r5, lr}
  401a26:	4c07      	ldr	r4, [pc, #28]	; (401a44 <_sbrk_r+0x20>)
  401a28:	2300      	movs	r3, #0
  401a2a:	4605      	mov	r5, r0
  401a2c:	4608      	mov	r0, r1
  401a2e:	6023      	str	r3, [r4, #0]
  401a30:	f7ff f8d8 	bl	400be4 <_sbrk>
  401a34:	1c43      	adds	r3, r0, #1
  401a36:	d000      	beq.n	401a3a <_sbrk_r+0x16>
  401a38:	bd38      	pop	{r3, r4, r5, pc}
  401a3a:	6823      	ldr	r3, [r4, #0]
  401a3c:	2b00      	cmp	r3, #0
  401a3e:	d0fb      	beq.n	401a38 <_sbrk_r+0x14>
  401a40:	602b      	str	r3, [r5, #0]
  401a42:	bd38      	pop	{r3, r4, r5, pc}
  401a44:	2000099c 	.word	0x2000099c

00401a48 <__sread>:
  401a48:	b510      	push	{r4, lr}
  401a4a:	460c      	mov	r4, r1
  401a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401a50:	f000 f954 	bl	401cfc <_read_r>
  401a54:	2800      	cmp	r0, #0
  401a56:	db03      	blt.n	401a60 <__sread+0x18>
  401a58:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401a5a:	4403      	add	r3, r0
  401a5c:	6523      	str	r3, [r4, #80]	; 0x50
  401a5e:	bd10      	pop	{r4, pc}
  401a60:	89a3      	ldrh	r3, [r4, #12]
  401a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  401a66:	81a3      	strh	r3, [r4, #12]
  401a68:	bd10      	pop	{r4, pc}
  401a6a:	bf00      	nop

00401a6c <__swrite>:
  401a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a70:	4616      	mov	r6, r2
  401a72:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  401a76:	461f      	mov	r7, r3
  401a78:	05d3      	lsls	r3, r2, #23
  401a7a:	460c      	mov	r4, r1
  401a7c:	4605      	mov	r5, r0
  401a7e:	d507      	bpl.n	401a90 <__swrite+0x24>
  401a80:	2200      	movs	r2, #0
  401a82:	2302      	movs	r3, #2
  401a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401a88:	f000 f922 	bl	401cd0 <_lseek_r>
  401a8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401a94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401a98:	81a2      	strh	r2, [r4, #12]
  401a9a:	463b      	mov	r3, r7
  401a9c:	4632      	mov	r2, r6
  401a9e:	4628      	mov	r0, r5
  401aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401aa4:	f000 b814 	b.w	401ad0 <_write_r>

00401aa8 <__sseek>:
  401aa8:	b510      	push	{r4, lr}
  401aaa:	460c      	mov	r4, r1
  401aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401ab0:	f000 f90e 	bl	401cd0 <_lseek_r>
  401ab4:	89a3      	ldrh	r3, [r4, #12]
  401ab6:	1c42      	adds	r2, r0, #1
  401ab8:	bf0e      	itee	eq
  401aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  401abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  401ac2:	6520      	strne	r0, [r4, #80]	; 0x50
  401ac4:	81a3      	strh	r3, [r4, #12]
  401ac6:	bd10      	pop	{r4, pc}

00401ac8 <__sclose>:
  401ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401acc:	f000 b878 	b.w	401bc0 <_close_r>

00401ad0 <_write_r>:
  401ad0:	b570      	push	{r4, r5, r6, lr}
  401ad2:	460d      	mov	r5, r1
  401ad4:	4c08      	ldr	r4, [pc, #32]	; (401af8 <_write_r+0x28>)
  401ad6:	4611      	mov	r1, r2
  401ad8:	4606      	mov	r6, r0
  401ada:	461a      	mov	r2, r3
  401adc:	4628      	mov	r0, r5
  401ade:	2300      	movs	r3, #0
  401ae0:	6023      	str	r3, [r4, #0]
  401ae2:	f7fe fc89 	bl	4003f8 <_write>
  401ae6:	1c43      	adds	r3, r0, #1
  401ae8:	d000      	beq.n	401aec <_write_r+0x1c>
  401aea:	bd70      	pop	{r4, r5, r6, pc}
  401aec:	6823      	ldr	r3, [r4, #0]
  401aee:	2b00      	cmp	r3, #0
  401af0:	d0fb      	beq.n	401aea <_write_r+0x1a>
  401af2:	6033      	str	r3, [r6, #0]
  401af4:	bd70      	pop	{r4, r5, r6, pc}
  401af6:	bf00      	nop
  401af8:	2000099c 	.word	0x2000099c

00401afc <__register_exitproc>:
  401afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401b00:	4d2c      	ldr	r5, [pc, #176]	; (401bb4 <__register_exitproc+0xb8>)
  401b02:	4606      	mov	r6, r0
  401b04:	6828      	ldr	r0, [r5, #0]
  401b06:	4698      	mov	r8, r3
  401b08:	460f      	mov	r7, r1
  401b0a:	4691      	mov	r9, r2
  401b0c:	f7ff fc94 	bl	401438 <__retarget_lock_acquire_recursive>
  401b10:	4b29      	ldr	r3, [pc, #164]	; (401bb8 <__register_exitproc+0xbc>)
  401b12:	681c      	ldr	r4, [r3, #0]
  401b14:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401b18:	2b00      	cmp	r3, #0
  401b1a:	d03e      	beq.n	401b9a <__register_exitproc+0x9e>
  401b1c:	685a      	ldr	r2, [r3, #4]
  401b1e:	2a1f      	cmp	r2, #31
  401b20:	dc1c      	bgt.n	401b5c <__register_exitproc+0x60>
  401b22:	f102 0e01 	add.w	lr, r2, #1
  401b26:	b176      	cbz	r6, 401b46 <__register_exitproc+0x4a>
  401b28:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401b2c:	2401      	movs	r4, #1
  401b2e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401b32:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401b36:	4094      	lsls	r4, r2
  401b38:	4320      	orrs	r0, r4
  401b3a:	2e02      	cmp	r6, #2
  401b3c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401b40:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401b44:	d023      	beq.n	401b8e <__register_exitproc+0x92>
  401b46:	3202      	adds	r2, #2
  401b48:	f8c3 e004 	str.w	lr, [r3, #4]
  401b4c:	6828      	ldr	r0, [r5, #0]
  401b4e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401b52:	f7ff fc73 	bl	40143c <__retarget_lock_release_recursive>
  401b56:	2000      	movs	r0, #0
  401b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b5c:	4b17      	ldr	r3, [pc, #92]	; (401bbc <__register_exitproc+0xc0>)
  401b5e:	b30b      	cbz	r3, 401ba4 <__register_exitproc+0xa8>
  401b60:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401b64:	f7ff fc9a 	bl	40149c <malloc>
  401b68:	4603      	mov	r3, r0
  401b6a:	b1d8      	cbz	r0, 401ba4 <__register_exitproc+0xa8>
  401b6c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401b70:	6002      	str	r2, [r0, #0]
  401b72:	2100      	movs	r1, #0
  401b74:	6041      	str	r1, [r0, #4]
  401b76:	460a      	mov	r2, r1
  401b78:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401b7c:	f04f 0e01 	mov.w	lr, #1
  401b80:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401b84:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401b88:	2e00      	cmp	r6, #0
  401b8a:	d0dc      	beq.n	401b46 <__register_exitproc+0x4a>
  401b8c:	e7cc      	b.n	401b28 <__register_exitproc+0x2c>
  401b8e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401b92:	430c      	orrs	r4, r1
  401b94:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401b98:	e7d5      	b.n	401b46 <__register_exitproc+0x4a>
  401b9a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401b9e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401ba2:	e7bb      	b.n	401b1c <__register_exitproc+0x20>
  401ba4:	6828      	ldr	r0, [r5, #0]
  401ba6:	f7ff fc49 	bl	40143c <__retarget_lock_release_recursive>
  401baa:	f04f 30ff 	mov.w	r0, #4294967295
  401bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401bb2:	bf00      	nop
  401bb4:	20000440 	.word	0x20000440
  401bb8:	00401d28 	.word	0x00401d28
  401bbc:	0040149d 	.word	0x0040149d

00401bc0 <_close_r>:
  401bc0:	b538      	push	{r3, r4, r5, lr}
  401bc2:	4c07      	ldr	r4, [pc, #28]	; (401be0 <_close_r+0x20>)
  401bc4:	2300      	movs	r3, #0
  401bc6:	4605      	mov	r5, r0
  401bc8:	4608      	mov	r0, r1
  401bca:	6023      	str	r3, [r4, #0]
  401bcc:	f7ff f826 	bl	400c1c <_close>
  401bd0:	1c43      	adds	r3, r0, #1
  401bd2:	d000      	beq.n	401bd6 <_close_r+0x16>
  401bd4:	bd38      	pop	{r3, r4, r5, pc}
  401bd6:	6823      	ldr	r3, [r4, #0]
  401bd8:	2b00      	cmp	r3, #0
  401bda:	d0fb      	beq.n	401bd4 <_close_r+0x14>
  401bdc:	602b      	str	r3, [r5, #0]
  401bde:	bd38      	pop	{r3, r4, r5, pc}
  401be0:	2000099c 	.word	0x2000099c

00401be4 <_fclose_r>:
  401be4:	b570      	push	{r4, r5, r6, lr}
  401be6:	b159      	cbz	r1, 401c00 <_fclose_r+0x1c>
  401be8:	4605      	mov	r5, r0
  401bea:	460c      	mov	r4, r1
  401bec:	b110      	cbz	r0, 401bf4 <_fclose_r+0x10>
  401bee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401bf0:	2b00      	cmp	r3, #0
  401bf2:	d03c      	beq.n	401c6e <_fclose_r+0x8a>
  401bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401bf6:	07d8      	lsls	r0, r3, #31
  401bf8:	d505      	bpl.n	401c06 <_fclose_r+0x22>
  401bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401bfe:	b92b      	cbnz	r3, 401c0c <_fclose_r+0x28>
  401c00:	2600      	movs	r6, #0
  401c02:	4630      	mov	r0, r6
  401c04:	bd70      	pop	{r4, r5, r6, pc}
  401c06:	89a3      	ldrh	r3, [r4, #12]
  401c08:	0599      	lsls	r1, r3, #22
  401c0a:	d53c      	bpl.n	401c86 <_fclose_r+0xa2>
  401c0c:	4621      	mov	r1, r4
  401c0e:	4628      	mov	r0, r5
  401c10:	f7ff f964 	bl	400edc <__sflush_r>
  401c14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401c16:	4606      	mov	r6, r0
  401c18:	b133      	cbz	r3, 401c28 <_fclose_r+0x44>
  401c1a:	69e1      	ldr	r1, [r4, #28]
  401c1c:	4628      	mov	r0, r5
  401c1e:	4798      	blx	r3
  401c20:	2800      	cmp	r0, #0
  401c22:	bfb8      	it	lt
  401c24:	f04f 36ff 	movlt.w	r6, #4294967295
  401c28:	89a3      	ldrh	r3, [r4, #12]
  401c2a:	061a      	lsls	r2, r3, #24
  401c2c:	d422      	bmi.n	401c74 <_fclose_r+0x90>
  401c2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401c30:	b141      	cbz	r1, 401c44 <_fclose_r+0x60>
  401c32:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401c36:	4299      	cmp	r1, r3
  401c38:	d002      	beq.n	401c40 <_fclose_r+0x5c>
  401c3a:	4628      	mov	r0, r5
  401c3c:	f7ff fae8 	bl	401210 <_free_r>
  401c40:	2300      	movs	r3, #0
  401c42:	6323      	str	r3, [r4, #48]	; 0x30
  401c44:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401c46:	b121      	cbz	r1, 401c52 <_fclose_r+0x6e>
  401c48:	4628      	mov	r0, r5
  401c4a:	f7ff fae1 	bl	401210 <_free_r>
  401c4e:	2300      	movs	r3, #0
  401c50:	6463      	str	r3, [r4, #68]	; 0x44
  401c52:	f7ff fa67 	bl	401124 <__sfp_lock_acquire>
  401c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401c58:	2200      	movs	r2, #0
  401c5a:	07db      	lsls	r3, r3, #31
  401c5c:	81a2      	strh	r2, [r4, #12]
  401c5e:	d50e      	bpl.n	401c7e <_fclose_r+0x9a>
  401c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401c62:	f7ff fbe7 	bl	401434 <__retarget_lock_close_recursive>
  401c66:	f7ff fa63 	bl	401130 <__sfp_lock_release>
  401c6a:	4630      	mov	r0, r6
  401c6c:	bd70      	pop	{r4, r5, r6, pc}
  401c6e:	f7ff fa2d 	bl	4010cc <__sinit>
  401c72:	e7bf      	b.n	401bf4 <_fclose_r+0x10>
  401c74:	6921      	ldr	r1, [r4, #16]
  401c76:	4628      	mov	r0, r5
  401c78:	f7ff faca 	bl	401210 <_free_r>
  401c7c:	e7d7      	b.n	401c2e <_fclose_r+0x4a>
  401c7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401c80:	f7ff fbdc 	bl	40143c <__retarget_lock_release_recursive>
  401c84:	e7ec      	b.n	401c60 <_fclose_r+0x7c>
  401c86:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401c88:	f7ff fbd6 	bl	401438 <__retarget_lock_acquire_recursive>
  401c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401c90:	2b00      	cmp	r3, #0
  401c92:	d1bb      	bne.n	401c0c <_fclose_r+0x28>
  401c94:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401c96:	f016 0601 	ands.w	r6, r6, #1
  401c9a:	d1b1      	bne.n	401c00 <_fclose_r+0x1c>
  401c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401c9e:	f7ff fbcd 	bl	40143c <__retarget_lock_release_recursive>
  401ca2:	4630      	mov	r0, r6
  401ca4:	bd70      	pop	{r4, r5, r6, pc}
  401ca6:	bf00      	nop

00401ca8 <_fstat_r>:
  401ca8:	b538      	push	{r3, r4, r5, lr}
  401caa:	460b      	mov	r3, r1
  401cac:	4c07      	ldr	r4, [pc, #28]	; (401ccc <_fstat_r+0x24>)
  401cae:	4605      	mov	r5, r0
  401cb0:	4611      	mov	r1, r2
  401cb2:	4618      	mov	r0, r3
  401cb4:	2300      	movs	r3, #0
  401cb6:	6023      	str	r3, [r4, #0]
  401cb8:	f7fe ffb3 	bl	400c22 <_fstat>
  401cbc:	1c43      	adds	r3, r0, #1
  401cbe:	d000      	beq.n	401cc2 <_fstat_r+0x1a>
  401cc0:	bd38      	pop	{r3, r4, r5, pc}
  401cc2:	6823      	ldr	r3, [r4, #0]
  401cc4:	2b00      	cmp	r3, #0
  401cc6:	d0fb      	beq.n	401cc0 <_fstat_r+0x18>
  401cc8:	602b      	str	r3, [r5, #0]
  401cca:	bd38      	pop	{r3, r4, r5, pc}
  401ccc:	2000099c 	.word	0x2000099c

00401cd0 <_lseek_r>:
  401cd0:	b570      	push	{r4, r5, r6, lr}
  401cd2:	460d      	mov	r5, r1
  401cd4:	4c08      	ldr	r4, [pc, #32]	; (401cf8 <_lseek_r+0x28>)
  401cd6:	4611      	mov	r1, r2
  401cd8:	4606      	mov	r6, r0
  401cda:	461a      	mov	r2, r3
  401cdc:	4628      	mov	r0, r5
  401cde:	2300      	movs	r3, #0
  401ce0:	6023      	str	r3, [r4, #0]
  401ce2:	f7fe ffa3 	bl	400c2c <_lseek>
  401ce6:	1c43      	adds	r3, r0, #1
  401ce8:	d000      	beq.n	401cec <_lseek_r+0x1c>
  401cea:	bd70      	pop	{r4, r5, r6, pc}
  401cec:	6823      	ldr	r3, [r4, #0]
  401cee:	2b00      	cmp	r3, #0
  401cf0:	d0fb      	beq.n	401cea <_lseek_r+0x1a>
  401cf2:	6033      	str	r3, [r6, #0]
  401cf4:	bd70      	pop	{r4, r5, r6, pc}
  401cf6:	bf00      	nop
  401cf8:	2000099c 	.word	0x2000099c

00401cfc <_read_r>:
  401cfc:	b570      	push	{r4, r5, r6, lr}
  401cfe:	460d      	mov	r5, r1
  401d00:	4c08      	ldr	r4, [pc, #32]	; (401d24 <_read_r+0x28>)
  401d02:	4611      	mov	r1, r2
  401d04:	4606      	mov	r6, r0
  401d06:	461a      	mov	r2, r3
  401d08:	4628      	mov	r0, r5
  401d0a:	2300      	movs	r3, #0
  401d0c:	6023      	str	r3, [r4, #0]
  401d0e:	f7fe fb55 	bl	4003bc <_read>
  401d12:	1c43      	adds	r3, r0, #1
  401d14:	d000      	beq.n	401d18 <_read_r+0x1c>
  401d16:	bd70      	pop	{r4, r5, r6, pc}
  401d18:	6823      	ldr	r3, [r4, #0]
  401d1a:	2b00      	cmp	r3, #0
  401d1c:	d0fb      	beq.n	401d16 <_read_r+0x1a>
  401d1e:	6033      	str	r3, [r6, #0]
  401d20:	bd70      	pop	{r4, r5, r6, pc}
  401d22:	bf00      	nop
  401d24:	2000099c 	.word	0x2000099c

00401d28 <_global_impure_ptr>:
  401d28:	20000018                                ... 

00401d2c <_init>:
  401d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d2e:	bf00      	nop
  401d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401d32:	bc08      	pop	{r3}
  401d34:	469e      	mov	lr, r3
  401d36:	4770      	bx	lr

00401d38 <__init_array_start>:
  401d38:	00400ebd 	.word	0x00400ebd

00401d3c <__frame_dummy_init_array_entry>:
  401d3c:	0040011d                                ..@.

00401d40 <_fini>:
  401d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401d42:	bf00      	nop
  401d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401d46:	bc08      	pop	{r3}
  401d48:	469e      	mov	lr, r3
  401d4a:	4770      	bx	lr

00401d4c <__fini_array_start>:
  401d4c:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <g_interrupt_enabled>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	0978 2000                                   x.. 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_sbrk_base>:
2000084c:	ffff ffff                                   ....

20000850 <__malloc_trim_threshold>:
20000850:	0000 0002                                   ....
