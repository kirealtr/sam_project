
AFEC_EXAMPLE12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000238c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20000000  0040238c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001f8  2000084c  00402bd8  0002084c  2**2
                  ALLOC
  3 .stack        00003004  20000a44  00402dd0  0002084c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018761  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003537  00000000  00000000  00039034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000053ab  00000000  00000000  0003c56b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ac8  00000000  00000000  00041916  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a68  00000000  00000000  000423de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018bf3  00000000  00000000  00042e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c8d1  00000000  00000000  0005ba39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00065f26  00000000  00000000  0006830a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e38  00000000  00000000  000ce230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 3a 00 20 d9 0f 40 00 d7 0f 40 00 d7 0f 40 00     H:. ..@...@...@.
  400010:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d7 0f 40 00 d7 0f 40 00 00 00 00 00 d7 0f 40 00     ..@...@.......@.
  40003c:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00 d7 0f 40 00     ..@...@...@...@.
  40004c:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00 d7 0f 40 00     ..@...@...@...@.
  40005c:	d7 0f 40 00 d7 0f 40 00 55 0c 40 00 69 0c 40 00     ..@...@.U.@.i.@.
  40006c:	7d 0c 40 00 91 0c 40 00 a5 0c 40 00 d7 0f 40 00     }.@...@...@...@.
  40007c:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00 d7 0f 40 00     ..@...@...@...@.
  40008c:	b9 02 40 00 d7 0f 40 00 29 03 40 00 d7 0f 40 00     ..@...@.).@...@.
  40009c:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00 d7 0f 40 00     ..@...@...@...@.
  4000ac:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00 59 0b 40 00     ..@...@...@.Y.@.
  4000bc:	6d 0b 40 00 d7 0f 40 00 d7 0f 40 00 d7 0f 40 00     m.@...@...@...@.
  4000cc:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00 d7 0f 40 00     ..@...@...@...@.
  4000dc:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00 d7 0f 40 00     ..@...@...@...@.
  4000ec:	d7 0f 40 00 d7 0f 40 00 d7 0f 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000084c 	.word	0x2000084c
  400114:	00000000 	.word	0x00000000
  400118:	0040238c 	.word	0x0040238c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040238c 	.word	0x0040238c
  400158:	20000850 	.word	0x20000850
  40015c:	0040238c 	.word	0x0040238c
  400160:	00000000 	.word	0x00000000

00400164 <restart>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400164:	4b0e      	ldr	r3, [pc, #56]	; (4001a0 <restart+0x3c>)
  400166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400168:	0fdb      	lsrs	r3, r3, #31
		ioport_set_pin_dir(is_written_pin, IOPORT_DIR_OUTPUT);
}

static void restart(void)
{
	GO_status = ioport_get_pin_level(GO_pin);
  40016a:	4a0e      	ldr	r2, [pc, #56]	; (4001a4 <restart+0x40>)
  40016c:	7013      	strb	r3, [r2, #0]
	if (!GO_status)
  40016e:	7813      	ldrb	r3, [r2, #0]
  400170:	b103      	cbz	r3, 400174 <restart+0x10>
  400172:	4770      	bx	lr
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400174:	4b0a      	ldr	r3, [pc, #40]	; (4001a0 <restart+0x3c>)
  400176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40017a:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40017c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400180:	631a      	str	r2, [r3, #48]	; 0x30
  400182:	2201      	movs	r2, #1
  400184:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400188:	631a      	str	r2, [r3, #48]	; 0x30
  40018a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40018e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400192:	631a      	str	r2, [r3, #48]	; 0x30
	{
		set_default_pin_levels();
		i = 0;
  400194:	2300      	movs	r3, #0
  400196:	4a04      	ldr	r2, [pc, #16]	; (4001a8 <restart+0x44>)
  400198:	6013      	str	r3, [r2, #0]
		state = SL_READY;
  40019a:	4a04      	ldr	r2, [pc, #16]	; (4001ac <restart+0x48>)
  40019c:	7013      	strb	r3, [r2, #0]
	}
}
  40019e:	e7e8      	b.n	400172 <restart+0xe>
  4001a0:	400e1200 	.word	0x400e1200
  4001a4:	20000868 	.word	0x20000868
  4001a8:	20000898 	.word	0x20000898
  4001ac:	2000089c 	.word	0x2000089c

004001b0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001b2:	b083      	sub	sp, #12
  4001b4:	4605      	mov	r5, r0
  4001b6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4001b8:	2300      	movs	r3, #0
  4001ba:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001bc:	4b18      	ldr	r3, [pc, #96]	; (400220 <usart_serial_getchar+0x70>)
  4001be:	4298      	cmp	r0, r3
  4001c0:	d00a      	beq.n	4001d8 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001c2:	4b18      	ldr	r3, [pc, #96]	; (400224 <usart_serial_getchar+0x74>)
  4001c4:	4298      	cmp	r0, r3
  4001c6:	d00f      	beq.n	4001e8 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001c8:	4b17      	ldr	r3, [pc, #92]	; (400228 <usart_serial_getchar+0x78>)
  4001ca:	4298      	cmp	r0, r3
  4001cc:	d014      	beq.n	4001f8 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4001ce:	4b17      	ldr	r3, [pc, #92]	; (40022c <usart_serial_getchar+0x7c>)
  4001d0:	429d      	cmp	r5, r3
  4001d2:	d01b      	beq.n	40020c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4001d4:	b003      	add	sp, #12
  4001d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4001d8:	461f      	mov	r7, r3
  4001da:	4e15      	ldr	r6, [pc, #84]	; (400230 <usart_serial_getchar+0x80>)
  4001dc:	4621      	mov	r1, r4
  4001de:	4638      	mov	r0, r7
  4001e0:	47b0      	blx	r6
  4001e2:	2800      	cmp	r0, #0
  4001e4:	d1fa      	bne.n	4001dc <usart_serial_getchar+0x2c>
  4001e6:	e7f2      	b.n	4001ce <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4001e8:	461e      	mov	r6, r3
  4001ea:	4d11      	ldr	r5, [pc, #68]	; (400230 <usart_serial_getchar+0x80>)
  4001ec:	4621      	mov	r1, r4
  4001ee:	4630      	mov	r0, r6
  4001f0:	47a8      	blx	r5
  4001f2:	2800      	cmp	r0, #0
  4001f4:	d1fa      	bne.n	4001ec <usart_serial_getchar+0x3c>
  4001f6:	e7ed      	b.n	4001d4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4001f8:	461e      	mov	r6, r3
  4001fa:	4d0e      	ldr	r5, [pc, #56]	; (400234 <usart_serial_getchar+0x84>)
  4001fc:	a901      	add	r1, sp, #4
  4001fe:	4630      	mov	r0, r6
  400200:	47a8      	blx	r5
  400202:	2800      	cmp	r0, #0
  400204:	d1fa      	bne.n	4001fc <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400206:	9b01      	ldr	r3, [sp, #4]
  400208:	7023      	strb	r3, [r4, #0]
  40020a:	e7e3      	b.n	4001d4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  40020c:	461e      	mov	r6, r3
  40020e:	4d09      	ldr	r5, [pc, #36]	; (400234 <usart_serial_getchar+0x84>)
  400210:	a901      	add	r1, sp, #4
  400212:	4630      	mov	r0, r6
  400214:	47a8      	blx	r5
  400216:	2800      	cmp	r0, #0
  400218:	d1fa      	bne.n	400210 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  40021a:	9b01      	ldr	r3, [sp, #4]
  40021c:	7023      	strb	r3, [r4, #0]
}
  40021e:	e7d9      	b.n	4001d4 <usart_serial_getchar+0x24>
  400220:	400e0600 	.word	0x400e0600
  400224:	40060600 	.word	0x40060600
  400228:	400a0000 	.word	0x400a0000
  40022c:	400a4000 	.word	0x400a4000
  400230:	00400f99 	.word	0x00400f99
  400234:	00400fbf 	.word	0x00400fbf

00400238 <usart_serial_putchar>:
{
  400238:	b570      	push	{r4, r5, r6, lr}
  40023a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40023c:	4b18      	ldr	r3, [pc, #96]	; (4002a0 <usart_serial_putchar+0x68>)
  40023e:	4298      	cmp	r0, r3
  400240:	d00a      	beq.n	400258 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400242:	4b18      	ldr	r3, [pc, #96]	; (4002a4 <usart_serial_putchar+0x6c>)
  400244:	4298      	cmp	r0, r3
  400246:	d010      	beq.n	40026a <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400248:	4b17      	ldr	r3, [pc, #92]	; (4002a8 <usart_serial_putchar+0x70>)
  40024a:	4298      	cmp	r0, r3
  40024c:	d016      	beq.n	40027c <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  40024e:	4b17      	ldr	r3, [pc, #92]	; (4002ac <usart_serial_putchar+0x74>)
  400250:	4298      	cmp	r0, r3
  400252:	d01c      	beq.n	40028e <usart_serial_putchar+0x56>
	return 0;
  400254:	2000      	movs	r0, #0
}
  400256:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400258:	461e      	mov	r6, r3
  40025a:	4d15      	ldr	r5, [pc, #84]	; (4002b0 <usart_serial_putchar+0x78>)
  40025c:	4621      	mov	r1, r4
  40025e:	4630      	mov	r0, r6
  400260:	47a8      	blx	r5
  400262:	2800      	cmp	r0, #0
  400264:	d1fa      	bne.n	40025c <usart_serial_putchar+0x24>
		return 1;
  400266:	2001      	movs	r0, #1
  400268:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40026a:	461e      	mov	r6, r3
  40026c:	4d10      	ldr	r5, [pc, #64]	; (4002b0 <usart_serial_putchar+0x78>)
  40026e:	4621      	mov	r1, r4
  400270:	4630      	mov	r0, r6
  400272:	47a8      	blx	r5
  400274:	2800      	cmp	r0, #0
  400276:	d1fa      	bne.n	40026e <usart_serial_putchar+0x36>
		return 1;
  400278:	2001      	movs	r0, #1
  40027a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40027c:	461e      	mov	r6, r3
  40027e:	4d0d      	ldr	r5, [pc, #52]	; (4002b4 <usart_serial_putchar+0x7c>)
  400280:	4621      	mov	r1, r4
  400282:	4630      	mov	r0, r6
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_putchar+0x48>
		return 1;
  40028a:	2001      	movs	r0, #1
  40028c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40028e:	461e      	mov	r6, r3
  400290:	4d08      	ldr	r5, [pc, #32]	; (4002b4 <usart_serial_putchar+0x7c>)
  400292:	4621      	mov	r1, r4
  400294:	4630      	mov	r0, r6
  400296:	47a8      	blx	r5
  400298:	2800      	cmp	r0, #0
  40029a:	d1fa      	bne.n	400292 <usart_serial_putchar+0x5a>
		return 1;
  40029c:	2001      	movs	r0, #1
  40029e:	bd70      	pop	{r4, r5, r6, pc}
  4002a0:	400e0600 	.word	0x400e0600
  4002a4:	40060600 	.word	0x40060600
  4002a8:	400a0000 	.word	0x400a0000
  4002ac:	400a4000 	.word	0x400a4000
  4002b0:	00400f89 	.word	0x00400f89
  4002b4:	00400fab 	.word	0x00400fab

004002b8 <SPI_Handler>:
{	
  4002b8:	b538      	push	{r3, r4, r5, lr}
	if(channel_to_write > 1)
  4002ba:	4b15      	ldr	r3, [pc, #84]	; (400310 <SPI_Handler+0x58>)
  4002bc:	781b      	ldrb	r3, [r3, #0]
  4002be:	b2db      	uxtb	r3, r3
  4002c0:	2b01      	cmp	r3, #1
  4002c2:	d900      	bls.n	4002c6 <SPI_Handler+0xe>
  4002c4:	bd38      	pop	{r3, r4, r5, pc}
	if(i < data_size)
  4002c6:	4b13      	ldr	r3, [pc, #76]	; (400314 <SPI_Handler+0x5c>)
  4002c8:	681b      	ldr	r3, [r3, #0]
  4002ca:	2b09      	cmp	r3, #9
  4002cc:	d90a      	bls.n	4002e4 <SPI_Handler+0x2c>
		spi_write(SPI_SLAVE_BASE, breaking_sig, 0, 0);
  4002ce:	2300      	movs	r3, #0
  4002d0:	461a      	mov	r2, r3
  4002d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4002d6:	4810      	ldr	r0, [pc, #64]	; (400318 <SPI_Handler+0x60>)
  4002d8:	4c10      	ldr	r4, [pc, #64]	; (40031c <SPI_Handler+0x64>)
  4002da:	47a0      	blx	r4
		ch_written = true;
  4002dc:	2201      	movs	r2, #1
  4002de:	4b10      	ldr	r3, [pc, #64]	; (400320 <SPI_Handler+0x68>)
  4002e0:	701a      	strb	r2, [r3, #0]
}
  4002e2:	e7ef      	b.n	4002c4 <SPI_Handler+0xc>
		spi_write(SPI_SLAVE_BASE, data[channel_to_write][i], 0, 0);
  4002e4:	4b0a      	ldr	r3, [pc, #40]	; (400310 <SPI_Handler+0x58>)
  4002e6:	781b      	ldrb	r3, [r3, #0]
  4002e8:	4c0a      	ldr	r4, [pc, #40]	; (400314 <SPI_Handler+0x5c>)
  4002ea:	6821      	ldr	r1, [r4, #0]
  4002ec:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  4002f4:	4419      	add	r1, r3
  4002f6:	2300      	movs	r3, #0
  4002f8:	461a      	mov	r2, r3
  4002fa:	480a      	ldr	r0, [pc, #40]	; (400324 <SPI_Handler+0x6c>)
  4002fc:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
  400300:	4805      	ldr	r0, [pc, #20]	; (400318 <SPI_Handler+0x60>)
  400302:	4d06      	ldr	r5, [pc, #24]	; (40031c <SPI_Handler+0x64>)
  400304:	47a8      	blx	r5
		i++; 
  400306:	6823      	ldr	r3, [r4, #0]
  400308:	3301      	adds	r3, #1
  40030a:	6023      	str	r3, [r4, #0]
  40030c:	bd38      	pop	{r3, r4, r5, pc}
  40030e:	bf00      	nop
  400310:	20000001 	.word	0x20000001
  400314:	20000898 	.word	0x20000898
  400318:	40088000 	.word	0x40088000
  40031c:	00400e1b 	.word	0x00400e1b
  400320:	2000086a 	.word	0x2000086a
  400324:	2000086c 	.word	0x2000086c

00400328 <TC0_Handler>:
{
  400328:	b510      	push	{r4, lr}
  40032a:	b082      	sub	sp, #8
	ul_dummy = tc_get_status(TC0, 0);
  40032c:	2100      	movs	r1, #0
  40032e:	4812      	ldr	r0, [pc, #72]	; (400378 <TC0_Handler+0x50>)
  400330:	4b12      	ldr	r3, [pc, #72]	; (40037c <TC0_Handler+0x54>)
  400332:	4798      	blx	r3
  400334:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  400336:	9b01      	ldr	r3, [sp, #4]
	if (i < data_size) {
  400338:	4b11      	ldr	r3, [pc, #68]	; (400380 <TC0_Handler+0x58>)
  40033a:	681b      	ldr	r3, [r3, #0]
  40033c:	2b09      	cmp	r3, #9
  40033e:	d904      	bls.n	40034a <TC0_Handler+0x22>
		buffer_full = true;
  400340:	2201      	movs	r2, #1
  400342:	4b10      	ldr	r3, [pc, #64]	; (400384 <TC0_Handler+0x5c>)
  400344:	701a      	strb	r2, [r3, #0]
}
  400346:	b002      	add	sp, #8
  400348:	bd10      	pop	{r4, pc}
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  40034a:	4b0f      	ldr	r3, [pc, #60]	; (400388 <TC0_Handler+0x60>)
  40034c:	2202      	movs	r2, #2
  40034e:	601a      	str	r2, [r3, #0]
		data[0][i] = afec_channel_get_value(AFEC0, channel_1);
  400350:	4a0b      	ldr	r2, [pc, #44]	; (400380 <TC0_Handler+0x58>)
  400352:	6811      	ldr	r1, [r2, #0]
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400354:	2005      	movs	r0, #5
  400356:	6658      	str	r0, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  400358:	6e9c      	ldr	r4, [r3, #104]	; 0x68
  40035a:	480c      	ldr	r0, [pc, #48]	; (40038c <TC0_Handler+0x64>)
  40035c:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
		data[1][i] = afec_channel_get_value(AFEC0, channel_2);
  400360:	6811      	ldr	r1, [r2, #0]
	afec->AFEC_CSELR = afec_ch;
  400362:	2404      	movs	r4, #4
  400364:	665c      	str	r4, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  400366:	6e9c      	ldr	r4, [r3, #104]	; 0x68
  400368:	f101 030b 	add.w	r3, r1, #11
  40036c:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
		i++;
  400370:	6813      	ldr	r3, [r2, #0]
  400372:	3301      	adds	r3, #1
  400374:	6013      	str	r3, [r2, #0]
  400376:	e7e6      	b.n	400346 <TC0_Handler+0x1e>
  400378:	40090000 	.word	0x40090000
  40037c:	00400ed9 	.word	0x00400ed9
  400380:	20000898 	.word	0x20000898
  400384:	20000869 	.word	0x20000869
  400388:	400b0000 	.word	0x400b0000
  40038c:	2000086c 	.word	0x2000086c

00400390 <main>:

int main(void)
{
  400390:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  400394:	b08f      	sub	sp, #60	; 0x3c
	/* Initialize the SAM system. */
	sysclk_init();
  400396:	4b9c      	ldr	r3, [pc, #624]	; (400608 <main+0x278>)
  400398:	4798      	blx	r3
	board_init();
  40039a:	4b9c      	ldr	r3, [pc, #624]	; (40060c <main+0x27c>)
  40039c:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40039e:	2009      	movs	r0, #9
  4003a0:	4c9b      	ldr	r4, [pc, #620]	; (400610 <main+0x280>)
  4003a2:	47a0      	blx	r4
  4003a4:	200a      	movs	r0, #10
  4003a6:	47a0      	blx	r4
  4003a8:	200b      	movs	r0, #11
  4003aa:	47a0      	blx	r4
  4003ac:	200c      	movs	r0, #12
  4003ae:	47a0      	blx	r4
  4003b0:	200d      	movs	r0, #13
  4003b2:	47a0      	blx	r4
  4003b4:	2007      	movs	r0, #7
  4003b6:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4003b8:	4e96      	ldr	r6, [pc, #600]	; (400614 <main+0x284>)
  4003ba:	4b97      	ldr	r3, [pc, #604]	; (400618 <main+0x288>)
  4003bc:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4003be:	4a97      	ldr	r2, [pc, #604]	; (40061c <main+0x28c>)
  4003c0:	4b97      	ldr	r3, [pc, #604]	; (400620 <main+0x290>)
  4003c2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4003c4:	4a97      	ldr	r2, [pc, #604]	; (400624 <main+0x294>)
  4003c6:	4b98      	ldr	r3, [pc, #608]	; (400628 <main+0x298>)
  4003c8:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4003ca:	4b98      	ldr	r3, [pc, #608]	; (40062c <main+0x29c>)
  4003cc:	9304      	str	r3, [sp, #16]
	uart_settings.ul_baudrate = opt->baudrate;
  4003ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4003d2:	9305      	str	r3, [sp, #20]
	uart_settings.ul_mode = opt->paritytype;
  4003d4:	f44f 6500 	mov.w	r5, #2048	; 0x800
  4003d8:	9506      	str	r5, [sp, #24]
  4003da:	2007      	movs	r0, #7
  4003dc:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  4003de:	a904      	add	r1, sp, #16
  4003e0:	4630      	mov	r0, r6
  4003e2:	4b93      	ldr	r3, [pc, #588]	; (400630 <main+0x2a0>)
  4003e4:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4003e6:	4e93      	ldr	r6, [pc, #588]	; (400634 <main+0x2a4>)
  4003e8:	6833      	ldr	r3, [r6, #0]
  4003ea:	2100      	movs	r1, #0
  4003ec:	6898      	ldr	r0, [r3, #8]
  4003ee:	4c92      	ldr	r4, [pc, #584]	; (400638 <main+0x2a8>)
  4003f0:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4003f2:	6833      	ldr	r3, [r6, #0]
  4003f4:	2100      	movs	r1, #0
  4003f6:	6858      	ldr	r0, [r3, #4]
  4003f8:	47a0      	blx	r4
	ioport_init();

	configure_console();

	afec_enable(AFEC0);
  4003fa:	4c90      	ldr	r4, [pc, #576]	; (40063c <main+0x2ac>)
  4003fc:	4620      	mov	r0, r4
  4003fe:	4b90      	ldr	r3, [pc, #576]	; (400640 <main+0x2b0>)
  400400:	4798      	blx	r3
	struct afec_config afec_cfg;
	afec_get_config_defaults(&afec_cfg);
  400402:	a807      	add	r0, sp, #28
  400404:	4b8f      	ldr	r3, [pc, #572]	; (400644 <main+0x2b4>)
  400406:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  400408:	a907      	add	r1, sp, #28
  40040a:	4620      	mov	r0, r4
  40040c:	4b8e      	ldr	r3, [pc, #568]	; (400648 <main+0x2b8>)
  40040e:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400410:	2320      	movs	r3, #32
  400412:	6163      	str	r3, [r4, #20]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400414:	a804      	add	r0, sp, #16
  400416:	4f8d      	ldr	r7, [pc, #564]	; (40064c <main+0x2bc>)
  400418:	47b8      	blx	r7
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  40041a:	aa04      	add	r2, sp, #16
  40041c:	2105      	movs	r1, #5
  40041e:	4620      	mov	r0, r4
  400420:	4e8b      	ldr	r6, [pc, #556]	; (400650 <main+0x2c0>)
  400422:	47b0      	blx	r6
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400424:	2305      	movs	r3, #5
  400426:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400428:	66e5      	str	r5, [r4, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40042a:	2310      	movs	r3, #16
  40042c:	6163      	str	r3, [r4, #20]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40042e:	eb0d 0003 	add.w	r0, sp, r3
  400432:	47b8      	blx	r7
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  400434:	aa04      	add	r2, sp, #16
  400436:	2104      	movs	r1, #4
  400438:	4620      	mov	r0, r4
  40043a:	47b0      	blx	r6
	afec->AFEC_CSELR = afec_ch;
  40043c:	2304      	movs	r3, #4
  40043e:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400440:	66e5      	str	r5, [r4, #108]	; 0x6c
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400442:	4b84      	ldr	r3, [pc, #528]	; (400654 <main+0x2c4>)
  400444:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400448:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40044a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40044e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400452:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400454:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400458:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40045c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40045e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400466:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400468:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40046c:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40046e:	631a      	str	r2, [r3, #48]	; 0x30
  400470:	2201      	movs	r2, #1
  400472:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400476:	631a      	str	r2, [r3, #48]	; 0x30
  400478:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40047c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400480:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Configuring PIO */
	configure_pio();
	set_default_pin_levels();
	
	state = SL_READY;
  400482:	2200      	movs	r2, #0
  400484:	4b74      	ldr	r3, [pc, #464]	; (400658 <main+0x2c8>)
  400486:	701a      	strb	r2, [r3, #0]

	while (1) {
		switch (state){
  400488:	461d      	mov	r5, r3
  40048a:	f8df b230 	ldr.w	fp, [pc, #560]	; 4006bc <main+0x32c>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40048e:	4f73      	ldr	r7, [pc, #460]	; (40065c <main+0x2cc>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400490:	4e70      	ldr	r6, [pc, #448]	; (400654 <main+0x2c4>)
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400492:	f8df 9198 	ldr.w	r9, [pc, #408]	; 40062c <main+0x29c>
  400496:	e045      	b.n	400524 <main+0x194>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400498:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  40049a:	0fdb      	lsrs	r3, r3, #31
			case SL_READY:
				GO_status = ioport_get_pin_level(GO_pin);
  40049c:	4a70      	ldr	r2, [pc, #448]	; (400660 <main+0x2d0>)
  40049e:	7013      	strb	r3, [r2, #0]
				if (GO_status)
  4004a0:	7813      	ldrb	r3, [r2, #0]
  4004a2:	2b00      	cmp	r3, #0
  4004a4:	d03e      	beq.n	400524 <main+0x194>
	pmc_enable_periph_clk(ID_TC0);
  4004a6:	2015      	movs	r0, #21
  4004a8:	4b59      	ldr	r3, [pc, #356]	; (400610 <main+0x280>)
  4004aa:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4004ac:	f8cd 9000 	str.w	r9, [sp]
  4004b0:	ab04      	add	r3, sp, #16
  4004b2:	aa03      	add	r2, sp, #12
  4004b4:	4649      	mov	r1, r9
  4004b6:	486b      	ldr	r0, [pc, #428]	; (400664 <main+0x2d4>)
  4004b8:	4c6b      	ldr	r4, [pc, #428]	; (400668 <main+0x2d8>)
  4004ba:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4004bc:	4c6b      	ldr	r4, [pc, #428]	; (40066c <main+0x2dc>)
  4004be:	9a04      	ldr	r2, [sp, #16]
  4004c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4004c4:	2100      	movs	r1, #0
  4004c6:	4620      	mov	r0, r4
  4004c8:	4b69      	ldr	r3, [pc, #420]	; (400670 <main+0x2e0>)
  4004ca:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / freq);
  4004cc:	9b03      	ldr	r3, [sp, #12]
  4004ce:	fbb9 f2f3 	udiv	r2, r9, r3
  4004d2:	0952      	lsrs	r2, r2, #5
  4004d4:	4b67      	ldr	r3, [pc, #412]	; (400674 <main+0x2e4>)
  4004d6:	fba3 3202 	umull	r3, r2, r3, r2
  4004da:	09d2      	lsrs	r2, r2, #7
  4004dc:	2100      	movs	r1, #0
  4004de:	4620      	mov	r0, r4
  4004e0:	4b65      	ldr	r3, [pc, #404]	; (400678 <main+0x2e8>)
  4004e2:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004e4:	4b65      	ldr	r3, [pc, #404]	; (40067c <main+0x2ec>)
  4004e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4004ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4004f2:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004fa:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4004fc:	2210      	movs	r2, #16
  4004fe:	2100      	movs	r1, #0
  400500:	4620      	mov	r0, r4
  400502:	4b5f      	ldr	r3, [pc, #380]	; (400680 <main+0x2f0>)
  400504:	4798      	blx	r3
	tc_start(TC0, 0);
  400506:	2100      	movs	r1, #0
  400508:	4620      	mov	r0, r4
  40050a:	4b5e      	ldr	r3, [pc, #376]	; (400684 <main+0x2f4>)
  40050c:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40050e:	2301      	movs	r3, #1
  400510:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
				{
					configure_tc();	
					ioport_set_pin_level(LED0_GPIO, 0);
					state = SL_SAMPLING;
  400514:	702b      	strb	r3, [r5, #0]
  400516:	e005      	b.n	400524 <main+0x194>
				}
				break;
			case SL_SAMPLING:
				//mk_sound();
				if (buffer_full) 
  400518:	4b5b      	ldr	r3, [pc, #364]	; (400688 <main+0x2f8>)
  40051a:	781b      	ldrb	r3, [r3, #0]
  40051c:	2b00      	cmp	r3, #0
  40051e:	d12c      	bne.n	40057a <main+0x1ea>
					spi_slave_initialize();
					
					state = SL_WRITING;
					
				}
				restart();
  400520:	4b5a      	ldr	r3, [pc, #360]	; (40068c <main+0x2fc>)
  400522:	4798      	blx	r3
		switch (state){
  400524:	782b      	ldrb	r3, [r5, #0]
  400526:	2b01      	cmp	r3, #1
  400528:	d0f6      	beq.n	400518 <main+0x188>
  40052a:	2b00      	cmp	r3, #0
  40052c:	d0b4      	beq.n	400498 <main+0x108>
  40052e:	2b02      	cmp	r3, #2
  400530:	d1f9      	bne.n	400526 <main+0x196>
  400532:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400536:	637b      	str	r3, [r7, #52]	; 0x34
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400538:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
				
				break;
			case SL_WRITING:
				ioport_set_pin_level(LED2_GPIO, 0);
				ch_select = ioport_get_pin_level(ch_select_pin);
  40053a:	f3c3 7340 	ubfx	r3, r3, #29, #1
  40053e:	4a54      	ldr	r2, [pc, #336]	; (400690 <main+0x300>)
  400540:	7013      	strb	r3, [r2, #0]
				if(channel_to_write != ch_select)
  400542:	4b54      	ldr	r3, [pc, #336]	; (400694 <main+0x304>)
  400544:	781b      	ldrb	r3, [r3, #0]
  400546:	7812      	ldrb	r2, [r2, #0]
  400548:	b2db      	uxtb	r3, r3
  40054a:	4293      	cmp	r3, r2
  40054c:	d00c      	beq.n	400568 <main+0x1d8>
				{
					channel_to_write = ch_select;
  40054e:	4b50      	ldr	r3, [pc, #320]	; (400690 <main+0x300>)
  400550:	781b      	ldrb	r3, [r3, #0]
  400552:	b2db      	uxtb	r3, r3
  400554:	4a4f      	ldr	r2, [pc, #316]	; (400694 <main+0x304>)
  400556:	7013      	strb	r3, [r2, #0]
					i = 0;
  400558:	2300      	movs	r3, #0
  40055a:	4a4f      	ldr	r2, [pc, #316]	; (400698 <main+0x308>)
  40055c:	6013      	str	r3, [r2, #0]
					ch_written = false;
  40055e:	4a4f      	ldr	r2, [pc, #316]	; (40069c <main+0x30c>)
  400560:	7013      	strb	r3, [r2, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400562:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400566:	6373      	str	r3, [r6, #52]	; 0x34
					ioport_set_pin_level(is_written_pin, 0);
				}
				
				if(ch_written)
  400568:	4b4c      	ldr	r3, [pc, #304]	; (40069c <main+0x30c>)
  40056a:	781b      	ldrb	r3, [r3, #0]
  40056c:	b113      	cbz	r3, 400574 <main+0x1e4>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40056e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400572:	6333      	str	r3, [r6, #48]	; 0x30
				{
					ioport_set_pin_level(is_written_pin, 1);
				}
				
				restart();
  400574:	4b45      	ldr	r3, [pc, #276]	; (40068c <main+0x2fc>)
  400576:	4798      	blx	r3
				break;
  400578:	e7d4      	b.n	400524 <main+0x194>
  40057a:	f04f 0a01 	mov.w	sl, #1
  40057e:	f8cb a030 	str.w	sl, [fp, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400582:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400586:	637b      	str	r3, [r7, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40058c:	6333      	str	r3, [r6, #48]	; 0x30
					tc_stop(TC0, 0);
  40058e:	2100      	movs	r1, #0
  400590:	4836      	ldr	r0, [pc, #216]	; (40066c <main+0x2dc>)
  400592:	4b43      	ldr	r3, [pc, #268]	; (4006a0 <main+0x310>)
  400594:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400596:	4b39      	ldr	r3, [pc, #228]	; (40067c <main+0x2ec>)
  400598:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40059c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4005a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005a4:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4005ac:	601a      	str	r2, [r3, #0]
	spi_enable_clock(SPI_SLAVE_BASE);
  4005ae:	4c3d      	ldr	r4, [pc, #244]	; (4006a4 <main+0x314>)
  4005b0:	4620      	mov	r0, r4
  4005b2:	4b3d      	ldr	r3, [pc, #244]	; (4006a8 <main+0x318>)
  4005b4:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4005b6:	f04f 0802 	mov.w	r8, #2
  4005ba:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4005be:	2380      	movs	r3, #128	; 0x80
  4005c0:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  4005c2:	6863      	ldr	r3, [r4, #4]
  4005c4:	f023 0301 	bic.w	r3, r3, #1
  4005c8:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4005ca:	6863      	ldr	r3, [r4, #4]
  4005cc:	f043 0310 	orr.w	r3, r3, #16
  4005d0:	6063      	str	r3, [r4, #4]
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
  4005d2:	210e      	movs	r1, #14
  4005d4:	4620      	mov	r0, r4
  4005d6:	4b35      	ldr	r3, [pc, #212]	; (4006ac <main+0x31c>)
  4005d8:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  4005da:	2200      	movs	r2, #0
  4005dc:	4611      	mov	r1, r2
  4005de:	4620      	mov	r0, r4
  4005e0:	4b33      	ldr	r3, [pc, #204]	; (4006b0 <main+0x320>)
  4005e2:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  4005e4:	2200      	movs	r2, #0
  4005e6:	4611      	mov	r1, r2
  4005e8:	4620      	mov	r0, r4
  4005ea:	4b32      	ldr	r3, [pc, #200]	; (4006b4 <main+0x324>)
  4005ec:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, bits_per_transfer);
  4005ee:	2280      	movs	r2, #128	; 0x80
  4005f0:	2100      	movs	r1, #0
  4005f2:	4620      	mov	r0, r4
  4005f4:	4b30      	ldr	r3, [pc, #192]	; (4006b8 <main+0x328>)
  4005f6:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  4005f8:	f8c4 8014 	str.w	r8, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4005fc:	f8c4 a000 	str.w	sl, [r4]
					state = SL_WRITING;
  400600:	f885 8000 	strb.w	r8, [r5]
  400604:	e78c      	b.n	400520 <main+0x190>
  400606:	bf00      	nop
  400608:	004006c1 	.word	0x004006c1
  40060c:	004007b1 	.word	0x004007b1
  400610:	00400da1 	.word	0x00400da1
  400614:	400e0600 	.word	0x400e0600
  400618:	2000095c 	.word	0x2000095c
  40061c:	00400239 	.word	0x00400239
  400620:	20000958 	.word	0x20000958
  400624:	004001b1 	.word	0x004001b1
  400628:	20000954 	.word	0x20000954
  40062c:	07270e00 	.word	0x07270e00
  400630:	00400f51 	.word	0x00400f51
  400634:	20000008 	.word	0x20000008
  400638:	00401359 	.word	0x00401359
  40063c:	400b0000 	.word	0x400b0000
  400640:	00400b81 	.word	0x00400b81
  400644:	00400a49 	.word	0x00400a49
  400648:	00400a85 	.word	0x00400a85
  40064c:	00400a79 	.word	0x00400a79
  400650:	00400a19 	.word	0x00400a19
  400654:	400e1200 	.word	0x400e1200
  400658:	2000089c 	.word	0x2000089c
  40065c:	400e1400 	.word	0x400e1400
  400660:	20000868 	.word	0x20000868
  400664:	000186a0 	.word	0x000186a0
  400668:	00400ee1 	.word	0x00400ee1
  40066c:	40090000 	.word	0x40090000
  400670:	00400e9f 	.word	0x00400e9f
  400674:	0a7c5ac5 	.word	0x0a7c5ac5
  400678:	00400ec9 	.word	0x00400ec9
  40067c:	e000e100 	.word	0xe000e100
  400680:	00400ed1 	.word	0x00400ed1
  400684:	00400eb9 	.word	0x00400eb9
  400688:	20000869 	.word	0x20000869
  40068c:	00400165 	.word	0x00400165
  400690:	20000000 	.word	0x20000000
  400694:	20000001 	.word	0x20000001
  400698:	20000898 	.word	0x20000898
  40069c:	2000086a 	.word	0x2000086a
  4006a0:	00400ec1 	.word	0x00400ec1
  4006a4:	40088000 	.word	0x40088000
  4006a8:	00400df5 	.word	0x00400df5
  4006ac:	00400e05 	.word	0x00400e05
  4006b0:	00400e4f 	.word	0x00400e4f
  4006b4:	00400e6d 	.word	0x00400e6d
  4006b8:	00400e8b 	.word	0x00400e8b
  4006bc:	400e0e00 	.word	0x400e0e00

004006c0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4006c0:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4006c2:	480e      	ldr	r0, [pc, #56]	; (4006fc <sysclk_init+0x3c>)
  4006c4:	4b0e      	ldr	r3, [pc, #56]	; (400700 <sysclk_init+0x40>)
  4006c6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4006c8:	213e      	movs	r1, #62	; 0x3e
  4006ca:	2000      	movs	r0, #0
  4006cc:	4b0d      	ldr	r3, [pc, #52]	; (400704 <sysclk_init+0x44>)
  4006ce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4006d0:	4c0d      	ldr	r4, [pc, #52]	; (400708 <sysclk_init+0x48>)
  4006d2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4006d4:	2800      	cmp	r0, #0
  4006d6:	d0fc      	beq.n	4006d2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4006d8:	4b0c      	ldr	r3, [pc, #48]	; (40070c <sysclk_init+0x4c>)
  4006da:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4006dc:	4a0c      	ldr	r2, [pc, #48]	; (400710 <sysclk_init+0x50>)
  4006de:	4b0d      	ldr	r3, [pc, #52]	; (400714 <sysclk_init+0x54>)
  4006e0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4006e2:	4c0d      	ldr	r4, [pc, #52]	; (400718 <sysclk_init+0x58>)
  4006e4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4006e6:	2800      	cmp	r0, #0
  4006e8:	d0fc      	beq.n	4006e4 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4006ea:	2010      	movs	r0, #16
  4006ec:	4b0b      	ldr	r3, [pc, #44]	; (40071c <sysclk_init+0x5c>)
  4006ee:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4006f0:	4b0b      	ldr	r3, [pc, #44]	; (400720 <sysclk_init+0x60>)
  4006f2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4006f4:	4801      	ldr	r0, [pc, #4]	; (4006fc <sysclk_init+0x3c>)
  4006f6:	4b02      	ldr	r3, [pc, #8]	; (400700 <sysclk_init+0x40>)
  4006f8:	4798      	blx	r3
  4006fa:	bd10      	pop	{r4, pc}
  4006fc:	07270e00 	.word	0x07270e00
  400700:	004011ad 	.word	0x004011ad
  400704:	00400d1d 	.word	0x00400d1d
  400708:	00400d71 	.word	0x00400d71
  40070c:	00400d81 	.word	0x00400d81
  400710:	20133f01 	.word	0x20133f01
  400714:	400e0400 	.word	0x400e0400
  400718:	00400d91 	.word	0x00400d91
  40071c:	00400cb9 	.word	0x00400cb9
  400720:	004010a1 	.word	0x004010a1

00400724 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400728:	b980      	cbnz	r0, 40074c <_read+0x28>
  40072a:	460c      	mov	r4, r1
  40072c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40072e:	2a00      	cmp	r2, #0
  400730:	dd0f      	ble.n	400752 <_read+0x2e>
  400732:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400734:	4e08      	ldr	r6, [pc, #32]	; (400758 <_read+0x34>)
  400736:	4d09      	ldr	r5, [pc, #36]	; (40075c <_read+0x38>)
  400738:	6830      	ldr	r0, [r6, #0]
  40073a:	4621      	mov	r1, r4
  40073c:	682b      	ldr	r3, [r5, #0]
  40073e:	4798      	blx	r3
		ptr++;
  400740:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400742:	42bc      	cmp	r4, r7
  400744:	d1f8      	bne.n	400738 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400746:	4640      	mov	r0, r8
  400748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40074c:	f04f 38ff 	mov.w	r8, #4294967295
  400750:	e7f9      	b.n	400746 <_read+0x22>
	for (; len > 0; --len) {
  400752:	4680      	mov	r8, r0
  400754:	e7f7      	b.n	400746 <_read+0x22>
  400756:	bf00      	nop
  400758:	2000095c 	.word	0x2000095c
  40075c:	20000954 	.word	0x20000954

00400760 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400760:	3801      	subs	r0, #1
  400762:	2802      	cmp	r0, #2
  400764:	d815      	bhi.n	400792 <_write+0x32>
{
  400766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40076a:	460e      	mov	r6, r1
  40076c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40076e:	b19a      	cbz	r2, 400798 <_write+0x38>
  400770:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400772:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4007ac <_write+0x4c>
  400776:	4f0c      	ldr	r7, [pc, #48]	; (4007a8 <_write+0x48>)
  400778:	f8d8 0000 	ldr.w	r0, [r8]
  40077c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400780:	683b      	ldr	r3, [r7, #0]
  400782:	4798      	blx	r3
  400784:	2800      	cmp	r0, #0
  400786:	db0a      	blt.n	40079e <_write+0x3e>
  400788:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40078a:	3c01      	subs	r4, #1
  40078c:	d1f4      	bne.n	400778 <_write+0x18>
  40078e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400792:	f04f 30ff 	mov.w	r0, #4294967295
  400796:	4770      	bx	lr
	for (; len != 0; --len) {
  400798:	4610      	mov	r0, r2
  40079a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40079e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4007a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007a6:	bf00      	nop
  4007a8:	20000958 	.word	0x20000958
  4007ac:	2000095c 	.word	0x2000095c

004007b0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4007b0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4007b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007b6:	4b6d      	ldr	r3, [pc, #436]	; (40096c <board_init+0x1bc>)
  4007b8:	605a      	str	r2, [r3, #4]
  4007ba:	2009      	movs	r0, #9
  4007bc:	4c6c      	ldr	r4, [pc, #432]	; (400970 <board_init+0x1c0>)
  4007be:	47a0      	blx	r4
  4007c0:	200a      	movs	r0, #10
  4007c2:	47a0      	blx	r4
  4007c4:	200b      	movs	r0, #11
  4007c6:	47a0      	blx	r4
  4007c8:	200c      	movs	r0, #12
  4007ca:	47a0      	blx	r4
  4007cc:	200d      	movs	r0, #13
  4007ce:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007d0:	4b68      	ldr	r3, [pc, #416]	; (400974 <board_init+0x1c4>)
  4007d2:	2201      	movs	r2, #1
  4007d4:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007da:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007dc:	4966      	ldr	r1, [pc, #408]	; (400978 <board_init+0x1c8>)
  4007de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4007e2:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007e4:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007e8:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4007ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4007ee:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007f0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007f4:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4007f6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4007fa:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4007fc:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400800:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400802:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400806:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400808:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40080a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40080e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400810:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400814:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400816:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400818:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  40081c:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40081e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400822:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400826:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40082a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40082c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400830:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400836:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400838:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40083a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40083e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400840:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400844:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400846:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400848:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  40084c:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40084e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400852:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  400856:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40085a:	2202      	movs	r2, #2
  40085c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40085e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400862:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400868:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40086a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40086c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400870:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400872:	f021 0102 	bic.w	r1, r1, #2
  400876:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400878:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40087a:	f021 0102 	bic.w	r1, r1, #2
  40087e:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400880:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400884:	2204      	movs	r2, #4
  400886:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400888:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40088c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40088e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400892:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400894:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40089a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40089c:	f021 0104 	bic.w	r1, r1, #4
  4008a0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008a2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008a4:	f021 0104 	bic.w	r1, r1, #4
  4008a8:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4008aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4008ae:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4008b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4008b6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4008ba:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4008bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008c0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4008c2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4008c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4008c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008ca:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4008ce:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008d0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008d2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  4008d6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4008d8:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4008da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4008de:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4008e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008e4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4008e6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4008e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4008ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008ee:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4008f2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008f4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008f6:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4008fa:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4008fc:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  4008fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400902:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400904:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400908:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40090a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40090c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400910:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400912:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400916:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400918:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40091a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40091e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400920:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400926:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400928:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40092c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40092e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400934:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400936:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  40093a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40093c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40093e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400942:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400944:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400946:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40094a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40094c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400950:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400952:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400958:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40095a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40095e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400960:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400962:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400966:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400968:	605a      	str	r2, [r3, #4]
  40096a:	bd10      	pop	{r4, pc}
  40096c:	400e1850 	.word	0x400e1850
  400970:	00400da1 	.word	0x00400da1
  400974:	400e0e00 	.word	0x400e0e00
  400978:	400e1400 	.word	0x400e1400

0040097c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40097c:	b570      	push	{r4, r5, r6, lr}
  40097e:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400980:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400982:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400984:	4013      	ands	r3, r2
  400986:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400988:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40098a:	4d21      	ldr	r5, [pc, #132]	; (400a10 <afec_process_callback+0x94>)
  40098c:	42a8      	cmp	r0, r5
  40098e:	bf14      	ite	ne
  400990:	2500      	movne	r5, #0
  400992:	2501      	moveq	r5, #1
  400994:	006e      	lsls	r6, r5, #1
  400996:	442e      	add	r6, r5
  400998:	e00b      	b.n	4009b2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40099a:	2c14      	cmp	r4, #20
  40099c:	d824      	bhi.n	4009e8 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40099e:	9a01      	ldr	r2, [sp, #4]
  4009a0:	f104 0108 	add.w	r1, r4, #8
  4009a4:	2301      	movs	r3, #1
  4009a6:	408b      	lsls	r3, r1
  4009a8:	4213      	tst	r3, r2
  4009aa:	d113      	bne.n	4009d4 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4009ac:	3401      	adds	r4, #1
  4009ae:	2c17      	cmp	r4, #23
  4009b0:	d02b      	beq.n	400a0a <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4009b2:	2c0f      	cmp	r4, #15
  4009b4:	d8f1      	bhi.n	40099a <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4009b6:	9a01      	ldr	r2, [sp, #4]
  4009b8:	2301      	movs	r3, #1
  4009ba:	40a3      	lsls	r3, r4
  4009bc:	4213      	tst	r3, r2
  4009be:	d0f5      	beq.n	4009ac <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4009c0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4009c4:	4423      	add	r3, r4
  4009c6:	4a13      	ldr	r2, [pc, #76]	; (400a14 <afec_process_callback+0x98>)
  4009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4009cc:	2b00      	cmp	r3, #0
  4009ce:	d0ed      	beq.n	4009ac <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4009d0:	4798      	blx	r3
  4009d2:	e7eb      	b.n	4009ac <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4009d4:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4009d8:	4423      	add	r3, r4
  4009da:	4a0e      	ldr	r2, [pc, #56]	; (400a14 <afec_process_callback+0x98>)
  4009dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4009e0:	2b00      	cmp	r3, #0
  4009e2:	d0e3      	beq.n	4009ac <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4009e4:	4798      	blx	r3
  4009e6:	e7e1      	b.n	4009ac <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4009e8:	9a01      	ldr	r2, [sp, #4]
  4009ea:	f104 0109 	add.w	r1, r4, #9
  4009ee:	2301      	movs	r3, #1
  4009f0:	408b      	lsls	r3, r1
  4009f2:	4213      	tst	r3, r2
  4009f4:	d0da      	beq.n	4009ac <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4009f6:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4009fa:	4423      	add	r3, r4
  4009fc:	4a05      	ldr	r2, [pc, #20]	; (400a14 <afec_process_callback+0x98>)
  4009fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400a02:	2b00      	cmp	r3, #0
  400a04:	d0d2      	beq.n	4009ac <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400a06:	4798      	blx	r3
  400a08:	e7d0      	b.n	4009ac <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400a0a:	b002      	add	sp, #8
  400a0c:	bd70      	pop	{r4, r5, r6, pc}
  400a0e:	bf00      	nop
  400a10:	400b4000 	.word	0x400b4000
  400a14:	20000960 	.word	0x20000960

00400a18 <afec_ch_set_config>:
{
  400a18:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400a1a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400a1c:	2301      	movs	r3, #1
  400a1e:	408b      	lsls	r3, r1
  400a20:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400a24:	7815      	ldrb	r5, [r2, #0]
  400a26:	2d00      	cmp	r5, #0
  400a28:	bf08      	it	eq
  400a2a:	2300      	moveq	r3, #0
  400a2c:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400a2e:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400a30:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400a32:	004b      	lsls	r3, r1, #1
  400a34:	2103      	movs	r1, #3
  400a36:	4099      	lsls	r1, r3
  400a38:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400a3c:	7851      	ldrb	r1, [r2, #1]
  400a3e:	4099      	lsls	r1, r3
  400a40:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400a42:	6541      	str	r1, [r0, #84]	; 0x54
}
  400a44:	bc30      	pop	{r4, r5}
  400a46:	4770      	bx	lr

00400a48 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400a48:	2200      	movs	r2, #0
  400a4a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400a4c:	4b08      	ldr	r3, [pc, #32]	; (400a70 <afec_get_config_defaults+0x28>)
  400a4e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400a50:	4b08      	ldr	r3, [pc, #32]	; (400a74 <afec_get_config_defaults+0x2c>)
  400a52:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400a54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400a58:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400a5a:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400a5c:	2302      	movs	r3, #2
  400a5e:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400a60:	2301      	movs	r3, #1
  400a62:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400a64:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400a66:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400a68:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400a6a:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400a6c:	7683      	strb	r3, [r0, #26]
  400a6e:	4770      	bx	lr
  400a70:	07270e00 	.word	0x07270e00
  400a74:	005b8d80 	.word	0x005b8d80

00400a78 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400a78:	2300      	movs	r3, #0
  400a7a:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400a7c:	2301      	movs	r3, #1
  400a7e:	7043      	strb	r3, [r0, #1]
  400a80:	4770      	bx	lr
	...

00400a84 <afec_init>:
	return afec->AFEC_ISR;
  400a84:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400a86:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a8a:	d001      	beq.n	400a90 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400a8c:	2019      	movs	r0, #25
  400a8e:	4770      	bx	lr
{
  400a90:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400a92:	2301      	movs	r3, #1
  400a94:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400a96:	7dcb      	ldrb	r3, [r1, #23]
  400a98:	2b00      	cmp	r3, #0
  400a9a:	bf14      	ite	ne
  400a9c:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400aa0:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400aa2:	7d8b      	ldrb	r3, [r1, #22]
  400aa4:	2b00      	cmp	r3, #0
  400aa6:	bf14      	ite	ne
  400aa8:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  400aac:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  400aae:	7d0b      	ldrb	r3, [r1, #20]
  400ab0:	061b      	lsls	r3, r3, #24
  400ab2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ab6:	690a      	ldr	r2, [r1, #16]
  400ab8:	68ce      	ldr	r6, [r1, #12]
  400aba:	4332      	orrs	r2, r6
  400abc:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  400abe:	7d4a      	ldrb	r2, [r1, #21]
  400ac0:	0712      	lsls	r2, r2, #28
  400ac2:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ac6:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  400ac8:	688a      	ldr	r2, [r1, #8]
  400aca:	0056      	lsls	r6, r2, #1
  400acc:	684a      	ldr	r2, [r1, #4]
  400ace:	fbb2 f2f6 	udiv	r2, r2, r6
  400ad2:	3a01      	subs	r2, #1
  400ad4:	0212      	lsls	r2, r2, #8
  400ad6:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ad8:	4313      	orrs	r3, r2
  400ada:	432b      	orrs	r3, r5
  400adc:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  400ade:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400ae0:	7e0b      	ldrb	r3, [r1, #24]
  400ae2:	2b00      	cmp	r3, #0
  400ae4:	bf14      	ite	ne
  400ae6:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400aea:	2300      	moveq	r3, #0
  400aec:	680a      	ldr	r2, [r1, #0]
  400aee:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400af0:	7e4a      	ldrb	r2, [r1, #25]
  400af2:	2a00      	cmp	r2, #0
  400af4:	bf14      	ite	ne
  400af6:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400afa:	2200      	moveq	r2, #0
			(config->resolution) |
  400afc:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400afe:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  400b00:	7e8b      	ldrb	r3, [r1, #26]
  400b02:	021b      	lsls	r3, r3, #8
  400b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400b08:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400b0c:	4b0e      	ldr	r3, [pc, #56]	; (400b48 <afec_init+0xc4>)
  400b0e:	4298      	cmp	r0, r3
  400b10:	d005      	beq.n	400b1e <afec_init+0x9a>
	if(afec == AFEC1) {
  400b12:	4b0e      	ldr	r3, [pc, #56]	; (400b4c <afec_init+0xc8>)
  400b14:	4298      	cmp	r0, r3
  400b16:	d00c      	beq.n	400b32 <afec_init+0xae>
	return STATUS_OK;
  400b18:	2000      	movs	r0, #0
}
  400b1a:	bc70      	pop	{r4, r5, r6}
  400b1c:	4770      	bx	lr
  400b1e:	4b0c      	ldr	r3, [pc, #48]	; (400b50 <afec_init+0xcc>)
  400b20:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400b24:	2200      	movs	r2, #0
  400b26:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b2a:	428b      	cmp	r3, r1
  400b2c:	d1fb      	bne.n	400b26 <afec_init+0xa2>
	return STATUS_OK;
  400b2e:	2000      	movs	r0, #0
  400b30:	e7f3      	b.n	400b1a <afec_init+0x96>
  400b32:	4b08      	ldr	r3, [pc, #32]	; (400b54 <afec_init+0xd0>)
  400b34:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400b38:	2200      	movs	r2, #0
  400b3a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b3e:	428b      	cmp	r3, r1
  400b40:	d1fb      	bne.n	400b3a <afec_init+0xb6>
	return STATUS_OK;
  400b42:	2000      	movs	r0, #0
  400b44:	e7e9      	b.n	400b1a <afec_init+0x96>
  400b46:	bf00      	nop
  400b48:	400b0000 	.word	0x400b0000
  400b4c:	400b4000 	.word	0x400b4000
  400b50:	2000095c 	.word	0x2000095c
  400b54:	200009b8 	.word	0x200009b8

00400b58 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400b58:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400b5a:	4802      	ldr	r0, [pc, #8]	; (400b64 <AFEC0_Handler+0xc>)
  400b5c:	4b02      	ldr	r3, [pc, #8]	; (400b68 <AFEC0_Handler+0x10>)
  400b5e:	4798      	blx	r3
  400b60:	bd08      	pop	{r3, pc}
  400b62:	bf00      	nop
  400b64:	400b0000 	.word	0x400b0000
  400b68:	0040097d 	.word	0x0040097d

00400b6c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400b6c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400b6e:	4802      	ldr	r0, [pc, #8]	; (400b78 <AFEC1_Handler+0xc>)
  400b70:	4b02      	ldr	r3, [pc, #8]	; (400b7c <AFEC1_Handler+0x10>)
  400b72:	4798      	blx	r3
  400b74:	bd08      	pop	{r3, pc}
  400b76:	bf00      	nop
  400b78:	400b4000 	.word	0x400b4000
  400b7c:	0040097d 	.word	0x0040097d

00400b80 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400b80:	b500      	push	{lr}
  400b82:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400b84:	4b13      	ldr	r3, [pc, #76]	; (400bd4 <afec_enable+0x54>)
  400b86:	4298      	cmp	r0, r3
  400b88:	bf0c      	ite	eq
  400b8a:	201f      	moveq	r0, #31
  400b8c:	201e      	movne	r0, #30
  400b8e:	4b12      	ldr	r3, [pc, #72]	; (400bd8 <afec_enable+0x58>)
  400b90:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400b92:	4b12      	ldr	r3, [pc, #72]	; (400bdc <afec_enable+0x5c>)
  400b94:	789b      	ldrb	r3, [r3, #2]
  400b96:	2bff      	cmp	r3, #255	; 0xff
  400b98:	d01a      	beq.n	400bd0 <afec_enable+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400b9a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400b9e:	fab3 f383 	clz	r3, r3
  400ba2:	095b      	lsrs	r3, r3, #5
  400ba4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400ba6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400ba8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400bac:	2200      	movs	r2, #0
  400bae:	4b0c      	ldr	r3, [pc, #48]	; (400be0 <afec_enable+0x60>)
  400bb0:	701a      	strb	r2, [r3, #0]
	return flags;
  400bb2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400bb4:	4a09      	ldr	r2, [pc, #36]	; (400bdc <afec_enable+0x5c>)
  400bb6:	7893      	ldrb	r3, [r2, #2]
  400bb8:	3301      	adds	r3, #1
  400bba:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400bbc:	b129      	cbz	r1, 400bca <afec_enable+0x4a>
		cpu_irq_enable();
  400bbe:	2201      	movs	r2, #1
  400bc0:	4b07      	ldr	r3, [pc, #28]	; (400be0 <afec_enable+0x60>)
  400bc2:	701a      	strb	r2, [r3, #0]
  400bc4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400bc8:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400bca:	b003      	add	sp, #12
  400bcc:	f85d fb04 	ldr.w	pc, [sp], #4
  400bd0:	e7fe      	b.n	400bd0 <afec_enable+0x50>
  400bd2:	bf00      	nop
  400bd4:	400b4000 	.word	0x400b4000
  400bd8:	00400da1 	.word	0x00400da1
  400bdc:	2000094c 	.word	0x2000094c
  400be0:	20000002 	.word	0x20000002

00400be4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400be4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400be6:	4770      	bx	lr

00400be8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400be8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400bea:	4770      	bx	lr

00400bec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400bf0:	4681      	mov	r9, r0
  400bf2:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400bf4:	4b12      	ldr	r3, [pc, #72]	; (400c40 <pio_handler_process+0x54>)
  400bf6:	4798      	blx	r3
  400bf8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400bfa:	4648      	mov	r0, r9
  400bfc:	4b11      	ldr	r3, [pc, #68]	; (400c44 <pio_handler_process+0x58>)
  400bfe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c00:	4005      	ands	r5, r0
  400c02:	d013      	beq.n	400c2c <pio_handler_process+0x40>
  400c04:	4c10      	ldr	r4, [pc, #64]	; (400c48 <pio_handler_process+0x5c>)
  400c06:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c0a:	e003      	b.n	400c14 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c0c:	42b4      	cmp	r4, r6
  400c0e:	d00d      	beq.n	400c2c <pio_handler_process+0x40>
  400c10:	3410      	adds	r4, #16
		while (status != 0) {
  400c12:	b15d      	cbz	r5, 400c2c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c14:	6820      	ldr	r0, [r4, #0]
  400c16:	42b8      	cmp	r0, r7
  400c18:	d1f8      	bne.n	400c0c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c1a:	6861      	ldr	r1, [r4, #4]
  400c1c:	4229      	tst	r1, r5
  400c1e:	d0f5      	beq.n	400c0c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c20:	68e3      	ldr	r3, [r4, #12]
  400c22:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400c24:	6863      	ldr	r3, [r4, #4]
  400c26:	ea25 0503 	bic.w	r5, r5, r3
  400c2a:	e7ef      	b.n	400c0c <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400c2c:	4b07      	ldr	r3, [pc, #28]	; (400c4c <pio_handler_process+0x60>)
  400c2e:	681b      	ldr	r3, [r3, #0]
  400c30:	b123      	cbz	r3, 400c3c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400c32:	4b07      	ldr	r3, [pc, #28]	; (400c50 <pio_handler_process+0x64>)
  400c34:	681b      	ldr	r3, [r3, #0]
  400c36:	b10b      	cbz	r3, 400c3c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400c38:	4648      	mov	r0, r9
  400c3a:	4798      	blx	r3
  400c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c40:	00400be5 	.word	0x00400be5
  400c44:	00400be9 	.word	0x00400be9
  400c48:	200008a0 	.word	0x200008a0
  400c4c:	20000a18 	.word	0x20000a18
  400c50:	20000910 	.word	0x20000910

00400c54 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c54:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400c56:	2109      	movs	r1, #9
  400c58:	4801      	ldr	r0, [pc, #4]	; (400c60 <PIOA_Handler+0xc>)
  400c5a:	4b02      	ldr	r3, [pc, #8]	; (400c64 <PIOA_Handler+0x10>)
  400c5c:	4798      	blx	r3
  400c5e:	bd08      	pop	{r3, pc}
  400c60:	400e0e00 	.word	0x400e0e00
  400c64:	00400bed 	.word	0x00400bed

00400c68 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400c68:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400c6a:	210a      	movs	r1, #10
  400c6c:	4801      	ldr	r0, [pc, #4]	; (400c74 <PIOB_Handler+0xc>)
  400c6e:	4b02      	ldr	r3, [pc, #8]	; (400c78 <PIOB_Handler+0x10>)
  400c70:	4798      	blx	r3
  400c72:	bd08      	pop	{r3, pc}
  400c74:	400e1000 	.word	0x400e1000
  400c78:	00400bed 	.word	0x00400bed

00400c7c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400c7c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400c7e:	210b      	movs	r1, #11
  400c80:	4801      	ldr	r0, [pc, #4]	; (400c88 <PIOC_Handler+0xc>)
  400c82:	4b02      	ldr	r3, [pc, #8]	; (400c8c <PIOC_Handler+0x10>)
  400c84:	4798      	blx	r3
  400c86:	bd08      	pop	{r3, pc}
  400c88:	400e1200 	.word	0x400e1200
  400c8c:	00400bed 	.word	0x00400bed

00400c90 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400c90:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400c92:	210c      	movs	r1, #12
  400c94:	4801      	ldr	r0, [pc, #4]	; (400c9c <PIOD_Handler+0xc>)
  400c96:	4b02      	ldr	r3, [pc, #8]	; (400ca0 <PIOD_Handler+0x10>)
  400c98:	4798      	blx	r3
  400c9a:	bd08      	pop	{r3, pc}
  400c9c:	400e1400 	.word	0x400e1400
  400ca0:	00400bed 	.word	0x00400bed

00400ca4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ca4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400ca6:	210d      	movs	r1, #13
  400ca8:	4801      	ldr	r0, [pc, #4]	; (400cb0 <PIOE_Handler+0xc>)
  400caa:	4b02      	ldr	r3, [pc, #8]	; (400cb4 <PIOE_Handler+0x10>)
  400cac:	4798      	blx	r3
  400cae:	bd08      	pop	{r3, pc}
  400cb0:	400e1600 	.word	0x400e1600
  400cb4:	00400bed 	.word	0x00400bed

00400cb8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400cb8:	4a17      	ldr	r2, [pc, #92]	; (400d18 <pmc_switch_mck_to_pllack+0x60>)
  400cba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400cc0:	4318      	orrs	r0, r3
  400cc2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400cc4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400cc6:	f013 0f08 	tst.w	r3, #8
  400cca:	d10a      	bne.n	400ce2 <pmc_switch_mck_to_pllack+0x2a>
  400ccc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400cd0:	4911      	ldr	r1, [pc, #68]	; (400d18 <pmc_switch_mck_to_pllack+0x60>)
  400cd2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400cd4:	f012 0f08 	tst.w	r2, #8
  400cd8:	d103      	bne.n	400ce2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400cda:	3b01      	subs	r3, #1
  400cdc:	d1f9      	bne.n	400cd2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400cde:	2001      	movs	r0, #1
  400ce0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ce2:	4a0d      	ldr	r2, [pc, #52]	; (400d18 <pmc_switch_mck_to_pllack+0x60>)
  400ce4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ce6:	f023 0303 	bic.w	r3, r3, #3
  400cea:	f043 0302 	orr.w	r3, r3, #2
  400cee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400cf0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400cf2:	f013 0f08 	tst.w	r3, #8
  400cf6:	d10a      	bne.n	400d0e <pmc_switch_mck_to_pllack+0x56>
  400cf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400cfc:	4906      	ldr	r1, [pc, #24]	; (400d18 <pmc_switch_mck_to_pllack+0x60>)
  400cfe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d00:	f012 0f08 	tst.w	r2, #8
  400d04:	d105      	bne.n	400d12 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d06:	3b01      	subs	r3, #1
  400d08:	d1f9      	bne.n	400cfe <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400d0a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400d0c:	4770      	bx	lr
	return 0;
  400d0e:	2000      	movs	r0, #0
  400d10:	4770      	bx	lr
  400d12:	2000      	movs	r0, #0
  400d14:	4770      	bx	lr
  400d16:	bf00      	nop
  400d18:	400e0400 	.word	0x400e0400

00400d1c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400d1c:	b9c8      	cbnz	r0, 400d52 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d1e:	4a11      	ldr	r2, [pc, #68]	; (400d64 <pmc_switch_mainck_to_xtal+0x48>)
  400d20:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d22:	0209      	lsls	r1, r1, #8
  400d24:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d26:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400d2a:	f023 0303 	bic.w	r3, r3, #3
  400d2e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400d32:	f043 0301 	orr.w	r3, r3, #1
  400d36:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d38:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d3a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d3c:	f013 0f01 	tst.w	r3, #1
  400d40:	d0fb      	beq.n	400d3a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d42:	4a08      	ldr	r2, [pc, #32]	; (400d64 <pmc_switch_mainck_to_xtal+0x48>)
  400d44:	6a13      	ldr	r3, [r2, #32]
  400d46:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400d4e:	6213      	str	r3, [r2, #32]
  400d50:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d52:	4904      	ldr	r1, [pc, #16]	; (400d64 <pmc_switch_mainck_to_xtal+0x48>)
  400d54:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400d56:	4a04      	ldr	r2, [pc, #16]	; (400d68 <pmc_switch_mainck_to_xtal+0x4c>)
  400d58:	401a      	ands	r2, r3
  400d5a:	4b04      	ldr	r3, [pc, #16]	; (400d6c <pmc_switch_mainck_to_xtal+0x50>)
  400d5c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d5e:	620b      	str	r3, [r1, #32]
  400d60:	4770      	bx	lr
  400d62:	bf00      	nop
  400d64:	400e0400 	.word	0x400e0400
  400d68:	fec8fffc 	.word	0xfec8fffc
  400d6c:	01370002 	.word	0x01370002

00400d70 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400d70:	4b02      	ldr	r3, [pc, #8]	; (400d7c <pmc_osc_is_ready_mainck+0xc>)
  400d72:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400d74:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400d78:	4770      	bx	lr
  400d7a:	bf00      	nop
  400d7c:	400e0400 	.word	0x400e0400

00400d80 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400d80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400d84:	4b01      	ldr	r3, [pc, #4]	; (400d8c <pmc_disable_pllack+0xc>)
  400d86:	629a      	str	r2, [r3, #40]	; 0x28
  400d88:	4770      	bx	lr
  400d8a:	bf00      	nop
  400d8c:	400e0400 	.word	0x400e0400

00400d90 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400d90:	4b02      	ldr	r3, [pc, #8]	; (400d9c <pmc_is_locked_pllack+0xc>)
  400d92:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400d94:	f000 0002 	and.w	r0, r0, #2
  400d98:	4770      	bx	lr
  400d9a:	bf00      	nop
  400d9c:	400e0400 	.word	0x400e0400

00400da0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400da0:	282f      	cmp	r0, #47	; 0x2f
  400da2:	d81e      	bhi.n	400de2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400da4:	281f      	cmp	r0, #31
  400da6:	d80c      	bhi.n	400dc2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400da8:	4b11      	ldr	r3, [pc, #68]	; (400df0 <pmc_enable_periph_clk+0x50>)
  400daa:	699a      	ldr	r2, [r3, #24]
  400dac:	2301      	movs	r3, #1
  400dae:	4083      	lsls	r3, r0
  400db0:	4393      	bics	r3, r2
  400db2:	d018      	beq.n	400de6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400db4:	2301      	movs	r3, #1
  400db6:	fa03 f000 	lsl.w	r0, r3, r0
  400dba:	4b0d      	ldr	r3, [pc, #52]	; (400df0 <pmc_enable_periph_clk+0x50>)
  400dbc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400dbe:	2000      	movs	r0, #0
  400dc0:	4770      	bx	lr
		ul_id -= 32;
  400dc2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400dc4:	4b0a      	ldr	r3, [pc, #40]	; (400df0 <pmc_enable_periph_clk+0x50>)
  400dc6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400dca:	2301      	movs	r3, #1
  400dcc:	4083      	lsls	r3, r0
  400dce:	4393      	bics	r3, r2
  400dd0:	d00b      	beq.n	400dea <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400dd2:	2301      	movs	r3, #1
  400dd4:	fa03 f000 	lsl.w	r0, r3, r0
  400dd8:	4b05      	ldr	r3, [pc, #20]	; (400df0 <pmc_enable_periph_clk+0x50>)
  400dda:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400dde:	2000      	movs	r0, #0
  400de0:	4770      	bx	lr
		return 1;
  400de2:	2001      	movs	r0, #1
  400de4:	4770      	bx	lr
	return 0;
  400de6:	2000      	movs	r0, #0
  400de8:	4770      	bx	lr
  400dea:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400dec:	4770      	bx	lr
  400dee:	bf00      	nop
  400df0:	400e0400 	.word	0x400e0400

00400df4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400df4:	b508      	push	{r3, lr}
  400df6:	2013      	movs	r0, #19
  400df8:	4b01      	ldr	r3, [pc, #4]	; (400e00 <spi_enable_clock+0xc>)
  400dfa:	4798      	blx	r3
  400dfc:	bd08      	pop	{r3, pc}
  400dfe:	bf00      	nop
  400e00:	00400da1 	.word	0x00400da1

00400e04 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400e04:	6843      	ldr	r3, [r0, #4]
  400e06:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400e0a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400e0c:	6843      	ldr	r3, [r0, #4]
  400e0e:	0409      	lsls	r1, r1, #16
  400e10:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400e14:	4319      	orrs	r1, r3
  400e16:	6041      	str	r1, [r0, #4]
  400e18:	4770      	bx	lr

00400e1a <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400e1a:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400e1c:	f643 2499 	movw	r4, #15001	; 0x3a99
  400e20:	6905      	ldr	r5, [r0, #16]
  400e22:	f015 0f02 	tst.w	r5, #2
  400e26:	d103      	bne.n	400e30 <spi_write+0x16>
		if (!timeout--) {
  400e28:	3c01      	subs	r4, #1
  400e2a:	d1f9      	bne.n	400e20 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400e2c:	2001      	movs	r0, #1
  400e2e:	e00c      	b.n	400e4a <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400e30:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400e32:	f014 0f02 	tst.w	r4, #2
  400e36:	d006      	beq.n	400e46 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400e38:	0412      	lsls	r2, r2, #16
  400e3a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400e3e:	4311      	orrs	r1, r2
		if (uc_last) {
  400e40:	b10b      	cbz	r3, 400e46 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400e42:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400e46:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400e48:	2000      	movs	r0, #0
}
  400e4a:	bc30      	pop	{r4, r5}
  400e4c:	4770      	bx	lr

00400e4e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400e4e:	b932      	cbnz	r2, 400e5e <spi_set_clock_polarity+0x10>
  400e50:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400e54:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400e56:	f023 0301 	bic.w	r3, r3, #1
  400e5a:	6303      	str	r3, [r0, #48]	; 0x30
  400e5c:	4770      	bx	lr
  400e5e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400e62:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400e64:	f043 0301 	orr.w	r3, r3, #1
  400e68:	6303      	str	r3, [r0, #48]	; 0x30
  400e6a:	4770      	bx	lr

00400e6c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400e6c:	b932      	cbnz	r2, 400e7c <spi_set_clock_phase+0x10>
  400e6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400e72:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400e74:	f023 0302 	bic.w	r3, r3, #2
  400e78:	6303      	str	r3, [r0, #48]	; 0x30
  400e7a:	4770      	bx	lr
  400e7c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400e80:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400e82:	f043 0302 	orr.w	r3, r3, #2
  400e86:	6303      	str	r3, [r0, #48]	; 0x30
  400e88:	4770      	bx	lr

00400e8a <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400e8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400e8e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400e94:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400e96:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400e98:	431a      	orrs	r2, r3
  400e9a:	630a      	str	r2, [r1, #48]	; 0x30
  400e9c:	4770      	bx	lr

00400e9e <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400e9e:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ea0:	0189      	lsls	r1, r1, #6
  400ea2:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400ea4:	2402      	movs	r4, #2
  400ea6:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400ea8:	f04f 31ff 	mov.w	r1, #4294967295
  400eac:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400eae:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400eb0:	605a      	str	r2, [r3, #4]
}
  400eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400eb6:	4770      	bx	lr

00400eb8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400eb8:	0189      	lsls	r1, r1, #6
  400eba:	2305      	movs	r3, #5
  400ebc:	5043      	str	r3, [r0, r1]
  400ebe:	4770      	bx	lr

00400ec0 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400ec0:	0189      	lsls	r1, r1, #6
  400ec2:	2302      	movs	r3, #2
  400ec4:	5043      	str	r3, [r0, r1]
  400ec6:	4770      	bx	lr

00400ec8 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400ec8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400ecc:	61ca      	str	r2, [r1, #28]
  400ece:	4770      	bx	lr

00400ed0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ed0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400ed4:	624a      	str	r2, [r1, #36]	; 0x24
  400ed6:	4770      	bx	lr

00400ed8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ed8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400edc:	6a08      	ldr	r0, [r1, #32]
}
  400ede:	4770      	bx	lr

00400ee0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400ee0:	b4f0      	push	{r4, r5, r6, r7}
  400ee2:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400ee4:	2402      	movs	r4, #2
  400ee6:	9401      	str	r4, [sp, #4]
  400ee8:	2408      	movs	r4, #8
  400eea:	9402      	str	r4, [sp, #8]
  400eec:	2420      	movs	r4, #32
  400eee:	9403      	str	r4, [sp, #12]
  400ef0:	2480      	movs	r4, #128	; 0x80
  400ef2:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400ef4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400ef6:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400ef8:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400efa:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400efe:	d814      	bhi.n	400f2a <tc_find_mck_divisor+0x4a>
  400f00:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400f02:	42a0      	cmp	r0, r4
  400f04:	d217      	bcs.n	400f36 <tc_find_mck_divisor+0x56>
  400f06:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400f08:	af01      	add	r7, sp, #4
  400f0a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400f0e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400f12:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400f14:	4284      	cmp	r4, r0
  400f16:	d30a      	bcc.n	400f2e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400f18:	4286      	cmp	r6, r0
  400f1a:	d90d      	bls.n	400f38 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400f1c:	3501      	adds	r5, #1
	for (ul_index = 0;
  400f1e:	2d05      	cmp	r5, #5
  400f20:	d1f3      	bne.n	400f0a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400f22:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400f24:	b006      	add	sp, #24
  400f26:	bcf0      	pop	{r4, r5, r6, r7}
  400f28:	4770      	bx	lr
			return 0;
  400f2a:	2000      	movs	r0, #0
  400f2c:	e7fa      	b.n	400f24 <tc_find_mck_divisor+0x44>
  400f2e:	2000      	movs	r0, #0
  400f30:	e7f8      	b.n	400f24 <tc_find_mck_divisor+0x44>
	return 1;
  400f32:	2001      	movs	r0, #1
  400f34:	e7f6      	b.n	400f24 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400f36:	2500      	movs	r5, #0
	if (p_uldiv) {
  400f38:	b12a      	cbz	r2, 400f46 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400f3a:	a906      	add	r1, sp, #24
  400f3c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400f40:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400f44:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400f46:	2b00      	cmp	r3, #0
  400f48:	d0f3      	beq.n	400f32 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400f4a:	601d      	str	r5, [r3, #0]
	return 1;
  400f4c:	2001      	movs	r0, #1
  400f4e:	e7e9      	b.n	400f24 <tc_find_mck_divisor+0x44>

00400f50 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400f50:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400f52:	23ac      	movs	r3, #172	; 0xac
  400f54:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400f56:	680b      	ldr	r3, [r1, #0]
  400f58:	684a      	ldr	r2, [r1, #4]
  400f5a:	fbb3 f3f2 	udiv	r3, r3, r2
  400f5e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400f60:	1e5c      	subs	r4, r3, #1
  400f62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400f66:	4294      	cmp	r4, r2
  400f68:	d80c      	bhi.n	400f84 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400f6a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400f6c:	688b      	ldr	r3, [r1, #8]
  400f6e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400f70:	f240 2302 	movw	r3, #514	; 0x202
  400f74:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400f78:	2350      	movs	r3, #80	; 0x50
  400f7a:	6003      	str	r3, [r0, #0]

	return 0;
  400f7c:	2000      	movs	r0, #0
}
  400f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f82:	4770      	bx	lr
		return 1;
  400f84:	2001      	movs	r0, #1
  400f86:	e7fa      	b.n	400f7e <uart_init+0x2e>

00400f88 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400f88:	6943      	ldr	r3, [r0, #20]
  400f8a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400f8e:	bf1a      	itte	ne
  400f90:	61c1      	strne	r1, [r0, #28]
	return 0;
  400f92:	2000      	movne	r0, #0
		return 1;
  400f94:	2001      	moveq	r0, #1
}
  400f96:	4770      	bx	lr

00400f98 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400f98:	6943      	ldr	r3, [r0, #20]
  400f9a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400f9e:	bf1d      	ittte	ne
  400fa0:	6983      	ldrne	r3, [r0, #24]
  400fa2:	700b      	strbne	r3, [r1, #0]
	return 0;
  400fa4:	2000      	movne	r0, #0
		return 1;
  400fa6:	2001      	moveq	r0, #1
}
  400fa8:	4770      	bx	lr

00400faa <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400faa:	6943      	ldr	r3, [r0, #20]
  400fac:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400fb0:	bf1d      	ittte	ne
  400fb2:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400fb6:	61c1      	strne	r1, [r0, #28]
	return 0;
  400fb8:	2000      	movne	r0, #0
		return 1;
  400fba:	2001      	moveq	r0, #1
}
  400fbc:	4770      	bx	lr

00400fbe <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400fbe:	6943      	ldr	r3, [r0, #20]
  400fc0:	f013 0f01 	tst.w	r3, #1
  400fc4:	d005      	beq.n	400fd2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400fc6:	6983      	ldr	r3, [r0, #24]
  400fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400fcc:	600b      	str	r3, [r1, #0]

	return 0;
  400fce:	2000      	movs	r0, #0
  400fd0:	4770      	bx	lr
		return 1;
  400fd2:	2001      	movs	r0, #1
}
  400fd4:	4770      	bx	lr

00400fd6 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400fd6:	e7fe      	b.n	400fd6 <Dummy_Handler>

00400fd8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400fd8:	b500      	push	{lr}
  400fda:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400fdc:	4b25      	ldr	r3, [pc, #148]	; (401074 <Reset_Handler+0x9c>)
  400fde:	4a26      	ldr	r2, [pc, #152]	; (401078 <Reset_Handler+0xa0>)
  400fe0:	429a      	cmp	r2, r3
  400fe2:	d010      	beq.n	401006 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400fe4:	4b25      	ldr	r3, [pc, #148]	; (40107c <Reset_Handler+0xa4>)
  400fe6:	4a23      	ldr	r2, [pc, #140]	; (401074 <Reset_Handler+0x9c>)
  400fe8:	429a      	cmp	r2, r3
  400fea:	d20c      	bcs.n	401006 <Reset_Handler+0x2e>
  400fec:	3b01      	subs	r3, #1
  400fee:	1a9b      	subs	r3, r3, r2
  400ff0:	f023 0303 	bic.w	r3, r3, #3
  400ff4:	3304      	adds	r3, #4
  400ff6:	4413      	add	r3, r2
  400ff8:	491f      	ldr	r1, [pc, #124]	; (401078 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400ffa:	f851 0b04 	ldr.w	r0, [r1], #4
  400ffe:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401002:	429a      	cmp	r2, r3
  401004:	d1f9      	bne.n	400ffa <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401006:	4b1e      	ldr	r3, [pc, #120]	; (401080 <Reset_Handler+0xa8>)
  401008:	4a1e      	ldr	r2, [pc, #120]	; (401084 <Reset_Handler+0xac>)
  40100a:	429a      	cmp	r2, r3
  40100c:	d20a      	bcs.n	401024 <Reset_Handler+0x4c>
  40100e:	3b01      	subs	r3, #1
  401010:	1a9b      	subs	r3, r3, r2
  401012:	f023 0303 	bic.w	r3, r3, #3
  401016:	3304      	adds	r3, #4
  401018:	4413      	add	r3, r2
		*pDest++ = 0;
  40101a:	2100      	movs	r1, #0
  40101c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401020:	4293      	cmp	r3, r2
  401022:	d1fb      	bne.n	40101c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401024:	4a18      	ldr	r2, [pc, #96]	; (401088 <Reset_Handler+0xb0>)
  401026:	4b19      	ldr	r3, [pc, #100]	; (40108c <Reset_Handler+0xb4>)
  401028:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40102c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40102e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401032:	fab3 f383 	clz	r3, r3
  401036:	095b      	lsrs	r3, r3, #5
  401038:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40103a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40103c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401040:	2200      	movs	r2, #0
  401042:	4b13      	ldr	r3, [pc, #76]	; (401090 <Reset_Handler+0xb8>)
  401044:	701a      	strb	r2, [r3, #0]
	return flags;
  401046:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401048:	4a12      	ldr	r2, [pc, #72]	; (401094 <Reset_Handler+0xbc>)
  40104a:	6813      	ldr	r3, [r2, #0]
  40104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401050:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401052:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401056:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40105a:	b129      	cbz	r1, 401068 <Reset_Handler+0x90>
		cpu_irq_enable();
  40105c:	2201      	movs	r2, #1
  40105e:	4b0c      	ldr	r3, [pc, #48]	; (401090 <Reset_Handler+0xb8>)
  401060:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  401062:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401066:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  401068:	4b0b      	ldr	r3, [pc, #44]	; (401098 <Reset_Handler+0xc0>)
  40106a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40106c:	4b0b      	ldr	r3, [pc, #44]	; (40109c <Reset_Handler+0xc4>)
  40106e:	4798      	blx	r3
  401070:	e7fe      	b.n	401070 <Reset_Handler+0x98>
  401072:	bf00      	nop
  401074:	20000000 	.word	0x20000000
  401078:	0040238c 	.word	0x0040238c
  40107c:	2000084c 	.word	0x2000084c
  401080:	20000a44 	.word	0x20000a44
  401084:	2000084c 	.word	0x2000084c
  401088:	e000ed00 	.word	0xe000ed00
  40108c:	00400000 	.word	0x00400000
  401090:	20000002 	.word	0x20000002
  401094:	e000ed88 	.word	0xe000ed88
  401098:	0040126d 	.word	0x0040126d
  40109c:	00400391 	.word	0x00400391

004010a0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4010a0:	4b3b      	ldr	r3, [pc, #236]	; (401190 <SystemCoreClockUpdate+0xf0>)
  4010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010a4:	f003 0303 	and.w	r3, r3, #3
  4010a8:	2b01      	cmp	r3, #1
  4010aa:	d01d      	beq.n	4010e8 <SystemCoreClockUpdate+0x48>
  4010ac:	b183      	cbz	r3, 4010d0 <SystemCoreClockUpdate+0x30>
  4010ae:	2b02      	cmp	r3, #2
  4010b0:	d036      	beq.n	401120 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4010b2:	4b37      	ldr	r3, [pc, #220]	; (401190 <SystemCoreClockUpdate+0xf0>)
  4010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010ba:	2b70      	cmp	r3, #112	; 0x70
  4010bc:	d05f      	beq.n	40117e <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4010be:	4b34      	ldr	r3, [pc, #208]	; (401190 <SystemCoreClockUpdate+0xf0>)
  4010c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4010c2:	4934      	ldr	r1, [pc, #208]	; (401194 <SystemCoreClockUpdate+0xf4>)
  4010c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4010c8:	680b      	ldr	r3, [r1, #0]
  4010ca:	40d3      	lsrs	r3, r2
  4010cc:	600b      	str	r3, [r1, #0]
  4010ce:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4010d0:	4b31      	ldr	r3, [pc, #196]	; (401198 <SystemCoreClockUpdate+0xf8>)
  4010d2:	695b      	ldr	r3, [r3, #20]
  4010d4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4010d8:	bf14      	ite	ne
  4010da:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4010de:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4010e2:	4b2c      	ldr	r3, [pc, #176]	; (401194 <SystemCoreClockUpdate+0xf4>)
  4010e4:	601a      	str	r2, [r3, #0]
  4010e6:	e7e4      	b.n	4010b2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4010e8:	4b29      	ldr	r3, [pc, #164]	; (401190 <SystemCoreClockUpdate+0xf0>)
  4010ea:	6a1b      	ldr	r3, [r3, #32]
  4010ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4010f0:	d003      	beq.n	4010fa <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4010f2:	4a2a      	ldr	r2, [pc, #168]	; (40119c <SystemCoreClockUpdate+0xfc>)
  4010f4:	4b27      	ldr	r3, [pc, #156]	; (401194 <SystemCoreClockUpdate+0xf4>)
  4010f6:	601a      	str	r2, [r3, #0]
  4010f8:	e7db      	b.n	4010b2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4010fa:	4a29      	ldr	r2, [pc, #164]	; (4011a0 <SystemCoreClockUpdate+0x100>)
  4010fc:	4b25      	ldr	r3, [pc, #148]	; (401194 <SystemCoreClockUpdate+0xf4>)
  4010fe:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401100:	4b23      	ldr	r3, [pc, #140]	; (401190 <SystemCoreClockUpdate+0xf0>)
  401102:	6a1b      	ldr	r3, [r3, #32]
  401104:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401108:	2b10      	cmp	r3, #16
  40110a:	d005      	beq.n	401118 <SystemCoreClockUpdate+0x78>
  40110c:	2b20      	cmp	r3, #32
  40110e:	d1d0      	bne.n	4010b2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401110:	4a22      	ldr	r2, [pc, #136]	; (40119c <SystemCoreClockUpdate+0xfc>)
  401112:	4b20      	ldr	r3, [pc, #128]	; (401194 <SystemCoreClockUpdate+0xf4>)
  401114:	601a      	str	r2, [r3, #0]
				break;
  401116:	e7cc      	b.n	4010b2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  401118:	4a22      	ldr	r2, [pc, #136]	; (4011a4 <SystemCoreClockUpdate+0x104>)
  40111a:	4b1e      	ldr	r3, [pc, #120]	; (401194 <SystemCoreClockUpdate+0xf4>)
  40111c:	601a      	str	r2, [r3, #0]
				break;
  40111e:	e7c8      	b.n	4010b2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401120:	4b1b      	ldr	r3, [pc, #108]	; (401190 <SystemCoreClockUpdate+0xf0>)
  401122:	6a1b      	ldr	r3, [r3, #32]
  401124:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401128:	d016      	beq.n	401158 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40112a:	4a1c      	ldr	r2, [pc, #112]	; (40119c <SystemCoreClockUpdate+0xfc>)
  40112c:	4b19      	ldr	r3, [pc, #100]	; (401194 <SystemCoreClockUpdate+0xf4>)
  40112e:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  401130:	4b17      	ldr	r3, [pc, #92]	; (401190 <SystemCoreClockUpdate+0xf0>)
  401132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401134:	f003 0303 	and.w	r3, r3, #3
  401138:	2b02      	cmp	r3, #2
  40113a:	d1ba      	bne.n	4010b2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40113c:	4a14      	ldr	r2, [pc, #80]	; (401190 <SystemCoreClockUpdate+0xf0>)
  40113e:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401140:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401142:	4814      	ldr	r0, [pc, #80]	; (401194 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401144:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401148:	6803      	ldr	r3, [r0, #0]
  40114a:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40114e:	b2d2      	uxtb	r2, r2
  401150:	fbb3 f3f2 	udiv	r3, r3, r2
  401154:	6003      	str	r3, [r0, #0]
  401156:	e7ac      	b.n	4010b2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401158:	4a11      	ldr	r2, [pc, #68]	; (4011a0 <SystemCoreClockUpdate+0x100>)
  40115a:	4b0e      	ldr	r3, [pc, #56]	; (401194 <SystemCoreClockUpdate+0xf4>)
  40115c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40115e:	4b0c      	ldr	r3, [pc, #48]	; (401190 <SystemCoreClockUpdate+0xf0>)
  401160:	6a1b      	ldr	r3, [r3, #32]
  401162:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401166:	2b10      	cmp	r3, #16
  401168:	d005      	beq.n	401176 <SystemCoreClockUpdate+0xd6>
  40116a:	2b20      	cmp	r3, #32
  40116c:	d1e0      	bne.n	401130 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  40116e:	4a0b      	ldr	r2, [pc, #44]	; (40119c <SystemCoreClockUpdate+0xfc>)
  401170:	4b08      	ldr	r3, [pc, #32]	; (401194 <SystemCoreClockUpdate+0xf4>)
  401172:	601a      	str	r2, [r3, #0]
				break;
  401174:	e7dc      	b.n	401130 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  401176:	4a0b      	ldr	r2, [pc, #44]	; (4011a4 <SystemCoreClockUpdate+0x104>)
  401178:	4b06      	ldr	r3, [pc, #24]	; (401194 <SystemCoreClockUpdate+0xf4>)
  40117a:	601a      	str	r2, [r3, #0]
				break;
  40117c:	e7d8      	b.n	401130 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40117e:	4a05      	ldr	r2, [pc, #20]	; (401194 <SystemCoreClockUpdate+0xf4>)
  401180:	6813      	ldr	r3, [r2, #0]
  401182:	4909      	ldr	r1, [pc, #36]	; (4011a8 <SystemCoreClockUpdate+0x108>)
  401184:	fba1 1303 	umull	r1, r3, r1, r3
  401188:	085b      	lsrs	r3, r3, #1
  40118a:	6013      	str	r3, [r2, #0]
  40118c:	4770      	bx	lr
  40118e:	bf00      	nop
  401190:	400e0400 	.word	0x400e0400
  401194:	20000004 	.word	0x20000004
  401198:	400e1810 	.word	0x400e1810
  40119c:	00b71b00 	.word	0x00b71b00
  4011a0:	003d0900 	.word	0x003d0900
  4011a4:	007a1200 	.word	0x007a1200
  4011a8:	aaaaaaab 	.word	0xaaaaaaab

004011ac <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4011ac:	4b12      	ldr	r3, [pc, #72]	; (4011f8 <system_init_flash+0x4c>)
  4011ae:	4298      	cmp	r0, r3
  4011b0:	d911      	bls.n	4011d6 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4011b2:	4b12      	ldr	r3, [pc, #72]	; (4011fc <system_init_flash+0x50>)
  4011b4:	4298      	cmp	r0, r3
  4011b6:	d913      	bls.n	4011e0 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4011b8:	4b11      	ldr	r3, [pc, #68]	; (401200 <system_init_flash+0x54>)
  4011ba:	4298      	cmp	r0, r3
  4011bc:	d914      	bls.n	4011e8 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4011be:	4b11      	ldr	r3, [pc, #68]	; (401204 <system_init_flash+0x58>)
  4011c0:	4298      	cmp	r0, r3
  4011c2:	d915      	bls.n	4011f0 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4011c4:	4b10      	ldr	r3, [pc, #64]	; (401208 <system_init_flash+0x5c>)
  4011c6:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4011c8:	bf94      	ite	ls
  4011ca:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4011ce:	4a0f      	ldrhi	r2, [pc, #60]	; (40120c <system_init_flash+0x60>)
  4011d0:	4b0f      	ldr	r3, [pc, #60]	; (401210 <system_init_flash+0x64>)
  4011d2:	601a      	str	r2, [r3, #0]
  4011d4:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4011d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4011da:	4b0d      	ldr	r3, [pc, #52]	; (401210 <system_init_flash+0x64>)
  4011dc:	601a      	str	r2, [r3, #0]
  4011de:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4011e0:	4a0c      	ldr	r2, [pc, #48]	; (401214 <system_init_flash+0x68>)
  4011e2:	4b0b      	ldr	r3, [pc, #44]	; (401210 <system_init_flash+0x64>)
  4011e4:	601a      	str	r2, [r3, #0]
  4011e6:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4011e8:	4a0b      	ldr	r2, [pc, #44]	; (401218 <system_init_flash+0x6c>)
  4011ea:	4b09      	ldr	r3, [pc, #36]	; (401210 <system_init_flash+0x64>)
  4011ec:	601a      	str	r2, [r3, #0]
  4011ee:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4011f0:	4a0a      	ldr	r2, [pc, #40]	; (40121c <system_init_flash+0x70>)
  4011f2:	4b07      	ldr	r3, [pc, #28]	; (401210 <system_init_flash+0x64>)
  4011f4:	601a      	str	r2, [r3, #0]
  4011f6:	4770      	bx	lr
  4011f8:	01312cff 	.word	0x01312cff
  4011fc:	026259ff 	.word	0x026259ff
  401200:	039386ff 	.word	0x039386ff
  401204:	04c4b3ff 	.word	0x04c4b3ff
  401208:	05f5e0ff 	.word	0x05f5e0ff
  40120c:	04000500 	.word	0x04000500
  401210:	400e0a00 	.word	0x400e0a00
  401214:	04000100 	.word	0x04000100
  401218:	04000200 	.word	0x04000200
  40121c:	04000300 	.word	0x04000300

00401220 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401220:	4b0a      	ldr	r3, [pc, #40]	; (40124c <_sbrk+0x2c>)
  401222:	681b      	ldr	r3, [r3, #0]
  401224:	b153      	cbz	r3, 40123c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401226:	4b09      	ldr	r3, [pc, #36]	; (40124c <_sbrk+0x2c>)
  401228:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40122a:	181a      	adds	r2, r3, r0
  40122c:	4908      	ldr	r1, [pc, #32]	; (401250 <_sbrk+0x30>)
  40122e:	4291      	cmp	r1, r2
  401230:	db08      	blt.n	401244 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401232:	4610      	mov	r0, r2
  401234:	4a05      	ldr	r2, [pc, #20]	; (40124c <_sbrk+0x2c>)
  401236:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401238:	4618      	mov	r0, r3
  40123a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40123c:	4a05      	ldr	r2, [pc, #20]	; (401254 <_sbrk+0x34>)
  40123e:	4b03      	ldr	r3, [pc, #12]	; (40124c <_sbrk+0x2c>)
  401240:	601a      	str	r2, [r3, #0]
  401242:	e7f0      	b.n	401226 <_sbrk+0x6>
		return (caddr_t) -1;	
  401244:	f04f 30ff 	mov.w	r0, #4294967295
}
  401248:	4770      	bx	lr
  40124a:	bf00      	nop
  40124c:	20000914 	.word	0x20000914
  401250:	2001fffc 	.word	0x2001fffc
  401254:	20003a48 	.word	0x20003a48

00401258 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401258:	f04f 30ff 	mov.w	r0, #4294967295
  40125c:	4770      	bx	lr

0040125e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401262:	604b      	str	r3, [r1, #4]

	return 0;
}
  401264:	2000      	movs	r0, #0
  401266:	4770      	bx	lr

00401268 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401268:	2000      	movs	r0, #0
  40126a:	4770      	bx	lr

0040126c <__libc_init_array>:
  40126c:	b570      	push	{r4, r5, r6, lr}
  40126e:	4e0f      	ldr	r6, [pc, #60]	; (4012ac <__libc_init_array+0x40>)
  401270:	4d0f      	ldr	r5, [pc, #60]	; (4012b0 <__libc_init_array+0x44>)
  401272:	1b76      	subs	r6, r6, r5
  401274:	10b6      	asrs	r6, r6, #2
  401276:	bf18      	it	ne
  401278:	2400      	movne	r4, #0
  40127a:	d005      	beq.n	401288 <__libc_init_array+0x1c>
  40127c:	3401      	adds	r4, #1
  40127e:	f855 3b04 	ldr.w	r3, [r5], #4
  401282:	4798      	blx	r3
  401284:	42a6      	cmp	r6, r4
  401286:	d1f9      	bne.n	40127c <__libc_init_array+0x10>
  401288:	4e0a      	ldr	r6, [pc, #40]	; (4012b4 <__libc_init_array+0x48>)
  40128a:	4d0b      	ldr	r5, [pc, #44]	; (4012b8 <__libc_init_array+0x4c>)
  40128c:	1b76      	subs	r6, r6, r5
  40128e:	f001 f86b 	bl	402368 <_init>
  401292:	10b6      	asrs	r6, r6, #2
  401294:	bf18      	it	ne
  401296:	2400      	movne	r4, #0
  401298:	d006      	beq.n	4012a8 <__libc_init_array+0x3c>
  40129a:	3401      	adds	r4, #1
  40129c:	f855 3b04 	ldr.w	r3, [r5], #4
  4012a0:	4798      	blx	r3
  4012a2:	42a6      	cmp	r6, r4
  4012a4:	d1f9      	bne.n	40129a <__libc_init_array+0x2e>
  4012a6:	bd70      	pop	{r4, r5, r6, pc}
  4012a8:	bd70      	pop	{r4, r5, r6, pc}
  4012aa:	bf00      	nop
  4012ac:	00402374 	.word	0x00402374
  4012b0:	00402374 	.word	0x00402374
  4012b4:	0040237c 	.word	0x0040237c
  4012b8:	00402374 	.word	0x00402374

004012bc <memset>:
  4012bc:	b470      	push	{r4, r5, r6}
  4012be:	0786      	lsls	r6, r0, #30
  4012c0:	d046      	beq.n	401350 <memset+0x94>
  4012c2:	1e54      	subs	r4, r2, #1
  4012c4:	2a00      	cmp	r2, #0
  4012c6:	d041      	beq.n	40134c <memset+0x90>
  4012c8:	b2ca      	uxtb	r2, r1
  4012ca:	4603      	mov	r3, r0
  4012cc:	e002      	b.n	4012d4 <memset+0x18>
  4012ce:	f114 34ff 	adds.w	r4, r4, #4294967295
  4012d2:	d33b      	bcc.n	40134c <memset+0x90>
  4012d4:	f803 2b01 	strb.w	r2, [r3], #1
  4012d8:	079d      	lsls	r5, r3, #30
  4012da:	d1f8      	bne.n	4012ce <memset+0x12>
  4012dc:	2c03      	cmp	r4, #3
  4012de:	d92e      	bls.n	40133e <memset+0x82>
  4012e0:	b2cd      	uxtb	r5, r1
  4012e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4012e6:	2c0f      	cmp	r4, #15
  4012e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4012ec:	d919      	bls.n	401322 <memset+0x66>
  4012ee:	f103 0210 	add.w	r2, r3, #16
  4012f2:	4626      	mov	r6, r4
  4012f4:	3e10      	subs	r6, #16
  4012f6:	2e0f      	cmp	r6, #15
  4012f8:	f842 5c10 	str.w	r5, [r2, #-16]
  4012fc:	f842 5c0c 	str.w	r5, [r2, #-12]
  401300:	f842 5c08 	str.w	r5, [r2, #-8]
  401304:	f842 5c04 	str.w	r5, [r2, #-4]
  401308:	f102 0210 	add.w	r2, r2, #16
  40130c:	d8f2      	bhi.n	4012f4 <memset+0x38>
  40130e:	f1a4 0210 	sub.w	r2, r4, #16
  401312:	f022 020f 	bic.w	r2, r2, #15
  401316:	f004 040f 	and.w	r4, r4, #15
  40131a:	3210      	adds	r2, #16
  40131c:	2c03      	cmp	r4, #3
  40131e:	4413      	add	r3, r2
  401320:	d90d      	bls.n	40133e <memset+0x82>
  401322:	461e      	mov	r6, r3
  401324:	4622      	mov	r2, r4
  401326:	3a04      	subs	r2, #4
  401328:	2a03      	cmp	r2, #3
  40132a:	f846 5b04 	str.w	r5, [r6], #4
  40132e:	d8fa      	bhi.n	401326 <memset+0x6a>
  401330:	1f22      	subs	r2, r4, #4
  401332:	f022 0203 	bic.w	r2, r2, #3
  401336:	3204      	adds	r2, #4
  401338:	4413      	add	r3, r2
  40133a:	f004 0403 	and.w	r4, r4, #3
  40133e:	b12c      	cbz	r4, 40134c <memset+0x90>
  401340:	b2c9      	uxtb	r1, r1
  401342:	441c      	add	r4, r3
  401344:	f803 1b01 	strb.w	r1, [r3], #1
  401348:	429c      	cmp	r4, r3
  40134a:	d1fb      	bne.n	401344 <memset+0x88>
  40134c:	bc70      	pop	{r4, r5, r6}
  40134e:	4770      	bx	lr
  401350:	4614      	mov	r4, r2
  401352:	4603      	mov	r3, r0
  401354:	e7c2      	b.n	4012dc <memset+0x20>
  401356:	bf00      	nop

00401358 <setbuf>:
  401358:	2900      	cmp	r1, #0
  40135a:	bf0c      	ite	eq
  40135c:	2202      	moveq	r2, #2
  40135e:	2200      	movne	r2, #0
  401360:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401364:	f000 b800 	b.w	401368 <setvbuf>

00401368 <setvbuf>:
  401368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40136c:	4c61      	ldr	r4, [pc, #388]	; (4014f4 <setvbuf+0x18c>)
  40136e:	6825      	ldr	r5, [r4, #0]
  401370:	b083      	sub	sp, #12
  401372:	4604      	mov	r4, r0
  401374:	460f      	mov	r7, r1
  401376:	4690      	mov	r8, r2
  401378:	461e      	mov	r6, r3
  40137a:	b115      	cbz	r5, 401382 <setvbuf+0x1a>
  40137c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40137e:	2b00      	cmp	r3, #0
  401380:	d064      	beq.n	40144c <setvbuf+0xe4>
  401382:	f1b8 0f02 	cmp.w	r8, #2
  401386:	d006      	beq.n	401396 <setvbuf+0x2e>
  401388:	f1b8 0f01 	cmp.w	r8, #1
  40138c:	f200 809f 	bhi.w	4014ce <setvbuf+0x166>
  401390:	2e00      	cmp	r6, #0
  401392:	f2c0 809c 	blt.w	4014ce <setvbuf+0x166>
  401396:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401398:	07d8      	lsls	r0, r3, #31
  40139a:	d534      	bpl.n	401406 <setvbuf+0x9e>
  40139c:	4621      	mov	r1, r4
  40139e:	4628      	mov	r0, r5
  4013a0:	f000 f95a 	bl	401658 <_fflush_r>
  4013a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4013a6:	b141      	cbz	r1, 4013ba <setvbuf+0x52>
  4013a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4013ac:	4299      	cmp	r1, r3
  4013ae:	d002      	beq.n	4013b6 <setvbuf+0x4e>
  4013b0:	4628      	mov	r0, r5
  4013b2:	f000 fa4b 	bl	40184c <_free_r>
  4013b6:	2300      	movs	r3, #0
  4013b8:	6323      	str	r3, [r4, #48]	; 0x30
  4013ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4013be:	2200      	movs	r2, #0
  4013c0:	61a2      	str	r2, [r4, #24]
  4013c2:	6062      	str	r2, [r4, #4]
  4013c4:	061a      	lsls	r2, r3, #24
  4013c6:	d43a      	bmi.n	40143e <setvbuf+0xd6>
  4013c8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4013cc:	f023 0303 	bic.w	r3, r3, #3
  4013d0:	f1b8 0f02 	cmp.w	r8, #2
  4013d4:	81a3      	strh	r3, [r4, #12]
  4013d6:	d01d      	beq.n	401414 <setvbuf+0xac>
  4013d8:	ab01      	add	r3, sp, #4
  4013da:	466a      	mov	r2, sp
  4013dc:	4621      	mov	r1, r4
  4013de:	4628      	mov	r0, r5
  4013e0:	f000 fb4c 	bl	401a7c <__swhatbuf_r>
  4013e4:	89a3      	ldrh	r3, [r4, #12]
  4013e6:	4318      	orrs	r0, r3
  4013e8:	81a0      	strh	r0, [r4, #12]
  4013ea:	2e00      	cmp	r6, #0
  4013ec:	d132      	bne.n	401454 <setvbuf+0xec>
  4013ee:	9e00      	ldr	r6, [sp, #0]
  4013f0:	4630      	mov	r0, r6
  4013f2:	f000 fb71 	bl	401ad8 <malloc>
  4013f6:	4607      	mov	r7, r0
  4013f8:	2800      	cmp	r0, #0
  4013fa:	d06b      	beq.n	4014d4 <setvbuf+0x16c>
  4013fc:	89a3      	ldrh	r3, [r4, #12]
  4013fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401402:	81a3      	strh	r3, [r4, #12]
  401404:	e028      	b.n	401458 <setvbuf+0xf0>
  401406:	89a3      	ldrh	r3, [r4, #12]
  401408:	0599      	lsls	r1, r3, #22
  40140a:	d4c7      	bmi.n	40139c <setvbuf+0x34>
  40140c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40140e:	f000 fb31 	bl	401a74 <__retarget_lock_acquire_recursive>
  401412:	e7c3      	b.n	40139c <setvbuf+0x34>
  401414:	2500      	movs	r5, #0
  401416:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401418:	2600      	movs	r6, #0
  40141a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40141e:	f043 0302 	orr.w	r3, r3, #2
  401422:	2001      	movs	r0, #1
  401424:	60a6      	str	r6, [r4, #8]
  401426:	07ce      	lsls	r6, r1, #31
  401428:	81a3      	strh	r3, [r4, #12]
  40142a:	6022      	str	r2, [r4, #0]
  40142c:	6122      	str	r2, [r4, #16]
  40142e:	6160      	str	r0, [r4, #20]
  401430:	d401      	bmi.n	401436 <setvbuf+0xce>
  401432:	0598      	lsls	r0, r3, #22
  401434:	d53e      	bpl.n	4014b4 <setvbuf+0x14c>
  401436:	4628      	mov	r0, r5
  401438:	b003      	add	sp, #12
  40143a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40143e:	6921      	ldr	r1, [r4, #16]
  401440:	4628      	mov	r0, r5
  401442:	f000 fa03 	bl	40184c <_free_r>
  401446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40144a:	e7bd      	b.n	4013c8 <setvbuf+0x60>
  40144c:	4628      	mov	r0, r5
  40144e:	f000 f95b 	bl	401708 <__sinit>
  401452:	e796      	b.n	401382 <setvbuf+0x1a>
  401454:	2f00      	cmp	r7, #0
  401456:	d0cb      	beq.n	4013f0 <setvbuf+0x88>
  401458:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40145a:	2b00      	cmp	r3, #0
  40145c:	d033      	beq.n	4014c6 <setvbuf+0x15e>
  40145e:	9b00      	ldr	r3, [sp, #0]
  401460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401464:	6027      	str	r7, [r4, #0]
  401466:	429e      	cmp	r6, r3
  401468:	bf1c      	itt	ne
  40146a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40146e:	81a2      	strhne	r2, [r4, #12]
  401470:	f1b8 0f01 	cmp.w	r8, #1
  401474:	bf04      	itt	eq
  401476:	f042 0201 	orreq.w	r2, r2, #1
  40147a:	81a2      	strheq	r2, [r4, #12]
  40147c:	b292      	uxth	r2, r2
  40147e:	f012 0308 	ands.w	r3, r2, #8
  401482:	6127      	str	r7, [r4, #16]
  401484:	6166      	str	r6, [r4, #20]
  401486:	d00e      	beq.n	4014a6 <setvbuf+0x13e>
  401488:	07d1      	lsls	r1, r2, #31
  40148a:	d51a      	bpl.n	4014c2 <setvbuf+0x15a>
  40148c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40148e:	4276      	negs	r6, r6
  401490:	2300      	movs	r3, #0
  401492:	f015 0501 	ands.w	r5, r5, #1
  401496:	61a6      	str	r6, [r4, #24]
  401498:	60a3      	str	r3, [r4, #8]
  40149a:	d009      	beq.n	4014b0 <setvbuf+0x148>
  40149c:	2500      	movs	r5, #0
  40149e:	4628      	mov	r0, r5
  4014a0:	b003      	add	sp, #12
  4014a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4014a6:	60a3      	str	r3, [r4, #8]
  4014a8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4014aa:	f015 0501 	ands.w	r5, r5, #1
  4014ae:	d1f5      	bne.n	40149c <setvbuf+0x134>
  4014b0:	0593      	lsls	r3, r2, #22
  4014b2:	d4c0      	bmi.n	401436 <setvbuf+0xce>
  4014b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4014b6:	f000 fadf 	bl	401a78 <__retarget_lock_release_recursive>
  4014ba:	4628      	mov	r0, r5
  4014bc:	b003      	add	sp, #12
  4014be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4014c2:	60a6      	str	r6, [r4, #8]
  4014c4:	e7f0      	b.n	4014a8 <setvbuf+0x140>
  4014c6:	4628      	mov	r0, r5
  4014c8:	f000 f91e 	bl	401708 <__sinit>
  4014cc:	e7c7      	b.n	40145e <setvbuf+0xf6>
  4014ce:	f04f 35ff 	mov.w	r5, #4294967295
  4014d2:	e7b0      	b.n	401436 <setvbuf+0xce>
  4014d4:	f8dd 9000 	ldr.w	r9, [sp]
  4014d8:	45b1      	cmp	r9, r6
  4014da:	d004      	beq.n	4014e6 <setvbuf+0x17e>
  4014dc:	4648      	mov	r0, r9
  4014de:	f000 fafb 	bl	401ad8 <malloc>
  4014e2:	4607      	mov	r7, r0
  4014e4:	b920      	cbnz	r0, 4014f0 <setvbuf+0x188>
  4014e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4014ea:	f04f 35ff 	mov.w	r5, #4294967295
  4014ee:	e792      	b.n	401416 <setvbuf+0xae>
  4014f0:	464e      	mov	r6, r9
  4014f2:	e783      	b.n	4013fc <setvbuf+0x94>
  4014f4:	20000008 	.word	0x20000008

004014f8 <register_fini>:
  4014f8:	4b02      	ldr	r3, [pc, #8]	; (401504 <register_fini+0xc>)
  4014fa:	b113      	cbz	r3, 401502 <register_fini+0xa>
  4014fc:	4802      	ldr	r0, [pc, #8]	; (401508 <register_fini+0x10>)
  4014fe:	f000 b805 	b.w	40150c <atexit>
  401502:	4770      	bx	lr
  401504:	00000000 	.word	0x00000000
  401508:	00401779 	.word	0x00401779

0040150c <atexit>:
  40150c:	2300      	movs	r3, #0
  40150e:	4601      	mov	r1, r0
  401510:	461a      	mov	r2, r3
  401512:	4618      	mov	r0, r3
  401514:	f000 be10 	b.w	402138 <__register_exitproc>

00401518 <__sflush_r>:
  401518:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40151c:	b29a      	uxth	r2, r3
  40151e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401522:	460d      	mov	r5, r1
  401524:	0711      	lsls	r1, r2, #28
  401526:	4680      	mov	r8, r0
  401528:	d43a      	bmi.n	4015a0 <__sflush_r+0x88>
  40152a:	686a      	ldr	r2, [r5, #4]
  40152c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401530:	2a00      	cmp	r2, #0
  401532:	81ab      	strh	r3, [r5, #12]
  401534:	dd6f      	ble.n	401616 <__sflush_r+0xfe>
  401536:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401538:	2c00      	cmp	r4, #0
  40153a:	d049      	beq.n	4015d0 <__sflush_r+0xb8>
  40153c:	2200      	movs	r2, #0
  40153e:	b29b      	uxth	r3, r3
  401540:	f8d8 6000 	ldr.w	r6, [r8]
  401544:	f8c8 2000 	str.w	r2, [r8]
  401548:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40154c:	d067      	beq.n	40161e <__sflush_r+0x106>
  40154e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401550:	075f      	lsls	r7, r3, #29
  401552:	d505      	bpl.n	401560 <__sflush_r+0x48>
  401554:	6869      	ldr	r1, [r5, #4]
  401556:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401558:	1a52      	subs	r2, r2, r1
  40155a:	b10b      	cbz	r3, 401560 <__sflush_r+0x48>
  40155c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40155e:	1ad2      	subs	r2, r2, r3
  401560:	2300      	movs	r3, #0
  401562:	69e9      	ldr	r1, [r5, #28]
  401564:	4640      	mov	r0, r8
  401566:	47a0      	blx	r4
  401568:	1c44      	adds	r4, r0, #1
  40156a:	d03c      	beq.n	4015e6 <__sflush_r+0xce>
  40156c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401570:	692a      	ldr	r2, [r5, #16]
  401572:	602a      	str	r2, [r5, #0]
  401574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401578:	2200      	movs	r2, #0
  40157a:	81ab      	strh	r3, [r5, #12]
  40157c:	04db      	lsls	r3, r3, #19
  40157e:	606a      	str	r2, [r5, #4]
  401580:	d447      	bmi.n	401612 <__sflush_r+0xfa>
  401582:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401584:	f8c8 6000 	str.w	r6, [r8]
  401588:	b311      	cbz	r1, 4015d0 <__sflush_r+0xb8>
  40158a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40158e:	4299      	cmp	r1, r3
  401590:	d002      	beq.n	401598 <__sflush_r+0x80>
  401592:	4640      	mov	r0, r8
  401594:	f000 f95a 	bl	40184c <_free_r>
  401598:	2000      	movs	r0, #0
  40159a:	6328      	str	r0, [r5, #48]	; 0x30
  40159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015a0:	692e      	ldr	r6, [r5, #16]
  4015a2:	b1ae      	cbz	r6, 4015d0 <__sflush_r+0xb8>
  4015a4:	682c      	ldr	r4, [r5, #0]
  4015a6:	602e      	str	r6, [r5, #0]
  4015a8:	0791      	lsls	r1, r2, #30
  4015aa:	bf0c      	ite	eq
  4015ac:	696b      	ldreq	r3, [r5, #20]
  4015ae:	2300      	movne	r3, #0
  4015b0:	1ba4      	subs	r4, r4, r6
  4015b2:	60ab      	str	r3, [r5, #8]
  4015b4:	e00a      	b.n	4015cc <__sflush_r+0xb4>
  4015b6:	4623      	mov	r3, r4
  4015b8:	4632      	mov	r2, r6
  4015ba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4015bc:	69e9      	ldr	r1, [r5, #28]
  4015be:	4640      	mov	r0, r8
  4015c0:	47b8      	blx	r7
  4015c2:	2800      	cmp	r0, #0
  4015c4:	eba4 0400 	sub.w	r4, r4, r0
  4015c8:	4406      	add	r6, r0
  4015ca:	dd04      	ble.n	4015d6 <__sflush_r+0xbe>
  4015cc:	2c00      	cmp	r4, #0
  4015ce:	dcf2      	bgt.n	4015b6 <__sflush_r+0x9e>
  4015d0:	2000      	movs	r0, #0
  4015d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015d6:	89ab      	ldrh	r3, [r5, #12]
  4015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4015dc:	81ab      	strh	r3, [r5, #12]
  4015de:	f04f 30ff 	mov.w	r0, #4294967295
  4015e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015e6:	f8d8 4000 	ldr.w	r4, [r8]
  4015ea:	2c1d      	cmp	r4, #29
  4015ec:	d8f3      	bhi.n	4015d6 <__sflush_r+0xbe>
  4015ee:	4b19      	ldr	r3, [pc, #100]	; (401654 <__sflush_r+0x13c>)
  4015f0:	40e3      	lsrs	r3, r4
  4015f2:	43db      	mvns	r3, r3
  4015f4:	f013 0301 	ands.w	r3, r3, #1
  4015f8:	d1ed      	bne.n	4015d6 <__sflush_r+0xbe>
  4015fa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4015fe:	606b      	str	r3, [r5, #4]
  401600:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401604:	6929      	ldr	r1, [r5, #16]
  401606:	81ab      	strh	r3, [r5, #12]
  401608:	04da      	lsls	r2, r3, #19
  40160a:	6029      	str	r1, [r5, #0]
  40160c:	d5b9      	bpl.n	401582 <__sflush_r+0x6a>
  40160e:	2c00      	cmp	r4, #0
  401610:	d1b7      	bne.n	401582 <__sflush_r+0x6a>
  401612:	6528      	str	r0, [r5, #80]	; 0x50
  401614:	e7b5      	b.n	401582 <__sflush_r+0x6a>
  401616:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401618:	2a00      	cmp	r2, #0
  40161a:	dc8c      	bgt.n	401536 <__sflush_r+0x1e>
  40161c:	e7d8      	b.n	4015d0 <__sflush_r+0xb8>
  40161e:	2301      	movs	r3, #1
  401620:	69e9      	ldr	r1, [r5, #28]
  401622:	4640      	mov	r0, r8
  401624:	47a0      	blx	r4
  401626:	1c43      	adds	r3, r0, #1
  401628:	4602      	mov	r2, r0
  40162a:	d002      	beq.n	401632 <__sflush_r+0x11a>
  40162c:	89ab      	ldrh	r3, [r5, #12]
  40162e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401630:	e78e      	b.n	401550 <__sflush_r+0x38>
  401632:	f8d8 3000 	ldr.w	r3, [r8]
  401636:	2b00      	cmp	r3, #0
  401638:	d0f8      	beq.n	40162c <__sflush_r+0x114>
  40163a:	2b1d      	cmp	r3, #29
  40163c:	d001      	beq.n	401642 <__sflush_r+0x12a>
  40163e:	2b16      	cmp	r3, #22
  401640:	d102      	bne.n	401648 <__sflush_r+0x130>
  401642:	f8c8 6000 	str.w	r6, [r8]
  401646:	e7c3      	b.n	4015d0 <__sflush_r+0xb8>
  401648:	89ab      	ldrh	r3, [r5, #12]
  40164a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40164e:	81ab      	strh	r3, [r5, #12]
  401650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401654:	20400001 	.word	0x20400001

00401658 <_fflush_r>:
  401658:	b538      	push	{r3, r4, r5, lr}
  40165a:	460d      	mov	r5, r1
  40165c:	4604      	mov	r4, r0
  40165e:	b108      	cbz	r0, 401664 <_fflush_r+0xc>
  401660:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401662:	b1bb      	cbz	r3, 401694 <_fflush_r+0x3c>
  401664:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  401668:	b188      	cbz	r0, 40168e <_fflush_r+0x36>
  40166a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40166c:	07db      	lsls	r3, r3, #31
  40166e:	d401      	bmi.n	401674 <_fflush_r+0x1c>
  401670:	0581      	lsls	r1, r0, #22
  401672:	d517      	bpl.n	4016a4 <_fflush_r+0x4c>
  401674:	4620      	mov	r0, r4
  401676:	4629      	mov	r1, r5
  401678:	f7ff ff4e 	bl	401518 <__sflush_r>
  40167c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40167e:	07da      	lsls	r2, r3, #31
  401680:	4604      	mov	r4, r0
  401682:	d402      	bmi.n	40168a <_fflush_r+0x32>
  401684:	89ab      	ldrh	r3, [r5, #12]
  401686:	059b      	lsls	r3, r3, #22
  401688:	d507      	bpl.n	40169a <_fflush_r+0x42>
  40168a:	4620      	mov	r0, r4
  40168c:	bd38      	pop	{r3, r4, r5, pc}
  40168e:	4604      	mov	r4, r0
  401690:	4620      	mov	r0, r4
  401692:	bd38      	pop	{r3, r4, r5, pc}
  401694:	f000 f838 	bl	401708 <__sinit>
  401698:	e7e4      	b.n	401664 <_fflush_r+0xc>
  40169a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40169c:	f000 f9ec 	bl	401a78 <__retarget_lock_release_recursive>
  4016a0:	4620      	mov	r0, r4
  4016a2:	bd38      	pop	{r3, r4, r5, pc}
  4016a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4016a6:	f000 f9e5 	bl	401a74 <__retarget_lock_acquire_recursive>
  4016aa:	e7e3      	b.n	401674 <_fflush_r+0x1c>

004016ac <_cleanup_r>:
  4016ac:	4901      	ldr	r1, [pc, #4]	; (4016b4 <_cleanup_r+0x8>)
  4016ae:	f000 b9b3 	b.w	401a18 <_fwalk_reent>
  4016b2:	bf00      	nop
  4016b4:	00402221 	.word	0x00402221

004016b8 <std.isra.0>:
  4016b8:	b510      	push	{r4, lr}
  4016ba:	2300      	movs	r3, #0
  4016bc:	4604      	mov	r4, r0
  4016be:	8181      	strh	r1, [r0, #12]
  4016c0:	81c2      	strh	r2, [r0, #14]
  4016c2:	6003      	str	r3, [r0, #0]
  4016c4:	6043      	str	r3, [r0, #4]
  4016c6:	6083      	str	r3, [r0, #8]
  4016c8:	6643      	str	r3, [r0, #100]	; 0x64
  4016ca:	6103      	str	r3, [r0, #16]
  4016cc:	6143      	str	r3, [r0, #20]
  4016ce:	6183      	str	r3, [r0, #24]
  4016d0:	4619      	mov	r1, r3
  4016d2:	2208      	movs	r2, #8
  4016d4:	305c      	adds	r0, #92	; 0x5c
  4016d6:	f7ff fdf1 	bl	4012bc <memset>
  4016da:	4807      	ldr	r0, [pc, #28]	; (4016f8 <std.isra.0+0x40>)
  4016dc:	4907      	ldr	r1, [pc, #28]	; (4016fc <std.isra.0+0x44>)
  4016de:	4a08      	ldr	r2, [pc, #32]	; (401700 <std.isra.0+0x48>)
  4016e0:	4b08      	ldr	r3, [pc, #32]	; (401704 <std.isra.0+0x4c>)
  4016e2:	6220      	str	r0, [r4, #32]
  4016e4:	61e4      	str	r4, [r4, #28]
  4016e6:	6261      	str	r1, [r4, #36]	; 0x24
  4016e8:	62a2      	str	r2, [r4, #40]	; 0x28
  4016ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  4016ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4016f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4016f4:	f000 b9ba 	b.w	401a6c <__retarget_lock_init_recursive>
  4016f8:	00402085 	.word	0x00402085
  4016fc:	004020a9 	.word	0x004020a9
  401700:	004020e5 	.word	0x004020e5
  401704:	00402105 	.word	0x00402105

00401708 <__sinit>:
  401708:	b510      	push	{r4, lr}
  40170a:	4604      	mov	r4, r0
  40170c:	4812      	ldr	r0, [pc, #72]	; (401758 <__sinit+0x50>)
  40170e:	f000 f9b1 	bl	401a74 <__retarget_lock_acquire_recursive>
  401712:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401714:	b9d2      	cbnz	r2, 40174c <__sinit+0x44>
  401716:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40171a:	4810      	ldr	r0, [pc, #64]	; (40175c <__sinit+0x54>)
  40171c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401720:	2103      	movs	r1, #3
  401722:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  401726:	63e0      	str	r0, [r4, #60]	; 0x3c
  401728:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40172c:	6860      	ldr	r0, [r4, #4]
  40172e:	2104      	movs	r1, #4
  401730:	f7ff ffc2 	bl	4016b8 <std.isra.0>
  401734:	2201      	movs	r2, #1
  401736:	2109      	movs	r1, #9
  401738:	68a0      	ldr	r0, [r4, #8]
  40173a:	f7ff ffbd 	bl	4016b8 <std.isra.0>
  40173e:	2202      	movs	r2, #2
  401740:	2112      	movs	r1, #18
  401742:	68e0      	ldr	r0, [r4, #12]
  401744:	f7ff ffb8 	bl	4016b8 <std.isra.0>
  401748:	2301      	movs	r3, #1
  40174a:	63a3      	str	r3, [r4, #56]	; 0x38
  40174c:	4802      	ldr	r0, [pc, #8]	; (401758 <__sinit+0x50>)
  40174e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401752:	f000 b991 	b.w	401a78 <__retarget_lock_release_recursive>
  401756:	bf00      	nop
  401758:	20000a28 	.word	0x20000a28
  40175c:	004016ad 	.word	0x004016ad

00401760 <__sfp_lock_acquire>:
  401760:	4801      	ldr	r0, [pc, #4]	; (401768 <__sfp_lock_acquire+0x8>)
  401762:	f000 b987 	b.w	401a74 <__retarget_lock_acquire_recursive>
  401766:	bf00      	nop
  401768:	20000a3c 	.word	0x20000a3c

0040176c <__sfp_lock_release>:
  40176c:	4801      	ldr	r0, [pc, #4]	; (401774 <__sfp_lock_release+0x8>)
  40176e:	f000 b983 	b.w	401a78 <__retarget_lock_release_recursive>
  401772:	bf00      	nop
  401774:	20000a3c 	.word	0x20000a3c

00401778 <__libc_fini_array>:
  401778:	b538      	push	{r3, r4, r5, lr}
  40177a:	4c0a      	ldr	r4, [pc, #40]	; (4017a4 <__libc_fini_array+0x2c>)
  40177c:	4d0a      	ldr	r5, [pc, #40]	; (4017a8 <__libc_fini_array+0x30>)
  40177e:	1b64      	subs	r4, r4, r5
  401780:	10a4      	asrs	r4, r4, #2
  401782:	d00a      	beq.n	40179a <__libc_fini_array+0x22>
  401784:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401788:	3b01      	subs	r3, #1
  40178a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40178e:	3c01      	subs	r4, #1
  401790:	f855 3904 	ldr.w	r3, [r5], #-4
  401794:	4798      	blx	r3
  401796:	2c00      	cmp	r4, #0
  401798:	d1f9      	bne.n	40178e <__libc_fini_array+0x16>
  40179a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40179e:	f000 bded 	b.w	40237c <_fini>
  4017a2:	bf00      	nop
  4017a4:	0040238c 	.word	0x0040238c
  4017a8:	00402388 	.word	0x00402388

004017ac <_malloc_trim_r>:
  4017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4017ae:	4f24      	ldr	r7, [pc, #144]	; (401840 <_malloc_trim_r+0x94>)
  4017b0:	460c      	mov	r4, r1
  4017b2:	4606      	mov	r6, r0
  4017b4:	f000 fc48 	bl	402048 <__malloc_lock>
  4017b8:	68bb      	ldr	r3, [r7, #8]
  4017ba:	685d      	ldr	r5, [r3, #4]
  4017bc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4017c0:	310f      	adds	r1, #15
  4017c2:	f025 0503 	bic.w	r5, r5, #3
  4017c6:	4429      	add	r1, r5
  4017c8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4017cc:	f021 010f 	bic.w	r1, r1, #15
  4017d0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4017d4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4017d8:	db07      	blt.n	4017ea <_malloc_trim_r+0x3e>
  4017da:	2100      	movs	r1, #0
  4017dc:	4630      	mov	r0, r6
  4017de:	f000 fc3f 	bl	402060 <_sbrk_r>
  4017e2:	68bb      	ldr	r3, [r7, #8]
  4017e4:	442b      	add	r3, r5
  4017e6:	4298      	cmp	r0, r3
  4017e8:	d004      	beq.n	4017f4 <_malloc_trim_r+0x48>
  4017ea:	4630      	mov	r0, r6
  4017ec:	f000 fc32 	bl	402054 <__malloc_unlock>
  4017f0:	2000      	movs	r0, #0
  4017f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017f4:	4261      	negs	r1, r4
  4017f6:	4630      	mov	r0, r6
  4017f8:	f000 fc32 	bl	402060 <_sbrk_r>
  4017fc:	3001      	adds	r0, #1
  4017fe:	d00d      	beq.n	40181c <_malloc_trim_r+0x70>
  401800:	4b10      	ldr	r3, [pc, #64]	; (401844 <_malloc_trim_r+0x98>)
  401802:	68ba      	ldr	r2, [r7, #8]
  401804:	6819      	ldr	r1, [r3, #0]
  401806:	1b2d      	subs	r5, r5, r4
  401808:	f045 0501 	orr.w	r5, r5, #1
  40180c:	4630      	mov	r0, r6
  40180e:	1b09      	subs	r1, r1, r4
  401810:	6055      	str	r5, [r2, #4]
  401812:	6019      	str	r1, [r3, #0]
  401814:	f000 fc1e 	bl	402054 <__malloc_unlock>
  401818:	2001      	movs	r0, #1
  40181a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40181c:	2100      	movs	r1, #0
  40181e:	4630      	mov	r0, r6
  401820:	f000 fc1e 	bl	402060 <_sbrk_r>
  401824:	68ba      	ldr	r2, [r7, #8]
  401826:	1a83      	subs	r3, r0, r2
  401828:	2b0f      	cmp	r3, #15
  40182a:	ddde      	ble.n	4017ea <_malloc_trim_r+0x3e>
  40182c:	4c06      	ldr	r4, [pc, #24]	; (401848 <_malloc_trim_r+0x9c>)
  40182e:	4905      	ldr	r1, [pc, #20]	; (401844 <_malloc_trim_r+0x98>)
  401830:	6824      	ldr	r4, [r4, #0]
  401832:	f043 0301 	orr.w	r3, r3, #1
  401836:	1b00      	subs	r0, r0, r4
  401838:	6053      	str	r3, [r2, #4]
  40183a:	6008      	str	r0, [r1, #0]
  40183c:	e7d5      	b.n	4017ea <_malloc_trim_r+0x3e>
  40183e:	bf00      	nop
  401840:	2000043c 	.word	0x2000043c
  401844:	20000918 	.word	0x20000918
  401848:	20000844 	.word	0x20000844

0040184c <_free_r>:
  40184c:	2900      	cmp	r1, #0
  40184e:	d044      	beq.n	4018da <_free_r+0x8e>
  401850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401854:	460d      	mov	r5, r1
  401856:	4680      	mov	r8, r0
  401858:	f000 fbf6 	bl	402048 <__malloc_lock>
  40185c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401860:	4969      	ldr	r1, [pc, #420]	; (401a08 <_free_r+0x1bc>)
  401862:	f027 0301 	bic.w	r3, r7, #1
  401866:	f1a5 0408 	sub.w	r4, r5, #8
  40186a:	18e2      	adds	r2, r4, r3
  40186c:	688e      	ldr	r6, [r1, #8]
  40186e:	6850      	ldr	r0, [r2, #4]
  401870:	42b2      	cmp	r2, r6
  401872:	f020 0003 	bic.w	r0, r0, #3
  401876:	d05e      	beq.n	401936 <_free_r+0xea>
  401878:	07fe      	lsls	r6, r7, #31
  40187a:	6050      	str	r0, [r2, #4]
  40187c:	d40b      	bmi.n	401896 <_free_r+0x4a>
  40187e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401882:	1be4      	subs	r4, r4, r7
  401884:	f101 0e08 	add.w	lr, r1, #8
  401888:	68a5      	ldr	r5, [r4, #8]
  40188a:	4575      	cmp	r5, lr
  40188c:	443b      	add	r3, r7
  40188e:	d06d      	beq.n	40196c <_free_r+0x120>
  401890:	68e7      	ldr	r7, [r4, #12]
  401892:	60ef      	str	r7, [r5, #12]
  401894:	60bd      	str	r5, [r7, #8]
  401896:	1815      	adds	r5, r2, r0
  401898:	686d      	ldr	r5, [r5, #4]
  40189a:	07ed      	lsls	r5, r5, #31
  40189c:	d53e      	bpl.n	40191c <_free_r+0xd0>
  40189e:	f043 0201 	orr.w	r2, r3, #1
  4018a2:	6062      	str	r2, [r4, #4]
  4018a4:	50e3      	str	r3, [r4, r3]
  4018a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4018aa:	d217      	bcs.n	4018dc <_free_r+0x90>
  4018ac:	08db      	lsrs	r3, r3, #3
  4018ae:	1c58      	adds	r0, r3, #1
  4018b0:	109a      	asrs	r2, r3, #2
  4018b2:	684d      	ldr	r5, [r1, #4]
  4018b4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4018b8:	60a7      	str	r7, [r4, #8]
  4018ba:	2301      	movs	r3, #1
  4018bc:	4093      	lsls	r3, r2
  4018be:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4018c2:	432b      	orrs	r3, r5
  4018c4:	3a08      	subs	r2, #8
  4018c6:	60e2      	str	r2, [r4, #12]
  4018c8:	604b      	str	r3, [r1, #4]
  4018ca:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4018ce:	60fc      	str	r4, [r7, #12]
  4018d0:	4640      	mov	r0, r8
  4018d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4018d6:	f000 bbbd 	b.w	402054 <__malloc_unlock>
  4018da:	4770      	bx	lr
  4018dc:	0a5a      	lsrs	r2, r3, #9
  4018de:	2a04      	cmp	r2, #4
  4018e0:	d852      	bhi.n	401988 <_free_r+0x13c>
  4018e2:	099a      	lsrs	r2, r3, #6
  4018e4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4018e8:	00ff      	lsls	r7, r7, #3
  4018ea:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4018ee:	19c8      	adds	r0, r1, r7
  4018f0:	59ca      	ldr	r2, [r1, r7]
  4018f2:	3808      	subs	r0, #8
  4018f4:	4290      	cmp	r0, r2
  4018f6:	d04f      	beq.n	401998 <_free_r+0x14c>
  4018f8:	6851      	ldr	r1, [r2, #4]
  4018fa:	f021 0103 	bic.w	r1, r1, #3
  4018fe:	428b      	cmp	r3, r1
  401900:	d232      	bcs.n	401968 <_free_r+0x11c>
  401902:	6892      	ldr	r2, [r2, #8]
  401904:	4290      	cmp	r0, r2
  401906:	d1f7      	bne.n	4018f8 <_free_r+0xac>
  401908:	68c3      	ldr	r3, [r0, #12]
  40190a:	60a0      	str	r0, [r4, #8]
  40190c:	60e3      	str	r3, [r4, #12]
  40190e:	609c      	str	r4, [r3, #8]
  401910:	60c4      	str	r4, [r0, #12]
  401912:	4640      	mov	r0, r8
  401914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401918:	f000 bb9c 	b.w	402054 <__malloc_unlock>
  40191c:	6895      	ldr	r5, [r2, #8]
  40191e:	4f3b      	ldr	r7, [pc, #236]	; (401a0c <_free_r+0x1c0>)
  401920:	42bd      	cmp	r5, r7
  401922:	4403      	add	r3, r0
  401924:	d040      	beq.n	4019a8 <_free_r+0x15c>
  401926:	68d0      	ldr	r0, [r2, #12]
  401928:	60e8      	str	r0, [r5, #12]
  40192a:	f043 0201 	orr.w	r2, r3, #1
  40192e:	6085      	str	r5, [r0, #8]
  401930:	6062      	str	r2, [r4, #4]
  401932:	50e3      	str	r3, [r4, r3]
  401934:	e7b7      	b.n	4018a6 <_free_r+0x5a>
  401936:	07ff      	lsls	r7, r7, #31
  401938:	4403      	add	r3, r0
  40193a:	d407      	bmi.n	40194c <_free_r+0x100>
  40193c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401940:	1aa4      	subs	r4, r4, r2
  401942:	4413      	add	r3, r2
  401944:	68a0      	ldr	r0, [r4, #8]
  401946:	68e2      	ldr	r2, [r4, #12]
  401948:	60c2      	str	r2, [r0, #12]
  40194a:	6090      	str	r0, [r2, #8]
  40194c:	4a30      	ldr	r2, [pc, #192]	; (401a10 <_free_r+0x1c4>)
  40194e:	6812      	ldr	r2, [r2, #0]
  401950:	f043 0001 	orr.w	r0, r3, #1
  401954:	4293      	cmp	r3, r2
  401956:	6060      	str	r0, [r4, #4]
  401958:	608c      	str	r4, [r1, #8]
  40195a:	d3b9      	bcc.n	4018d0 <_free_r+0x84>
  40195c:	4b2d      	ldr	r3, [pc, #180]	; (401a14 <_free_r+0x1c8>)
  40195e:	4640      	mov	r0, r8
  401960:	6819      	ldr	r1, [r3, #0]
  401962:	f7ff ff23 	bl	4017ac <_malloc_trim_r>
  401966:	e7b3      	b.n	4018d0 <_free_r+0x84>
  401968:	4610      	mov	r0, r2
  40196a:	e7cd      	b.n	401908 <_free_r+0xbc>
  40196c:	1811      	adds	r1, r2, r0
  40196e:	6849      	ldr	r1, [r1, #4]
  401970:	07c9      	lsls	r1, r1, #31
  401972:	d444      	bmi.n	4019fe <_free_r+0x1b2>
  401974:	6891      	ldr	r1, [r2, #8]
  401976:	68d2      	ldr	r2, [r2, #12]
  401978:	60ca      	str	r2, [r1, #12]
  40197a:	4403      	add	r3, r0
  40197c:	f043 0001 	orr.w	r0, r3, #1
  401980:	6091      	str	r1, [r2, #8]
  401982:	6060      	str	r0, [r4, #4]
  401984:	50e3      	str	r3, [r4, r3]
  401986:	e7a3      	b.n	4018d0 <_free_r+0x84>
  401988:	2a14      	cmp	r2, #20
  40198a:	d816      	bhi.n	4019ba <_free_r+0x16e>
  40198c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401990:	00ff      	lsls	r7, r7, #3
  401992:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  401996:	e7aa      	b.n	4018ee <_free_r+0xa2>
  401998:	10aa      	asrs	r2, r5, #2
  40199a:	2301      	movs	r3, #1
  40199c:	684d      	ldr	r5, [r1, #4]
  40199e:	4093      	lsls	r3, r2
  4019a0:	432b      	orrs	r3, r5
  4019a2:	604b      	str	r3, [r1, #4]
  4019a4:	4603      	mov	r3, r0
  4019a6:	e7b0      	b.n	40190a <_free_r+0xbe>
  4019a8:	f043 0201 	orr.w	r2, r3, #1
  4019ac:	614c      	str	r4, [r1, #20]
  4019ae:	610c      	str	r4, [r1, #16]
  4019b0:	60e5      	str	r5, [r4, #12]
  4019b2:	60a5      	str	r5, [r4, #8]
  4019b4:	6062      	str	r2, [r4, #4]
  4019b6:	50e3      	str	r3, [r4, r3]
  4019b8:	e78a      	b.n	4018d0 <_free_r+0x84>
  4019ba:	2a54      	cmp	r2, #84	; 0x54
  4019bc:	d806      	bhi.n	4019cc <_free_r+0x180>
  4019be:	0b1a      	lsrs	r2, r3, #12
  4019c0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4019c4:	00ff      	lsls	r7, r7, #3
  4019c6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4019ca:	e790      	b.n	4018ee <_free_r+0xa2>
  4019cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4019d0:	d806      	bhi.n	4019e0 <_free_r+0x194>
  4019d2:	0bda      	lsrs	r2, r3, #15
  4019d4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4019d8:	00ff      	lsls	r7, r7, #3
  4019da:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4019de:	e786      	b.n	4018ee <_free_r+0xa2>
  4019e0:	f240 5054 	movw	r0, #1364	; 0x554
  4019e4:	4282      	cmp	r2, r0
  4019e6:	d806      	bhi.n	4019f6 <_free_r+0x1aa>
  4019e8:	0c9a      	lsrs	r2, r3, #18
  4019ea:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4019ee:	00ff      	lsls	r7, r7, #3
  4019f0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4019f4:	e77b      	b.n	4018ee <_free_r+0xa2>
  4019f6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4019fa:	257e      	movs	r5, #126	; 0x7e
  4019fc:	e777      	b.n	4018ee <_free_r+0xa2>
  4019fe:	f043 0101 	orr.w	r1, r3, #1
  401a02:	6061      	str	r1, [r4, #4]
  401a04:	6013      	str	r3, [r2, #0]
  401a06:	e763      	b.n	4018d0 <_free_r+0x84>
  401a08:	2000043c 	.word	0x2000043c
  401a0c:	20000444 	.word	0x20000444
  401a10:	20000848 	.word	0x20000848
  401a14:	20000948 	.word	0x20000948

00401a18 <_fwalk_reent>:
  401a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a1c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401a20:	d01f      	beq.n	401a62 <_fwalk_reent+0x4a>
  401a22:	4688      	mov	r8, r1
  401a24:	4606      	mov	r6, r0
  401a26:	f04f 0900 	mov.w	r9, #0
  401a2a:	687d      	ldr	r5, [r7, #4]
  401a2c:	68bc      	ldr	r4, [r7, #8]
  401a2e:	3d01      	subs	r5, #1
  401a30:	d411      	bmi.n	401a56 <_fwalk_reent+0x3e>
  401a32:	89a3      	ldrh	r3, [r4, #12]
  401a34:	2b01      	cmp	r3, #1
  401a36:	f105 35ff 	add.w	r5, r5, #4294967295
  401a3a:	d908      	bls.n	401a4e <_fwalk_reent+0x36>
  401a3c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401a40:	3301      	adds	r3, #1
  401a42:	4621      	mov	r1, r4
  401a44:	4630      	mov	r0, r6
  401a46:	d002      	beq.n	401a4e <_fwalk_reent+0x36>
  401a48:	47c0      	blx	r8
  401a4a:	ea49 0900 	orr.w	r9, r9, r0
  401a4e:	1c6b      	adds	r3, r5, #1
  401a50:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401a54:	d1ed      	bne.n	401a32 <_fwalk_reent+0x1a>
  401a56:	683f      	ldr	r7, [r7, #0]
  401a58:	2f00      	cmp	r7, #0
  401a5a:	d1e6      	bne.n	401a2a <_fwalk_reent+0x12>
  401a5c:	4648      	mov	r0, r9
  401a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401a62:	46b9      	mov	r9, r7
  401a64:	4648      	mov	r0, r9
  401a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401a6a:	bf00      	nop

00401a6c <__retarget_lock_init_recursive>:
  401a6c:	4770      	bx	lr
  401a6e:	bf00      	nop

00401a70 <__retarget_lock_close_recursive>:
  401a70:	4770      	bx	lr
  401a72:	bf00      	nop

00401a74 <__retarget_lock_acquire_recursive>:
  401a74:	4770      	bx	lr
  401a76:	bf00      	nop

00401a78 <__retarget_lock_release_recursive>:
  401a78:	4770      	bx	lr
  401a7a:	bf00      	nop

00401a7c <__swhatbuf_r>:
  401a7c:	b570      	push	{r4, r5, r6, lr}
  401a7e:	460c      	mov	r4, r1
  401a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401a84:	2900      	cmp	r1, #0
  401a86:	b090      	sub	sp, #64	; 0x40
  401a88:	4615      	mov	r5, r2
  401a8a:	461e      	mov	r6, r3
  401a8c:	db14      	blt.n	401ab8 <__swhatbuf_r+0x3c>
  401a8e:	aa01      	add	r2, sp, #4
  401a90:	f000 fc28 	bl	4022e4 <_fstat_r>
  401a94:	2800      	cmp	r0, #0
  401a96:	db0f      	blt.n	401ab8 <__swhatbuf_r+0x3c>
  401a98:	9a02      	ldr	r2, [sp, #8]
  401a9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401a9e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401aa2:	fab2 f282 	clz	r2, r2
  401aa6:	0952      	lsrs	r2, r2, #5
  401aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401aac:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401ab0:	6032      	str	r2, [r6, #0]
  401ab2:	602b      	str	r3, [r5, #0]
  401ab4:	b010      	add	sp, #64	; 0x40
  401ab6:	bd70      	pop	{r4, r5, r6, pc}
  401ab8:	89a2      	ldrh	r2, [r4, #12]
  401aba:	2300      	movs	r3, #0
  401abc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401ac0:	6033      	str	r3, [r6, #0]
  401ac2:	d004      	beq.n	401ace <__swhatbuf_r+0x52>
  401ac4:	2240      	movs	r2, #64	; 0x40
  401ac6:	4618      	mov	r0, r3
  401ac8:	602a      	str	r2, [r5, #0]
  401aca:	b010      	add	sp, #64	; 0x40
  401acc:	bd70      	pop	{r4, r5, r6, pc}
  401ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401ad2:	602b      	str	r3, [r5, #0]
  401ad4:	b010      	add	sp, #64	; 0x40
  401ad6:	bd70      	pop	{r4, r5, r6, pc}

00401ad8 <malloc>:
  401ad8:	4b02      	ldr	r3, [pc, #8]	; (401ae4 <malloc+0xc>)
  401ada:	4601      	mov	r1, r0
  401adc:	6818      	ldr	r0, [r3, #0]
  401ade:	f000 b803 	b.w	401ae8 <_malloc_r>
  401ae2:	bf00      	nop
  401ae4:	20000008 	.word	0x20000008

00401ae8 <_malloc_r>:
  401ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401aec:	f101 060b 	add.w	r6, r1, #11
  401af0:	2e16      	cmp	r6, #22
  401af2:	b083      	sub	sp, #12
  401af4:	4605      	mov	r5, r0
  401af6:	f240 809e 	bls.w	401c36 <_malloc_r+0x14e>
  401afa:	f036 0607 	bics.w	r6, r6, #7
  401afe:	f100 80bd 	bmi.w	401c7c <_malloc_r+0x194>
  401b02:	42b1      	cmp	r1, r6
  401b04:	f200 80ba 	bhi.w	401c7c <_malloc_r+0x194>
  401b08:	f000 fa9e 	bl	402048 <__malloc_lock>
  401b0c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401b10:	f0c0 8293 	bcc.w	40203a <_malloc_r+0x552>
  401b14:	0a73      	lsrs	r3, r6, #9
  401b16:	f000 80b8 	beq.w	401c8a <_malloc_r+0x1a2>
  401b1a:	2b04      	cmp	r3, #4
  401b1c:	f200 8179 	bhi.w	401e12 <_malloc_r+0x32a>
  401b20:	09b3      	lsrs	r3, r6, #6
  401b22:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401b26:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401b2a:	00c3      	lsls	r3, r0, #3
  401b2c:	4fbf      	ldr	r7, [pc, #764]	; (401e2c <_malloc_r+0x344>)
  401b2e:	443b      	add	r3, r7
  401b30:	f1a3 0108 	sub.w	r1, r3, #8
  401b34:	685c      	ldr	r4, [r3, #4]
  401b36:	42a1      	cmp	r1, r4
  401b38:	d106      	bne.n	401b48 <_malloc_r+0x60>
  401b3a:	e00c      	b.n	401b56 <_malloc_r+0x6e>
  401b3c:	2a00      	cmp	r2, #0
  401b3e:	f280 80aa 	bge.w	401c96 <_malloc_r+0x1ae>
  401b42:	68e4      	ldr	r4, [r4, #12]
  401b44:	42a1      	cmp	r1, r4
  401b46:	d006      	beq.n	401b56 <_malloc_r+0x6e>
  401b48:	6863      	ldr	r3, [r4, #4]
  401b4a:	f023 0303 	bic.w	r3, r3, #3
  401b4e:	1b9a      	subs	r2, r3, r6
  401b50:	2a0f      	cmp	r2, #15
  401b52:	ddf3      	ble.n	401b3c <_malloc_r+0x54>
  401b54:	4670      	mov	r0, lr
  401b56:	693c      	ldr	r4, [r7, #16]
  401b58:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401e40 <_malloc_r+0x358>
  401b5c:	4574      	cmp	r4, lr
  401b5e:	f000 81ab 	beq.w	401eb8 <_malloc_r+0x3d0>
  401b62:	6863      	ldr	r3, [r4, #4]
  401b64:	f023 0303 	bic.w	r3, r3, #3
  401b68:	1b9a      	subs	r2, r3, r6
  401b6a:	2a0f      	cmp	r2, #15
  401b6c:	f300 8190 	bgt.w	401e90 <_malloc_r+0x3a8>
  401b70:	2a00      	cmp	r2, #0
  401b72:	f8c7 e014 	str.w	lr, [r7, #20]
  401b76:	f8c7 e010 	str.w	lr, [r7, #16]
  401b7a:	f280 809d 	bge.w	401cb8 <_malloc_r+0x1d0>
  401b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401b82:	f080 8161 	bcs.w	401e48 <_malloc_r+0x360>
  401b86:	08db      	lsrs	r3, r3, #3
  401b88:	f103 0c01 	add.w	ip, r3, #1
  401b8c:	1099      	asrs	r1, r3, #2
  401b8e:	687a      	ldr	r2, [r7, #4]
  401b90:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401b94:	f8c4 8008 	str.w	r8, [r4, #8]
  401b98:	2301      	movs	r3, #1
  401b9a:	408b      	lsls	r3, r1
  401b9c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401ba0:	4313      	orrs	r3, r2
  401ba2:	3908      	subs	r1, #8
  401ba4:	60e1      	str	r1, [r4, #12]
  401ba6:	607b      	str	r3, [r7, #4]
  401ba8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401bac:	f8c8 400c 	str.w	r4, [r8, #12]
  401bb0:	1082      	asrs	r2, r0, #2
  401bb2:	2401      	movs	r4, #1
  401bb4:	4094      	lsls	r4, r2
  401bb6:	429c      	cmp	r4, r3
  401bb8:	f200 808b 	bhi.w	401cd2 <_malloc_r+0x1ea>
  401bbc:	421c      	tst	r4, r3
  401bbe:	d106      	bne.n	401bce <_malloc_r+0xe6>
  401bc0:	f020 0003 	bic.w	r0, r0, #3
  401bc4:	0064      	lsls	r4, r4, #1
  401bc6:	421c      	tst	r4, r3
  401bc8:	f100 0004 	add.w	r0, r0, #4
  401bcc:	d0fa      	beq.n	401bc4 <_malloc_r+0xdc>
  401bce:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401bd2:	46cc      	mov	ip, r9
  401bd4:	4680      	mov	r8, r0
  401bd6:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401bda:	459c      	cmp	ip, r3
  401bdc:	d107      	bne.n	401bee <_malloc_r+0x106>
  401bde:	e16d      	b.n	401ebc <_malloc_r+0x3d4>
  401be0:	2a00      	cmp	r2, #0
  401be2:	f280 817b 	bge.w	401edc <_malloc_r+0x3f4>
  401be6:	68db      	ldr	r3, [r3, #12]
  401be8:	459c      	cmp	ip, r3
  401bea:	f000 8167 	beq.w	401ebc <_malloc_r+0x3d4>
  401bee:	6859      	ldr	r1, [r3, #4]
  401bf0:	f021 0103 	bic.w	r1, r1, #3
  401bf4:	1b8a      	subs	r2, r1, r6
  401bf6:	2a0f      	cmp	r2, #15
  401bf8:	ddf2      	ble.n	401be0 <_malloc_r+0xf8>
  401bfa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401bfe:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401c02:	9300      	str	r3, [sp, #0]
  401c04:	199c      	adds	r4, r3, r6
  401c06:	4628      	mov	r0, r5
  401c08:	f046 0601 	orr.w	r6, r6, #1
  401c0c:	f042 0501 	orr.w	r5, r2, #1
  401c10:	605e      	str	r6, [r3, #4]
  401c12:	f8c8 c00c 	str.w	ip, [r8, #12]
  401c16:	f8cc 8008 	str.w	r8, [ip, #8]
  401c1a:	617c      	str	r4, [r7, #20]
  401c1c:	613c      	str	r4, [r7, #16]
  401c1e:	f8c4 e00c 	str.w	lr, [r4, #12]
  401c22:	f8c4 e008 	str.w	lr, [r4, #8]
  401c26:	6065      	str	r5, [r4, #4]
  401c28:	505a      	str	r2, [r3, r1]
  401c2a:	f000 fa13 	bl	402054 <__malloc_unlock>
  401c2e:	9b00      	ldr	r3, [sp, #0]
  401c30:	f103 0408 	add.w	r4, r3, #8
  401c34:	e01e      	b.n	401c74 <_malloc_r+0x18c>
  401c36:	2910      	cmp	r1, #16
  401c38:	d820      	bhi.n	401c7c <_malloc_r+0x194>
  401c3a:	f000 fa05 	bl	402048 <__malloc_lock>
  401c3e:	2610      	movs	r6, #16
  401c40:	2318      	movs	r3, #24
  401c42:	2002      	movs	r0, #2
  401c44:	4f79      	ldr	r7, [pc, #484]	; (401e2c <_malloc_r+0x344>)
  401c46:	443b      	add	r3, r7
  401c48:	f1a3 0208 	sub.w	r2, r3, #8
  401c4c:	685c      	ldr	r4, [r3, #4]
  401c4e:	4294      	cmp	r4, r2
  401c50:	f000 813d 	beq.w	401ece <_malloc_r+0x3e6>
  401c54:	6863      	ldr	r3, [r4, #4]
  401c56:	68e1      	ldr	r1, [r4, #12]
  401c58:	68a6      	ldr	r6, [r4, #8]
  401c5a:	f023 0303 	bic.w	r3, r3, #3
  401c5e:	4423      	add	r3, r4
  401c60:	4628      	mov	r0, r5
  401c62:	685a      	ldr	r2, [r3, #4]
  401c64:	60f1      	str	r1, [r6, #12]
  401c66:	f042 0201 	orr.w	r2, r2, #1
  401c6a:	608e      	str	r6, [r1, #8]
  401c6c:	605a      	str	r2, [r3, #4]
  401c6e:	f000 f9f1 	bl	402054 <__malloc_unlock>
  401c72:	3408      	adds	r4, #8
  401c74:	4620      	mov	r0, r4
  401c76:	b003      	add	sp, #12
  401c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c7c:	2400      	movs	r4, #0
  401c7e:	230c      	movs	r3, #12
  401c80:	4620      	mov	r0, r4
  401c82:	602b      	str	r3, [r5, #0]
  401c84:	b003      	add	sp, #12
  401c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c8a:	2040      	movs	r0, #64	; 0x40
  401c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
  401c90:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401c94:	e74a      	b.n	401b2c <_malloc_r+0x44>
  401c96:	4423      	add	r3, r4
  401c98:	68e1      	ldr	r1, [r4, #12]
  401c9a:	685a      	ldr	r2, [r3, #4]
  401c9c:	68a6      	ldr	r6, [r4, #8]
  401c9e:	f042 0201 	orr.w	r2, r2, #1
  401ca2:	60f1      	str	r1, [r6, #12]
  401ca4:	4628      	mov	r0, r5
  401ca6:	608e      	str	r6, [r1, #8]
  401ca8:	605a      	str	r2, [r3, #4]
  401caa:	f000 f9d3 	bl	402054 <__malloc_unlock>
  401cae:	3408      	adds	r4, #8
  401cb0:	4620      	mov	r0, r4
  401cb2:	b003      	add	sp, #12
  401cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cb8:	4423      	add	r3, r4
  401cba:	4628      	mov	r0, r5
  401cbc:	685a      	ldr	r2, [r3, #4]
  401cbe:	f042 0201 	orr.w	r2, r2, #1
  401cc2:	605a      	str	r2, [r3, #4]
  401cc4:	f000 f9c6 	bl	402054 <__malloc_unlock>
  401cc8:	3408      	adds	r4, #8
  401cca:	4620      	mov	r0, r4
  401ccc:	b003      	add	sp, #12
  401cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cd2:	68bc      	ldr	r4, [r7, #8]
  401cd4:	6863      	ldr	r3, [r4, #4]
  401cd6:	f023 0803 	bic.w	r8, r3, #3
  401cda:	45b0      	cmp	r8, r6
  401cdc:	d304      	bcc.n	401ce8 <_malloc_r+0x200>
  401cde:	eba8 0306 	sub.w	r3, r8, r6
  401ce2:	2b0f      	cmp	r3, #15
  401ce4:	f300 8085 	bgt.w	401df2 <_malloc_r+0x30a>
  401ce8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401e44 <_malloc_r+0x35c>
  401cec:	4b50      	ldr	r3, [pc, #320]	; (401e30 <_malloc_r+0x348>)
  401cee:	f8d9 2000 	ldr.w	r2, [r9]
  401cf2:	681b      	ldr	r3, [r3, #0]
  401cf4:	3201      	adds	r2, #1
  401cf6:	4433      	add	r3, r6
  401cf8:	eb04 0a08 	add.w	sl, r4, r8
  401cfc:	f000 8155 	beq.w	401faa <_malloc_r+0x4c2>
  401d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401d04:	330f      	adds	r3, #15
  401d06:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401d0a:	f02b 0b0f 	bic.w	fp, fp, #15
  401d0e:	4659      	mov	r1, fp
  401d10:	4628      	mov	r0, r5
  401d12:	f000 f9a5 	bl	402060 <_sbrk_r>
  401d16:	1c41      	adds	r1, r0, #1
  401d18:	4602      	mov	r2, r0
  401d1a:	f000 80fc 	beq.w	401f16 <_malloc_r+0x42e>
  401d1e:	4582      	cmp	sl, r0
  401d20:	f200 80f7 	bhi.w	401f12 <_malloc_r+0x42a>
  401d24:	4b43      	ldr	r3, [pc, #268]	; (401e34 <_malloc_r+0x34c>)
  401d26:	6819      	ldr	r1, [r3, #0]
  401d28:	4459      	add	r1, fp
  401d2a:	6019      	str	r1, [r3, #0]
  401d2c:	f000 814d 	beq.w	401fca <_malloc_r+0x4e2>
  401d30:	f8d9 0000 	ldr.w	r0, [r9]
  401d34:	3001      	adds	r0, #1
  401d36:	bf1b      	ittet	ne
  401d38:	eba2 0a0a 	subne.w	sl, r2, sl
  401d3c:	4451      	addne	r1, sl
  401d3e:	f8c9 2000 	streq.w	r2, [r9]
  401d42:	6019      	strne	r1, [r3, #0]
  401d44:	f012 0107 	ands.w	r1, r2, #7
  401d48:	f000 8115 	beq.w	401f76 <_malloc_r+0x48e>
  401d4c:	f1c1 0008 	rsb	r0, r1, #8
  401d50:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401d54:	4402      	add	r2, r0
  401d56:	3108      	adds	r1, #8
  401d58:	eb02 090b 	add.w	r9, r2, fp
  401d5c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401d60:	eba1 0909 	sub.w	r9, r1, r9
  401d64:	4649      	mov	r1, r9
  401d66:	4628      	mov	r0, r5
  401d68:	9301      	str	r3, [sp, #4]
  401d6a:	9200      	str	r2, [sp, #0]
  401d6c:	f000 f978 	bl	402060 <_sbrk_r>
  401d70:	1c43      	adds	r3, r0, #1
  401d72:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401d76:	f000 8143 	beq.w	402000 <_malloc_r+0x518>
  401d7a:	1a80      	subs	r0, r0, r2
  401d7c:	4448      	add	r0, r9
  401d7e:	f040 0001 	orr.w	r0, r0, #1
  401d82:	6819      	ldr	r1, [r3, #0]
  401d84:	60ba      	str	r2, [r7, #8]
  401d86:	4449      	add	r1, r9
  401d88:	42bc      	cmp	r4, r7
  401d8a:	6050      	str	r0, [r2, #4]
  401d8c:	6019      	str	r1, [r3, #0]
  401d8e:	d017      	beq.n	401dc0 <_malloc_r+0x2d8>
  401d90:	f1b8 0f0f 	cmp.w	r8, #15
  401d94:	f240 80fb 	bls.w	401f8e <_malloc_r+0x4a6>
  401d98:	6860      	ldr	r0, [r4, #4]
  401d9a:	f1a8 020c 	sub.w	r2, r8, #12
  401d9e:	f022 0207 	bic.w	r2, r2, #7
  401da2:	eb04 0e02 	add.w	lr, r4, r2
  401da6:	f000 0001 	and.w	r0, r0, #1
  401daa:	f04f 0c05 	mov.w	ip, #5
  401dae:	4310      	orrs	r0, r2
  401db0:	2a0f      	cmp	r2, #15
  401db2:	6060      	str	r0, [r4, #4]
  401db4:	f8ce c004 	str.w	ip, [lr, #4]
  401db8:	f8ce c008 	str.w	ip, [lr, #8]
  401dbc:	f200 8117 	bhi.w	401fee <_malloc_r+0x506>
  401dc0:	4b1d      	ldr	r3, [pc, #116]	; (401e38 <_malloc_r+0x350>)
  401dc2:	68bc      	ldr	r4, [r7, #8]
  401dc4:	681a      	ldr	r2, [r3, #0]
  401dc6:	4291      	cmp	r1, r2
  401dc8:	bf88      	it	hi
  401dca:	6019      	strhi	r1, [r3, #0]
  401dcc:	4b1b      	ldr	r3, [pc, #108]	; (401e3c <_malloc_r+0x354>)
  401dce:	681a      	ldr	r2, [r3, #0]
  401dd0:	4291      	cmp	r1, r2
  401dd2:	6862      	ldr	r2, [r4, #4]
  401dd4:	bf88      	it	hi
  401dd6:	6019      	strhi	r1, [r3, #0]
  401dd8:	f022 0203 	bic.w	r2, r2, #3
  401ddc:	4296      	cmp	r6, r2
  401dde:	eba2 0306 	sub.w	r3, r2, r6
  401de2:	d801      	bhi.n	401de8 <_malloc_r+0x300>
  401de4:	2b0f      	cmp	r3, #15
  401de6:	dc04      	bgt.n	401df2 <_malloc_r+0x30a>
  401de8:	4628      	mov	r0, r5
  401dea:	f000 f933 	bl	402054 <__malloc_unlock>
  401dee:	2400      	movs	r4, #0
  401df0:	e740      	b.n	401c74 <_malloc_r+0x18c>
  401df2:	19a2      	adds	r2, r4, r6
  401df4:	f043 0301 	orr.w	r3, r3, #1
  401df8:	f046 0601 	orr.w	r6, r6, #1
  401dfc:	6066      	str	r6, [r4, #4]
  401dfe:	4628      	mov	r0, r5
  401e00:	60ba      	str	r2, [r7, #8]
  401e02:	6053      	str	r3, [r2, #4]
  401e04:	f000 f926 	bl	402054 <__malloc_unlock>
  401e08:	3408      	adds	r4, #8
  401e0a:	4620      	mov	r0, r4
  401e0c:	b003      	add	sp, #12
  401e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e12:	2b14      	cmp	r3, #20
  401e14:	d971      	bls.n	401efa <_malloc_r+0x412>
  401e16:	2b54      	cmp	r3, #84	; 0x54
  401e18:	f200 80a3 	bhi.w	401f62 <_malloc_r+0x47a>
  401e1c:	0b33      	lsrs	r3, r6, #12
  401e1e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401e22:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401e26:	00c3      	lsls	r3, r0, #3
  401e28:	e680      	b.n	401b2c <_malloc_r+0x44>
  401e2a:	bf00      	nop
  401e2c:	2000043c 	.word	0x2000043c
  401e30:	20000948 	.word	0x20000948
  401e34:	20000918 	.word	0x20000918
  401e38:	20000940 	.word	0x20000940
  401e3c:	20000944 	.word	0x20000944
  401e40:	20000444 	.word	0x20000444
  401e44:	20000844 	.word	0x20000844
  401e48:	0a5a      	lsrs	r2, r3, #9
  401e4a:	2a04      	cmp	r2, #4
  401e4c:	d95b      	bls.n	401f06 <_malloc_r+0x41e>
  401e4e:	2a14      	cmp	r2, #20
  401e50:	f200 80ae 	bhi.w	401fb0 <_malloc_r+0x4c8>
  401e54:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401e58:	00c9      	lsls	r1, r1, #3
  401e5a:	325b      	adds	r2, #91	; 0x5b
  401e5c:	eb07 0c01 	add.w	ip, r7, r1
  401e60:	5879      	ldr	r1, [r7, r1]
  401e62:	f1ac 0c08 	sub.w	ip, ip, #8
  401e66:	458c      	cmp	ip, r1
  401e68:	f000 8088 	beq.w	401f7c <_malloc_r+0x494>
  401e6c:	684a      	ldr	r2, [r1, #4]
  401e6e:	f022 0203 	bic.w	r2, r2, #3
  401e72:	4293      	cmp	r3, r2
  401e74:	d273      	bcs.n	401f5e <_malloc_r+0x476>
  401e76:	6889      	ldr	r1, [r1, #8]
  401e78:	458c      	cmp	ip, r1
  401e7a:	d1f7      	bne.n	401e6c <_malloc_r+0x384>
  401e7c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401e80:	687b      	ldr	r3, [r7, #4]
  401e82:	60e2      	str	r2, [r4, #12]
  401e84:	f8c4 c008 	str.w	ip, [r4, #8]
  401e88:	6094      	str	r4, [r2, #8]
  401e8a:	f8cc 400c 	str.w	r4, [ip, #12]
  401e8e:	e68f      	b.n	401bb0 <_malloc_r+0xc8>
  401e90:	19a1      	adds	r1, r4, r6
  401e92:	f046 0c01 	orr.w	ip, r6, #1
  401e96:	f042 0601 	orr.w	r6, r2, #1
  401e9a:	f8c4 c004 	str.w	ip, [r4, #4]
  401e9e:	4628      	mov	r0, r5
  401ea0:	6179      	str	r1, [r7, #20]
  401ea2:	6139      	str	r1, [r7, #16]
  401ea4:	f8c1 e00c 	str.w	lr, [r1, #12]
  401ea8:	f8c1 e008 	str.w	lr, [r1, #8]
  401eac:	604e      	str	r6, [r1, #4]
  401eae:	50e2      	str	r2, [r4, r3]
  401eb0:	f000 f8d0 	bl	402054 <__malloc_unlock>
  401eb4:	3408      	adds	r4, #8
  401eb6:	e6dd      	b.n	401c74 <_malloc_r+0x18c>
  401eb8:	687b      	ldr	r3, [r7, #4]
  401eba:	e679      	b.n	401bb0 <_malloc_r+0xc8>
  401ebc:	f108 0801 	add.w	r8, r8, #1
  401ec0:	f018 0f03 	tst.w	r8, #3
  401ec4:	f10c 0c08 	add.w	ip, ip, #8
  401ec8:	f47f ae85 	bne.w	401bd6 <_malloc_r+0xee>
  401ecc:	e02d      	b.n	401f2a <_malloc_r+0x442>
  401ece:	68dc      	ldr	r4, [r3, #12]
  401ed0:	42a3      	cmp	r3, r4
  401ed2:	bf08      	it	eq
  401ed4:	3002      	addeq	r0, #2
  401ed6:	f43f ae3e 	beq.w	401b56 <_malloc_r+0x6e>
  401eda:	e6bb      	b.n	401c54 <_malloc_r+0x16c>
  401edc:	4419      	add	r1, r3
  401ede:	461c      	mov	r4, r3
  401ee0:	684a      	ldr	r2, [r1, #4]
  401ee2:	68db      	ldr	r3, [r3, #12]
  401ee4:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401ee8:	f042 0201 	orr.w	r2, r2, #1
  401eec:	604a      	str	r2, [r1, #4]
  401eee:	4628      	mov	r0, r5
  401ef0:	60f3      	str	r3, [r6, #12]
  401ef2:	609e      	str	r6, [r3, #8]
  401ef4:	f000 f8ae 	bl	402054 <__malloc_unlock>
  401ef8:	e6bc      	b.n	401c74 <_malloc_r+0x18c>
  401efa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  401efe:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  401f02:	00c3      	lsls	r3, r0, #3
  401f04:	e612      	b.n	401b2c <_malloc_r+0x44>
  401f06:	099a      	lsrs	r2, r3, #6
  401f08:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401f0c:	00c9      	lsls	r1, r1, #3
  401f0e:	3238      	adds	r2, #56	; 0x38
  401f10:	e7a4      	b.n	401e5c <_malloc_r+0x374>
  401f12:	42bc      	cmp	r4, r7
  401f14:	d054      	beq.n	401fc0 <_malloc_r+0x4d8>
  401f16:	68bc      	ldr	r4, [r7, #8]
  401f18:	6862      	ldr	r2, [r4, #4]
  401f1a:	f022 0203 	bic.w	r2, r2, #3
  401f1e:	e75d      	b.n	401ddc <_malloc_r+0x2f4>
  401f20:	f859 3908 	ldr.w	r3, [r9], #-8
  401f24:	4599      	cmp	r9, r3
  401f26:	f040 8086 	bne.w	402036 <_malloc_r+0x54e>
  401f2a:	f010 0f03 	tst.w	r0, #3
  401f2e:	f100 30ff 	add.w	r0, r0, #4294967295
  401f32:	d1f5      	bne.n	401f20 <_malloc_r+0x438>
  401f34:	687b      	ldr	r3, [r7, #4]
  401f36:	ea23 0304 	bic.w	r3, r3, r4
  401f3a:	607b      	str	r3, [r7, #4]
  401f3c:	0064      	lsls	r4, r4, #1
  401f3e:	429c      	cmp	r4, r3
  401f40:	f63f aec7 	bhi.w	401cd2 <_malloc_r+0x1ea>
  401f44:	2c00      	cmp	r4, #0
  401f46:	f43f aec4 	beq.w	401cd2 <_malloc_r+0x1ea>
  401f4a:	421c      	tst	r4, r3
  401f4c:	4640      	mov	r0, r8
  401f4e:	f47f ae3e 	bne.w	401bce <_malloc_r+0xe6>
  401f52:	0064      	lsls	r4, r4, #1
  401f54:	421c      	tst	r4, r3
  401f56:	f100 0004 	add.w	r0, r0, #4
  401f5a:	d0fa      	beq.n	401f52 <_malloc_r+0x46a>
  401f5c:	e637      	b.n	401bce <_malloc_r+0xe6>
  401f5e:	468c      	mov	ip, r1
  401f60:	e78c      	b.n	401e7c <_malloc_r+0x394>
  401f62:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401f66:	d815      	bhi.n	401f94 <_malloc_r+0x4ac>
  401f68:	0bf3      	lsrs	r3, r6, #15
  401f6a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401f6e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  401f72:	00c3      	lsls	r3, r0, #3
  401f74:	e5da      	b.n	401b2c <_malloc_r+0x44>
  401f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401f7a:	e6ed      	b.n	401d58 <_malloc_r+0x270>
  401f7c:	687b      	ldr	r3, [r7, #4]
  401f7e:	1092      	asrs	r2, r2, #2
  401f80:	2101      	movs	r1, #1
  401f82:	fa01 f202 	lsl.w	r2, r1, r2
  401f86:	4313      	orrs	r3, r2
  401f88:	607b      	str	r3, [r7, #4]
  401f8a:	4662      	mov	r2, ip
  401f8c:	e779      	b.n	401e82 <_malloc_r+0x39a>
  401f8e:	2301      	movs	r3, #1
  401f90:	6053      	str	r3, [r2, #4]
  401f92:	e729      	b.n	401de8 <_malloc_r+0x300>
  401f94:	f240 5254 	movw	r2, #1364	; 0x554
  401f98:	4293      	cmp	r3, r2
  401f9a:	d822      	bhi.n	401fe2 <_malloc_r+0x4fa>
  401f9c:	0cb3      	lsrs	r3, r6, #18
  401f9e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  401fa2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  401fa6:	00c3      	lsls	r3, r0, #3
  401fa8:	e5c0      	b.n	401b2c <_malloc_r+0x44>
  401faa:	f103 0b10 	add.w	fp, r3, #16
  401fae:	e6ae      	b.n	401d0e <_malloc_r+0x226>
  401fb0:	2a54      	cmp	r2, #84	; 0x54
  401fb2:	d829      	bhi.n	402008 <_malloc_r+0x520>
  401fb4:	0b1a      	lsrs	r2, r3, #12
  401fb6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401fba:	00c9      	lsls	r1, r1, #3
  401fbc:	326e      	adds	r2, #110	; 0x6e
  401fbe:	e74d      	b.n	401e5c <_malloc_r+0x374>
  401fc0:	4b20      	ldr	r3, [pc, #128]	; (402044 <_malloc_r+0x55c>)
  401fc2:	6819      	ldr	r1, [r3, #0]
  401fc4:	4459      	add	r1, fp
  401fc6:	6019      	str	r1, [r3, #0]
  401fc8:	e6b2      	b.n	401d30 <_malloc_r+0x248>
  401fca:	f3ca 000b 	ubfx	r0, sl, #0, #12
  401fce:	2800      	cmp	r0, #0
  401fd0:	f47f aeae 	bne.w	401d30 <_malloc_r+0x248>
  401fd4:	eb08 030b 	add.w	r3, r8, fp
  401fd8:	68ba      	ldr	r2, [r7, #8]
  401fda:	f043 0301 	orr.w	r3, r3, #1
  401fde:	6053      	str	r3, [r2, #4]
  401fe0:	e6ee      	b.n	401dc0 <_malloc_r+0x2d8>
  401fe2:	207f      	movs	r0, #127	; 0x7f
  401fe4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  401fe8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  401fec:	e59e      	b.n	401b2c <_malloc_r+0x44>
  401fee:	f104 0108 	add.w	r1, r4, #8
  401ff2:	4628      	mov	r0, r5
  401ff4:	9300      	str	r3, [sp, #0]
  401ff6:	f7ff fc29 	bl	40184c <_free_r>
  401ffa:	9b00      	ldr	r3, [sp, #0]
  401ffc:	6819      	ldr	r1, [r3, #0]
  401ffe:	e6df      	b.n	401dc0 <_malloc_r+0x2d8>
  402000:	2001      	movs	r0, #1
  402002:	f04f 0900 	mov.w	r9, #0
  402006:	e6bc      	b.n	401d82 <_malloc_r+0x29a>
  402008:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40200c:	d805      	bhi.n	40201a <_malloc_r+0x532>
  40200e:	0bda      	lsrs	r2, r3, #15
  402010:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402014:	00c9      	lsls	r1, r1, #3
  402016:	3277      	adds	r2, #119	; 0x77
  402018:	e720      	b.n	401e5c <_malloc_r+0x374>
  40201a:	f240 5154 	movw	r1, #1364	; 0x554
  40201e:	428a      	cmp	r2, r1
  402020:	d805      	bhi.n	40202e <_malloc_r+0x546>
  402022:	0c9a      	lsrs	r2, r3, #18
  402024:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402028:	00c9      	lsls	r1, r1, #3
  40202a:	327c      	adds	r2, #124	; 0x7c
  40202c:	e716      	b.n	401e5c <_malloc_r+0x374>
  40202e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402032:	227e      	movs	r2, #126	; 0x7e
  402034:	e712      	b.n	401e5c <_malloc_r+0x374>
  402036:	687b      	ldr	r3, [r7, #4]
  402038:	e780      	b.n	401f3c <_malloc_r+0x454>
  40203a:	08f0      	lsrs	r0, r6, #3
  40203c:	f106 0308 	add.w	r3, r6, #8
  402040:	e600      	b.n	401c44 <_malloc_r+0x15c>
  402042:	bf00      	nop
  402044:	20000918 	.word	0x20000918

00402048 <__malloc_lock>:
  402048:	4801      	ldr	r0, [pc, #4]	; (402050 <__malloc_lock+0x8>)
  40204a:	f7ff bd13 	b.w	401a74 <__retarget_lock_acquire_recursive>
  40204e:	bf00      	nop
  402050:	20000a2c 	.word	0x20000a2c

00402054 <__malloc_unlock>:
  402054:	4801      	ldr	r0, [pc, #4]	; (40205c <__malloc_unlock+0x8>)
  402056:	f7ff bd0f 	b.w	401a78 <__retarget_lock_release_recursive>
  40205a:	bf00      	nop
  40205c:	20000a2c 	.word	0x20000a2c

00402060 <_sbrk_r>:
  402060:	b538      	push	{r3, r4, r5, lr}
  402062:	4c07      	ldr	r4, [pc, #28]	; (402080 <_sbrk_r+0x20>)
  402064:	2300      	movs	r3, #0
  402066:	4605      	mov	r5, r0
  402068:	4608      	mov	r0, r1
  40206a:	6023      	str	r3, [r4, #0]
  40206c:	f7ff f8d8 	bl	401220 <_sbrk>
  402070:	1c43      	adds	r3, r0, #1
  402072:	d000      	beq.n	402076 <_sbrk_r+0x16>
  402074:	bd38      	pop	{r3, r4, r5, pc}
  402076:	6823      	ldr	r3, [r4, #0]
  402078:	2b00      	cmp	r3, #0
  40207a:	d0fb      	beq.n	402074 <_sbrk_r+0x14>
  40207c:	602b      	str	r3, [r5, #0]
  40207e:	bd38      	pop	{r3, r4, r5, pc}
  402080:	20000a40 	.word	0x20000a40

00402084 <__sread>:
  402084:	b510      	push	{r4, lr}
  402086:	460c      	mov	r4, r1
  402088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40208c:	f000 f954 	bl	402338 <_read_r>
  402090:	2800      	cmp	r0, #0
  402092:	db03      	blt.n	40209c <__sread+0x18>
  402094:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402096:	4403      	add	r3, r0
  402098:	6523      	str	r3, [r4, #80]	; 0x50
  40209a:	bd10      	pop	{r4, pc}
  40209c:	89a3      	ldrh	r3, [r4, #12]
  40209e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4020a2:	81a3      	strh	r3, [r4, #12]
  4020a4:	bd10      	pop	{r4, pc}
  4020a6:	bf00      	nop

004020a8 <__swrite>:
  4020a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020ac:	4616      	mov	r6, r2
  4020ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4020b2:	461f      	mov	r7, r3
  4020b4:	05d3      	lsls	r3, r2, #23
  4020b6:	460c      	mov	r4, r1
  4020b8:	4605      	mov	r5, r0
  4020ba:	d507      	bpl.n	4020cc <__swrite+0x24>
  4020bc:	2200      	movs	r2, #0
  4020be:	2302      	movs	r3, #2
  4020c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4020c4:	f000 f922 	bl	40230c <_lseek_r>
  4020c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4020cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4020d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4020d4:	81a2      	strh	r2, [r4, #12]
  4020d6:	463b      	mov	r3, r7
  4020d8:	4632      	mov	r2, r6
  4020da:	4628      	mov	r0, r5
  4020dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4020e0:	f000 b814 	b.w	40210c <_write_r>

004020e4 <__sseek>:
  4020e4:	b510      	push	{r4, lr}
  4020e6:	460c      	mov	r4, r1
  4020e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4020ec:	f000 f90e 	bl	40230c <_lseek_r>
  4020f0:	89a3      	ldrh	r3, [r4, #12]
  4020f2:	1c42      	adds	r2, r0, #1
  4020f4:	bf0e      	itee	eq
  4020f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4020fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4020fe:	6520      	strne	r0, [r4, #80]	; 0x50
  402100:	81a3      	strh	r3, [r4, #12]
  402102:	bd10      	pop	{r4, pc}

00402104 <__sclose>:
  402104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402108:	f000 b878 	b.w	4021fc <_close_r>

0040210c <_write_r>:
  40210c:	b570      	push	{r4, r5, r6, lr}
  40210e:	460d      	mov	r5, r1
  402110:	4c08      	ldr	r4, [pc, #32]	; (402134 <_write_r+0x28>)
  402112:	4611      	mov	r1, r2
  402114:	4606      	mov	r6, r0
  402116:	461a      	mov	r2, r3
  402118:	4628      	mov	r0, r5
  40211a:	2300      	movs	r3, #0
  40211c:	6023      	str	r3, [r4, #0]
  40211e:	f7fe fb1f 	bl	400760 <_write>
  402122:	1c43      	adds	r3, r0, #1
  402124:	d000      	beq.n	402128 <_write_r+0x1c>
  402126:	bd70      	pop	{r4, r5, r6, pc}
  402128:	6823      	ldr	r3, [r4, #0]
  40212a:	2b00      	cmp	r3, #0
  40212c:	d0fb      	beq.n	402126 <_write_r+0x1a>
  40212e:	6033      	str	r3, [r6, #0]
  402130:	bd70      	pop	{r4, r5, r6, pc}
  402132:	bf00      	nop
  402134:	20000a40 	.word	0x20000a40

00402138 <__register_exitproc>:
  402138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40213c:	4d2c      	ldr	r5, [pc, #176]	; (4021f0 <__register_exitproc+0xb8>)
  40213e:	4606      	mov	r6, r0
  402140:	6828      	ldr	r0, [r5, #0]
  402142:	4698      	mov	r8, r3
  402144:	460f      	mov	r7, r1
  402146:	4691      	mov	r9, r2
  402148:	f7ff fc94 	bl	401a74 <__retarget_lock_acquire_recursive>
  40214c:	4b29      	ldr	r3, [pc, #164]	; (4021f4 <__register_exitproc+0xbc>)
  40214e:	681c      	ldr	r4, [r3, #0]
  402150:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402154:	2b00      	cmp	r3, #0
  402156:	d03e      	beq.n	4021d6 <__register_exitproc+0x9e>
  402158:	685a      	ldr	r2, [r3, #4]
  40215a:	2a1f      	cmp	r2, #31
  40215c:	dc1c      	bgt.n	402198 <__register_exitproc+0x60>
  40215e:	f102 0e01 	add.w	lr, r2, #1
  402162:	b176      	cbz	r6, 402182 <__register_exitproc+0x4a>
  402164:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402168:	2401      	movs	r4, #1
  40216a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40216e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402172:	4094      	lsls	r4, r2
  402174:	4320      	orrs	r0, r4
  402176:	2e02      	cmp	r6, #2
  402178:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40217c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402180:	d023      	beq.n	4021ca <__register_exitproc+0x92>
  402182:	3202      	adds	r2, #2
  402184:	f8c3 e004 	str.w	lr, [r3, #4]
  402188:	6828      	ldr	r0, [r5, #0]
  40218a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40218e:	f7ff fc73 	bl	401a78 <__retarget_lock_release_recursive>
  402192:	2000      	movs	r0, #0
  402194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402198:	4b17      	ldr	r3, [pc, #92]	; (4021f8 <__register_exitproc+0xc0>)
  40219a:	b30b      	cbz	r3, 4021e0 <__register_exitproc+0xa8>
  40219c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4021a0:	f7ff fc9a 	bl	401ad8 <malloc>
  4021a4:	4603      	mov	r3, r0
  4021a6:	b1d8      	cbz	r0, 4021e0 <__register_exitproc+0xa8>
  4021a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4021ac:	6002      	str	r2, [r0, #0]
  4021ae:	2100      	movs	r1, #0
  4021b0:	6041      	str	r1, [r0, #4]
  4021b2:	460a      	mov	r2, r1
  4021b4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4021b8:	f04f 0e01 	mov.w	lr, #1
  4021bc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4021c0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4021c4:	2e00      	cmp	r6, #0
  4021c6:	d0dc      	beq.n	402182 <__register_exitproc+0x4a>
  4021c8:	e7cc      	b.n	402164 <__register_exitproc+0x2c>
  4021ca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4021ce:	430c      	orrs	r4, r1
  4021d0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4021d4:	e7d5      	b.n	402182 <__register_exitproc+0x4a>
  4021d6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4021da:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4021de:	e7bb      	b.n	402158 <__register_exitproc+0x20>
  4021e0:	6828      	ldr	r0, [r5, #0]
  4021e2:	f7ff fc49 	bl	401a78 <__retarget_lock_release_recursive>
  4021e6:	f04f 30ff 	mov.w	r0, #4294967295
  4021ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4021ee:	bf00      	nop
  4021f0:	20000438 	.word	0x20000438
  4021f4:	00402364 	.word	0x00402364
  4021f8:	00401ad9 	.word	0x00401ad9

004021fc <_close_r>:
  4021fc:	b538      	push	{r3, r4, r5, lr}
  4021fe:	4c07      	ldr	r4, [pc, #28]	; (40221c <_close_r+0x20>)
  402200:	2300      	movs	r3, #0
  402202:	4605      	mov	r5, r0
  402204:	4608      	mov	r0, r1
  402206:	6023      	str	r3, [r4, #0]
  402208:	f7ff f826 	bl	401258 <_close>
  40220c:	1c43      	adds	r3, r0, #1
  40220e:	d000      	beq.n	402212 <_close_r+0x16>
  402210:	bd38      	pop	{r3, r4, r5, pc}
  402212:	6823      	ldr	r3, [r4, #0]
  402214:	2b00      	cmp	r3, #0
  402216:	d0fb      	beq.n	402210 <_close_r+0x14>
  402218:	602b      	str	r3, [r5, #0]
  40221a:	bd38      	pop	{r3, r4, r5, pc}
  40221c:	20000a40 	.word	0x20000a40

00402220 <_fclose_r>:
  402220:	b570      	push	{r4, r5, r6, lr}
  402222:	b159      	cbz	r1, 40223c <_fclose_r+0x1c>
  402224:	4605      	mov	r5, r0
  402226:	460c      	mov	r4, r1
  402228:	b110      	cbz	r0, 402230 <_fclose_r+0x10>
  40222a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40222c:	2b00      	cmp	r3, #0
  40222e:	d03c      	beq.n	4022aa <_fclose_r+0x8a>
  402230:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402232:	07d8      	lsls	r0, r3, #31
  402234:	d505      	bpl.n	402242 <_fclose_r+0x22>
  402236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40223a:	b92b      	cbnz	r3, 402248 <_fclose_r+0x28>
  40223c:	2600      	movs	r6, #0
  40223e:	4630      	mov	r0, r6
  402240:	bd70      	pop	{r4, r5, r6, pc}
  402242:	89a3      	ldrh	r3, [r4, #12]
  402244:	0599      	lsls	r1, r3, #22
  402246:	d53c      	bpl.n	4022c2 <_fclose_r+0xa2>
  402248:	4621      	mov	r1, r4
  40224a:	4628      	mov	r0, r5
  40224c:	f7ff f964 	bl	401518 <__sflush_r>
  402250:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402252:	4606      	mov	r6, r0
  402254:	b133      	cbz	r3, 402264 <_fclose_r+0x44>
  402256:	69e1      	ldr	r1, [r4, #28]
  402258:	4628      	mov	r0, r5
  40225a:	4798      	blx	r3
  40225c:	2800      	cmp	r0, #0
  40225e:	bfb8      	it	lt
  402260:	f04f 36ff 	movlt.w	r6, #4294967295
  402264:	89a3      	ldrh	r3, [r4, #12]
  402266:	061a      	lsls	r2, r3, #24
  402268:	d422      	bmi.n	4022b0 <_fclose_r+0x90>
  40226a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40226c:	b141      	cbz	r1, 402280 <_fclose_r+0x60>
  40226e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402272:	4299      	cmp	r1, r3
  402274:	d002      	beq.n	40227c <_fclose_r+0x5c>
  402276:	4628      	mov	r0, r5
  402278:	f7ff fae8 	bl	40184c <_free_r>
  40227c:	2300      	movs	r3, #0
  40227e:	6323      	str	r3, [r4, #48]	; 0x30
  402280:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402282:	b121      	cbz	r1, 40228e <_fclose_r+0x6e>
  402284:	4628      	mov	r0, r5
  402286:	f7ff fae1 	bl	40184c <_free_r>
  40228a:	2300      	movs	r3, #0
  40228c:	6463      	str	r3, [r4, #68]	; 0x44
  40228e:	f7ff fa67 	bl	401760 <__sfp_lock_acquire>
  402292:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402294:	2200      	movs	r2, #0
  402296:	07db      	lsls	r3, r3, #31
  402298:	81a2      	strh	r2, [r4, #12]
  40229a:	d50e      	bpl.n	4022ba <_fclose_r+0x9a>
  40229c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40229e:	f7ff fbe7 	bl	401a70 <__retarget_lock_close_recursive>
  4022a2:	f7ff fa63 	bl	40176c <__sfp_lock_release>
  4022a6:	4630      	mov	r0, r6
  4022a8:	bd70      	pop	{r4, r5, r6, pc}
  4022aa:	f7ff fa2d 	bl	401708 <__sinit>
  4022ae:	e7bf      	b.n	402230 <_fclose_r+0x10>
  4022b0:	6921      	ldr	r1, [r4, #16]
  4022b2:	4628      	mov	r0, r5
  4022b4:	f7ff faca 	bl	40184c <_free_r>
  4022b8:	e7d7      	b.n	40226a <_fclose_r+0x4a>
  4022ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4022bc:	f7ff fbdc 	bl	401a78 <__retarget_lock_release_recursive>
  4022c0:	e7ec      	b.n	40229c <_fclose_r+0x7c>
  4022c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4022c4:	f7ff fbd6 	bl	401a74 <__retarget_lock_acquire_recursive>
  4022c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4022cc:	2b00      	cmp	r3, #0
  4022ce:	d1bb      	bne.n	402248 <_fclose_r+0x28>
  4022d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4022d2:	f016 0601 	ands.w	r6, r6, #1
  4022d6:	d1b1      	bne.n	40223c <_fclose_r+0x1c>
  4022d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4022da:	f7ff fbcd 	bl	401a78 <__retarget_lock_release_recursive>
  4022de:	4630      	mov	r0, r6
  4022e0:	bd70      	pop	{r4, r5, r6, pc}
  4022e2:	bf00      	nop

004022e4 <_fstat_r>:
  4022e4:	b538      	push	{r3, r4, r5, lr}
  4022e6:	460b      	mov	r3, r1
  4022e8:	4c07      	ldr	r4, [pc, #28]	; (402308 <_fstat_r+0x24>)
  4022ea:	4605      	mov	r5, r0
  4022ec:	4611      	mov	r1, r2
  4022ee:	4618      	mov	r0, r3
  4022f0:	2300      	movs	r3, #0
  4022f2:	6023      	str	r3, [r4, #0]
  4022f4:	f7fe ffb3 	bl	40125e <_fstat>
  4022f8:	1c43      	adds	r3, r0, #1
  4022fa:	d000      	beq.n	4022fe <_fstat_r+0x1a>
  4022fc:	bd38      	pop	{r3, r4, r5, pc}
  4022fe:	6823      	ldr	r3, [r4, #0]
  402300:	2b00      	cmp	r3, #0
  402302:	d0fb      	beq.n	4022fc <_fstat_r+0x18>
  402304:	602b      	str	r3, [r5, #0]
  402306:	bd38      	pop	{r3, r4, r5, pc}
  402308:	20000a40 	.word	0x20000a40

0040230c <_lseek_r>:
  40230c:	b570      	push	{r4, r5, r6, lr}
  40230e:	460d      	mov	r5, r1
  402310:	4c08      	ldr	r4, [pc, #32]	; (402334 <_lseek_r+0x28>)
  402312:	4611      	mov	r1, r2
  402314:	4606      	mov	r6, r0
  402316:	461a      	mov	r2, r3
  402318:	4628      	mov	r0, r5
  40231a:	2300      	movs	r3, #0
  40231c:	6023      	str	r3, [r4, #0]
  40231e:	f7fe ffa3 	bl	401268 <_lseek>
  402322:	1c43      	adds	r3, r0, #1
  402324:	d000      	beq.n	402328 <_lseek_r+0x1c>
  402326:	bd70      	pop	{r4, r5, r6, pc}
  402328:	6823      	ldr	r3, [r4, #0]
  40232a:	2b00      	cmp	r3, #0
  40232c:	d0fb      	beq.n	402326 <_lseek_r+0x1a>
  40232e:	6033      	str	r3, [r6, #0]
  402330:	bd70      	pop	{r4, r5, r6, pc}
  402332:	bf00      	nop
  402334:	20000a40 	.word	0x20000a40

00402338 <_read_r>:
  402338:	b570      	push	{r4, r5, r6, lr}
  40233a:	460d      	mov	r5, r1
  40233c:	4c08      	ldr	r4, [pc, #32]	; (402360 <_read_r+0x28>)
  40233e:	4611      	mov	r1, r2
  402340:	4606      	mov	r6, r0
  402342:	461a      	mov	r2, r3
  402344:	4628      	mov	r0, r5
  402346:	2300      	movs	r3, #0
  402348:	6023      	str	r3, [r4, #0]
  40234a:	f7fe f9eb 	bl	400724 <_read>
  40234e:	1c43      	adds	r3, r0, #1
  402350:	d000      	beq.n	402354 <_read_r+0x1c>
  402352:	bd70      	pop	{r4, r5, r6, pc}
  402354:	6823      	ldr	r3, [r4, #0]
  402356:	2b00      	cmp	r3, #0
  402358:	d0fb      	beq.n	402352 <_read_r+0x1a>
  40235a:	6033      	str	r3, [r6, #0]
  40235c:	bd70      	pop	{r4, r5, r6, pc}
  40235e:	bf00      	nop
  402360:	20000a40 	.word	0x20000a40

00402364 <_global_impure_ptr>:
  402364:	20000010                                ... 

00402368 <_init>:
  402368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40236a:	bf00      	nop
  40236c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40236e:	bc08      	pop	{r3}
  402370:	469e      	mov	lr, r3
  402372:	4770      	bx	lr

00402374 <__init_array_start>:
  402374:	004014f9 	.word	0x004014f9

00402378 <__frame_dummy_init_array_entry>:
  402378:	0040011d                                ..@.

0040237c <_fini>:
  40237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40237e:	bf00      	nop
  402380:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402382:	bc08      	pop	{r3}
  402384:	469e      	mov	lr, r3
  402386:	4770      	bx	lr

00402388 <__fini_array_start>:
  402388:	004000f9 	.word	0x004000f9
