
AFEC_EXAMPLE12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ef8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20000000  00401ef8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000014c  2000084c  00402744  0002084c  2**2
                  ALLOC
  3 .stack        00003000  20000998  00402890  0002084c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001201e  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002955  00000000  00000000  000328f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000034c5  00000000  00000000  00035246  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000820  00000000  00000000  0003870b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000730  00000000  00000000  00038f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001785a  00000000  00000000  0003965b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a3b9  00000000  00000000  00050eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00064dc6  00000000  00000000  0005b26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001830  00000000  00000000  000c0034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	98 39 00 20 45 0b 40 00 41 0b 40 00 41 0b 40 00     .9. E.@.A.@.A.@.
  400010:	41 0b 40 00 41 0b 40 00 41 0b 40 00 00 00 00 00     A.@.A.@.A.@.....
	...
  40002c:	41 0b 40 00 41 0b 40 00 00 00 00 00 41 0b 40 00     A.@.A.@.....A.@.
  40003c:	41 0b 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     A.@.A.@.A.@.A.@.
  40004c:	41 0b 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     A.@.A.@.A.@.A.@.
  40005c:	41 0b 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     A.@.A.@.A.@.A.@.
  40006c:	41 0b 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     A.@.A.@.A.@.A.@.
  40007c:	41 0b 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     A.@.A.@.A.@.A.@.
  40008c:	41 0b 40 00 41 0b 40 00 99 02 40 00 41 0b 40 00     A.@.A.@...@.A.@.
  40009c:	41 0b 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     A.@.A.@.A.@.A.@.
  4000ac:	41 0b 40 00 41 0b 40 00 41 0b 40 00 49 08 40 00     A.@.A.@.A.@.I.@.
  4000bc:	5d 08 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     ].@.A.@.A.@.A.@.
  4000cc:	41 0b 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     A.@.A.@.A.@.A.@.
  4000dc:	41 0b 40 00 41 0b 40 00 41 0b 40 00 41 0b 40 00     A.@.A.@.A.@.A.@.
  4000ec:	41 0b 40 00 41 0b 40 00 41 0b 40 00                 A.@.A.@.A.@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000084c 	.word	0x2000084c
  400114:	00000000 	.word	0x00000000
  400118:	00401ef8 	.word	0x00401ef8

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	00401ef8 	.word	0x00401ef8
  400158:	20000850 	.word	0x20000850
  40015c:	00401ef8 	.word	0x00401ef8
  400160:	00000000 	.word	0x00000000

00400164 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400164:	b5f0      	push	{r4, r5, r6, r7, lr}
  400166:	b083      	sub	sp, #12
  400168:	4605      	mov	r5, r0
  40016a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40016c:	2300      	movs	r3, #0
  40016e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400170:	4b18      	ldr	r3, [pc, #96]	; (4001d4 <usart_serial_getchar+0x70>)
  400172:	4298      	cmp	r0, r3
  400174:	d00a      	beq.n	40018c <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400176:	4b18      	ldr	r3, [pc, #96]	; (4001d8 <usart_serial_getchar+0x74>)
  400178:	4298      	cmp	r0, r3
  40017a:	d00f      	beq.n	40019c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40017c:	4b17      	ldr	r3, [pc, #92]	; (4001dc <usart_serial_getchar+0x78>)
  40017e:	4298      	cmp	r0, r3
  400180:	d014      	beq.n	4001ac <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400182:	4b17      	ldr	r3, [pc, #92]	; (4001e0 <usart_serial_getchar+0x7c>)
  400184:	429d      	cmp	r5, r3
  400186:	d01b      	beq.n	4001c0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400188:	b003      	add	sp, #12
  40018a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40018c:	461f      	mov	r7, r3
  40018e:	4e15      	ldr	r6, [pc, #84]	; (4001e4 <usart_serial_getchar+0x80>)
  400190:	4621      	mov	r1, r4
  400192:	4638      	mov	r0, r7
  400194:	47b0      	blx	r6
  400196:	2800      	cmp	r0, #0
  400198:	d1fa      	bne.n	400190 <usart_serial_getchar+0x2c>
  40019a:	e7f2      	b.n	400182 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40019c:	461e      	mov	r6, r3
  40019e:	4d11      	ldr	r5, [pc, #68]	; (4001e4 <usart_serial_getchar+0x80>)
  4001a0:	4621      	mov	r1, r4
  4001a2:	4630      	mov	r0, r6
  4001a4:	47a8      	blx	r5
  4001a6:	2800      	cmp	r0, #0
  4001a8:	d1fa      	bne.n	4001a0 <usart_serial_getchar+0x3c>
  4001aa:	e7ed      	b.n	400188 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4001ac:	461e      	mov	r6, r3
  4001ae:	4d0e      	ldr	r5, [pc, #56]	; (4001e8 <usart_serial_getchar+0x84>)
  4001b0:	a901      	add	r1, sp, #4
  4001b2:	4630      	mov	r0, r6
  4001b4:	47a8      	blx	r5
  4001b6:	2800      	cmp	r0, #0
  4001b8:	d1fa      	bne.n	4001b0 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  4001ba:	9b01      	ldr	r3, [sp, #4]
  4001bc:	7023      	strb	r3, [r4, #0]
  4001be:	e7e3      	b.n	400188 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4001c0:	461e      	mov	r6, r3
  4001c2:	4d09      	ldr	r5, [pc, #36]	; (4001e8 <usart_serial_getchar+0x84>)
  4001c4:	a901      	add	r1, sp, #4
  4001c6:	4630      	mov	r0, r6
  4001c8:	47a8      	blx	r5
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d1fa      	bne.n	4001c4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  4001ce:	9b01      	ldr	r3, [sp, #4]
  4001d0:	7023      	strb	r3, [r4, #0]
}
  4001d2:	e7d9      	b.n	400188 <usart_serial_getchar+0x24>
  4001d4:	400e0600 	.word	0x400e0600
  4001d8:	40060600 	.word	0x40060600
  4001dc:	400a0000 	.word	0x400a0000
  4001e0:	400a4000 	.word	0x400a4000
  4001e4:	00400b03 	.word	0x00400b03
  4001e8:	00400b29 	.word	0x00400b29

004001ec <usart_serial_putchar>:
{
  4001ec:	b570      	push	{r4, r5, r6, lr}
  4001ee:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4001f0:	4b18      	ldr	r3, [pc, #96]	; (400254 <usart_serial_putchar+0x68>)
  4001f2:	4298      	cmp	r0, r3
  4001f4:	d00a      	beq.n	40020c <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  4001f6:	4b18      	ldr	r3, [pc, #96]	; (400258 <usart_serial_putchar+0x6c>)
  4001f8:	4298      	cmp	r0, r3
  4001fa:	d010      	beq.n	40021e <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  4001fc:	4b17      	ldr	r3, [pc, #92]	; (40025c <usart_serial_putchar+0x70>)
  4001fe:	4298      	cmp	r0, r3
  400200:	d016      	beq.n	400230 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400202:	4b17      	ldr	r3, [pc, #92]	; (400260 <usart_serial_putchar+0x74>)
  400204:	4298      	cmp	r0, r3
  400206:	d01c      	beq.n	400242 <usart_serial_putchar+0x56>
	return 0;
  400208:	2000      	movs	r0, #0
}
  40020a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40020c:	461e      	mov	r6, r3
  40020e:	4d15      	ldr	r5, [pc, #84]	; (400264 <usart_serial_putchar+0x78>)
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	47a8      	blx	r5
  400216:	2800      	cmp	r0, #0
  400218:	d1fa      	bne.n	400210 <usart_serial_putchar+0x24>
		return 1;
  40021a:	2001      	movs	r0, #1
  40021c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40021e:	461e      	mov	r6, r3
  400220:	4d10      	ldr	r5, [pc, #64]	; (400264 <usart_serial_putchar+0x78>)
  400222:	4621      	mov	r1, r4
  400224:	4630      	mov	r0, r6
  400226:	47a8      	blx	r5
  400228:	2800      	cmp	r0, #0
  40022a:	d1fa      	bne.n	400222 <usart_serial_putchar+0x36>
		return 1;
  40022c:	2001      	movs	r0, #1
  40022e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400230:	461e      	mov	r6, r3
  400232:	4d0d      	ldr	r5, [pc, #52]	; (400268 <usart_serial_putchar+0x7c>)
  400234:	4621      	mov	r1, r4
  400236:	4630      	mov	r0, r6
  400238:	47a8      	blx	r5
  40023a:	2800      	cmp	r0, #0
  40023c:	d1fa      	bne.n	400234 <usart_serial_putchar+0x48>
		return 1;
  40023e:	2001      	movs	r0, #1
  400240:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400242:	461e      	mov	r6, r3
  400244:	4d08      	ldr	r5, [pc, #32]	; (400268 <usart_serial_putchar+0x7c>)
  400246:	4621      	mov	r1, r4
  400248:	4630      	mov	r0, r6
  40024a:	47a8      	blx	r5
  40024c:	2800      	cmp	r0, #0
  40024e:	d1fa      	bne.n	400246 <usart_serial_putchar+0x5a>
		return 1;
  400250:	2001      	movs	r0, #1
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	400e0600 	.word	0x400e0600
  400258:	40060600 	.word	0x40060600
  40025c:	400a0000 	.word	0x400a0000
  400260:	400a4000 	.word	0x400a4000
  400264:	00400af3 	.word	0x00400af3
  400268:	00400b15 	.word	0x00400b15

0040026c <get_data>:
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  40026c:	4b07      	ldr	r3, [pc, #28]	; (40028c <get_data+0x20>)
  40026e:	2202      	movs	r2, #2
  400270:	601a      	str	r2, [r3, #0]
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400272:	2205      	movs	r2, #5
  400274:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  400276:	6e9a      	ldr	r2, [r3, #104]	; 0x68
}

void get_data(void)
{	
	afec_start_software_conversion(AFEC0);
	data_1 = afec_channel_get_value(AFEC0, channel_1);
  400278:	b292      	uxth	r2, r2
  40027a:	4905      	ldr	r1, [pc, #20]	; (400290 <get_data+0x24>)
  40027c:	800a      	strh	r2, [r1, #0]
	afec->AFEC_CSELR = afec_ch;
  40027e:	2203      	movs	r2, #3
  400280:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  400282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	data_2 = afec_channel_get_value(AFEC0, channel_2);
  400284:	b29b      	uxth	r3, r3
  400286:	4a03      	ldr	r2, [pc, #12]	; (400294 <get_data+0x28>)
  400288:	8013      	strh	r3, [r2, #0]
  40028a:	4770      	bx	lr
  40028c:	400b0000 	.word	0x400b0000
  400290:	200008a2 	.word	0x200008a2
  400294:	200008a0 	.word	0x200008a0

00400298 <TC0_Handler>:
}

void TC0_Handler(void)
{
  400298:	b500      	push	{lr}
  40029a:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);
  40029c:	2100      	movs	r1, #0
  40029e:	4805      	ldr	r0, [pc, #20]	; (4002b4 <TC0_Handler+0x1c>)
  4002a0:	4b05      	ldr	r3, [pc, #20]	; (4002b8 <TC0_Handler+0x20>)
  4002a2:	4798      	blx	r3
  4002a4:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  4002a6:	9b01      	ldr	r3, [sp, #4]

	/** Measure voltage. */
	get_data();
  4002a8:	4b04      	ldr	r3, [pc, #16]	; (4002bc <TC0_Handler+0x24>)
  4002aa:	4798      	blx	r3
}
  4002ac:	b003      	add	sp, #12
  4002ae:	f85d fb04 	ldr.w	pc, [sp], #4
  4002b2:	bf00      	nop
  4002b4:	40090000 	.word	0x40090000
  4002b8:	00400a43 	.word	0x00400a43
  4002bc:	0040026d 	.word	0x0040026d

004002c0 <main>:
	tc_start(TC0, 0);
}


int main(void)
{
  4002c0:	b580      	push	{r7, lr}
  4002c2:	b08e      	sub	sp, #56	; 0x38
	
	/* Initialize the SAM system. */
	sysclk_init();
  4002c4:	4b42      	ldr	r3, [pc, #264]	; (4003d0 <main+0x110>)
  4002c6:	4798      	blx	r3
	board_init();
  4002c8:	4b42      	ldr	r3, [pc, #264]	; (4003d4 <main+0x114>)
  4002ca:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002cc:	2007      	movs	r0, #7
  4002ce:	4e42      	ldr	r6, [pc, #264]	; (4003d8 <main+0x118>)
  4002d0:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4002d2:	4c42      	ldr	r4, [pc, #264]	; (4003dc <main+0x11c>)
  4002d4:	4b42      	ldr	r3, [pc, #264]	; (4003e0 <main+0x120>)
  4002d6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4002d8:	4a42      	ldr	r2, [pc, #264]	; (4003e4 <main+0x124>)
  4002da:	4b43      	ldr	r3, [pc, #268]	; (4003e8 <main+0x128>)
  4002dc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4002de:	4a43      	ldr	r2, [pc, #268]	; (4003ec <main+0x12c>)
  4002e0:	4b43      	ldr	r3, [pc, #268]	; (4003f0 <main+0x130>)
  4002e2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4002e4:	4d43      	ldr	r5, [pc, #268]	; (4003f4 <main+0x134>)
  4002e6:	9503      	str	r5, [sp, #12]
	uart_settings.ul_baudrate = opt->baudrate;
  4002e8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4002ec:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = opt->paritytype;
  4002ee:	f44f 6700 	mov.w	r7, #2048	; 0x800
  4002f2:	9705      	str	r7, [sp, #20]
  4002f4:	2007      	movs	r0, #7
  4002f6:	47b0      	blx	r6
		uart_init((Uart*)p_usart, &uart_settings);
  4002f8:	a903      	add	r1, sp, #12
  4002fa:	4620      	mov	r0, r4
  4002fc:	4b3e      	ldr	r3, [pc, #248]	; (4003f8 <main+0x138>)
  4002fe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400300:	f8df 8138 	ldr.w	r8, [pc, #312]	; 40043c <main+0x17c>
  400304:	f8d8 3000 	ldr.w	r3, [r8]
  400308:	2100      	movs	r1, #0
  40030a:	6898      	ldr	r0, [r3, #8]
  40030c:	4c3b      	ldr	r4, [pc, #236]	; (4003fc <main+0x13c>)
  40030e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400310:	f8d8 3000 	ldr.w	r3, [r8]
  400314:	2100      	movs	r1, #0
  400316:	6858      	ldr	r0, [r3, #4]
  400318:	47a0      	blx	r4

	configure_console();

	afec_enable(AFEC0);
  40031a:	4c39      	ldr	r4, [pc, #228]	; (400400 <main+0x140>)
  40031c:	4620      	mov	r0, r4
  40031e:	4b39      	ldr	r3, [pc, #228]	; (400404 <main+0x144>)
  400320:	4798      	blx	r3

	struct afec_config afec_cfg;

	afec_get_config_defaults(&afec_cfg);
  400322:	a807      	add	r0, sp, #28
  400324:	4b38      	ldr	r3, [pc, #224]	; (400408 <main+0x148>)
  400326:	4798      	blx	r3

	afec_init(AFEC0, &afec_cfg);
  400328:	a907      	add	r1, sp, #28
  40032a:	4620      	mov	r0, r4
  40032c:	4b37      	ldr	r3, [pc, #220]	; (40040c <main+0x14c>)
  40032e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
  400330:	2015      	movs	r0, #21
  400332:	47b0      	blx	r6
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400334:	9500      	str	r5, [sp, #0]
  400336:	ab03      	add	r3, sp, #12
  400338:	aa02      	add	r2, sp, #8
  40033a:	4629      	mov	r1, r5
  40033c:	2064      	movs	r0, #100	; 0x64
  40033e:	4e34      	ldr	r6, [pc, #208]	; (400410 <main+0x150>)
  400340:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400342:	4e34      	ldr	r6, [pc, #208]	; (400414 <main+0x154>)
  400344:	9a03      	ldr	r2, [sp, #12]
  400346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40034a:	2100      	movs	r1, #0
  40034c:	4630      	mov	r0, r6
  40034e:	4b32      	ldr	r3, [pc, #200]	; (400418 <main+0x158>)
  400350:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / freq);
  400352:	9a02      	ldr	r2, [sp, #8]
  400354:	fbb5 f2f2 	udiv	r2, r5, r2
  400358:	4b30      	ldr	r3, [pc, #192]	; (40041c <main+0x15c>)
  40035a:	fba3 3202 	umull	r3, r2, r3, r2
  40035e:	0952      	lsrs	r2, r2, #5
  400360:	2100      	movs	r1, #0
  400362:	4630      	mov	r0, r6
  400364:	4b2e      	ldr	r3, [pc, #184]	; (400420 <main+0x160>)
  400366:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400368:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40036c:	4b2d      	ldr	r3, [pc, #180]	; (400424 <main+0x164>)
  40036e:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400370:	2210      	movs	r2, #16
  400372:	2100      	movs	r1, #0
  400374:	4630      	mov	r0, r6
  400376:	4b2c      	ldr	r3, [pc, #176]	; (400428 <main+0x168>)
  400378:	4798      	blx	r3
	tc_start(TC0, 0);
  40037a:	2100      	movs	r1, #0
  40037c:	4630      	mov	r0, r6
  40037e:	4b2b      	ldr	r3, [pc, #172]	; (40042c <main+0x16c>)
  400380:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400382:	2320      	movs	r3, #32
  400384:	6163      	str	r3, [r4, #20]
  400386:	2308      	movs	r3, #8
  400388:	6163      	str	r3, [r4, #20]
	configure_tc();
	
	afec_channel_enable(AFEC0, channel_1);
	afec_channel_enable(AFEC0, channel_2);
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40038a:	a806      	add	r0, sp, #24
  40038c:	4b28      	ldr	r3, [pc, #160]	; (400430 <main+0x170>)
  40038e:	4798      	blx	r3
	afec_ch_set_config(AFEC0, channel_1, &afec_ch_cfg);
  400390:	aa06      	add	r2, sp, #24
  400392:	2105      	movs	r1, #5
  400394:	4620      	mov	r0, r4
  400396:	4d27      	ldr	r5, [pc, #156]	; (400434 <main+0x174>)
  400398:	47a8      	blx	r5
	afec_ch_set_config(AFEC0, channel_2, &afec_ch_cfg);
  40039a:	aa06      	add	r2, sp, #24
  40039c:	2103      	movs	r1, #3
  40039e:	4620      	mov	r0, r4
  4003a0:	47a8      	blx	r5
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4003a2:	2305      	movs	r3, #5
  4003a4:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4003a6:	66e7      	str	r7, [r4, #108]	; 0x6c
	afec->AFEC_CSELR = afec_ch;
  4003a8:	2303      	movs	r3, #3
  4003aa:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4003ac:	66e7      	str	r7, [r4, #108]	; 0x6c
	afec_channel_set_analog_offset(AFEC0, channel_1, 0x800);
	afec_channel_set_analog_offset(AFEC0, channel_2, 0x800);
	
	REG_PIOD_PER |= PIO_PER_P17;
  4003ae:	4a22      	ldr	r2, [pc, #136]	; (400438 <main+0x178>)
  4003b0:	6813      	ldr	r3, [r2, #0]
  4003b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4003b6:	6013      	str	r3, [r2, #0]
	REG_PIOD_OER |= PIO_PER_P17;
  4003b8:	3210      	adds	r2, #16
  4003ba:	6813      	ldr	r3, [r2, #0]
  4003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4003c0:	6013      	str	r3, [r2, #0]
	REG_PIOD_SODR |= PIO_PER_P17;
  4003c2:	3220      	adds	r2, #32
  4003c4:	6813      	ldr	r3, [r2, #0]
  4003c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4003ca:	6013      	str	r3, [r2, #0]
  4003cc:	e7fe      	b.n	4003cc <main+0x10c>
  4003ce:	bf00      	nop
  4003d0:	00400441 	.word	0x00400441
  4003d4:	00400531 	.word	0x00400531
  4003d8:	004009bd 	.word	0x004009bd
  4003dc:	400e0600 	.word	0x400e0600
  4003e0:	200008b4 	.word	0x200008b4
  4003e4:	004001ed 	.word	0x004001ed
  4003e8:	200008b0 	.word	0x200008b0
  4003ec:	00400165 	.word	0x00400165
  4003f0:	200008ac 	.word	0x200008ac
  4003f4:	07270e00 	.word	0x07270e00
  4003f8:	00400abb 	.word	0x00400abb
  4003fc:	00400ec5 	.word	0x00400ec5
  400400:	400b0000 	.word	0x400b0000
  400404:	00400871 	.word	0x00400871
  400408:	00400739 	.word	0x00400739
  40040c:	00400775 	.word	0x00400775
  400410:	00400a4b 	.word	0x00400a4b
  400414:	40090000 	.word	0x40090000
  400418:	00400a11 	.word	0x00400a11
  40041c:	51eb851f 	.word	0x51eb851f
  400420:	00400a33 	.word	0x00400a33
  400424:	e000e100 	.word	0xe000e100
  400428:	00400a3b 	.word	0x00400a3b
  40042c:	00400a2b 	.word	0x00400a2b
  400430:	00400769 	.word	0x00400769
  400434:	00400709 	.word	0x00400709
  400438:	400e1400 	.word	0x400e1400
  40043c:	20000008 	.word	0x20000008

00400440 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400440:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400442:	480e      	ldr	r0, [pc, #56]	; (40047c <sysclk_init+0x3c>)
  400444:	4b0e      	ldr	r3, [pc, #56]	; (400480 <sysclk_init+0x40>)
  400446:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400448:	213e      	movs	r1, #62	; 0x3e
  40044a:	2000      	movs	r0, #0
  40044c:	4b0d      	ldr	r3, [pc, #52]	; (400484 <sysclk_init+0x44>)
  40044e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400450:	4c0d      	ldr	r4, [pc, #52]	; (400488 <sysclk_init+0x48>)
  400452:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400454:	2800      	cmp	r0, #0
  400456:	d0fc      	beq.n	400452 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400458:	4b0c      	ldr	r3, [pc, #48]	; (40048c <sysclk_init+0x4c>)
  40045a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40045c:	4a0c      	ldr	r2, [pc, #48]	; (400490 <sysclk_init+0x50>)
  40045e:	4b0d      	ldr	r3, [pc, #52]	; (400494 <sysclk_init+0x54>)
  400460:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400462:	4c0d      	ldr	r4, [pc, #52]	; (400498 <sysclk_init+0x58>)
  400464:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400466:	2800      	cmp	r0, #0
  400468:	d0fc      	beq.n	400464 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40046a:	2010      	movs	r0, #16
  40046c:	4b0b      	ldr	r3, [pc, #44]	; (40049c <sysclk_init+0x5c>)
  40046e:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400470:	4b0b      	ldr	r3, [pc, #44]	; (4004a0 <sysclk_init+0x60>)
  400472:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400474:	4801      	ldr	r0, [pc, #4]	; (40047c <sysclk_init+0x3c>)
  400476:	4b02      	ldr	r3, [pc, #8]	; (400480 <sysclk_init+0x40>)
  400478:	4798      	blx	r3
  40047a:	bd10      	pop	{r4, pc}
  40047c:	07270e00 	.word	0x07270e00
  400480:	00400d19 	.word	0x00400d19
  400484:	00400939 	.word	0x00400939
  400488:	0040098d 	.word	0x0040098d
  40048c:	0040099d 	.word	0x0040099d
  400490:	20133f01 	.word	0x20133f01
  400494:	400e0400 	.word	0x400e0400
  400498:	004009ad 	.word	0x004009ad
  40049c:	004008d5 	.word	0x004008d5
  4004a0:	00400c0d 	.word	0x00400c0d

004004a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4004a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4004a8:	b980      	cbnz	r0, 4004cc <_read+0x28>
  4004aa:	460c      	mov	r4, r1
  4004ac:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4004ae:	2a00      	cmp	r2, #0
  4004b0:	dd0f      	ble.n	4004d2 <_read+0x2e>
  4004b2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4004b4:	4e08      	ldr	r6, [pc, #32]	; (4004d8 <_read+0x34>)
  4004b6:	4d09      	ldr	r5, [pc, #36]	; (4004dc <_read+0x38>)
  4004b8:	6830      	ldr	r0, [r6, #0]
  4004ba:	4621      	mov	r1, r4
  4004bc:	682b      	ldr	r3, [r5, #0]
  4004be:	4798      	blx	r3
		ptr++;
  4004c0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4004c2:	42bc      	cmp	r4, r7
  4004c4:	d1f8      	bne.n	4004b8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4004c6:	4640      	mov	r0, r8
  4004c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4004cc:	f04f 38ff 	mov.w	r8, #4294967295
  4004d0:	e7f9      	b.n	4004c6 <_read+0x22>
	for (; len > 0; --len) {
  4004d2:	4680      	mov	r8, r0
  4004d4:	e7f7      	b.n	4004c6 <_read+0x22>
  4004d6:	bf00      	nop
  4004d8:	200008b4 	.word	0x200008b4
  4004dc:	200008ac 	.word	0x200008ac

004004e0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4004e0:	3801      	subs	r0, #1
  4004e2:	2802      	cmp	r0, #2
  4004e4:	d815      	bhi.n	400512 <_write+0x32>
{
  4004e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004ea:	460e      	mov	r6, r1
  4004ec:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4004ee:	b19a      	cbz	r2, 400518 <_write+0x38>
  4004f0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4004f2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40052c <_write+0x4c>
  4004f6:	4f0c      	ldr	r7, [pc, #48]	; (400528 <_write+0x48>)
  4004f8:	f8d8 0000 	ldr.w	r0, [r8]
  4004fc:	f815 1b01 	ldrb.w	r1, [r5], #1
  400500:	683b      	ldr	r3, [r7, #0]
  400502:	4798      	blx	r3
  400504:	2800      	cmp	r0, #0
  400506:	db0a      	blt.n	40051e <_write+0x3e>
  400508:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40050a:	3c01      	subs	r4, #1
  40050c:	d1f4      	bne.n	4004f8 <_write+0x18>
  40050e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400512:	f04f 30ff 	mov.w	r0, #4294967295
  400516:	4770      	bx	lr
	for (; len != 0; --len) {
  400518:	4610      	mov	r0, r2
  40051a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40051e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400526:	bf00      	nop
  400528:	200008b0 	.word	0x200008b0
  40052c:	200008b4 	.word	0x200008b4

00400530 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  400530:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400532:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400536:	4b49      	ldr	r3, [pc, #292]	; (40065c <board_init+0x12c>)
  400538:	605a      	str	r2, [r3, #4]
  40053a:	2009      	movs	r0, #9
  40053c:	4c48      	ldr	r4, [pc, #288]	; (400660 <board_init+0x130>)
  40053e:	47a0      	blx	r4
  400540:	200a      	movs	r0, #10
  400542:	47a0      	blx	r4
  400544:	200b      	movs	r0, #11
  400546:	47a0      	blx	r4
  400548:	200c      	movs	r0, #12
  40054a:	47a0      	blx	r4
  40054c:	200d      	movs	r0, #13
  40054e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400550:	4b44      	ldr	r3, [pc, #272]	; (400664 <board_init+0x134>)
  400552:	2201      	movs	r2, #1
  400554:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400556:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40055a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40055c:	4942      	ldr	r1, [pc, #264]	; (400668 <board_init+0x138>)
  40055e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400562:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400564:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400568:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40056a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40056e:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400570:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400574:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400576:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40057a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40057c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400580:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400582:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400586:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400588:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40058a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40058e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400590:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400594:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400596:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400598:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  40059c:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40059e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4005a2:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4005a6:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005aa:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4005b0:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4005b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4005b6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4005b8:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4005ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4005be:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4005c0:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4005c4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4005c6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4005c8:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4005cc:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4005ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4005d2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  4005d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4005da:	2202      	movs	r2, #2
  4005dc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4005de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4005e2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4005e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4005e8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4005ea:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4005ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4005f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4005f2:	f021 0102 	bic.w	r1, r1, #2
  4005f6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4005f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4005fa:	f021 0102 	bic.w	r1, r1, #2
  4005fe:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  400600:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400604:	2204      	movs	r2, #4
  400606:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400608:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40060c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40060e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400612:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400614:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40061a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40061c:	f021 0104 	bic.w	r1, r1, #4
  400620:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400622:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400624:	f021 0104 	bic.w	r1, r1, #4
  400628:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40062a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40062e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  400632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400636:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40063a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40063c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400640:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400642:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400648:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40064a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40064e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400650:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400652:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400656:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400658:	605a      	str	r2, [r3, #4]
  40065a:	bd10      	pop	{r4, pc}
  40065c:	400e1850 	.word	0x400e1850
  400660:	004009bd 	.word	0x004009bd
  400664:	400e0e00 	.word	0x400e0e00
  400668:	400e1400 	.word	0x400e1400

0040066c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40066c:	b570      	push	{r4, r5, r6, lr}
  40066e:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  400670:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  400672:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400674:	4013      	ands	r3, r2
  400676:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400678:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  40067a:	4d21      	ldr	r5, [pc, #132]	; (400700 <afec_process_callback+0x94>)
  40067c:	42a8      	cmp	r0, r5
  40067e:	bf14      	ite	ne
  400680:	2500      	movne	r5, #0
  400682:	2501      	moveq	r5, #1
  400684:	006e      	lsls	r6, r5, #1
  400686:	442e      	add	r6, r5
  400688:	e00b      	b.n	4006a2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40068a:	2c14      	cmp	r4, #20
  40068c:	d824      	bhi.n	4006d8 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40068e:	9a01      	ldr	r2, [sp, #4]
  400690:	f104 0108 	add.w	r1, r4, #8
  400694:	2301      	movs	r3, #1
  400696:	408b      	lsls	r3, r1
  400698:	4213      	tst	r3, r2
  40069a:	d113      	bne.n	4006c4 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40069c:	3401      	adds	r4, #1
  40069e:	2c17      	cmp	r4, #23
  4006a0:	d02b      	beq.n	4006fa <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4006a2:	2c0f      	cmp	r4, #15
  4006a4:	d8f1      	bhi.n	40068a <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4006a6:	9a01      	ldr	r2, [sp, #4]
  4006a8:	2301      	movs	r3, #1
  4006aa:	40a3      	lsls	r3, r4
  4006ac:	4213      	tst	r3, r2
  4006ae:	d0f5      	beq.n	40069c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006b0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4006b4:	4423      	add	r3, r4
  4006b6:	4a13      	ldr	r2, [pc, #76]	; (400704 <afec_process_callback+0x98>)
  4006b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4006bc:	2b00      	cmp	r3, #0
  4006be:	d0ed      	beq.n	40069c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006c0:	4798      	blx	r3
  4006c2:	e7eb      	b.n	40069c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006c4:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4006c8:	4423      	add	r3, r4
  4006ca:	4a0e      	ldr	r2, [pc, #56]	; (400704 <afec_process_callback+0x98>)
  4006cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4006d0:	2b00      	cmp	r3, #0
  4006d2:	d0e3      	beq.n	40069c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006d4:	4798      	blx	r3
  4006d6:	e7e1      	b.n	40069c <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4006d8:	9a01      	ldr	r2, [sp, #4]
  4006da:	f104 0109 	add.w	r1, r4, #9
  4006de:	2301      	movs	r3, #1
  4006e0:	408b      	lsls	r3, r1
  4006e2:	4213      	tst	r3, r2
  4006e4:	d0da      	beq.n	40069c <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4006e6:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4006ea:	4423      	add	r3, r4
  4006ec:	4a05      	ldr	r2, [pc, #20]	; (400704 <afec_process_callback+0x98>)
  4006ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4006f2:	2b00      	cmp	r3, #0
  4006f4:	d0d2      	beq.n	40069c <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4006f6:	4798      	blx	r3
  4006f8:	e7d0      	b.n	40069c <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4006fa:	b002      	add	sp, #8
  4006fc:	bd70      	pop	{r4, r5, r6, pc}
  4006fe:	bf00      	nop
  400700:	400b4000 	.word	0x400b4000
  400704:	200008b8 	.word	0x200008b8

00400708 <afec_ch_set_config>:
{
  400708:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40070a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  40070c:	2301      	movs	r3, #1
  40070e:	408b      	lsls	r3, r1
  400710:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400714:	7815      	ldrb	r5, [r2, #0]
  400716:	2d00      	cmp	r5, #0
  400718:	bf08      	it	eq
  40071a:	2300      	moveq	r3, #0
  40071c:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40071e:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400720:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400722:	004b      	lsls	r3, r1, #1
  400724:	2103      	movs	r1, #3
  400726:	4099      	lsls	r1, r3
  400728:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  40072c:	7851      	ldrb	r1, [r2, #1]
  40072e:	4099      	lsls	r1, r3
  400730:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400732:	6541      	str	r1, [r0, #84]	; 0x54
}
  400734:	bc30      	pop	{r4, r5}
  400736:	4770      	bx	lr

00400738 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400738:	2200      	movs	r2, #0
  40073a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40073c:	4b08      	ldr	r3, [pc, #32]	; (400760 <afec_get_config_defaults+0x28>)
  40073e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400740:	4b08      	ldr	r3, [pc, #32]	; (400764 <afec_get_config_defaults+0x2c>)
  400742:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400748:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  40074a:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  40074c:	2302      	movs	r3, #2
  40074e:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400750:	2301      	movs	r3, #1
  400752:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400754:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400756:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400758:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  40075a:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  40075c:	7683      	strb	r3, [r0, #26]
  40075e:	4770      	bx	lr
  400760:	07270e00 	.word	0x07270e00
  400764:	005b8d80 	.word	0x005b8d80

00400768 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400768:	2300      	movs	r3, #0
  40076a:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  40076c:	2301      	movs	r3, #1
  40076e:	7043      	strb	r3, [r0, #1]
  400770:	4770      	bx	lr
	...

00400774 <afec_init>:
	return afec->AFEC_ISR;
  400774:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400776:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40077a:	d001      	beq.n	400780 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40077c:	2019      	movs	r0, #25
  40077e:	4770      	bx	lr
{
  400780:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400782:	2301      	movs	r3, #1
  400784:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400786:	7dcb      	ldrb	r3, [r1, #23]
  400788:	2b00      	cmp	r3, #0
  40078a:	bf14      	ite	ne
  40078c:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400790:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400792:	7d8b      	ldrb	r3, [r1, #22]
  400794:	2b00      	cmp	r3, #0
  400796:	bf14      	ite	ne
  400798:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  40079c:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  40079e:	7d0b      	ldrb	r3, [r1, #20]
  4007a0:	061b      	lsls	r3, r3, #24
  4007a2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4007a6:	690a      	ldr	r2, [r1, #16]
  4007a8:	68ce      	ldr	r6, [r1, #12]
  4007aa:	4332      	orrs	r2, r6
  4007ac:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4007ae:	7d4a      	ldrb	r2, [r1, #21]
  4007b0:	0712      	lsls	r2, r2, #28
  4007b2:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4007b6:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4007b8:	688a      	ldr	r2, [r1, #8]
  4007ba:	0056      	lsls	r6, r2, #1
  4007bc:	684a      	ldr	r2, [r1, #4]
  4007be:	fbb2 f2f6 	udiv	r2, r2, r6
  4007c2:	3a01      	subs	r2, #1
  4007c4:	0212      	lsls	r2, r2, #8
  4007c6:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4007c8:	4313      	orrs	r3, r2
  4007ca:	432b      	orrs	r3, r5
  4007cc:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4007ce:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4007d0:	7e0b      	ldrb	r3, [r1, #24]
  4007d2:	2b00      	cmp	r3, #0
  4007d4:	bf14      	ite	ne
  4007d6:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4007da:	2300      	moveq	r3, #0
  4007dc:	680a      	ldr	r2, [r1, #0]
  4007de:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4007e0:	7e4a      	ldrb	r2, [r1, #25]
  4007e2:	2a00      	cmp	r2, #0
  4007e4:	bf14      	ite	ne
  4007e6:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4007ea:	2200      	moveq	r2, #0
			(config->resolution) |
  4007ec:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4007ee:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4007f0:	7e8b      	ldrb	r3, [r1, #26]
  4007f2:	021b      	lsls	r3, r3, #8
  4007f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4007f8:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4007fc:	4b0e      	ldr	r3, [pc, #56]	; (400838 <afec_init+0xc4>)
  4007fe:	4298      	cmp	r0, r3
  400800:	d005      	beq.n	40080e <afec_init+0x9a>
	if(afec == AFEC1) {
  400802:	4b0e      	ldr	r3, [pc, #56]	; (40083c <afec_init+0xc8>)
  400804:	4298      	cmp	r0, r3
  400806:	d00c      	beq.n	400822 <afec_init+0xae>
	return STATUS_OK;
  400808:	2000      	movs	r0, #0
}
  40080a:	bc70      	pop	{r4, r5, r6}
  40080c:	4770      	bx	lr
  40080e:	4b0c      	ldr	r3, [pc, #48]	; (400840 <afec_init+0xcc>)
  400810:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400814:	2200      	movs	r2, #0
  400816:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40081a:	428b      	cmp	r3, r1
  40081c:	d1fb      	bne.n	400816 <afec_init+0xa2>
	return STATUS_OK;
  40081e:	2000      	movs	r0, #0
  400820:	e7f3      	b.n	40080a <afec_init+0x96>
  400822:	4b08      	ldr	r3, [pc, #32]	; (400844 <afec_init+0xd0>)
  400824:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400828:	2200      	movs	r2, #0
  40082a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40082e:	428b      	cmp	r3, r1
  400830:	d1fb      	bne.n	40082a <afec_init+0xb6>
	return STATUS_OK;
  400832:	2000      	movs	r0, #0
  400834:	e7e9      	b.n	40080a <afec_init+0x96>
  400836:	bf00      	nop
  400838:	400b0000 	.word	0x400b0000
  40083c:	400b4000 	.word	0x400b4000
  400840:	200008b4 	.word	0x200008b4
  400844:	20000910 	.word	0x20000910

00400848 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400848:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40084a:	4802      	ldr	r0, [pc, #8]	; (400854 <AFEC0_Handler+0xc>)
  40084c:	4b02      	ldr	r3, [pc, #8]	; (400858 <AFEC0_Handler+0x10>)
  40084e:	4798      	blx	r3
  400850:	bd08      	pop	{r3, pc}
  400852:	bf00      	nop
  400854:	400b0000 	.word	0x400b0000
  400858:	0040066d 	.word	0x0040066d

0040085c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40085c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40085e:	4802      	ldr	r0, [pc, #8]	; (400868 <AFEC1_Handler+0xc>)
  400860:	4b02      	ldr	r3, [pc, #8]	; (40086c <AFEC1_Handler+0x10>)
  400862:	4798      	blx	r3
  400864:	bd08      	pop	{r3, pc}
  400866:	bf00      	nop
  400868:	400b4000 	.word	0x400b4000
  40086c:	0040066d 	.word	0x0040066d

00400870 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400870:	b500      	push	{lr}
  400872:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400874:	4b13      	ldr	r3, [pc, #76]	; (4008c4 <afec_enable+0x54>)
  400876:	4298      	cmp	r0, r3
  400878:	bf0c      	ite	eq
  40087a:	201f      	moveq	r0, #31
  40087c:	201e      	movne	r0, #30
  40087e:	4b12      	ldr	r3, [pc, #72]	; (4008c8 <afec_enable+0x58>)
  400880:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400882:	4b12      	ldr	r3, [pc, #72]	; (4008cc <afec_enable+0x5c>)
  400884:	789b      	ldrb	r3, [r3, #2]
  400886:	2bff      	cmp	r3, #255	; 0xff
  400888:	d01a      	beq.n	4008c0 <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40088a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40088e:	fab3 f383 	clz	r3, r3
  400892:	095b      	lsrs	r3, r3, #5
  400894:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400896:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400898:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40089c:	2200      	movs	r2, #0
  40089e:	4b0c      	ldr	r3, [pc, #48]	; (4008d0 <afec_enable+0x60>)
  4008a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4008a2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4008a4:	4a09      	ldr	r2, [pc, #36]	; (4008cc <afec_enable+0x5c>)
  4008a6:	7893      	ldrb	r3, [r2, #2]
  4008a8:	3301      	adds	r3, #1
  4008aa:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008ac:	b129      	cbz	r1, 4008ba <afec_enable+0x4a>
		cpu_irq_enable();
  4008ae:	2201      	movs	r2, #1
  4008b0:	4b07      	ldr	r3, [pc, #28]	; (4008d0 <afec_enable+0x60>)
  4008b2:	701a      	strb	r2, [r3, #0]
  4008b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4008b8:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4008ba:	b003      	add	sp, #12
  4008bc:	f85d fb04 	ldr.w	pc, [sp], #4
  4008c0:	e7fe      	b.n	4008c0 <afec_enable+0x50>
  4008c2:	bf00      	nop
  4008c4:	400b4000 	.word	0x400b4000
  4008c8:	004009bd 	.word	0x004009bd
  4008cc:	200008a4 	.word	0x200008a4
  4008d0:	20000000 	.word	0x20000000

004008d4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4008d4:	4a17      	ldr	r2, [pc, #92]	; (400934 <pmc_switch_mck_to_pllack+0x60>)
  4008d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4008d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4008dc:	4318      	orrs	r0, r3
  4008de:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008e2:	f013 0f08 	tst.w	r3, #8
  4008e6:	d10a      	bne.n	4008fe <pmc_switch_mck_to_pllack+0x2a>
  4008e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008ec:	4911      	ldr	r1, [pc, #68]	; (400934 <pmc_switch_mck_to_pllack+0x60>)
  4008ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4008f0:	f012 0f08 	tst.w	r2, #8
  4008f4:	d103      	bne.n	4008fe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008f6:	3b01      	subs	r3, #1
  4008f8:	d1f9      	bne.n	4008ee <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4008fa:	2001      	movs	r0, #1
  4008fc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4008fe:	4a0d      	ldr	r2, [pc, #52]	; (400934 <pmc_switch_mck_to_pllack+0x60>)
  400900:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400902:	f023 0303 	bic.w	r3, r3, #3
  400906:	f043 0302 	orr.w	r3, r3, #2
  40090a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40090c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40090e:	f013 0f08 	tst.w	r3, #8
  400912:	d10a      	bne.n	40092a <pmc_switch_mck_to_pllack+0x56>
  400914:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400918:	4906      	ldr	r1, [pc, #24]	; (400934 <pmc_switch_mck_to_pllack+0x60>)
  40091a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40091c:	f012 0f08 	tst.w	r2, #8
  400920:	d105      	bne.n	40092e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400922:	3b01      	subs	r3, #1
  400924:	d1f9      	bne.n	40091a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400926:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400928:	4770      	bx	lr
	return 0;
  40092a:	2000      	movs	r0, #0
  40092c:	4770      	bx	lr
  40092e:	2000      	movs	r0, #0
  400930:	4770      	bx	lr
  400932:	bf00      	nop
  400934:	400e0400 	.word	0x400e0400

00400938 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400938:	b9c8      	cbnz	r0, 40096e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40093a:	4a11      	ldr	r2, [pc, #68]	; (400980 <pmc_switch_mainck_to_xtal+0x48>)
  40093c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40093e:	0209      	lsls	r1, r1, #8
  400940:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400942:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400946:	f023 0303 	bic.w	r3, r3, #3
  40094a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40094e:	f043 0301 	orr.w	r3, r3, #1
  400952:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400954:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400956:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400958:	f013 0f01 	tst.w	r3, #1
  40095c:	d0fb      	beq.n	400956 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40095e:	4a08      	ldr	r2, [pc, #32]	; (400980 <pmc_switch_mainck_to_xtal+0x48>)
  400960:	6a13      	ldr	r3, [r2, #32]
  400962:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40096a:	6213      	str	r3, [r2, #32]
  40096c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40096e:	4904      	ldr	r1, [pc, #16]	; (400980 <pmc_switch_mainck_to_xtal+0x48>)
  400970:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400972:	4a04      	ldr	r2, [pc, #16]	; (400984 <pmc_switch_mainck_to_xtal+0x4c>)
  400974:	401a      	ands	r2, r3
  400976:	4b04      	ldr	r3, [pc, #16]	; (400988 <pmc_switch_mainck_to_xtal+0x50>)
  400978:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40097a:	620b      	str	r3, [r1, #32]
  40097c:	4770      	bx	lr
  40097e:	bf00      	nop
  400980:	400e0400 	.word	0x400e0400
  400984:	fec8fffc 	.word	0xfec8fffc
  400988:	01370002 	.word	0x01370002

0040098c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40098c:	4b02      	ldr	r3, [pc, #8]	; (400998 <pmc_osc_is_ready_mainck+0xc>)
  40098e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400990:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400994:	4770      	bx	lr
  400996:	bf00      	nop
  400998:	400e0400 	.word	0x400e0400

0040099c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40099c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4009a0:	4b01      	ldr	r3, [pc, #4]	; (4009a8 <pmc_disable_pllack+0xc>)
  4009a2:	629a      	str	r2, [r3, #40]	; 0x28
  4009a4:	4770      	bx	lr
  4009a6:	bf00      	nop
  4009a8:	400e0400 	.word	0x400e0400

004009ac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4009ac:	4b02      	ldr	r3, [pc, #8]	; (4009b8 <pmc_is_locked_pllack+0xc>)
  4009ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4009b0:	f000 0002 	and.w	r0, r0, #2
  4009b4:	4770      	bx	lr
  4009b6:	bf00      	nop
  4009b8:	400e0400 	.word	0x400e0400

004009bc <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4009bc:	282f      	cmp	r0, #47	; 0x2f
  4009be:	d81e      	bhi.n	4009fe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4009c0:	281f      	cmp	r0, #31
  4009c2:	d80c      	bhi.n	4009de <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4009c4:	4b11      	ldr	r3, [pc, #68]	; (400a0c <pmc_enable_periph_clk+0x50>)
  4009c6:	699a      	ldr	r2, [r3, #24]
  4009c8:	2301      	movs	r3, #1
  4009ca:	4083      	lsls	r3, r0
  4009cc:	4393      	bics	r3, r2
  4009ce:	d018      	beq.n	400a02 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4009d0:	2301      	movs	r3, #1
  4009d2:	fa03 f000 	lsl.w	r0, r3, r0
  4009d6:	4b0d      	ldr	r3, [pc, #52]	; (400a0c <pmc_enable_periph_clk+0x50>)
  4009d8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4009da:	2000      	movs	r0, #0
  4009dc:	4770      	bx	lr
		ul_id -= 32;
  4009de:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4009e0:	4b0a      	ldr	r3, [pc, #40]	; (400a0c <pmc_enable_periph_clk+0x50>)
  4009e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4009e6:	2301      	movs	r3, #1
  4009e8:	4083      	lsls	r3, r0
  4009ea:	4393      	bics	r3, r2
  4009ec:	d00b      	beq.n	400a06 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4009ee:	2301      	movs	r3, #1
  4009f0:	fa03 f000 	lsl.w	r0, r3, r0
  4009f4:	4b05      	ldr	r3, [pc, #20]	; (400a0c <pmc_enable_periph_clk+0x50>)
  4009f6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4009fa:	2000      	movs	r0, #0
  4009fc:	4770      	bx	lr
		return 1;
  4009fe:	2001      	movs	r0, #1
  400a00:	4770      	bx	lr
	return 0;
  400a02:	2000      	movs	r0, #0
  400a04:	4770      	bx	lr
  400a06:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400a08:	4770      	bx	lr
  400a0a:	bf00      	nop
  400a0c:	400e0400 	.word	0x400e0400

00400a10 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400a10:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a12:	0189      	lsls	r1, r1, #6
  400a14:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400a16:	2402      	movs	r4, #2
  400a18:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400a1a:	f04f 31ff 	mov.w	r1, #4294967295
  400a1e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400a20:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400a22:	605a      	str	r2, [r3, #4]
}
  400a24:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a28:	4770      	bx	lr

00400a2a <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400a2a:	0189      	lsls	r1, r1, #6
  400a2c:	2305      	movs	r3, #5
  400a2e:	5043      	str	r3, [r0, r1]
  400a30:	4770      	bx	lr

00400a32 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400a32:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400a36:	61ca      	str	r2, [r1, #28]
  400a38:	4770      	bx	lr

00400a3a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a3a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400a3e:	624a      	str	r2, [r1, #36]	; 0x24
  400a40:	4770      	bx	lr

00400a42 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400a42:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400a46:	6a08      	ldr	r0, [r1, #32]
}
  400a48:	4770      	bx	lr

00400a4a <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400a4a:	b4f0      	push	{r4, r5, r6, r7}
  400a4c:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400a4e:	2402      	movs	r4, #2
  400a50:	9401      	str	r4, [sp, #4]
  400a52:	2408      	movs	r4, #8
  400a54:	9402      	str	r4, [sp, #8]
  400a56:	2420      	movs	r4, #32
  400a58:	9403      	str	r4, [sp, #12]
  400a5a:	2480      	movs	r4, #128	; 0x80
  400a5c:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400a5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400a60:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400a62:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400a64:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400a68:	d814      	bhi.n	400a94 <tc_find_mck_divisor+0x4a>
  400a6a:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400a6c:	42a0      	cmp	r0, r4
  400a6e:	d217      	bcs.n	400aa0 <tc_find_mck_divisor+0x56>
  400a70:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400a72:	af01      	add	r7, sp, #4
  400a74:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400a78:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400a7c:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400a7e:	4284      	cmp	r4, r0
  400a80:	d30a      	bcc.n	400a98 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400a82:	4286      	cmp	r6, r0
  400a84:	d90d      	bls.n	400aa2 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400a86:	3501      	adds	r5, #1
	for (ul_index = 0;
  400a88:	2d05      	cmp	r5, #5
  400a8a:	d1f3      	bne.n	400a74 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400a8c:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400a8e:	b006      	add	sp, #24
  400a90:	bcf0      	pop	{r4, r5, r6, r7}
  400a92:	4770      	bx	lr
			return 0;
  400a94:	2000      	movs	r0, #0
  400a96:	e7fa      	b.n	400a8e <tc_find_mck_divisor+0x44>
  400a98:	2000      	movs	r0, #0
  400a9a:	e7f8      	b.n	400a8e <tc_find_mck_divisor+0x44>
	return 1;
  400a9c:	2001      	movs	r0, #1
  400a9e:	e7f6      	b.n	400a8e <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400aa0:	2500      	movs	r5, #0
	if (p_uldiv) {
  400aa2:	b12a      	cbz	r2, 400ab0 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400aa4:	a906      	add	r1, sp, #24
  400aa6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400aaa:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400aae:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400ab0:	2b00      	cmp	r3, #0
  400ab2:	d0f3      	beq.n	400a9c <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400ab4:	601d      	str	r5, [r3, #0]
	return 1;
  400ab6:	2001      	movs	r0, #1
  400ab8:	e7e9      	b.n	400a8e <tc_find_mck_divisor+0x44>

00400aba <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400aba:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400abc:	23ac      	movs	r3, #172	; 0xac
  400abe:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400ac0:	680b      	ldr	r3, [r1, #0]
  400ac2:	684a      	ldr	r2, [r1, #4]
  400ac4:	fbb3 f3f2 	udiv	r3, r3, r2
  400ac8:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400aca:	1e5c      	subs	r4, r3, #1
  400acc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400ad0:	4294      	cmp	r4, r2
  400ad2:	d80c      	bhi.n	400aee <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400ad4:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400ad6:	688b      	ldr	r3, [r1, #8]
  400ad8:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400ada:	f240 2302 	movw	r3, #514	; 0x202
  400ade:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400ae2:	2350      	movs	r3, #80	; 0x50
  400ae4:	6003      	str	r3, [r0, #0]

	return 0;
  400ae6:	2000      	movs	r0, #0
}
  400ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400aec:	4770      	bx	lr
		return 1;
  400aee:	2001      	movs	r0, #1
  400af0:	e7fa      	b.n	400ae8 <uart_init+0x2e>

00400af2 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400af2:	6943      	ldr	r3, [r0, #20]
  400af4:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400af8:	bf1a      	itte	ne
  400afa:	61c1      	strne	r1, [r0, #28]
	return 0;
  400afc:	2000      	movne	r0, #0
		return 1;
  400afe:	2001      	moveq	r0, #1
}
  400b00:	4770      	bx	lr

00400b02 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b02:	6943      	ldr	r3, [r0, #20]
  400b04:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b08:	bf1d      	ittte	ne
  400b0a:	6983      	ldrne	r3, [r0, #24]
  400b0c:	700b      	strbne	r3, [r1, #0]
	return 0;
  400b0e:	2000      	movne	r0, #0
		return 1;
  400b10:	2001      	moveq	r0, #1
}
  400b12:	4770      	bx	lr

00400b14 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b14:	6943      	ldr	r3, [r0, #20]
  400b16:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400b1a:	bf1d      	ittte	ne
  400b1c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400b20:	61c1      	strne	r1, [r0, #28]
	return 0;
  400b22:	2000      	movne	r0, #0
		return 1;
  400b24:	2001      	moveq	r0, #1
}
  400b26:	4770      	bx	lr

00400b28 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b28:	6943      	ldr	r3, [r0, #20]
  400b2a:	f013 0f01 	tst.w	r3, #1
  400b2e:	d005      	beq.n	400b3c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b30:	6983      	ldr	r3, [r0, #24]
  400b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b36:	600b      	str	r3, [r1, #0]

	return 0;
  400b38:	2000      	movs	r0, #0
  400b3a:	4770      	bx	lr
		return 1;
  400b3c:	2001      	movs	r0, #1
}
  400b3e:	4770      	bx	lr

00400b40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b40:	e7fe      	b.n	400b40 <Dummy_Handler>
	...

00400b44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400b44:	b500      	push	{lr}
  400b46:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400b48:	4b25      	ldr	r3, [pc, #148]	; (400be0 <Reset_Handler+0x9c>)
  400b4a:	4a26      	ldr	r2, [pc, #152]	; (400be4 <Reset_Handler+0xa0>)
  400b4c:	429a      	cmp	r2, r3
  400b4e:	d010      	beq.n	400b72 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400b50:	4b25      	ldr	r3, [pc, #148]	; (400be8 <Reset_Handler+0xa4>)
  400b52:	4a23      	ldr	r2, [pc, #140]	; (400be0 <Reset_Handler+0x9c>)
  400b54:	429a      	cmp	r2, r3
  400b56:	d20c      	bcs.n	400b72 <Reset_Handler+0x2e>
  400b58:	3b01      	subs	r3, #1
  400b5a:	1a9b      	subs	r3, r3, r2
  400b5c:	f023 0303 	bic.w	r3, r3, #3
  400b60:	3304      	adds	r3, #4
  400b62:	4413      	add	r3, r2
  400b64:	491f      	ldr	r1, [pc, #124]	; (400be4 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400b66:	f851 0b04 	ldr.w	r0, [r1], #4
  400b6a:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400b6e:	429a      	cmp	r2, r3
  400b70:	d1f9      	bne.n	400b66 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400b72:	4b1e      	ldr	r3, [pc, #120]	; (400bec <Reset_Handler+0xa8>)
  400b74:	4a1e      	ldr	r2, [pc, #120]	; (400bf0 <Reset_Handler+0xac>)
  400b76:	429a      	cmp	r2, r3
  400b78:	d20a      	bcs.n	400b90 <Reset_Handler+0x4c>
  400b7a:	3b01      	subs	r3, #1
  400b7c:	1a9b      	subs	r3, r3, r2
  400b7e:	f023 0303 	bic.w	r3, r3, #3
  400b82:	3304      	adds	r3, #4
  400b84:	4413      	add	r3, r2
		*pDest++ = 0;
  400b86:	2100      	movs	r1, #0
  400b88:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400b8c:	4293      	cmp	r3, r2
  400b8e:	d1fb      	bne.n	400b88 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b90:	4a18      	ldr	r2, [pc, #96]	; (400bf4 <Reset_Handler+0xb0>)
  400b92:	4b19      	ldr	r3, [pc, #100]	; (400bf8 <Reset_Handler+0xb4>)
  400b94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400b98:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400b9a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400b9e:	fab3 f383 	clz	r3, r3
  400ba2:	095b      	lsrs	r3, r3, #5
  400ba4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400ba6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400ba8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400bac:	2200      	movs	r2, #0
  400bae:	4b13      	ldr	r3, [pc, #76]	; (400bfc <Reset_Handler+0xb8>)
  400bb0:	701a      	strb	r2, [r3, #0]
	return flags;
  400bb2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400bb4:	4a12      	ldr	r2, [pc, #72]	; (400c00 <Reset_Handler+0xbc>)
  400bb6:	6813      	ldr	r3, [r2, #0]
  400bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400bbc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400bbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400bc2:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400bc6:	b129      	cbz	r1, 400bd4 <Reset_Handler+0x90>
		cpu_irq_enable();
  400bc8:	2201      	movs	r2, #1
  400bca:	4b0c      	ldr	r3, [pc, #48]	; (400bfc <Reset_Handler+0xb8>)
  400bcc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400bce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400bd2:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400bd4:	4b0b      	ldr	r3, [pc, #44]	; (400c04 <Reset_Handler+0xc0>)
  400bd6:	4798      	blx	r3

	/* Branch to main function */
	main();
  400bd8:	4b0b      	ldr	r3, [pc, #44]	; (400c08 <Reset_Handler+0xc4>)
  400bda:	4798      	blx	r3
  400bdc:	e7fe      	b.n	400bdc <Reset_Handler+0x98>
  400bde:	bf00      	nop
  400be0:	20000000 	.word	0x20000000
  400be4:	00401ef8 	.word	0x00401ef8
  400be8:	2000084c 	.word	0x2000084c
  400bec:	20000998 	.word	0x20000998
  400bf0:	2000084c 	.word	0x2000084c
  400bf4:	e000ed00 	.word	0xe000ed00
  400bf8:	00400000 	.word	0x00400000
  400bfc:	20000000 	.word	0x20000000
  400c00:	e000ed88 	.word	0xe000ed88
  400c04:	00400dd9 	.word	0x00400dd9
  400c08:	004002c1 	.word	0x004002c1

00400c0c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400c0c:	4b3b      	ldr	r3, [pc, #236]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c10:	f003 0303 	and.w	r3, r3, #3
  400c14:	2b01      	cmp	r3, #1
  400c16:	d01d      	beq.n	400c54 <SystemCoreClockUpdate+0x48>
  400c18:	b183      	cbz	r3, 400c3c <SystemCoreClockUpdate+0x30>
  400c1a:	2b02      	cmp	r3, #2
  400c1c:	d036      	beq.n	400c8c <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400c1e:	4b37      	ldr	r3, [pc, #220]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c26:	2b70      	cmp	r3, #112	; 0x70
  400c28:	d05f      	beq.n	400cea <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400c2a:	4b34      	ldr	r3, [pc, #208]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c2e:	4934      	ldr	r1, [pc, #208]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400c30:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c34:	680b      	ldr	r3, [r1, #0]
  400c36:	40d3      	lsrs	r3, r2
  400c38:	600b      	str	r3, [r1, #0]
  400c3a:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400c3c:	4b31      	ldr	r3, [pc, #196]	; (400d04 <SystemCoreClockUpdate+0xf8>)
  400c3e:	695b      	ldr	r3, [r3, #20]
  400c40:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c44:	bf14      	ite	ne
  400c46:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c4a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c4e:	4b2c      	ldr	r3, [pc, #176]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400c50:	601a      	str	r2, [r3, #0]
  400c52:	e7e4      	b.n	400c1e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c54:	4b29      	ldr	r3, [pc, #164]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400c56:	6a1b      	ldr	r3, [r3, #32]
  400c58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c5c:	d003      	beq.n	400c66 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c5e:	4a2a      	ldr	r2, [pc, #168]	; (400d08 <SystemCoreClockUpdate+0xfc>)
  400c60:	4b27      	ldr	r3, [pc, #156]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400c62:	601a      	str	r2, [r3, #0]
  400c64:	e7db      	b.n	400c1e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c66:	4a29      	ldr	r2, [pc, #164]	; (400d0c <SystemCoreClockUpdate+0x100>)
  400c68:	4b25      	ldr	r3, [pc, #148]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400c6a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c6c:	4b23      	ldr	r3, [pc, #140]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400c6e:	6a1b      	ldr	r3, [r3, #32]
  400c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c74:	2b10      	cmp	r3, #16
  400c76:	d005      	beq.n	400c84 <SystemCoreClockUpdate+0x78>
  400c78:	2b20      	cmp	r3, #32
  400c7a:	d1d0      	bne.n	400c1e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400c7c:	4a22      	ldr	r2, [pc, #136]	; (400d08 <SystemCoreClockUpdate+0xfc>)
  400c7e:	4b20      	ldr	r3, [pc, #128]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400c80:	601a      	str	r2, [r3, #0]
				break;
  400c82:	e7cc      	b.n	400c1e <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400c84:	4a22      	ldr	r2, [pc, #136]	; (400d10 <SystemCoreClockUpdate+0x104>)
  400c86:	4b1e      	ldr	r3, [pc, #120]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400c88:	601a      	str	r2, [r3, #0]
				break;
  400c8a:	e7c8      	b.n	400c1e <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c8c:	4b1b      	ldr	r3, [pc, #108]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400c8e:	6a1b      	ldr	r3, [r3, #32]
  400c90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c94:	d016      	beq.n	400cc4 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400c96:	4a1c      	ldr	r2, [pc, #112]	; (400d08 <SystemCoreClockUpdate+0xfc>)
  400c98:	4b19      	ldr	r3, [pc, #100]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400c9a:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400c9c:	4b17      	ldr	r3, [pc, #92]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ca0:	f003 0303 	and.w	r3, r3, #3
  400ca4:	2b02      	cmp	r3, #2
  400ca6:	d1ba      	bne.n	400c1e <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400ca8:	4a14      	ldr	r2, [pc, #80]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400caa:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cac:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400cae:	4814      	ldr	r0, [pc, #80]	; (400d00 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400cb0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400cb4:	6803      	ldr	r3, [r0, #0]
  400cb6:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cba:	b2d2      	uxtb	r2, r2
  400cbc:	fbb3 f3f2 	udiv	r3, r3, r2
  400cc0:	6003      	str	r3, [r0, #0]
  400cc2:	e7ac      	b.n	400c1e <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cc4:	4a11      	ldr	r2, [pc, #68]	; (400d0c <SystemCoreClockUpdate+0x100>)
  400cc6:	4b0e      	ldr	r3, [pc, #56]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400cc8:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400cca:	4b0c      	ldr	r3, [pc, #48]	; (400cfc <SystemCoreClockUpdate+0xf0>)
  400ccc:	6a1b      	ldr	r3, [r3, #32]
  400cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cd2:	2b10      	cmp	r3, #16
  400cd4:	d005      	beq.n	400ce2 <SystemCoreClockUpdate+0xd6>
  400cd6:	2b20      	cmp	r3, #32
  400cd8:	d1e0      	bne.n	400c9c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400cda:	4a0b      	ldr	r2, [pc, #44]	; (400d08 <SystemCoreClockUpdate+0xfc>)
  400cdc:	4b08      	ldr	r3, [pc, #32]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400cde:	601a      	str	r2, [r3, #0]
				break;
  400ce0:	e7dc      	b.n	400c9c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400ce2:	4a0b      	ldr	r2, [pc, #44]	; (400d10 <SystemCoreClockUpdate+0x104>)
  400ce4:	4b06      	ldr	r3, [pc, #24]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400ce6:	601a      	str	r2, [r3, #0]
				break;
  400ce8:	e7d8      	b.n	400c9c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400cea:	4a05      	ldr	r2, [pc, #20]	; (400d00 <SystemCoreClockUpdate+0xf4>)
  400cec:	6813      	ldr	r3, [r2, #0]
  400cee:	4909      	ldr	r1, [pc, #36]	; (400d14 <SystemCoreClockUpdate+0x108>)
  400cf0:	fba1 1303 	umull	r1, r3, r1, r3
  400cf4:	085b      	lsrs	r3, r3, #1
  400cf6:	6013      	str	r3, [r2, #0]
  400cf8:	4770      	bx	lr
  400cfa:	bf00      	nop
  400cfc:	400e0400 	.word	0x400e0400
  400d00:	20000004 	.word	0x20000004
  400d04:	400e1810 	.word	0x400e1810
  400d08:	00b71b00 	.word	0x00b71b00
  400d0c:	003d0900 	.word	0x003d0900
  400d10:	007a1200 	.word	0x007a1200
  400d14:	aaaaaaab 	.word	0xaaaaaaab

00400d18 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400d18:	4b12      	ldr	r3, [pc, #72]	; (400d64 <system_init_flash+0x4c>)
  400d1a:	4298      	cmp	r0, r3
  400d1c:	d911      	bls.n	400d42 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400d1e:	4b12      	ldr	r3, [pc, #72]	; (400d68 <system_init_flash+0x50>)
  400d20:	4298      	cmp	r0, r3
  400d22:	d913      	bls.n	400d4c <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400d24:	4b11      	ldr	r3, [pc, #68]	; (400d6c <system_init_flash+0x54>)
  400d26:	4298      	cmp	r0, r3
  400d28:	d914      	bls.n	400d54 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400d2a:	4b11      	ldr	r3, [pc, #68]	; (400d70 <system_init_flash+0x58>)
  400d2c:	4298      	cmp	r0, r3
  400d2e:	d915      	bls.n	400d5c <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400d30:	4b10      	ldr	r3, [pc, #64]	; (400d74 <system_init_flash+0x5c>)
  400d32:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d34:	bf94      	ite	ls
  400d36:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d3a:	4a0f      	ldrhi	r2, [pc, #60]	; (400d78 <system_init_flash+0x60>)
  400d3c:	4b0f      	ldr	r3, [pc, #60]	; (400d7c <system_init_flash+0x64>)
  400d3e:	601a      	str	r2, [r3, #0]
  400d40:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d46:	4b0d      	ldr	r3, [pc, #52]	; (400d7c <system_init_flash+0x64>)
  400d48:	601a      	str	r2, [r3, #0]
  400d4a:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d4c:	4a0c      	ldr	r2, [pc, #48]	; (400d80 <system_init_flash+0x68>)
  400d4e:	4b0b      	ldr	r3, [pc, #44]	; (400d7c <system_init_flash+0x64>)
  400d50:	601a      	str	r2, [r3, #0]
  400d52:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d54:	4a0b      	ldr	r2, [pc, #44]	; (400d84 <system_init_flash+0x6c>)
  400d56:	4b09      	ldr	r3, [pc, #36]	; (400d7c <system_init_flash+0x64>)
  400d58:	601a      	str	r2, [r3, #0]
  400d5a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d5c:	4a0a      	ldr	r2, [pc, #40]	; (400d88 <system_init_flash+0x70>)
  400d5e:	4b07      	ldr	r3, [pc, #28]	; (400d7c <system_init_flash+0x64>)
  400d60:	601a      	str	r2, [r3, #0]
  400d62:	4770      	bx	lr
  400d64:	01312cff 	.word	0x01312cff
  400d68:	026259ff 	.word	0x026259ff
  400d6c:	039386ff 	.word	0x039386ff
  400d70:	04c4b3ff 	.word	0x04c4b3ff
  400d74:	05f5e0ff 	.word	0x05f5e0ff
  400d78:	04000500 	.word	0x04000500
  400d7c:	400e0a00 	.word	0x400e0a00
  400d80:	04000100 	.word	0x04000100
  400d84:	04000200 	.word	0x04000200
  400d88:	04000300 	.word	0x04000300

00400d8c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400d8c:	4b0a      	ldr	r3, [pc, #40]	; (400db8 <_sbrk+0x2c>)
  400d8e:	681b      	ldr	r3, [r3, #0]
  400d90:	b153      	cbz	r3, 400da8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400d92:	4b09      	ldr	r3, [pc, #36]	; (400db8 <_sbrk+0x2c>)
  400d94:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d96:	181a      	adds	r2, r3, r0
  400d98:	4908      	ldr	r1, [pc, #32]	; (400dbc <_sbrk+0x30>)
  400d9a:	4291      	cmp	r1, r2
  400d9c:	db08      	blt.n	400db0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d9e:	4610      	mov	r0, r2
  400da0:	4a05      	ldr	r2, [pc, #20]	; (400db8 <_sbrk+0x2c>)
  400da2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400da4:	4618      	mov	r0, r3
  400da6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400da8:	4a05      	ldr	r2, [pc, #20]	; (400dc0 <_sbrk+0x34>)
  400daa:	4b03      	ldr	r3, [pc, #12]	; (400db8 <_sbrk+0x2c>)
  400dac:	601a      	str	r2, [r3, #0]
  400dae:	e7f0      	b.n	400d92 <_sbrk+0x6>
		return (caddr_t) -1;	
  400db0:	f04f 30ff 	mov.w	r0, #4294967295
}
  400db4:	4770      	bx	lr
  400db6:	bf00      	nop
  400db8:	20000868 	.word	0x20000868
  400dbc:	2001fffc 	.word	0x2001fffc
  400dc0:	20003998 	.word	0x20003998

00400dc4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400dc4:	f04f 30ff 	mov.w	r0, #4294967295
  400dc8:	4770      	bx	lr

00400dca <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400dce:	604b      	str	r3, [r1, #4]

	return 0;
}
  400dd0:	2000      	movs	r0, #0
  400dd2:	4770      	bx	lr

00400dd4 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400dd4:	2000      	movs	r0, #0
  400dd6:	4770      	bx	lr

00400dd8 <__libc_init_array>:
  400dd8:	b570      	push	{r4, r5, r6, lr}
  400dda:	4e0f      	ldr	r6, [pc, #60]	; (400e18 <__libc_init_array+0x40>)
  400ddc:	4d0f      	ldr	r5, [pc, #60]	; (400e1c <__libc_init_array+0x44>)
  400dde:	1b76      	subs	r6, r6, r5
  400de0:	10b6      	asrs	r6, r6, #2
  400de2:	bf18      	it	ne
  400de4:	2400      	movne	r4, #0
  400de6:	d005      	beq.n	400df4 <__libc_init_array+0x1c>
  400de8:	3401      	adds	r4, #1
  400dea:	f855 3b04 	ldr.w	r3, [r5], #4
  400dee:	4798      	blx	r3
  400df0:	42a6      	cmp	r6, r4
  400df2:	d1f9      	bne.n	400de8 <__libc_init_array+0x10>
  400df4:	4e0a      	ldr	r6, [pc, #40]	; (400e20 <__libc_init_array+0x48>)
  400df6:	4d0b      	ldr	r5, [pc, #44]	; (400e24 <__libc_init_array+0x4c>)
  400df8:	1b76      	subs	r6, r6, r5
  400dfa:	f001 f86b 	bl	401ed4 <_init>
  400dfe:	10b6      	asrs	r6, r6, #2
  400e00:	bf18      	it	ne
  400e02:	2400      	movne	r4, #0
  400e04:	d006      	beq.n	400e14 <__libc_init_array+0x3c>
  400e06:	3401      	adds	r4, #1
  400e08:	f855 3b04 	ldr.w	r3, [r5], #4
  400e0c:	4798      	blx	r3
  400e0e:	42a6      	cmp	r6, r4
  400e10:	d1f9      	bne.n	400e06 <__libc_init_array+0x2e>
  400e12:	bd70      	pop	{r4, r5, r6, pc}
  400e14:	bd70      	pop	{r4, r5, r6, pc}
  400e16:	bf00      	nop
  400e18:	00401ee0 	.word	0x00401ee0
  400e1c:	00401ee0 	.word	0x00401ee0
  400e20:	00401ee8 	.word	0x00401ee8
  400e24:	00401ee0 	.word	0x00401ee0

00400e28 <memset>:
  400e28:	b470      	push	{r4, r5, r6}
  400e2a:	0786      	lsls	r6, r0, #30
  400e2c:	d046      	beq.n	400ebc <memset+0x94>
  400e2e:	1e54      	subs	r4, r2, #1
  400e30:	2a00      	cmp	r2, #0
  400e32:	d041      	beq.n	400eb8 <memset+0x90>
  400e34:	b2ca      	uxtb	r2, r1
  400e36:	4603      	mov	r3, r0
  400e38:	e002      	b.n	400e40 <memset+0x18>
  400e3a:	f114 34ff 	adds.w	r4, r4, #4294967295
  400e3e:	d33b      	bcc.n	400eb8 <memset+0x90>
  400e40:	f803 2b01 	strb.w	r2, [r3], #1
  400e44:	079d      	lsls	r5, r3, #30
  400e46:	d1f8      	bne.n	400e3a <memset+0x12>
  400e48:	2c03      	cmp	r4, #3
  400e4a:	d92e      	bls.n	400eaa <memset+0x82>
  400e4c:	b2cd      	uxtb	r5, r1
  400e4e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400e52:	2c0f      	cmp	r4, #15
  400e54:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400e58:	d919      	bls.n	400e8e <memset+0x66>
  400e5a:	f103 0210 	add.w	r2, r3, #16
  400e5e:	4626      	mov	r6, r4
  400e60:	3e10      	subs	r6, #16
  400e62:	2e0f      	cmp	r6, #15
  400e64:	f842 5c10 	str.w	r5, [r2, #-16]
  400e68:	f842 5c0c 	str.w	r5, [r2, #-12]
  400e6c:	f842 5c08 	str.w	r5, [r2, #-8]
  400e70:	f842 5c04 	str.w	r5, [r2, #-4]
  400e74:	f102 0210 	add.w	r2, r2, #16
  400e78:	d8f2      	bhi.n	400e60 <memset+0x38>
  400e7a:	f1a4 0210 	sub.w	r2, r4, #16
  400e7e:	f022 020f 	bic.w	r2, r2, #15
  400e82:	f004 040f 	and.w	r4, r4, #15
  400e86:	3210      	adds	r2, #16
  400e88:	2c03      	cmp	r4, #3
  400e8a:	4413      	add	r3, r2
  400e8c:	d90d      	bls.n	400eaa <memset+0x82>
  400e8e:	461e      	mov	r6, r3
  400e90:	4622      	mov	r2, r4
  400e92:	3a04      	subs	r2, #4
  400e94:	2a03      	cmp	r2, #3
  400e96:	f846 5b04 	str.w	r5, [r6], #4
  400e9a:	d8fa      	bhi.n	400e92 <memset+0x6a>
  400e9c:	1f22      	subs	r2, r4, #4
  400e9e:	f022 0203 	bic.w	r2, r2, #3
  400ea2:	3204      	adds	r2, #4
  400ea4:	4413      	add	r3, r2
  400ea6:	f004 0403 	and.w	r4, r4, #3
  400eaa:	b12c      	cbz	r4, 400eb8 <memset+0x90>
  400eac:	b2c9      	uxtb	r1, r1
  400eae:	441c      	add	r4, r3
  400eb0:	f803 1b01 	strb.w	r1, [r3], #1
  400eb4:	429c      	cmp	r4, r3
  400eb6:	d1fb      	bne.n	400eb0 <memset+0x88>
  400eb8:	bc70      	pop	{r4, r5, r6}
  400eba:	4770      	bx	lr
  400ebc:	4614      	mov	r4, r2
  400ebe:	4603      	mov	r3, r0
  400ec0:	e7c2      	b.n	400e48 <memset+0x20>
  400ec2:	bf00      	nop

00400ec4 <setbuf>:
  400ec4:	2900      	cmp	r1, #0
  400ec6:	bf0c      	ite	eq
  400ec8:	2202      	moveq	r2, #2
  400eca:	2200      	movne	r2, #0
  400ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400ed0:	f000 b800 	b.w	400ed4 <setvbuf>

00400ed4 <setvbuf>:
  400ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400ed8:	4c61      	ldr	r4, [pc, #388]	; (401060 <setvbuf+0x18c>)
  400eda:	6825      	ldr	r5, [r4, #0]
  400edc:	b083      	sub	sp, #12
  400ede:	4604      	mov	r4, r0
  400ee0:	460f      	mov	r7, r1
  400ee2:	4690      	mov	r8, r2
  400ee4:	461e      	mov	r6, r3
  400ee6:	b115      	cbz	r5, 400eee <setvbuf+0x1a>
  400ee8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400eea:	2b00      	cmp	r3, #0
  400eec:	d064      	beq.n	400fb8 <setvbuf+0xe4>
  400eee:	f1b8 0f02 	cmp.w	r8, #2
  400ef2:	d006      	beq.n	400f02 <setvbuf+0x2e>
  400ef4:	f1b8 0f01 	cmp.w	r8, #1
  400ef8:	f200 809f 	bhi.w	40103a <setvbuf+0x166>
  400efc:	2e00      	cmp	r6, #0
  400efe:	f2c0 809c 	blt.w	40103a <setvbuf+0x166>
  400f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
  400f04:	07d8      	lsls	r0, r3, #31
  400f06:	d534      	bpl.n	400f72 <setvbuf+0x9e>
  400f08:	4621      	mov	r1, r4
  400f0a:	4628      	mov	r0, r5
  400f0c:	f000 f95a 	bl	4011c4 <_fflush_r>
  400f10:	6b21      	ldr	r1, [r4, #48]	; 0x30
  400f12:	b141      	cbz	r1, 400f26 <setvbuf+0x52>
  400f14:	f104 0340 	add.w	r3, r4, #64	; 0x40
  400f18:	4299      	cmp	r1, r3
  400f1a:	d002      	beq.n	400f22 <setvbuf+0x4e>
  400f1c:	4628      	mov	r0, r5
  400f1e:	f000 fa4b 	bl	4013b8 <_free_r>
  400f22:	2300      	movs	r3, #0
  400f24:	6323      	str	r3, [r4, #48]	; 0x30
  400f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400f2a:	2200      	movs	r2, #0
  400f2c:	61a2      	str	r2, [r4, #24]
  400f2e:	6062      	str	r2, [r4, #4]
  400f30:	061a      	lsls	r2, r3, #24
  400f32:	d43a      	bmi.n	400faa <setvbuf+0xd6>
  400f34:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400f38:	f023 0303 	bic.w	r3, r3, #3
  400f3c:	f1b8 0f02 	cmp.w	r8, #2
  400f40:	81a3      	strh	r3, [r4, #12]
  400f42:	d01d      	beq.n	400f80 <setvbuf+0xac>
  400f44:	ab01      	add	r3, sp, #4
  400f46:	466a      	mov	r2, sp
  400f48:	4621      	mov	r1, r4
  400f4a:	4628      	mov	r0, r5
  400f4c:	f000 fb4c 	bl	4015e8 <__swhatbuf_r>
  400f50:	89a3      	ldrh	r3, [r4, #12]
  400f52:	4318      	orrs	r0, r3
  400f54:	81a0      	strh	r0, [r4, #12]
  400f56:	2e00      	cmp	r6, #0
  400f58:	d132      	bne.n	400fc0 <setvbuf+0xec>
  400f5a:	9e00      	ldr	r6, [sp, #0]
  400f5c:	4630      	mov	r0, r6
  400f5e:	f000 fb71 	bl	401644 <malloc>
  400f62:	4607      	mov	r7, r0
  400f64:	2800      	cmp	r0, #0
  400f66:	d06b      	beq.n	401040 <setvbuf+0x16c>
  400f68:	89a3      	ldrh	r3, [r4, #12]
  400f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400f6e:	81a3      	strh	r3, [r4, #12]
  400f70:	e028      	b.n	400fc4 <setvbuf+0xf0>
  400f72:	89a3      	ldrh	r3, [r4, #12]
  400f74:	0599      	lsls	r1, r3, #22
  400f76:	d4c7      	bmi.n	400f08 <setvbuf+0x34>
  400f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
  400f7a:	f000 fb31 	bl	4015e0 <__retarget_lock_acquire_recursive>
  400f7e:	e7c3      	b.n	400f08 <setvbuf+0x34>
  400f80:	2500      	movs	r5, #0
  400f82:	6e61      	ldr	r1, [r4, #100]	; 0x64
  400f84:	2600      	movs	r6, #0
  400f86:	f104 0243 	add.w	r2, r4, #67	; 0x43
  400f8a:	f043 0302 	orr.w	r3, r3, #2
  400f8e:	2001      	movs	r0, #1
  400f90:	60a6      	str	r6, [r4, #8]
  400f92:	07ce      	lsls	r6, r1, #31
  400f94:	81a3      	strh	r3, [r4, #12]
  400f96:	6022      	str	r2, [r4, #0]
  400f98:	6122      	str	r2, [r4, #16]
  400f9a:	6160      	str	r0, [r4, #20]
  400f9c:	d401      	bmi.n	400fa2 <setvbuf+0xce>
  400f9e:	0598      	lsls	r0, r3, #22
  400fa0:	d53e      	bpl.n	401020 <setvbuf+0x14c>
  400fa2:	4628      	mov	r0, r5
  400fa4:	b003      	add	sp, #12
  400fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400faa:	6921      	ldr	r1, [r4, #16]
  400fac:	4628      	mov	r0, r5
  400fae:	f000 fa03 	bl	4013b8 <_free_r>
  400fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400fb6:	e7bd      	b.n	400f34 <setvbuf+0x60>
  400fb8:	4628      	mov	r0, r5
  400fba:	f000 f95b 	bl	401274 <__sinit>
  400fbe:	e796      	b.n	400eee <setvbuf+0x1a>
  400fc0:	2f00      	cmp	r7, #0
  400fc2:	d0cb      	beq.n	400f5c <setvbuf+0x88>
  400fc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400fc6:	2b00      	cmp	r3, #0
  400fc8:	d033      	beq.n	401032 <setvbuf+0x15e>
  400fca:	9b00      	ldr	r3, [sp, #0]
  400fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  400fd0:	6027      	str	r7, [r4, #0]
  400fd2:	429e      	cmp	r6, r3
  400fd4:	bf1c      	itt	ne
  400fd6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  400fda:	81a2      	strhne	r2, [r4, #12]
  400fdc:	f1b8 0f01 	cmp.w	r8, #1
  400fe0:	bf04      	itt	eq
  400fe2:	f042 0201 	orreq.w	r2, r2, #1
  400fe6:	81a2      	strheq	r2, [r4, #12]
  400fe8:	b292      	uxth	r2, r2
  400fea:	f012 0308 	ands.w	r3, r2, #8
  400fee:	6127      	str	r7, [r4, #16]
  400ff0:	6166      	str	r6, [r4, #20]
  400ff2:	d00e      	beq.n	401012 <setvbuf+0x13e>
  400ff4:	07d1      	lsls	r1, r2, #31
  400ff6:	d51a      	bpl.n	40102e <setvbuf+0x15a>
  400ff8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  400ffa:	4276      	negs	r6, r6
  400ffc:	2300      	movs	r3, #0
  400ffe:	f015 0501 	ands.w	r5, r5, #1
  401002:	61a6      	str	r6, [r4, #24]
  401004:	60a3      	str	r3, [r4, #8]
  401006:	d009      	beq.n	40101c <setvbuf+0x148>
  401008:	2500      	movs	r5, #0
  40100a:	4628      	mov	r0, r5
  40100c:	b003      	add	sp, #12
  40100e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401012:	60a3      	str	r3, [r4, #8]
  401014:	6e65      	ldr	r5, [r4, #100]	; 0x64
  401016:	f015 0501 	ands.w	r5, r5, #1
  40101a:	d1f5      	bne.n	401008 <setvbuf+0x134>
  40101c:	0593      	lsls	r3, r2, #22
  40101e:	d4c0      	bmi.n	400fa2 <setvbuf+0xce>
  401020:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401022:	f000 fadf 	bl	4015e4 <__retarget_lock_release_recursive>
  401026:	4628      	mov	r0, r5
  401028:	b003      	add	sp, #12
  40102a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40102e:	60a6      	str	r6, [r4, #8]
  401030:	e7f0      	b.n	401014 <setvbuf+0x140>
  401032:	4628      	mov	r0, r5
  401034:	f000 f91e 	bl	401274 <__sinit>
  401038:	e7c7      	b.n	400fca <setvbuf+0xf6>
  40103a:	f04f 35ff 	mov.w	r5, #4294967295
  40103e:	e7b0      	b.n	400fa2 <setvbuf+0xce>
  401040:	f8dd 9000 	ldr.w	r9, [sp]
  401044:	45b1      	cmp	r9, r6
  401046:	d004      	beq.n	401052 <setvbuf+0x17e>
  401048:	4648      	mov	r0, r9
  40104a:	f000 fafb 	bl	401644 <malloc>
  40104e:	4607      	mov	r7, r0
  401050:	b920      	cbnz	r0, 40105c <setvbuf+0x188>
  401052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401056:	f04f 35ff 	mov.w	r5, #4294967295
  40105a:	e792      	b.n	400f82 <setvbuf+0xae>
  40105c:	464e      	mov	r6, r9
  40105e:	e783      	b.n	400f68 <setvbuf+0x94>
  401060:	20000008 	.word	0x20000008

00401064 <register_fini>:
  401064:	4b02      	ldr	r3, [pc, #8]	; (401070 <register_fini+0xc>)
  401066:	b113      	cbz	r3, 40106e <register_fini+0xa>
  401068:	4802      	ldr	r0, [pc, #8]	; (401074 <register_fini+0x10>)
  40106a:	f000 b805 	b.w	401078 <atexit>
  40106e:	4770      	bx	lr
  401070:	00000000 	.word	0x00000000
  401074:	004012e5 	.word	0x004012e5

00401078 <atexit>:
  401078:	2300      	movs	r3, #0
  40107a:	4601      	mov	r1, r0
  40107c:	461a      	mov	r2, r3
  40107e:	4618      	mov	r0, r3
  401080:	f000 be10 	b.w	401ca4 <__register_exitproc>

00401084 <__sflush_r>:
  401084:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401088:	b29a      	uxth	r2, r3
  40108a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40108e:	460d      	mov	r5, r1
  401090:	0711      	lsls	r1, r2, #28
  401092:	4680      	mov	r8, r0
  401094:	d43a      	bmi.n	40110c <__sflush_r+0x88>
  401096:	686a      	ldr	r2, [r5, #4]
  401098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40109c:	2a00      	cmp	r2, #0
  40109e:	81ab      	strh	r3, [r5, #12]
  4010a0:	dd6f      	ble.n	401182 <__sflush_r+0xfe>
  4010a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4010a4:	2c00      	cmp	r4, #0
  4010a6:	d049      	beq.n	40113c <__sflush_r+0xb8>
  4010a8:	2200      	movs	r2, #0
  4010aa:	b29b      	uxth	r3, r3
  4010ac:	f8d8 6000 	ldr.w	r6, [r8]
  4010b0:	f8c8 2000 	str.w	r2, [r8]
  4010b4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4010b8:	d067      	beq.n	40118a <__sflush_r+0x106>
  4010ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4010bc:	075f      	lsls	r7, r3, #29
  4010be:	d505      	bpl.n	4010cc <__sflush_r+0x48>
  4010c0:	6869      	ldr	r1, [r5, #4]
  4010c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4010c4:	1a52      	subs	r2, r2, r1
  4010c6:	b10b      	cbz	r3, 4010cc <__sflush_r+0x48>
  4010c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4010ca:	1ad2      	subs	r2, r2, r3
  4010cc:	2300      	movs	r3, #0
  4010ce:	69e9      	ldr	r1, [r5, #28]
  4010d0:	4640      	mov	r0, r8
  4010d2:	47a0      	blx	r4
  4010d4:	1c44      	adds	r4, r0, #1
  4010d6:	d03c      	beq.n	401152 <__sflush_r+0xce>
  4010d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4010dc:	692a      	ldr	r2, [r5, #16]
  4010de:	602a      	str	r2, [r5, #0]
  4010e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4010e4:	2200      	movs	r2, #0
  4010e6:	81ab      	strh	r3, [r5, #12]
  4010e8:	04db      	lsls	r3, r3, #19
  4010ea:	606a      	str	r2, [r5, #4]
  4010ec:	d447      	bmi.n	40117e <__sflush_r+0xfa>
  4010ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4010f0:	f8c8 6000 	str.w	r6, [r8]
  4010f4:	b311      	cbz	r1, 40113c <__sflush_r+0xb8>
  4010f6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4010fa:	4299      	cmp	r1, r3
  4010fc:	d002      	beq.n	401104 <__sflush_r+0x80>
  4010fe:	4640      	mov	r0, r8
  401100:	f000 f95a 	bl	4013b8 <_free_r>
  401104:	2000      	movs	r0, #0
  401106:	6328      	str	r0, [r5, #48]	; 0x30
  401108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40110c:	692e      	ldr	r6, [r5, #16]
  40110e:	b1ae      	cbz	r6, 40113c <__sflush_r+0xb8>
  401110:	682c      	ldr	r4, [r5, #0]
  401112:	602e      	str	r6, [r5, #0]
  401114:	0791      	lsls	r1, r2, #30
  401116:	bf0c      	ite	eq
  401118:	696b      	ldreq	r3, [r5, #20]
  40111a:	2300      	movne	r3, #0
  40111c:	1ba4      	subs	r4, r4, r6
  40111e:	60ab      	str	r3, [r5, #8]
  401120:	e00a      	b.n	401138 <__sflush_r+0xb4>
  401122:	4623      	mov	r3, r4
  401124:	4632      	mov	r2, r6
  401126:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401128:	69e9      	ldr	r1, [r5, #28]
  40112a:	4640      	mov	r0, r8
  40112c:	47b8      	blx	r7
  40112e:	2800      	cmp	r0, #0
  401130:	eba4 0400 	sub.w	r4, r4, r0
  401134:	4406      	add	r6, r0
  401136:	dd04      	ble.n	401142 <__sflush_r+0xbe>
  401138:	2c00      	cmp	r4, #0
  40113a:	dcf2      	bgt.n	401122 <__sflush_r+0x9e>
  40113c:	2000      	movs	r0, #0
  40113e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401142:	89ab      	ldrh	r3, [r5, #12]
  401144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401148:	81ab      	strh	r3, [r5, #12]
  40114a:	f04f 30ff 	mov.w	r0, #4294967295
  40114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401152:	f8d8 4000 	ldr.w	r4, [r8]
  401156:	2c1d      	cmp	r4, #29
  401158:	d8f3      	bhi.n	401142 <__sflush_r+0xbe>
  40115a:	4b19      	ldr	r3, [pc, #100]	; (4011c0 <__sflush_r+0x13c>)
  40115c:	40e3      	lsrs	r3, r4
  40115e:	43db      	mvns	r3, r3
  401160:	f013 0301 	ands.w	r3, r3, #1
  401164:	d1ed      	bne.n	401142 <__sflush_r+0xbe>
  401166:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40116a:	606b      	str	r3, [r5, #4]
  40116c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401170:	6929      	ldr	r1, [r5, #16]
  401172:	81ab      	strh	r3, [r5, #12]
  401174:	04da      	lsls	r2, r3, #19
  401176:	6029      	str	r1, [r5, #0]
  401178:	d5b9      	bpl.n	4010ee <__sflush_r+0x6a>
  40117a:	2c00      	cmp	r4, #0
  40117c:	d1b7      	bne.n	4010ee <__sflush_r+0x6a>
  40117e:	6528      	str	r0, [r5, #80]	; 0x50
  401180:	e7b5      	b.n	4010ee <__sflush_r+0x6a>
  401182:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401184:	2a00      	cmp	r2, #0
  401186:	dc8c      	bgt.n	4010a2 <__sflush_r+0x1e>
  401188:	e7d8      	b.n	40113c <__sflush_r+0xb8>
  40118a:	2301      	movs	r3, #1
  40118c:	69e9      	ldr	r1, [r5, #28]
  40118e:	4640      	mov	r0, r8
  401190:	47a0      	blx	r4
  401192:	1c43      	adds	r3, r0, #1
  401194:	4602      	mov	r2, r0
  401196:	d002      	beq.n	40119e <__sflush_r+0x11a>
  401198:	89ab      	ldrh	r3, [r5, #12]
  40119a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40119c:	e78e      	b.n	4010bc <__sflush_r+0x38>
  40119e:	f8d8 3000 	ldr.w	r3, [r8]
  4011a2:	2b00      	cmp	r3, #0
  4011a4:	d0f8      	beq.n	401198 <__sflush_r+0x114>
  4011a6:	2b1d      	cmp	r3, #29
  4011a8:	d001      	beq.n	4011ae <__sflush_r+0x12a>
  4011aa:	2b16      	cmp	r3, #22
  4011ac:	d102      	bne.n	4011b4 <__sflush_r+0x130>
  4011ae:	f8c8 6000 	str.w	r6, [r8]
  4011b2:	e7c3      	b.n	40113c <__sflush_r+0xb8>
  4011b4:	89ab      	ldrh	r3, [r5, #12]
  4011b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4011ba:	81ab      	strh	r3, [r5, #12]
  4011bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011c0:	20400001 	.word	0x20400001

004011c4 <_fflush_r>:
  4011c4:	b538      	push	{r3, r4, r5, lr}
  4011c6:	460d      	mov	r5, r1
  4011c8:	4604      	mov	r4, r0
  4011ca:	b108      	cbz	r0, 4011d0 <_fflush_r+0xc>
  4011cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4011ce:	b1bb      	cbz	r3, 401200 <_fflush_r+0x3c>
  4011d0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4011d4:	b188      	cbz	r0, 4011fa <_fflush_r+0x36>
  4011d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4011d8:	07db      	lsls	r3, r3, #31
  4011da:	d401      	bmi.n	4011e0 <_fflush_r+0x1c>
  4011dc:	0581      	lsls	r1, r0, #22
  4011de:	d517      	bpl.n	401210 <_fflush_r+0x4c>
  4011e0:	4620      	mov	r0, r4
  4011e2:	4629      	mov	r1, r5
  4011e4:	f7ff ff4e 	bl	401084 <__sflush_r>
  4011e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4011ea:	07da      	lsls	r2, r3, #31
  4011ec:	4604      	mov	r4, r0
  4011ee:	d402      	bmi.n	4011f6 <_fflush_r+0x32>
  4011f0:	89ab      	ldrh	r3, [r5, #12]
  4011f2:	059b      	lsls	r3, r3, #22
  4011f4:	d507      	bpl.n	401206 <_fflush_r+0x42>
  4011f6:	4620      	mov	r0, r4
  4011f8:	bd38      	pop	{r3, r4, r5, pc}
  4011fa:	4604      	mov	r4, r0
  4011fc:	4620      	mov	r0, r4
  4011fe:	bd38      	pop	{r3, r4, r5, pc}
  401200:	f000 f838 	bl	401274 <__sinit>
  401204:	e7e4      	b.n	4011d0 <_fflush_r+0xc>
  401206:	6da8      	ldr	r0, [r5, #88]	; 0x58
  401208:	f000 f9ec 	bl	4015e4 <__retarget_lock_release_recursive>
  40120c:	4620      	mov	r0, r4
  40120e:	bd38      	pop	{r3, r4, r5, pc}
  401210:	6da8      	ldr	r0, [r5, #88]	; 0x58
  401212:	f000 f9e5 	bl	4015e0 <__retarget_lock_acquire_recursive>
  401216:	e7e3      	b.n	4011e0 <_fflush_r+0x1c>

00401218 <_cleanup_r>:
  401218:	4901      	ldr	r1, [pc, #4]	; (401220 <_cleanup_r+0x8>)
  40121a:	f000 b9b3 	b.w	401584 <_fwalk_reent>
  40121e:	bf00      	nop
  401220:	00401d8d 	.word	0x00401d8d

00401224 <std.isra.0>:
  401224:	b510      	push	{r4, lr}
  401226:	2300      	movs	r3, #0
  401228:	4604      	mov	r4, r0
  40122a:	8181      	strh	r1, [r0, #12]
  40122c:	81c2      	strh	r2, [r0, #14]
  40122e:	6003      	str	r3, [r0, #0]
  401230:	6043      	str	r3, [r0, #4]
  401232:	6083      	str	r3, [r0, #8]
  401234:	6643      	str	r3, [r0, #100]	; 0x64
  401236:	6103      	str	r3, [r0, #16]
  401238:	6143      	str	r3, [r0, #20]
  40123a:	6183      	str	r3, [r0, #24]
  40123c:	4619      	mov	r1, r3
  40123e:	2208      	movs	r2, #8
  401240:	305c      	adds	r0, #92	; 0x5c
  401242:	f7ff fdf1 	bl	400e28 <memset>
  401246:	4807      	ldr	r0, [pc, #28]	; (401264 <std.isra.0+0x40>)
  401248:	4907      	ldr	r1, [pc, #28]	; (401268 <std.isra.0+0x44>)
  40124a:	4a08      	ldr	r2, [pc, #32]	; (40126c <std.isra.0+0x48>)
  40124c:	4b08      	ldr	r3, [pc, #32]	; (401270 <std.isra.0+0x4c>)
  40124e:	6220      	str	r0, [r4, #32]
  401250:	61e4      	str	r4, [r4, #28]
  401252:	6261      	str	r1, [r4, #36]	; 0x24
  401254:	62a2      	str	r2, [r4, #40]	; 0x28
  401256:	62e3      	str	r3, [r4, #44]	; 0x2c
  401258:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40125c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401260:	f000 b9ba 	b.w	4015d8 <__retarget_lock_init_recursive>
  401264:	00401bf1 	.word	0x00401bf1
  401268:	00401c15 	.word	0x00401c15
  40126c:	00401c51 	.word	0x00401c51
  401270:	00401c71 	.word	0x00401c71

00401274 <__sinit>:
  401274:	b510      	push	{r4, lr}
  401276:	4604      	mov	r4, r0
  401278:	4812      	ldr	r0, [pc, #72]	; (4012c4 <__sinit+0x50>)
  40127a:	f000 f9b1 	bl	4015e0 <__retarget_lock_acquire_recursive>
  40127e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401280:	b9d2      	cbnz	r2, 4012b8 <__sinit+0x44>
  401282:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  401286:	4810      	ldr	r0, [pc, #64]	; (4012c8 <__sinit+0x54>)
  401288:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40128c:	2103      	movs	r1, #3
  40128e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  401292:	63e0      	str	r0, [r4, #60]	; 0x3c
  401294:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401298:	6860      	ldr	r0, [r4, #4]
  40129a:	2104      	movs	r1, #4
  40129c:	f7ff ffc2 	bl	401224 <std.isra.0>
  4012a0:	2201      	movs	r2, #1
  4012a2:	2109      	movs	r1, #9
  4012a4:	68a0      	ldr	r0, [r4, #8]
  4012a6:	f7ff ffbd 	bl	401224 <std.isra.0>
  4012aa:	2202      	movs	r2, #2
  4012ac:	2112      	movs	r1, #18
  4012ae:	68e0      	ldr	r0, [r4, #12]
  4012b0:	f7ff ffb8 	bl	401224 <std.isra.0>
  4012b4:	2301      	movs	r3, #1
  4012b6:	63a3      	str	r3, [r4, #56]	; 0x38
  4012b8:	4802      	ldr	r0, [pc, #8]	; (4012c4 <__sinit+0x50>)
  4012ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4012be:	f000 b991 	b.w	4015e4 <__retarget_lock_release_recursive>
  4012c2:	bf00      	nop
  4012c4:	2000097c 	.word	0x2000097c
  4012c8:	00401219 	.word	0x00401219

004012cc <__sfp_lock_acquire>:
  4012cc:	4801      	ldr	r0, [pc, #4]	; (4012d4 <__sfp_lock_acquire+0x8>)
  4012ce:	f000 b987 	b.w	4015e0 <__retarget_lock_acquire_recursive>
  4012d2:	bf00      	nop
  4012d4:	20000990 	.word	0x20000990

004012d8 <__sfp_lock_release>:
  4012d8:	4801      	ldr	r0, [pc, #4]	; (4012e0 <__sfp_lock_release+0x8>)
  4012da:	f000 b983 	b.w	4015e4 <__retarget_lock_release_recursive>
  4012de:	bf00      	nop
  4012e0:	20000990 	.word	0x20000990

004012e4 <__libc_fini_array>:
  4012e4:	b538      	push	{r3, r4, r5, lr}
  4012e6:	4c0a      	ldr	r4, [pc, #40]	; (401310 <__libc_fini_array+0x2c>)
  4012e8:	4d0a      	ldr	r5, [pc, #40]	; (401314 <__libc_fini_array+0x30>)
  4012ea:	1b64      	subs	r4, r4, r5
  4012ec:	10a4      	asrs	r4, r4, #2
  4012ee:	d00a      	beq.n	401306 <__libc_fini_array+0x22>
  4012f0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4012f4:	3b01      	subs	r3, #1
  4012f6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4012fa:	3c01      	subs	r4, #1
  4012fc:	f855 3904 	ldr.w	r3, [r5], #-4
  401300:	4798      	blx	r3
  401302:	2c00      	cmp	r4, #0
  401304:	d1f9      	bne.n	4012fa <__libc_fini_array+0x16>
  401306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40130a:	f000 bded 	b.w	401ee8 <_fini>
  40130e:	bf00      	nop
  401310:	00401ef8 	.word	0x00401ef8
  401314:	00401ef4 	.word	0x00401ef4

00401318 <_malloc_trim_r>:
  401318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40131a:	4f24      	ldr	r7, [pc, #144]	; (4013ac <_malloc_trim_r+0x94>)
  40131c:	460c      	mov	r4, r1
  40131e:	4606      	mov	r6, r0
  401320:	f000 fc48 	bl	401bb4 <__malloc_lock>
  401324:	68bb      	ldr	r3, [r7, #8]
  401326:	685d      	ldr	r5, [r3, #4]
  401328:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40132c:	310f      	adds	r1, #15
  40132e:	f025 0503 	bic.w	r5, r5, #3
  401332:	4429      	add	r1, r5
  401334:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401338:	f021 010f 	bic.w	r1, r1, #15
  40133c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401340:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401344:	db07      	blt.n	401356 <_malloc_trim_r+0x3e>
  401346:	2100      	movs	r1, #0
  401348:	4630      	mov	r0, r6
  40134a:	f000 fc3f 	bl	401bcc <_sbrk_r>
  40134e:	68bb      	ldr	r3, [r7, #8]
  401350:	442b      	add	r3, r5
  401352:	4298      	cmp	r0, r3
  401354:	d004      	beq.n	401360 <_malloc_trim_r+0x48>
  401356:	4630      	mov	r0, r6
  401358:	f000 fc32 	bl	401bc0 <__malloc_unlock>
  40135c:	2000      	movs	r0, #0
  40135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401360:	4261      	negs	r1, r4
  401362:	4630      	mov	r0, r6
  401364:	f000 fc32 	bl	401bcc <_sbrk_r>
  401368:	3001      	adds	r0, #1
  40136a:	d00d      	beq.n	401388 <_malloc_trim_r+0x70>
  40136c:	4b10      	ldr	r3, [pc, #64]	; (4013b0 <_malloc_trim_r+0x98>)
  40136e:	68ba      	ldr	r2, [r7, #8]
  401370:	6819      	ldr	r1, [r3, #0]
  401372:	1b2d      	subs	r5, r5, r4
  401374:	f045 0501 	orr.w	r5, r5, #1
  401378:	4630      	mov	r0, r6
  40137a:	1b09      	subs	r1, r1, r4
  40137c:	6055      	str	r5, [r2, #4]
  40137e:	6019      	str	r1, [r3, #0]
  401380:	f000 fc1e 	bl	401bc0 <__malloc_unlock>
  401384:	2001      	movs	r0, #1
  401386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401388:	2100      	movs	r1, #0
  40138a:	4630      	mov	r0, r6
  40138c:	f000 fc1e 	bl	401bcc <_sbrk_r>
  401390:	68ba      	ldr	r2, [r7, #8]
  401392:	1a83      	subs	r3, r0, r2
  401394:	2b0f      	cmp	r3, #15
  401396:	ddde      	ble.n	401356 <_malloc_trim_r+0x3e>
  401398:	4c06      	ldr	r4, [pc, #24]	; (4013b4 <_malloc_trim_r+0x9c>)
  40139a:	4905      	ldr	r1, [pc, #20]	; (4013b0 <_malloc_trim_r+0x98>)
  40139c:	6824      	ldr	r4, [r4, #0]
  40139e:	f043 0301 	orr.w	r3, r3, #1
  4013a2:	1b00      	subs	r0, r0, r4
  4013a4:	6053      	str	r3, [r2, #4]
  4013a6:	6008      	str	r0, [r1, #0]
  4013a8:	e7d5      	b.n	401356 <_malloc_trim_r+0x3e>
  4013aa:	bf00      	nop
  4013ac:	2000043c 	.word	0x2000043c
  4013b0:	2000086c 	.word	0x2000086c
  4013b4:	20000844 	.word	0x20000844

004013b8 <_free_r>:
  4013b8:	2900      	cmp	r1, #0
  4013ba:	d044      	beq.n	401446 <_free_r+0x8e>
  4013bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013c0:	460d      	mov	r5, r1
  4013c2:	4680      	mov	r8, r0
  4013c4:	f000 fbf6 	bl	401bb4 <__malloc_lock>
  4013c8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4013cc:	4969      	ldr	r1, [pc, #420]	; (401574 <_free_r+0x1bc>)
  4013ce:	f027 0301 	bic.w	r3, r7, #1
  4013d2:	f1a5 0408 	sub.w	r4, r5, #8
  4013d6:	18e2      	adds	r2, r4, r3
  4013d8:	688e      	ldr	r6, [r1, #8]
  4013da:	6850      	ldr	r0, [r2, #4]
  4013dc:	42b2      	cmp	r2, r6
  4013de:	f020 0003 	bic.w	r0, r0, #3
  4013e2:	d05e      	beq.n	4014a2 <_free_r+0xea>
  4013e4:	07fe      	lsls	r6, r7, #31
  4013e6:	6050      	str	r0, [r2, #4]
  4013e8:	d40b      	bmi.n	401402 <_free_r+0x4a>
  4013ea:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4013ee:	1be4      	subs	r4, r4, r7
  4013f0:	f101 0e08 	add.w	lr, r1, #8
  4013f4:	68a5      	ldr	r5, [r4, #8]
  4013f6:	4575      	cmp	r5, lr
  4013f8:	443b      	add	r3, r7
  4013fa:	d06d      	beq.n	4014d8 <_free_r+0x120>
  4013fc:	68e7      	ldr	r7, [r4, #12]
  4013fe:	60ef      	str	r7, [r5, #12]
  401400:	60bd      	str	r5, [r7, #8]
  401402:	1815      	adds	r5, r2, r0
  401404:	686d      	ldr	r5, [r5, #4]
  401406:	07ed      	lsls	r5, r5, #31
  401408:	d53e      	bpl.n	401488 <_free_r+0xd0>
  40140a:	f043 0201 	orr.w	r2, r3, #1
  40140e:	6062      	str	r2, [r4, #4]
  401410:	50e3      	str	r3, [r4, r3]
  401412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401416:	d217      	bcs.n	401448 <_free_r+0x90>
  401418:	08db      	lsrs	r3, r3, #3
  40141a:	1c58      	adds	r0, r3, #1
  40141c:	109a      	asrs	r2, r3, #2
  40141e:	684d      	ldr	r5, [r1, #4]
  401420:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  401424:	60a7      	str	r7, [r4, #8]
  401426:	2301      	movs	r3, #1
  401428:	4093      	lsls	r3, r2
  40142a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40142e:	432b      	orrs	r3, r5
  401430:	3a08      	subs	r2, #8
  401432:	60e2      	str	r2, [r4, #12]
  401434:	604b      	str	r3, [r1, #4]
  401436:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40143a:	60fc      	str	r4, [r7, #12]
  40143c:	4640      	mov	r0, r8
  40143e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401442:	f000 bbbd 	b.w	401bc0 <__malloc_unlock>
  401446:	4770      	bx	lr
  401448:	0a5a      	lsrs	r2, r3, #9
  40144a:	2a04      	cmp	r2, #4
  40144c:	d852      	bhi.n	4014f4 <_free_r+0x13c>
  40144e:	099a      	lsrs	r2, r3, #6
  401450:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401454:	00ff      	lsls	r7, r7, #3
  401456:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40145a:	19c8      	adds	r0, r1, r7
  40145c:	59ca      	ldr	r2, [r1, r7]
  40145e:	3808      	subs	r0, #8
  401460:	4290      	cmp	r0, r2
  401462:	d04f      	beq.n	401504 <_free_r+0x14c>
  401464:	6851      	ldr	r1, [r2, #4]
  401466:	f021 0103 	bic.w	r1, r1, #3
  40146a:	428b      	cmp	r3, r1
  40146c:	d232      	bcs.n	4014d4 <_free_r+0x11c>
  40146e:	6892      	ldr	r2, [r2, #8]
  401470:	4290      	cmp	r0, r2
  401472:	d1f7      	bne.n	401464 <_free_r+0xac>
  401474:	68c3      	ldr	r3, [r0, #12]
  401476:	60a0      	str	r0, [r4, #8]
  401478:	60e3      	str	r3, [r4, #12]
  40147a:	609c      	str	r4, [r3, #8]
  40147c:	60c4      	str	r4, [r0, #12]
  40147e:	4640      	mov	r0, r8
  401480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401484:	f000 bb9c 	b.w	401bc0 <__malloc_unlock>
  401488:	6895      	ldr	r5, [r2, #8]
  40148a:	4f3b      	ldr	r7, [pc, #236]	; (401578 <_free_r+0x1c0>)
  40148c:	42bd      	cmp	r5, r7
  40148e:	4403      	add	r3, r0
  401490:	d040      	beq.n	401514 <_free_r+0x15c>
  401492:	68d0      	ldr	r0, [r2, #12]
  401494:	60e8      	str	r0, [r5, #12]
  401496:	f043 0201 	orr.w	r2, r3, #1
  40149a:	6085      	str	r5, [r0, #8]
  40149c:	6062      	str	r2, [r4, #4]
  40149e:	50e3      	str	r3, [r4, r3]
  4014a0:	e7b7      	b.n	401412 <_free_r+0x5a>
  4014a2:	07ff      	lsls	r7, r7, #31
  4014a4:	4403      	add	r3, r0
  4014a6:	d407      	bmi.n	4014b8 <_free_r+0x100>
  4014a8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4014ac:	1aa4      	subs	r4, r4, r2
  4014ae:	4413      	add	r3, r2
  4014b0:	68a0      	ldr	r0, [r4, #8]
  4014b2:	68e2      	ldr	r2, [r4, #12]
  4014b4:	60c2      	str	r2, [r0, #12]
  4014b6:	6090      	str	r0, [r2, #8]
  4014b8:	4a30      	ldr	r2, [pc, #192]	; (40157c <_free_r+0x1c4>)
  4014ba:	6812      	ldr	r2, [r2, #0]
  4014bc:	f043 0001 	orr.w	r0, r3, #1
  4014c0:	4293      	cmp	r3, r2
  4014c2:	6060      	str	r0, [r4, #4]
  4014c4:	608c      	str	r4, [r1, #8]
  4014c6:	d3b9      	bcc.n	40143c <_free_r+0x84>
  4014c8:	4b2d      	ldr	r3, [pc, #180]	; (401580 <_free_r+0x1c8>)
  4014ca:	4640      	mov	r0, r8
  4014cc:	6819      	ldr	r1, [r3, #0]
  4014ce:	f7ff ff23 	bl	401318 <_malloc_trim_r>
  4014d2:	e7b3      	b.n	40143c <_free_r+0x84>
  4014d4:	4610      	mov	r0, r2
  4014d6:	e7cd      	b.n	401474 <_free_r+0xbc>
  4014d8:	1811      	adds	r1, r2, r0
  4014da:	6849      	ldr	r1, [r1, #4]
  4014dc:	07c9      	lsls	r1, r1, #31
  4014de:	d444      	bmi.n	40156a <_free_r+0x1b2>
  4014e0:	6891      	ldr	r1, [r2, #8]
  4014e2:	68d2      	ldr	r2, [r2, #12]
  4014e4:	60ca      	str	r2, [r1, #12]
  4014e6:	4403      	add	r3, r0
  4014e8:	f043 0001 	orr.w	r0, r3, #1
  4014ec:	6091      	str	r1, [r2, #8]
  4014ee:	6060      	str	r0, [r4, #4]
  4014f0:	50e3      	str	r3, [r4, r3]
  4014f2:	e7a3      	b.n	40143c <_free_r+0x84>
  4014f4:	2a14      	cmp	r2, #20
  4014f6:	d816      	bhi.n	401526 <_free_r+0x16e>
  4014f8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4014fc:	00ff      	lsls	r7, r7, #3
  4014fe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  401502:	e7aa      	b.n	40145a <_free_r+0xa2>
  401504:	10aa      	asrs	r2, r5, #2
  401506:	2301      	movs	r3, #1
  401508:	684d      	ldr	r5, [r1, #4]
  40150a:	4093      	lsls	r3, r2
  40150c:	432b      	orrs	r3, r5
  40150e:	604b      	str	r3, [r1, #4]
  401510:	4603      	mov	r3, r0
  401512:	e7b0      	b.n	401476 <_free_r+0xbe>
  401514:	f043 0201 	orr.w	r2, r3, #1
  401518:	614c      	str	r4, [r1, #20]
  40151a:	610c      	str	r4, [r1, #16]
  40151c:	60e5      	str	r5, [r4, #12]
  40151e:	60a5      	str	r5, [r4, #8]
  401520:	6062      	str	r2, [r4, #4]
  401522:	50e3      	str	r3, [r4, r3]
  401524:	e78a      	b.n	40143c <_free_r+0x84>
  401526:	2a54      	cmp	r2, #84	; 0x54
  401528:	d806      	bhi.n	401538 <_free_r+0x180>
  40152a:	0b1a      	lsrs	r2, r3, #12
  40152c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401530:	00ff      	lsls	r7, r7, #3
  401532:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401536:	e790      	b.n	40145a <_free_r+0xa2>
  401538:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40153c:	d806      	bhi.n	40154c <_free_r+0x194>
  40153e:	0bda      	lsrs	r2, r3, #15
  401540:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401544:	00ff      	lsls	r7, r7, #3
  401546:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40154a:	e786      	b.n	40145a <_free_r+0xa2>
  40154c:	f240 5054 	movw	r0, #1364	; 0x554
  401550:	4282      	cmp	r2, r0
  401552:	d806      	bhi.n	401562 <_free_r+0x1aa>
  401554:	0c9a      	lsrs	r2, r3, #18
  401556:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40155a:	00ff      	lsls	r7, r7, #3
  40155c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401560:	e77b      	b.n	40145a <_free_r+0xa2>
  401562:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  401566:	257e      	movs	r5, #126	; 0x7e
  401568:	e777      	b.n	40145a <_free_r+0xa2>
  40156a:	f043 0101 	orr.w	r1, r3, #1
  40156e:	6061      	str	r1, [r4, #4]
  401570:	6013      	str	r3, [r2, #0]
  401572:	e763      	b.n	40143c <_free_r+0x84>
  401574:	2000043c 	.word	0x2000043c
  401578:	20000444 	.word	0x20000444
  40157c:	20000848 	.word	0x20000848
  401580:	2000089c 	.word	0x2000089c

00401584 <_fwalk_reent>:
  401584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401588:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40158c:	d01f      	beq.n	4015ce <_fwalk_reent+0x4a>
  40158e:	4688      	mov	r8, r1
  401590:	4606      	mov	r6, r0
  401592:	f04f 0900 	mov.w	r9, #0
  401596:	687d      	ldr	r5, [r7, #4]
  401598:	68bc      	ldr	r4, [r7, #8]
  40159a:	3d01      	subs	r5, #1
  40159c:	d411      	bmi.n	4015c2 <_fwalk_reent+0x3e>
  40159e:	89a3      	ldrh	r3, [r4, #12]
  4015a0:	2b01      	cmp	r3, #1
  4015a2:	f105 35ff 	add.w	r5, r5, #4294967295
  4015a6:	d908      	bls.n	4015ba <_fwalk_reent+0x36>
  4015a8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4015ac:	3301      	adds	r3, #1
  4015ae:	4621      	mov	r1, r4
  4015b0:	4630      	mov	r0, r6
  4015b2:	d002      	beq.n	4015ba <_fwalk_reent+0x36>
  4015b4:	47c0      	blx	r8
  4015b6:	ea49 0900 	orr.w	r9, r9, r0
  4015ba:	1c6b      	adds	r3, r5, #1
  4015bc:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4015c0:	d1ed      	bne.n	40159e <_fwalk_reent+0x1a>
  4015c2:	683f      	ldr	r7, [r7, #0]
  4015c4:	2f00      	cmp	r7, #0
  4015c6:	d1e6      	bne.n	401596 <_fwalk_reent+0x12>
  4015c8:	4648      	mov	r0, r9
  4015ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4015ce:	46b9      	mov	r9, r7
  4015d0:	4648      	mov	r0, r9
  4015d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4015d6:	bf00      	nop

004015d8 <__retarget_lock_init_recursive>:
  4015d8:	4770      	bx	lr
  4015da:	bf00      	nop

004015dc <__retarget_lock_close_recursive>:
  4015dc:	4770      	bx	lr
  4015de:	bf00      	nop

004015e0 <__retarget_lock_acquire_recursive>:
  4015e0:	4770      	bx	lr
  4015e2:	bf00      	nop

004015e4 <__retarget_lock_release_recursive>:
  4015e4:	4770      	bx	lr
  4015e6:	bf00      	nop

004015e8 <__swhatbuf_r>:
  4015e8:	b570      	push	{r4, r5, r6, lr}
  4015ea:	460c      	mov	r4, r1
  4015ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4015f0:	2900      	cmp	r1, #0
  4015f2:	b090      	sub	sp, #64	; 0x40
  4015f4:	4615      	mov	r5, r2
  4015f6:	461e      	mov	r6, r3
  4015f8:	db14      	blt.n	401624 <__swhatbuf_r+0x3c>
  4015fa:	aa01      	add	r2, sp, #4
  4015fc:	f000 fc28 	bl	401e50 <_fstat_r>
  401600:	2800      	cmp	r0, #0
  401602:	db0f      	blt.n	401624 <__swhatbuf_r+0x3c>
  401604:	9a02      	ldr	r2, [sp, #8]
  401606:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40160a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40160e:	fab2 f282 	clz	r2, r2
  401612:	0952      	lsrs	r2, r2, #5
  401614:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401618:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40161c:	6032      	str	r2, [r6, #0]
  40161e:	602b      	str	r3, [r5, #0]
  401620:	b010      	add	sp, #64	; 0x40
  401622:	bd70      	pop	{r4, r5, r6, pc}
  401624:	89a2      	ldrh	r2, [r4, #12]
  401626:	2300      	movs	r3, #0
  401628:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40162c:	6033      	str	r3, [r6, #0]
  40162e:	d004      	beq.n	40163a <__swhatbuf_r+0x52>
  401630:	2240      	movs	r2, #64	; 0x40
  401632:	4618      	mov	r0, r3
  401634:	602a      	str	r2, [r5, #0]
  401636:	b010      	add	sp, #64	; 0x40
  401638:	bd70      	pop	{r4, r5, r6, pc}
  40163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40163e:	602b      	str	r3, [r5, #0]
  401640:	b010      	add	sp, #64	; 0x40
  401642:	bd70      	pop	{r4, r5, r6, pc}

00401644 <malloc>:
  401644:	4b02      	ldr	r3, [pc, #8]	; (401650 <malloc+0xc>)
  401646:	4601      	mov	r1, r0
  401648:	6818      	ldr	r0, [r3, #0]
  40164a:	f000 b803 	b.w	401654 <_malloc_r>
  40164e:	bf00      	nop
  401650:	20000008 	.word	0x20000008

00401654 <_malloc_r>:
  401654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401658:	f101 060b 	add.w	r6, r1, #11
  40165c:	2e16      	cmp	r6, #22
  40165e:	b083      	sub	sp, #12
  401660:	4605      	mov	r5, r0
  401662:	f240 809e 	bls.w	4017a2 <_malloc_r+0x14e>
  401666:	f036 0607 	bics.w	r6, r6, #7
  40166a:	f100 80bd 	bmi.w	4017e8 <_malloc_r+0x194>
  40166e:	42b1      	cmp	r1, r6
  401670:	f200 80ba 	bhi.w	4017e8 <_malloc_r+0x194>
  401674:	f000 fa9e 	bl	401bb4 <__malloc_lock>
  401678:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40167c:	f0c0 8293 	bcc.w	401ba6 <_malloc_r+0x552>
  401680:	0a73      	lsrs	r3, r6, #9
  401682:	f000 80b8 	beq.w	4017f6 <_malloc_r+0x1a2>
  401686:	2b04      	cmp	r3, #4
  401688:	f200 8179 	bhi.w	40197e <_malloc_r+0x32a>
  40168c:	09b3      	lsrs	r3, r6, #6
  40168e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401692:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401696:	00c3      	lsls	r3, r0, #3
  401698:	4fbf      	ldr	r7, [pc, #764]	; (401998 <_malloc_r+0x344>)
  40169a:	443b      	add	r3, r7
  40169c:	f1a3 0108 	sub.w	r1, r3, #8
  4016a0:	685c      	ldr	r4, [r3, #4]
  4016a2:	42a1      	cmp	r1, r4
  4016a4:	d106      	bne.n	4016b4 <_malloc_r+0x60>
  4016a6:	e00c      	b.n	4016c2 <_malloc_r+0x6e>
  4016a8:	2a00      	cmp	r2, #0
  4016aa:	f280 80aa 	bge.w	401802 <_malloc_r+0x1ae>
  4016ae:	68e4      	ldr	r4, [r4, #12]
  4016b0:	42a1      	cmp	r1, r4
  4016b2:	d006      	beq.n	4016c2 <_malloc_r+0x6e>
  4016b4:	6863      	ldr	r3, [r4, #4]
  4016b6:	f023 0303 	bic.w	r3, r3, #3
  4016ba:	1b9a      	subs	r2, r3, r6
  4016bc:	2a0f      	cmp	r2, #15
  4016be:	ddf3      	ble.n	4016a8 <_malloc_r+0x54>
  4016c0:	4670      	mov	r0, lr
  4016c2:	693c      	ldr	r4, [r7, #16]
  4016c4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4019ac <_malloc_r+0x358>
  4016c8:	4574      	cmp	r4, lr
  4016ca:	f000 81ab 	beq.w	401a24 <_malloc_r+0x3d0>
  4016ce:	6863      	ldr	r3, [r4, #4]
  4016d0:	f023 0303 	bic.w	r3, r3, #3
  4016d4:	1b9a      	subs	r2, r3, r6
  4016d6:	2a0f      	cmp	r2, #15
  4016d8:	f300 8190 	bgt.w	4019fc <_malloc_r+0x3a8>
  4016dc:	2a00      	cmp	r2, #0
  4016de:	f8c7 e014 	str.w	lr, [r7, #20]
  4016e2:	f8c7 e010 	str.w	lr, [r7, #16]
  4016e6:	f280 809d 	bge.w	401824 <_malloc_r+0x1d0>
  4016ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4016ee:	f080 8161 	bcs.w	4019b4 <_malloc_r+0x360>
  4016f2:	08db      	lsrs	r3, r3, #3
  4016f4:	f103 0c01 	add.w	ip, r3, #1
  4016f8:	1099      	asrs	r1, r3, #2
  4016fa:	687a      	ldr	r2, [r7, #4]
  4016fc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401700:	f8c4 8008 	str.w	r8, [r4, #8]
  401704:	2301      	movs	r3, #1
  401706:	408b      	lsls	r3, r1
  401708:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40170c:	4313      	orrs	r3, r2
  40170e:	3908      	subs	r1, #8
  401710:	60e1      	str	r1, [r4, #12]
  401712:	607b      	str	r3, [r7, #4]
  401714:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401718:	f8c8 400c 	str.w	r4, [r8, #12]
  40171c:	1082      	asrs	r2, r0, #2
  40171e:	2401      	movs	r4, #1
  401720:	4094      	lsls	r4, r2
  401722:	429c      	cmp	r4, r3
  401724:	f200 808b 	bhi.w	40183e <_malloc_r+0x1ea>
  401728:	421c      	tst	r4, r3
  40172a:	d106      	bne.n	40173a <_malloc_r+0xe6>
  40172c:	f020 0003 	bic.w	r0, r0, #3
  401730:	0064      	lsls	r4, r4, #1
  401732:	421c      	tst	r4, r3
  401734:	f100 0004 	add.w	r0, r0, #4
  401738:	d0fa      	beq.n	401730 <_malloc_r+0xdc>
  40173a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40173e:	46cc      	mov	ip, r9
  401740:	4680      	mov	r8, r0
  401742:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401746:	459c      	cmp	ip, r3
  401748:	d107      	bne.n	40175a <_malloc_r+0x106>
  40174a:	e16d      	b.n	401a28 <_malloc_r+0x3d4>
  40174c:	2a00      	cmp	r2, #0
  40174e:	f280 817b 	bge.w	401a48 <_malloc_r+0x3f4>
  401752:	68db      	ldr	r3, [r3, #12]
  401754:	459c      	cmp	ip, r3
  401756:	f000 8167 	beq.w	401a28 <_malloc_r+0x3d4>
  40175a:	6859      	ldr	r1, [r3, #4]
  40175c:	f021 0103 	bic.w	r1, r1, #3
  401760:	1b8a      	subs	r2, r1, r6
  401762:	2a0f      	cmp	r2, #15
  401764:	ddf2      	ble.n	40174c <_malloc_r+0xf8>
  401766:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40176a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40176e:	9300      	str	r3, [sp, #0]
  401770:	199c      	adds	r4, r3, r6
  401772:	4628      	mov	r0, r5
  401774:	f046 0601 	orr.w	r6, r6, #1
  401778:	f042 0501 	orr.w	r5, r2, #1
  40177c:	605e      	str	r6, [r3, #4]
  40177e:	f8c8 c00c 	str.w	ip, [r8, #12]
  401782:	f8cc 8008 	str.w	r8, [ip, #8]
  401786:	617c      	str	r4, [r7, #20]
  401788:	613c      	str	r4, [r7, #16]
  40178a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40178e:	f8c4 e008 	str.w	lr, [r4, #8]
  401792:	6065      	str	r5, [r4, #4]
  401794:	505a      	str	r2, [r3, r1]
  401796:	f000 fa13 	bl	401bc0 <__malloc_unlock>
  40179a:	9b00      	ldr	r3, [sp, #0]
  40179c:	f103 0408 	add.w	r4, r3, #8
  4017a0:	e01e      	b.n	4017e0 <_malloc_r+0x18c>
  4017a2:	2910      	cmp	r1, #16
  4017a4:	d820      	bhi.n	4017e8 <_malloc_r+0x194>
  4017a6:	f000 fa05 	bl	401bb4 <__malloc_lock>
  4017aa:	2610      	movs	r6, #16
  4017ac:	2318      	movs	r3, #24
  4017ae:	2002      	movs	r0, #2
  4017b0:	4f79      	ldr	r7, [pc, #484]	; (401998 <_malloc_r+0x344>)
  4017b2:	443b      	add	r3, r7
  4017b4:	f1a3 0208 	sub.w	r2, r3, #8
  4017b8:	685c      	ldr	r4, [r3, #4]
  4017ba:	4294      	cmp	r4, r2
  4017bc:	f000 813d 	beq.w	401a3a <_malloc_r+0x3e6>
  4017c0:	6863      	ldr	r3, [r4, #4]
  4017c2:	68e1      	ldr	r1, [r4, #12]
  4017c4:	68a6      	ldr	r6, [r4, #8]
  4017c6:	f023 0303 	bic.w	r3, r3, #3
  4017ca:	4423      	add	r3, r4
  4017cc:	4628      	mov	r0, r5
  4017ce:	685a      	ldr	r2, [r3, #4]
  4017d0:	60f1      	str	r1, [r6, #12]
  4017d2:	f042 0201 	orr.w	r2, r2, #1
  4017d6:	608e      	str	r6, [r1, #8]
  4017d8:	605a      	str	r2, [r3, #4]
  4017da:	f000 f9f1 	bl	401bc0 <__malloc_unlock>
  4017de:	3408      	adds	r4, #8
  4017e0:	4620      	mov	r0, r4
  4017e2:	b003      	add	sp, #12
  4017e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017e8:	2400      	movs	r4, #0
  4017ea:	230c      	movs	r3, #12
  4017ec:	4620      	mov	r0, r4
  4017ee:	602b      	str	r3, [r5, #0]
  4017f0:	b003      	add	sp, #12
  4017f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017f6:	2040      	movs	r0, #64	; 0x40
  4017f8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4017fc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401800:	e74a      	b.n	401698 <_malloc_r+0x44>
  401802:	4423      	add	r3, r4
  401804:	68e1      	ldr	r1, [r4, #12]
  401806:	685a      	ldr	r2, [r3, #4]
  401808:	68a6      	ldr	r6, [r4, #8]
  40180a:	f042 0201 	orr.w	r2, r2, #1
  40180e:	60f1      	str	r1, [r6, #12]
  401810:	4628      	mov	r0, r5
  401812:	608e      	str	r6, [r1, #8]
  401814:	605a      	str	r2, [r3, #4]
  401816:	f000 f9d3 	bl	401bc0 <__malloc_unlock>
  40181a:	3408      	adds	r4, #8
  40181c:	4620      	mov	r0, r4
  40181e:	b003      	add	sp, #12
  401820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401824:	4423      	add	r3, r4
  401826:	4628      	mov	r0, r5
  401828:	685a      	ldr	r2, [r3, #4]
  40182a:	f042 0201 	orr.w	r2, r2, #1
  40182e:	605a      	str	r2, [r3, #4]
  401830:	f000 f9c6 	bl	401bc0 <__malloc_unlock>
  401834:	3408      	adds	r4, #8
  401836:	4620      	mov	r0, r4
  401838:	b003      	add	sp, #12
  40183a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40183e:	68bc      	ldr	r4, [r7, #8]
  401840:	6863      	ldr	r3, [r4, #4]
  401842:	f023 0803 	bic.w	r8, r3, #3
  401846:	45b0      	cmp	r8, r6
  401848:	d304      	bcc.n	401854 <_malloc_r+0x200>
  40184a:	eba8 0306 	sub.w	r3, r8, r6
  40184e:	2b0f      	cmp	r3, #15
  401850:	f300 8085 	bgt.w	40195e <_malloc_r+0x30a>
  401854:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4019b0 <_malloc_r+0x35c>
  401858:	4b50      	ldr	r3, [pc, #320]	; (40199c <_malloc_r+0x348>)
  40185a:	f8d9 2000 	ldr.w	r2, [r9]
  40185e:	681b      	ldr	r3, [r3, #0]
  401860:	3201      	adds	r2, #1
  401862:	4433      	add	r3, r6
  401864:	eb04 0a08 	add.w	sl, r4, r8
  401868:	f000 8155 	beq.w	401b16 <_malloc_r+0x4c2>
  40186c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401870:	330f      	adds	r3, #15
  401872:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401876:	f02b 0b0f 	bic.w	fp, fp, #15
  40187a:	4659      	mov	r1, fp
  40187c:	4628      	mov	r0, r5
  40187e:	f000 f9a5 	bl	401bcc <_sbrk_r>
  401882:	1c41      	adds	r1, r0, #1
  401884:	4602      	mov	r2, r0
  401886:	f000 80fc 	beq.w	401a82 <_malloc_r+0x42e>
  40188a:	4582      	cmp	sl, r0
  40188c:	f200 80f7 	bhi.w	401a7e <_malloc_r+0x42a>
  401890:	4b43      	ldr	r3, [pc, #268]	; (4019a0 <_malloc_r+0x34c>)
  401892:	6819      	ldr	r1, [r3, #0]
  401894:	4459      	add	r1, fp
  401896:	6019      	str	r1, [r3, #0]
  401898:	f000 814d 	beq.w	401b36 <_malloc_r+0x4e2>
  40189c:	f8d9 0000 	ldr.w	r0, [r9]
  4018a0:	3001      	adds	r0, #1
  4018a2:	bf1b      	ittet	ne
  4018a4:	eba2 0a0a 	subne.w	sl, r2, sl
  4018a8:	4451      	addne	r1, sl
  4018aa:	f8c9 2000 	streq.w	r2, [r9]
  4018ae:	6019      	strne	r1, [r3, #0]
  4018b0:	f012 0107 	ands.w	r1, r2, #7
  4018b4:	f000 8115 	beq.w	401ae2 <_malloc_r+0x48e>
  4018b8:	f1c1 0008 	rsb	r0, r1, #8
  4018bc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4018c0:	4402      	add	r2, r0
  4018c2:	3108      	adds	r1, #8
  4018c4:	eb02 090b 	add.w	r9, r2, fp
  4018c8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4018cc:	eba1 0909 	sub.w	r9, r1, r9
  4018d0:	4649      	mov	r1, r9
  4018d2:	4628      	mov	r0, r5
  4018d4:	9301      	str	r3, [sp, #4]
  4018d6:	9200      	str	r2, [sp, #0]
  4018d8:	f000 f978 	bl	401bcc <_sbrk_r>
  4018dc:	1c43      	adds	r3, r0, #1
  4018de:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4018e2:	f000 8143 	beq.w	401b6c <_malloc_r+0x518>
  4018e6:	1a80      	subs	r0, r0, r2
  4018e8:	4448      	add	r0, r9
  4018ea:	f040 0001 	orr.w	r0, r0, #1
  4018ee:	6819      	ldr	r1, [r3, #0]
  4018f0:	60ba      	str	r2, [r7, #8]
  4018f2:	4449      	add	r1, r9
  4018f4:	42bc      	cmp	r4, r7
  4018f6:	6050      	str	r0, [r2, #4]
  4018f8:	6019      	str	r1, [r3, #0]
  4018fa:	d017      	beq.n	40192c <_malloc_r+0x2d8>
  4018fc:	f1b8 0f0f 	cmp.w	r8, #15
  401900:	f240 80fb 	bls.w	401afa <_malloc_r+0x4a6>
  401904:	6860      	ldr	r0, [r4, #4]
  401906:	f1a8 020c 	sub.w	r2, r8, #12
  40190a:	f022 0207 	bic.w	r2, r2, #7
  40190e:	eb04 0e02 	add.w	lr, r4, r2
  401912:	f000 0001 	and.w	r0, r0, #1
  401916:	f04f 0c05 	mov.w	ip, #5
  40191a:	4310      	orrs	r0, r2
  40191c:	2a0f      	cmp	r2, #15
  40191e:	6060      	str	r0, [r4, #4]
  401920:	f8ce c004 	str.w	ip, [lr, #4]
  401924:	f8ce c008 	str.w	ip, [lr, #8]
  401928:	f200 8117 	bhi.w	401b5a <_malloc_r+0x506>
  40192c:	4b1d      	ldr	r3, [pc, #116]	; (4019a4 <_malloc_r+0x350>)
  40192e:	68bc      	ldr	r4, [r7, #8]
  401930:	681a      	ldr	r2, [r3, #0]
  401932:	4291      	cmp	r1, r2
  401934:	bf88      	it	hi
  401936:	6019      	strhi	r1, [r3, #0]
  401938:	4b1b      	ldr	r3, [pc, #108]	; (4019a8 <_malloc_r+0x354>)
  40193a:	681a      	ldr	r2, [r3, #0]
  40193c:	4291      	cmp	r1, r2
  40193e:	6862      	ldr	r2, [r4, #4]
  401940:	bf88      	it	hi
  401942:	6019      	strhi	r1, [r3, #0]
  401944:	f022 0203 	bic.w	r2, r2, #3
  401948:	4296      	cmp	r6, r2
  40194a:	eba2 0306 	sub.w	r3, r2, r6
  40194e:	d801      	bhi.n	401954 <_malloc_r+0x300>
  401950:	2b0f      	cmp	r3, #15
  401952:	dc04      	bgt.n	40195e <_malloc_r+0x30a>
  401954:	4628      	mov	r0, r5
  401956:	f000 f933 	bl	401bc0 <__malloc_unlock>
  40195a:	2400      	movs	r4, #0
  40195c:	e740      	b.n	4017e0 <_malloc_r+0x18c>
  40195e:	19a2      	adds	r2, r4, r6
  401960:	f043 0301 	orr.w	r3, r3, #1
  401964:	f046 0601 	orr.w	r6, r6, #1
  401968:	6066      	str	r6, [r4, #4]
  40196a:	4628      	mov	r0, r5
  40196c:	60ba      	str	r2, [r7, #8]
  40196e:	6053      	str	r3, [r2, #4]
  401970:	f000 f926 	bl	401bc0 <__malloc_unlock>
  401974:	3408      	adds	r4, #8
  401976:	4620      	mov	r0, r4
  401978:	b003      	add	sp, #12
  40197a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40197e:	2b14      	cmp	r3, #20
  401980:	d971      	bls.n	401a66 <_malloc_r+0x412>
  401982:	2b54      	cmp	r3, #84	; 0x54
  401984:	f200 80a3 	bhi.w	401ace <_malloc_r+0x47a>
  401988:	0b33      	lsrs	r3, r6, #12
  40198a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40198e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401992:	00c3      	lsls	r3, r0, #3
  401994:	e680      	b.n	401698 <_malloc_r+0x44>
  401996:	bf00      	nop
  401998:	2000043c 	.word	0x2000043c
  40199c:	2000089c 	.word	0x2000089c
  4019a0:	2000086c 	.word	0x2000086c
  4019a4:	20000894 	.word	0x20000894
  4019a8:	20000898 	.word	0x20000898
  4019ac:	20000444 	.word	0x20000444
  4019b0:	20000844 	.word	0x20000844
  4019b4:	0a5a      	lsrs	r2, r3, #9
  4019b6:	2a04      	cmp	r2, #4
  4019b8:	d95b      	bls.n	401a72 <_malloc_r+0x41e>
  4019ba:	2a14      	cmp	r2, #20
  4019bc:	f200 80ae 	bhi.w	401b1c <_malloc_r+0x4c8>
  4019c0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4019c4:	00c9      	lsls	r1, r1, #3
  4019c6:	325b      	adds	r2, #91	; 0x5b
  4019c8:	eb07 0c01 	add.w	ip, r7, r1
  4019cc:	5879      	ldr	r1, [r7, r1]
  4019ce:	f1ac 0c08 	sub.w	ip, ip, #8
  4019d2:	458c      	cmp	ip, r1
  4019d4:	f000 8088 	beq.w	401ae8 <_malloc_r+0x494>
  4019d8:	684a      	ldr	r2, [r1, #4]
  4019da:	f022 0203 	bic.w	r2, r2, #3
  4019de:	4293      	cmp	r3, r2
  4019e0:	d273      	bcs.n	401aca <_malloc_r+0x476>
  4019e2:	6889      	ldr	r1, [r1, #8]
  4019e4:	458c      	cmp	ip, r1
  4019e6:	d1f7      	bne.n	4019d8 <_malloc_r+0x384>
  4019e8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4019ec:	687b      	ldr	r3, [r7, #4]
  4019ee:	60e2      	str	r2, [r4, #12]
  4019f0:	f8c4 c008 	str.w	ip, [r4, #8]
  4019f4:	6094      	str	r4, [r2, #8]
  4019f6:	f8cc 400c 	str.w	r4, [ip, #12]
  4019fa:	e68f      	b.n	40171c <_malloc_r+0xc8>
  4019fc:	19a1      	adds	r1, r4, r6
  4019fe:	f046 0c01 	orr.w	ip, r6, #1
  401a02:	f042 0601 	orr.w	r6, r2, #1
  401a06:	f8c4 c004 	str.w	ip, [r4, #4]
  401a0a:	4628      	mov	r0, r5
  401a0c:	6179      	str	r1, [r7, #20]
  401a0e:	6139      	str	r1, [r7, #16]
  401a10:	f8c1 e00c 	str.w	lr, [r1, #12]
  401a14:	f8c1 e008 	str.w	lr, [r1, #8]
  401a18:	604e      	str	r6, [r1, #4]
  401a1a:	50e2      	str	r2, [r4, r3]
  401a1c:	f000 f8d0 	bl	401bc0 <__malloc_unlock>
  401a20:	3408      	adds	r4, #8
  401a22:	e6dd      	b.n	4017e0 <_malloc_r+0x18c>
  401a24:	687b      	ldr	r3, [r7, #4]
  401a26:	e679      	b.n	40171c <_malloc_r+0xc8>
  401a28:	f108 0801 	add.w	r8, r8, #1
  401a2c:	f018 0f03 	tst.w	r8, #3
  401a30:	f10c 0c08 	add.w	ip, ip, #8
  401a34:	f47f ae85 	bne.w	401742 <_malloc_r+0xee>
  401a38:	e02d      	b.n	401a96 <_malloc_r+0x442>
  401a3a:	68dc      	ldr	r4, [r3, #12]
  401a3c:	42a3      	cmp	r3, r4
  401a3e:	bf08      	it	eq
  401a40:	3002      	addeq	r0, #2
  401a42:	f43f ae3e 	beq.w	4016c2 <_malloc_r+0x6e>
  401a46:	e6bb      	b.n	4017c0 <_malloc_r+0x16c>
  401a48:	4419      	add	r1, r3
  401a4a:	461c      	mov	r4, r3
  401a4c:	684a      	ldr	r2, [r1, #4]
  401a4e:	68db      	ldr	r3, [r3, #12]
  401a50:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401a54:	f042 0201 	orr.w	r2, r2, #1
  401a58:	604a      	str	r2, [r1, #4]
  401a5a:	4628      	mov	r0, r5
  401a5c:	60f3      	str	r3, [r6, #12]
  401a5e:	609e      	str	r6, [r3, #8]
  401a60:	f000 f8ae 	bl	401bc0 <__malloc_unlock>
  401a64:	e6bc      	b.n	4017e0 <_malloc_r+0x18c>
  401a66:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  401a6a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  401a6e:	00c3      	lsls	r3, r0, #3
  401a70:	e612      	b.n	401698 <_malloc_r+0x44>
  401a72:	099a      	lsrs	r2, r3, #6
  401a74:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401a78:	00c9      	lsls	r1, r1, #3
  401a7a:	3238      	adds	r2, #56	; 0x38
  401a7c:	e7a4      	b.n	4019c8 <_malloc_r+0x374>
  401a7e:	42bc      	cmp	r4, r7
  401a80:	d054      	beq.n	401b2c <_malloc_r+0x4d8>
  401a82:	68bc      	ldr	r4, [r7, #8]
  401a84:	6862      	ldr	r2, [r4, #4]
  401a86:	f022 0203 	bic.w	r2, r2, #3
  401a8a:	e75d      	b.n	401948 <_malloc_r+0x2f4>
  401a8c:	f859 3908 	ldr.w	r3, [r9], #-8
  401a90:	4599      	cmp	r9, r3
  401a92:	f040 8086 	bne.w	401ba2 <_malloc_r+0x54e>
  401a96:	f010 0f03 	tst.w	r0, #3
  401a9a:	f100 30ff 	add.w	r0, r0, #4294967295
  401a9e:	d1f5      	bne.n	401a8c <_malloc_r+0x438>
  401aa0:	687b      	ldr	r3, [r7, #4]
  401aa2:	ea23 0304 	bic.w	r3, r3, r4
  401aa6:	607b      	str	r3, [r7, #4]
  401aa8:	0064      	lsls	r4, r4, #1
  401aaa:	429c      	cmp	r4, r3
  401aac:	f63f aec7 	bhi.w	40183e <_malloc_r+0x1ea>
  401ab0:	2c00      	cmp	r4, #0
  401ab2:	f43f aec4 	beq.w	40183e <_malloc_r+0x1ea>
  401ab6:	421c      	tst	r4, r3
  401ab8:	4640      	mov	r0, r8
  401aba:	f47f ae3e 	bne.w	40173a <_malloc_r+0xe6>
  401abe:	0064      	lsls	r4, r4, #1
  401ac0:	421c      	tst	r4, r3
  401ac2:	f100 0004 	add.w	r0, r0, #4
  401ac6:	d0fa      	beq.n	401abe <_malloc_r+0x46a>
  401ac8:	e637      	b.n	40173a <_malloc_r+0xe6>
  401aca:	468c      	mov	ip, r1
  401acc:	e78c      	b.n	4019e8 <_malloc_r+0x394>
  401ace:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401ad2:	d815      	bhi.n	401b00 <_malloc_r+0x4ac>
  401ad4:	0bf3      	lsrs	r3, r6, #15
  401ad6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401ada:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  401ade:	00c3      	lsls	r3, r0, #3
  401ae0:	e5da      	b.n	401698 <_malloc_r+0x44>
  401ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401ae6:	e6ed      	b.n	4018c4 <_malloc_r+0x270>
  401ae8:	687b      	ldr	r3, [r7, #4]
  401aea:	1092      	asrs	r2, r2, #2
  401aec:	2101      	movs	r1, #1
  401aee:	fa01 f202 	lsl.w	r2, r1, r2
  401af2:	4313      	orrs	r3, r2
  401af4:	607b      	str	r3, [r7, #4]
  401af6:	4662      	mov	r2, ip
  401af8:	e779      	b.n	4019ee <_malloc_r+0x39a>
  401afa:	2301      	movs	r3, #1
  401afc:	6053      	str	r3, [r2, #4]
  401afe:	e729      	b.n	401954 <_malloc_r+0x300>
  401b00:	f240 5254 	movw	r2, #1364	; 0x554
  401b04:	4293      	cmp	r3, r2
  401b06:	d822      	bhi.n	401b4e <_malloc_r+0x4fa>
  401b08:	0cb3      	lsrs	r3, r6, #18
  401b0a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  401b0e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  401b12:	00c3      	lsls	r3, r0, #3
  401b14:	e5c0      	b.n	401698 <_malloc_r+0x44>
  401b16:	f103 0b10 	add.w	fp, r3, #16
  401b1a:	e6ae      	b.n	40187a <_malloc_r+0x226>
  401b1c:	2a54      	cmp	r2, #84	; 0x54
  401b1e:	d829      	bhi.n	401b74 <_malloc_r+0x520>
  401b20:	0b1a      	lsrs	r2, r3, #12
  401b22:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401b26:	00c9      	lsls	r1, r1, #3
  401b28:	326e      	adds	r2, #110	; 0x6e
  401b2a:	e74d      	b.n	4019c8 <_malloc_r+0x374>
  401b2c:	4b20      	ldr	r3, [pc, #128]	; (401bb0 <_malloc_r+0x55c>)
  401b2e:	6819      	ldr	r1, [r3, #0]
  401b30:	4459      	add	r1, fp
  401b32:	6019      	str	r1, [r3, #0]
  401b34:	e6b2      	b.n	40189c <_malloc_r+0x248>
  401b36:	f3ca 000b 	ubfx	r0, sl, #0, #12
  401b3a:	2800      	cmp	r0, #0
  401b3c:	f47f aeae 	bne.w	40189c <_malloc_r+0x248>
  401b40:	eb08 030b 	add.w	r3, r8, fp
  401b44:	68ba      	ldr	r2, [r7, #8]
  401b46:	f043 0301 	orr.w	r3, r3, #1
  401b4a:	6053      	str	r3, [r2, #4]
  401b4c:	e6ee      	b.n	40192c <_malloc_r+0x2d8>
  401b4e:	207f      	movs	r0, #127	; 0x7f
  401b50:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  401b54:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  401b58:	e59e      	b.n	401698 <_malloc_r+0x44>
  401b5a:	f104 0108 	add.w	r1, r4, #8
  401b5e:	4628      	mov	r0, r5
  401b60:	9300      	str	r3, [sp, #0]
  401b62:	f7ff fc29 	bl	4013b8 <_free_r>
  401b66:	9b00      	ldr	r3, [sp, #0]
  401b68:	6819      	ldr	r1, [r3, #0]
  401b6a:	e6df      	b.n	40192c <_malloc_r+0x2d8>
  401b6c:	2001      	movs	r0, #1
  401b6e:	f04f 0900 	mov.w	r9, #0
  401b72:	e6bc      	b.n	4018ee <_malloc_r+0x29a>
  401b74:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401b78:	d805      	bhi.n	401b86 <_malloc_r+0x532>
  401b7a:	0bda      	lsrs	r2, r3, #15
  401b7c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  401b80:	00c9      	lsls	r1, r1, #3
  401b82:	3277      	adds	r2, #119	; 0x77
  401b84:	e720      	b.n	4019c8 <_malloc_r+0x374>
  401b86:	f240 5154 	movw	r1, #1364	; 0x554
  401b8a:	428a      	cmp	r2, r1
  401b8c:	d805      	bhi.n	401b9a <_malloc_r+0x546>
  401b8e:	0c9a      	lsrs	r2, r3, #18
  401b90:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  401b94:	00c9      	lsls	r1, r1, #3
  401b96:	327c      	adds	r2, #124	; 0x7c
  401b98:	e716      	b.n	4019c8 <_malloc_r+0x374>
  401b9a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  401b9e:	227e      	movs	r2, #126	; 0x7e
  401ba0:	e712      	b.n	4019c8 <_malloc_r+0x374>
  401ba2:	687b      	ldr	r3, [r7, #4]
  401ba4:	e780      	b.n	401aa8 <_malloc_r+0x454>
  401ba6:	08f0      	lsrs	r0, r6, #3
  401ba8:	f106 0308 	add.w	r3, r6, #8
  401bac:	e600      	b.n	4017b0 <_malloc_r+0x15c>
  401bae:	bf00      	nop
  401bb0:	2000086c 	.word	0x2000086c

00401bb4 <__malloc_lock>:
  401bb4:	4801      	ldr	r0, [pc, #4]	; (401bbc <__malloc_lock+0x8>)
  401bb6:	f7ff bd13 	b.w	4015e0 <__retarget_lock_acquire_recursive>
  401bba:	bf00      	nop
  401bbc:	20000980 	.word	0x20000980

00401bc0 <__malloc_unlock>:
  401bc0:	4801      	ldr	r0, [pc, #4]	; (401bc8 <__malloc_unlock+0x8>)
  401bc2:	f7ff bd0f 	b.w	4015e4 <__retarget_lock_release_recursive>
  401bc6:	bf00      	nop
  401bc8:	20000980 	.word	0x20000980

00401bcc <_sbrk_r>:
  401bcc:	b538      	push	{r3, r4, r5, lr}
  401bce:	4c07      	ldr	r4, [pc, #28]	; (401bec <_sbrk_r+0x20>)
  401bd0:	2300      	movs	r3, #0
  401bd2:	4605      	mov	r5, r0
  401bd4:	4608      	mov	r0, r1
  401bd6:	6023      	str	r3, [r4, #0]
  401bd8:	f7ff f8d8 	bl	400d8c <_sbrk>
  401bdc:	1c43      	adds	r3, r0, #1
  401bde:	d000      	beq.n	401be2 <_sbrk_r+0x16>
  401be0:	bd38      	pop	{r3, r4, r5, pc}
  401be2:	6823      	ldr	r3, [r4, #0]
  401be4:	2b00      	cmp	r3, #0
  401be6:	d0fb      	beq.n	401be0 <_sbrk_r+0x14>
  401be8:	602b      	str	r3, [r5, #0]
  401bea:	bd38      	pop	{r3, r4, r5, pc}
  401bec:	20000994 	.word	0x20000994

00401bf0 <__sread>:
  401bf0:	b510      	push	{r4, lr}
  401bf2:	460c      	mov	r4, r1
  401bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401bf8:	f000 f954 	bl	401ea4 <_read_r>
  401bfc:	2800      	cmp	r0, #0
  401bfe:	db03      	blt.n	401c08 <__sread+0x18>
  401c00:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401c02:	4403      	add	r3, r0
  401c04:	6523      	str	r3, [r4, #80]	; 0x50
  401c06:	bd10      	pop	{r4, pc}
  401c08:	89a3      	ldrh	r3, [r4, #12]
  401c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  401c0e:	81a3      	strh	r3, [r4, #12]
  401c10:	bd10      	pop	{r4, pc}
  401c12:	bf00      	nop

00401c14 <__swrite>:
  401c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c18:	4616      	mov	r6, r2
  401c1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  401c1e:	461f      	mov	r7, r3
  401c20:	05d3      	lsls	r3, r2, #23
  401c22:	460c      	mov	r4, r1
  401c24:	4605      	mov	r5, r0
  401c26:	d507      	bpl.n	401c38 <__swrite+0x24>
  401c28:	2200      	movs	r2, #0
  401c2a:	2302      	movs	r3, #2
  401c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401c30:	f000 f922 	bl	401e78 <_lseek_r>
  401c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401c3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401c40:	81a2      	strh	r2, [r4, #12]
  401c42:	463b      	mov	r3, r7
  401c44:	4632      	mov	r2, r6
  401c46:	4628      	mov	r0, r5
  401c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401c4c:	f000 b814 	b.w	401c78 <_write_r>

00401c50 <__sseek>:
  401c50:	b510      	push	{r4, lr}
  401c52:	460c      	mov	r4, r1
  401c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401c58:	f000 f90e 	bl	401e78 <_lseek_r>
  401c5c:	89a3      	ldrh	r3, [r4, #12]
  401c5e:	1c42      	adds	r2, r0, #1
  401c60:	bf0e      	itee	eq
  401c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  401c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  401c6a:	6520      	strne	r0, [r4, #80]	; 0x50
  401c6c:	81a3      	strh	r3, [r4, #12]
  401c6e:	bd10      	pop	{r4, pc}

00401c70 <__sclose>:
  401c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401c74:	f000 b878 	b.w	401d68 <_close_r>

00401c78 <_write_r>:
  401c78:	b570      	push	{r4, r5, r6, lr}
  401c7a:	460d      	mov	r5, r1
  401c7c:	4c08      	ldr	r4, [pc, #32]	; (401ca0 <_write_r+0x28>)
  401c7e:	4611      	mov	r1, r2
  401c80:	4606      	mov	r6, r0
  401c82:	461a      	mov	r2, r3
  401c84:	4628      	mov	r0, r5
  401c86:	2300      	movs	r3, #0
  401c88:	6023      	str	r3, [r4, #0]
  401c8a:	f7fe fc29 	bl	4004e0 <_write>
  401c8e:	1c43      	adds	r3, r0, #1
  401c90:	d000      	beq.n	401c94 <_write_r+0x1c>
  401c92:	bd70      	pop	{r4, r5, r6, pc}
  401c94:	6823      	ldr	r3, [r4, #0]
  401c96:	2b00      	cmp	r3, #0
  401c98:	d0fb      	beq.n	401c92 <_write_r+0x1a>
  401c9a:	6033      	str	r3, [r6, #0]
  401c9c:	bd70      	pop	{r4, r5, r6, pc}
  401c9e:	bf00      	nop
  401ca0:	20000994 	.word	0x20000994

00401ca4 <__register_exitproc>:
  401ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401ca8:	4d2c      	ldr	r5, [pc, #176]	; (401d5c <__register_exitproc+0xb8>)
  401caa:	4606      	mov	r6, r0
  401cac:	6828      	ldr	r0, [r5, #0]
  401cae:	4698      	mov	r8, r3
  401cb0:	460f      	mov	r7, r1
  401cb2:	4691      	mov	r9, r2
  401cb4:	f7ff fc94 	bl	4015e0 <__retarget_lock_acquire_recursive>
  401cb8:	4b29      	ldr	r3, [pc, #164]	; (401d60 <__register_exitproc+0xbc>)
  401cba:	681c      	ldr	r4, [r3, #0]
  401cbc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401cc0:	2b00      	cmp	r3, #0
  401cc2:	d03e      	beq.n	401d42 <__register_exitproc+0x9e>
  401cc4:	685a      	ldr	r2, [r3, #4]
  401cc6:	2a1f      	cmp	r2, #31
  401cc8:	dc1c      	bgt.n	401d04 <__register_exitproc+0x60>
  401cca:	f102 0e01 	add.w	lr, r2, #1
  401cce:	b176      	cbz	r6, 401cee <__register_exitproc+0x4a>
  401cd0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401cd4:	2401      	movs	r4, #1
  401cd6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401cda:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401cde:	4094      	lsls	r4, r2
  401ce0:	4320      	orrs	r0, r4
  401ce2:	2e02      	cmp	r6, #2
  401ce4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401ce8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401cec:	d023      	beq.n	401d36 <__register_exitproc+0x92>
  401cee:	3202      	adds	r2, #2
  401cf0:	f8c3 e004 	str.w	lr, [r3, #4]
  401cf4:	6828      	ldr	r0, [r5, #0]
  401cf6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401cfa:	f7ff fc73 	bl	4015e4 <__retarget_lock_release_recursive>
  401cfe:	2000      	movs	r0, #0
  401d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d04:	4b17      	ldr	r3, [pc, #92]	; (401d64 <__register_exitproc+0xc0>)
  401d06:	b30b      	cbz	r3, 401d4c <__register_exitproc+0xa8>
  401d08:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401d0c:	f7ff fc9a 	bl	401644 <malloc>
  401d10:	4603      	mov	r3, r0
  401d12:	b1d8      	cbz	r0, 401d4c <__register_exitproc+0xa8>
  401d14:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401d18:	6002      	str	r2, [r0, #0]
  401d1a:	2100      	movs	r1, #0
  401d1c:	6041      	str	r1, [r0, #4]
  401d1e:	460a      	mov	r2, r1
  401d20:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401d24:	f04f 0e01 	mov.w	lr, #1
  401d28:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401d2c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401d30:	2e00      	cmp	r6, #0
  401d32:	d0dc      	beq.n	401cee <__register_exitproc+0x4a>
  401d34:	e7cc      	b.n	401cd0 <__register_exitproc+0x2c>
  401d36:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401d3a:	430c      	orrs	r4, r1
  401d3c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401d40:	e7d5      	b.n	401cee <__register_exitproc+0x4a>
  401d42:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401d46:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401d4a:	e7bb      	b.n	401cc4 <__register_exitproc+0x20>
  401d4c:	6828      	ldr	r0, [r5, #0]
  401d4e:	f7ff fc49 	bl	4015e4 <__retarget_lock_release_recursive>
  401d52:	f04f 30ff 	mov.w	r0, #4294967295
  401d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d5a:	bf00      	nop
  401d5c:	20000438 	.word	0x20000438
  401d60:	00401ed0 	.word	0x00401ed0
  401d64:	00401645 	.word	0x00401645

00401d68 <_close_r>:
  401d68:	b538      	push	{r3, r4, r5, lr}
  401d6a:	4c07      	ldr	r4, [pc, #28]	; (401d88 <_close_r+0x20>)
  401d6c:	2300      	movs	r3, #0
  401d6e:	4605      	mov	r5, r0
  401d70:	4608      	mov	r0, r1
  401d72:	6023      	str	r3, [r4, #0]
  401d74:	f7ff f826 	bl	400dc4 <_close>
  401d78:	1c43      	adds	r3, r0, #1
  401d7a:	d000      	beq.n	401d7e <_close_r+0x16>
  401d7c:	bd38      	pop	{r3, r4, r5, pc}
  401d7e:	6823      	ldr	r3, [r4, #0]
  401d80:	2b00      	cmp	r3, #0
  401d82:	d0fb      	beq.n	401d7c <_close_r+0x14>
  401d84:	602b      	str	r3, [r5, #0]
  401d86:	bd38      	pop	{r3, r4, r5, pc}
  401d88:	20000994 	.word	0x20000994

00401d8c <_fclose_r>:
  401d8c:	b570      	push	{r4, r5, r6, lr}
  401d8e:	b159      	cbz	r1, 401da8 <_fclose_r+0x1c>
  401d90:	4605      	mov	r5, r0
  401d92:	460c      	mov	r4, r1
  401d94:	b110      	cbz	r0, 401d9c <_fclose_r+0x10>
  401d96:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401d98:	2b00      	cmp	r3, #0
  401d9a:	d03c      	beq.n	401e16 <_fclose_r+0x8a>
  401d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401d9e:	07d8      	lsls	r0, r3, #31
  401da0:	d505      	bpl.n	401dae <_fclose_r+0x22>
  401da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401da6:	b92b      	cbnz	r3, 401db4 <_fclose_r+0x28>
  401da8:	2600      	movs	r6, #0
  401daa:	4630      	mov	r0, r6
  401dac:	bd70      	pop	{r4, r5, r6, pc}
  401dae:	89a3      	ldrh	r3, [r4, #12]
  401db0:	0599      	lsls	r1, r3, #22
  401db2:	d53c      	bpl.n	401e2e <_fclose_r+0xa2>
  401db4:	4621      	mov	r1, r4
  401db6:	4628      	mov	r0, r5
  401db8:	f7ff f964 	bl	401084 <__sflush_r>
  401dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401dbe:	4606      	mov	r6, r0
  401dc0:	b133      	cbz	r3, 401dd0 <_fclose_r+0x44>
  401dc2:	69e1      	ldr	r1, [r4, #28]
  401dc4:	4628      	mov	r0, r5
  401dc6:	4798      	blx	r3
  401dc8:	2800      	cmp	r0, #0
  401dca:	bfb8      	it	lt
  401dcc:	f04f 36ff 	movlt.w	r6, #4294967295
  401dd0:	89a3      	ldrh	r3, [r4, #12]
  401dd2:	061a      	lsls	r2, r3, #24
  401dd4:	d422      	bmi.n	401e1c <_fclose_r+0x90>
  401dd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401dd8:	b141      	cbz	r1, 401dec <_fclose_r+0x60>
  401dda:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401dde:	4299      	cmp	r1, r3
  401de0:	d002      	beq.n	401de8 <_fclose_r+0x5c>
  401de2:	4628      	mov	r0, r5
  401de4:	f7ff fae8 	bl	4013b8 <_free_r>
  401de8:	2300      	movs	r3, #0
  401dea:	6323      	str	r3, [r4, #48]	; 0x30
  401dec:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401dee:	b121      	cbz	r1, 401dfa <_fclose_r+0x6e>
  401df0:	4628      	mov	r0, r5
  401df2:	f7ff fae1 	bl	4013b8 <_free_r>
  401df6:	2300      	movs	r3, #0
  401df8:	6463      	str	r3, [r4, #68]	; 0x44
  401dfa:	f7ff fa67 	bl	4012cc <__sfp_lock_acquire>
  401dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401e00:	2200      	movs	r2, #0
  401e02:	07db      	lsls	r3, r3, #31
  401e04:	81a2      	strh	r2, [r4, #12]
  401e06:	d50e      	bpl.n	401e26 <_fclose_r+0x9a>
  401e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e0a:	f7ff fbe7 	bl	4015dc <__retarget_lock_close_recursive>
  401e0e:	f7ff fa63 	bl	4012d8 <__sfp_lock_release>
  401e12:	4630      	mov	r0, r6
  401e14:	bd70      	pop	{r4, r5, r6, pc}
  401e16:	f7ff fa2d 	bl	401274 <__sinit>
  401e1a:	e7bf      	b.n	401d9c <_fclose_r+0x10>
  401e1c:	6921      	ldr	r1, [r4, #16]
  401e1e:	4628      	mov	r0, r5
  401e20:	f7ff faca 	bl	4013b8 <_free_r>
  401e24:	e7d7      	b.n	401dd6 <_fclose_r+0x4a>
  401e26:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e28:	f7ff fbdc 	bl	4015e4 <__retarget_lock_release_recursive>
  401e2c:	e7ec      	b.n	401e08 <_fclose_r+0x7c>
  401e2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e30:	f7ff fbd6 	bl	4015e0 <__retarget_lock_acquire_recursive>
  401e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401e38:	2b00      	cmp	r3, #0
  401e3a:	d1bb      	bne.n	401db4 <_fclose_r+0x28>
  401e3c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401e3e:	f016 0601 	ands.w	r6, r6, #1
  401e42:	d1b1      	bne.n	401da8 <_fclose_r+0x1c>
  401e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401e46:	f7ff fbcd 	bl	4015e4 <__retarget_lock_release_recursive>
  401e4a:	4630      	mov	r0, r6
  401e4c:	bd70      	pop	{r4, r5, r6, pc}
  401e4e:	bf00      	nop

00401e50 <_fstat_r>:
  401e50:	b538      	push	{r3, r4, r5, lr}
  401e52:	460b      	mov	r3, r1
  401e54:	4c07      	ldr	r4, [pc, #28]	; (401e74 <_fstat_r+0x24>)
  401e56:	4605      	mov	r5, r0
  401e58:	4611      	mov	r1, r2
  401e5a:	4618      	mov	r0, r3
  401e5c:	2300      	movs	r3, #0
  401e5e:	6023      	str	r3, [r4, #0]
  401e60:	f7fe ffb3 	bl	400dca <_fstat>
  401e64:	1c43      	adds	r3, r0, #1
  401e66:	d000      	beq.n	401e6a <_fstat_r+0x1a>
  401e68:	bd38      	pop	{r3, r4, r5, pc}
  401e6a:	6823      	ldr	r3, [r4, #0]
  401e6c:	2b00      	cmp	r3, #0
  401e6e:	d0fb      	beq.n	401e68 <_fstat_r+0x18>
  401e70:	602b      	str	r3, [r5, #0]
  401e72:	bd38      	pop	{r3, r4, r5, pc}
  401e74:	20000994 	.word	0x20000994

00401e78 <_lseek_r>:
  401e78:	b570      	push	{r4, r5, r6, lr}
  401e7a:	460d      	mov	r5, r1
  401e7c:	4c08      	ldr	r4, [pc, #32]	; (401ea0 <_lseek_r+0x28>)
  401e7e:	4611      	mov	r1, r2
  401e80:	4606      	mov	r6, r0
  401e82:	461a      	mov	r2, r3
  401e84:	4628      	mov	r0, r5
  401e86:	2300      	movs	r3, #0
  401e88:	6023      	str	r3, [r4, #0]
  401e8a:	f7fe ffa3 	bl	400dd4 <_lseek>
  401e8e:	1c43      	adds	r3, r0, #1
  401e90:	d000      	beq.n	401e94 <_lseek_r+0x1c>
  401e92:	bd70      	pop	{r4, r5, r6, pc}
  401e94:	6823      	ldr	r3, [r4, #0]
  401e96:	2b00      	cmp	r3, #0
  401e98:	d0fb      	beq.n	401e92 <_lseek_r+0x1a>
  401e9a:	6033      	str	r3, [r6, #0]
  401e9c:	bd70      	pop	{r4, r5, r6, pc}
  401e9e:	bf00      	nop
  401ea0:	20000994 	.word	0x20000994

00401ea4 <_read_r>:
  401ea4:	b570      	push	{r4, r5, r6, lr}
  401ea6:	460d      	mov	r5, r1
  401ea8:	4c08      	ldr	r4, [pc, #32]	; (401ecc <_read_r+0x28>)
  401eaa:	4611      	mov	r1, r2
  401eac:	4606      	mov	r6, r0
  401eae:	461a      	mov	r2, r3
  401eb0:	4628      	mov	r0, r5
  401eb2:	2300      	movs	r3, #0
  401eb4:	6023      	str	r3, [r4, #0]
  401eb6:	f7fe faf5 	bl	4004a4 <_read>
  401eba:	1c43      	adds	r3, r0, #1
  401ebc:	d000      	beq.n	401ec0 <_read_r+0x1c>
  401ebe:	bd70      	pop	{r4, r5, r6, pc}
  401ec0:	6823      	ldr	r3, [r4, #0]
  401ec2:	2b00      	cmp	r3, #0
  401ec4:	d0fb      	beq.n	401ebe <_read_r+0x1a>
  401ec6:	6033      	str	r3, [r6, #0]
  401ec8:	bd70      	pop	{r4, r5, r6, pc}
  401eca:	bf00      	nop
  401ecc:	20000994 	.word	0x20000994

00401ed0 <_global_impure_ptr>:
  401ed0:	20000010                                ... 

00401ed4 <_init>:
  401ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401ed6:	bf00      	nop
  401ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401eda:	bc08      	pop	{r3}
  401edc:	469e      	mov	lr, r3
  401ede:	4770      	bx	lr

00401ee0 <__init_array_start>:
  401ee0:	00401065 	.word	0x00401065

00401ee4 <__frame_dummy_init_array_entry>:
  401ee4:	0040011d                                ..@.

00401ee8 <_fini>:
  401ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401eea:	bf00      	nop
  401eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401eee:	bc08      	pop	{r3}
  401ef0:	469e      	mov	lr, r3
  401ef2:	4770      	bx	lr

00401ef4 <__fini_array_start>:
  401ef4:	004000f9 	.word	0x004000f9
