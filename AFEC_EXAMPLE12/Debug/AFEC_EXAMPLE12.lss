
AFEC_EXAMPLE12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020b8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000854  20000000  004020b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0001886c  20000854  0040290c  00020854  2**2
                  ALLOC
  3 .stack        00003000  200190c0  0041b178  00020854  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020882  2**0
                  CONTENTS, READONLY
  6 .debug_info   00017233  00000000  00000000  000208db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032e4  00000000  00000000  00037b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004a11  00000000  00000000  0003adf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a48  00000000  00000000  0003f803  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009a0  00000000  00000000  0004024b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000191b4  00000000  00000000  00040beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c544  00000000  00000000  00059d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000658fc  00000000  00000000  000662e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001cec  00000000  00000000  000cbbe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 c0 01 20 05 0d 40 00 01 0d 40 00 01 0d 40 00     ... ..@...@...@.
  400010:	01 0d 40 00 01 0d 40 00 01 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	01 0d 40 00 01 0d 40 00 00 00 00 00 01 0d 40 00     ..@...@.......@.
  40003c:	01 0d 40 00 01 0d 40 00 01 0d 40 00 01 0d 40 00     ..@...@...@...@.
  40004c:	01 0d 40 00 01 0d 40 00 01 0d 40 00 01 0d 40 00     ..@...@...@...@.
  40005c:	01 0d 40 00 01 0d 40 00 31 0a 40 00 45 0a 40 00     ..@...@.1.@.E.@.
  40006c:	59 0a 40 00 6d 0a 40 00 81 0a 40 00 01 0d 40 00     Y.@.m.@...@...@.
  40007c:	01 0d 40 00 01 0d 40 00 01 0d 40 00 01 0d 40 00     ..@...@...@...@.
  40008c:	01 0d 40 00 01 0d 40 00 6d 02 40 00 01 0d 40 00     ..@...@.m.@...@.
  40009c:	01 0d 40 00 01 0d 40 00 01 0d 40 00 01 0d 40 00     ..@...@...@...@.
  4000ac:	01 0d 40 00 01 0d 40 00 01 0d 40 00 35 09 40 00     ..@...@...@.5.@.
  4000bc:	49 09 40 00 01 0d 40 00 01 0d 40 00 01 0d 40 00     I.@...@...@...@.
  4000cc:	01 0d 40 00 01 0d 40 00 01 0d 40 00 01 0d 40 00     ..@...@...@...@.
  4000dc:	01 0d 40 00 01 0d 40 00 01 0d 40 00 01 0d 40 00     ..@...@...@...@.
  4000ec:	01 0d 40 00 01 0d 40 00 01 0d 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000854 	.word	0x20000854
  400114:	00000000 	.word	0x00000000
  400118:	004020b8 	.word	0x004020b8

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004020b8 	.word	0x004020b8
  400158:	20000858 	.word	0x20000858
  40015c:	004020b8 	.word	0x004020b8
  400160:	00000000 	.word	0x00000000

00400164 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400164:	b5f0      	push	{r4, r5, r6, r7, lr}
  400166:	b083      	sub	sp, #12
  400168:	4605      	mov	r5, r0
  40016a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40016c:	2300      	movs	r3, #0
  40016e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400170:	4b18      	ldr	r3, [pc, #96]	; (4001d4 <usart_serial_getchar+0x70>)
  400172:	4298      	cmp	r0, r3
  400174:	d00a      	beq.n	40018c <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400176:	4b18      	ldr	r3, [pc, #96]	; (4001d8 <usart_serial_getchar+0x74>)
  400178:	4298      	cmp	r0, r3
  40017a:	d00f      	beq.n	40019c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40017c:	4b17      	ldr	r3, [pc, #92]	; (4001dc <usart_serial_getchar+0x78>)
  40017e:	4298      	cmp	r0, r3
  400180:	d014      	beq.n	4001ac <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400182:	4b17      	ldr	r3, [pc, #92]	; (4001e0 <usart_serial_getchar+0x7c>)
  400184:	429d      	cmp	r5, r3
  400186:	d01b      	beq.n	4001c0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400188:	b003      	add	sp, #12
  40018a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40018c:	461f      	mov	r7, r3
  40018e:	4e15      	ldr	r6, [pc, #84]	; (4001e4 <usart_serial_getchar+0x80>)
  400190:	4621      	mov	r1, r4
  400192:	4638      	mov	r0, r7
  400194:	47b0      	blx	r6
  400196:	2800      	cmp	r0, #0
  400198:	d1fa      	bne.n	400190 <usart_serial_getchar+0x2c>
  40019a:	e7f2      	b.n	400182 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40019c:	461e      	mov	r6, r3
  40019e:	4d11      	ldr	r5, [pc, #68]	; (4001e4 <usart_serial_getchar+0x80>)
  4001a0:	4621      	mov	r1, r4
  4001a2:	4630      	mov	r0, r6
  4001a4:	47a8      	blx	r5
  4001a6:	2800      	cmp	r0, #0
  4001a8:	d1fa      	bne.n	4001a0 <usart_serial_getchar+0x3c>
  4001aa:	e7ed      	b.n	400188 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4001ac:	461e      	mov	r6, r3
  4001ae:	4d0e      	ldr	r5, [pc, #56]	; (4001e8 <usart_serial_getchar+0x84>)
  4001b0:	a901      	add	r1, sp, #4
  4001b2:	4630      	mov	r0, r6
  4001b4:	47a8      	blx	r5
  4001b6:	2800      	cmp	r0, #0
  4001b8:	d1fa      	bne.n	4001b0 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  4001ba:	9b01      	ldr	r3, [sp, #4]
  4001bc:	7023      	strb	r3, [r4, #0]
  4001be:	e7e3      	b.n	400188 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  4001c0:	461e      	mov	r6, r3
  4001c2:	4d09      	ldr	r5, [pc, #36]	; (4001e8 <usart_serial_getchar+0x84>)
  4001c4:	a901      	add	r1, sp, #4
  4001c6:	4630      	mov	r0, r6
  4001c8:	47a8      	blx	r5
  4001ca:	2800      	cmp	r0, #0
  4001cc:	d1fa      	bne.n	4001c4 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  4001ce:	9b01      	ldr	r3, [sp, #4]
  4001d0:	7023      	strb	r3, [r4, #0]
}
  4001d2:	e7d9      	b.n	400188 <usart_serial_getchar+0x24>
  4001d4:	400e0600 	.word	0x400e0600
  4001d8:	40060600 	.word	0x40060600
  4001dc:	400a0000 	.word	0x400a0000
  4001e0:	400a4000 	.word	0x400a4000
  4001e4:	00400cc3 	.word	0x00400cc3
  4001e8:	00400ce9 	.word	0x00400ce9

004001ec <usart_serial_putchar>:
{
  4001ec:	b570      	push	{r4, r5, r6, lr}
  4001ee:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4001f0:	4b18      	ldr	r3, [pc, #96]	; (400254 <usart_serial_putchar+0x68>)
  4001f2:	4298      	cmp	r0, r3
  4001f4:	d00a      	beq.n	40020c <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  4001f6:	4b18      	ldr	r3, [pc, #96]	; (400258 <usart_serial_putchar+0x6c>)
  4001f8:	4298      	cmp	r0, r3
  4001fa:	d010      	beq.n	40021e <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  4001fc:	4b17      	ldr	r3, [pc, #92]	; (40025c <usart_serial_putchar+0x70>)
  4001fe:	4298      	cmp	r0, r3
  400200:	d016      	beq.n	400230 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400202:	4b17      	ldr	r3, [pc, #92]	; (400260 <usart_serial_putchar+0x74>)
  400204:	4298      	cmp	r0, r3
  400206:	d01c      	beq.n	400242 <usart_serial_putchar+0x56>
	return 0;
  400208:	2000      	movs	r0, #0
}
  40020a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40020c:	461e      	mov	r6, r3
  40020e:	4d15      	ldr	r5, [pc, #84]	; (400264 <usart_serial_putchar+0x78>)
  400210:	4621      	mov	r1, r4
  400212:	4630      	mov	r0, r6
  400214:	47a8      	blx	r5
  400216:	2800      	cmp	r0, #0
  400218:	d1fa      	bne.n	400210 <usart_serial_putchar+0x24>
		return 1;
  40021a:	2001      	movs	r0, #1
  40021c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40021e:	461e      	mov	r6, r3
  400220:	4d10      	ldr	r5, [pc, #64]	; (400264 <usart_serial_putchar+0x78>)
  400222:	4621      	mov	r1, r4
  400224:	4630      	mov	r0, r6
  400226:	47a8      	blx	r5
  400228:	2800      	cmp	r0, #0
  40022a:	d1fa      	bne.n	400222 <usart_serial_putchar+0x36>
		return 1;
  40022c:	2001      	movs	r0, #1
  40022e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400230:	461e      	mov	r6, r3
  400232:	4d0d      	ldr	r5, [pc, #52]	; (400268 <usart_serial_putchar+0x7c>)
  400234:	4621      	mov	r1, r4
  400236:	4630      	mov	r0, r6
  400238:	47a8      	blx	r5
  40023a:	2800      	cmp	r0, #0
  40023c:	d1fa      	bne.n	400234 <usart_serial_putchar+0x48>
		return 1;
  40023e:	2001      	movs	r0, #1
  400240:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  400242:	461e      	mov	r6, r3
  400244:	4d08      	ldr	r5, [pc, #32]	; (400268 <usart_serial_putchar+0x7c>)
  400246:	4621      	mov	r1, r4
  400248:	4630      	mov	r0, r6
  40024a:	47a8      	blx	r5
  40024c:	2800      	cmp	r0, #0
  40024e:	d1fa      	bne.n	400246 <usart_serial_putchar+0x5a>
		return 1;
  400250:	2001      	movs	r0, #1
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	400e0600 	.word	0x400e0600
  400258:	40060600 	.word	0x40060600
  40025c:	400a0000 	.word	0x400a0000
  400260:	400a4000 	.word	0x400a4000
  400264:	00400cb3 	.word	0x00400cb3
  400268:	00400cd5 	.word	0x00400cd5

0040026c <TC0_Handler>:
		buffer_full = true;
	}
}

void TC0_Handler(void)
{
  40026c:	b510      	push	{r4, lr}
  40026e:	b082      	sub	sp, #8
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);
  400270:	2100      	movs	r1, #0
  400272:	4814      	ldr	r0, [pc, #80]	; (4002c4 <TC0_Handler+0x58>)
  400274:	4b14      	ldr	r3, [pc, #80]	; (4002c8 <TC0_Handler+0x5c>)
  400276:	4798      	blx	r3
  400278:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  40027a:	9b01      	ldr	r3, [sp, #4]
	if (i < data_size) {
  40027c:	4b13      	ldr	r3, [pc, #76]	; (4002cc <TC0_Handler+0x60>)
  40027e:	681a      	ldr	r2, [r3, #0]
  400280:	f246 13a7 	movw	r3, #24999	; 0x61a7
  400284:	429a      	cmp	r2, r3
  400286:	d904      	bls.n	400292 <TC0_Handler+0x26>
		buffer_full = true;
  400288:	2201      	movs	r2, #1
  40028a:	4b11      	ldr	r3, [pc, #68]	; (4002d0 <TC0_Handler+0x64>)
  40028c:	701a      	strb	r2, [r3, #0]
	
	/** Measure voltage. */
	get_data();
}
  40028e:	b002      	add	sp, #8
  400290:	bd10      	pop	{r4, pc}
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  400292:	4a10      	ldr	r2, [pc, #64]	; (4002d4 <TC0_Handler+0x68>)
  400294:	2302      	movs	r3, #2
  400296:	6013      	str	r3, [r2, #0]
		data[0][i] = afec_channel_get_value(AFEC0, channel_1);
  400298:	490c      	ldr	r1, [pc, #48]	; (4002cc <TC0_Handler+0x60>)
  40029a:	680b      	ldr	r3, [r1, #0]
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  40029c:	2005      	movs	r0, #5
  40029e:	6650      	str	r0, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  4002a0:	6e94      	ldr	r4, [r2, #104]	; 0x68
  4002a2:	480d      	ldr	r0, [pc, #52]	; (4002d8 <TC0_Handler+0x6c>)
  4002a4:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
		data[1][i] = afec_channel_get_value(AFEC0, channel_2);
  4002a8:	680b      	ldr	r3, [r1, #0]
	afec->AFEC_CSELR = afec_ch;
  4002aa:	2403      	movs	r4, #3
  4002ac:	6654      	str	r4, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  4002ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4002b0:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
  4002b4:	3328      	adds	r3, #40	; 0x28
  4002b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		i++;
  4002ba:	680b      	ldr	r3, [r1, #0]
  4002bc:	3301      	adds	r3, #1
  4002be:	600b      	str	r3, [r1, #0]
  4002c0:	e7e5      	b.n	40028e <TC0_Handler+0x22>
  4002c2:	bf00      	nop
  4002c4:	40090000 	.word	0x40090000
  4002c8:	00400c03 	.word	0x00400c03
  4002cc:	20000874 	.word	0x20000874
  4002d0:	20000871 	.word	0x20000871
  4002d4:	400b0000 	.word	0x400b0000
  4002d8:	20000928 	.word	0x20000928

004002dc <main>:
	delay_us(20);
	REG_PIOC_CODR |= PIO_PER_P17;
}

int main(void)
{
  4002dc:	b580      	push	{r7, lr}
  4002de:	b08e      	sub	sp, #56	; 0x38
	/* Initialize the SAM system. */
	sysclk_init();
  4002e0:	4b6c      	ldr	r3, [pc, #432]	; (400494 <main+0x1b8>)
  4002e2:	4798      	blx	r3
	board_init();
  4002e4:	4b6c      	ldr	r3, [pc, #432]	; (400498 <main+0x1bc>)
  4002e6:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002e8:	2009      	movs	r0, #9
  4002ea:	4e6c      	ldr	r6, [pc, #432]	; (40049c <main+0x1c0>)
  4002ec:	47b0      	blx	r6
  4002ee:	200a      	movs	r0, #10
  4002f0:	47b0      	blx	r6
  4002f2:	200b      	movs	r0, #11
  4002f4:	47b0      	blx	r6
  4002f6:	200c      	movs	r0, #12
  4002f8:	47b0      	blx	r6
  4002fa:	200d      	movs	r0, #13
  4002fc:	47b0      	blx	r6
  4002fe:	2007      	movs	r0, #7
  400300:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400302:	4c67      	ldr	r4, [pc, #412]	; (4004a0 <main+0x1c4>)
  400304:	4b67      	ldr	r3, [pc, #412]	; (4004a4 <main+0x1c8>)
  400306:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400308:	4a67      	ldr	r2, [pc, #412]	; (4004a8 <main+0x1cc>)
  40030a:	4b68      	ldr	r3, [pc, #416]	; (4004ac <main+0x1d0>)
  40030c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40030e:	4a68      	ldr	r2, [pc, #416]	; (4004b0 <main+0x1d4>)
  400310:	4b68      	ldr	r3, [pc, #416]	; (4004b4 <main+0x1d8>)
  400312:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400314:	4d68      	ldr	r5, [pc, #416]	; (4004b8 <main+0x1dc>)
  400316:	9504      	str	r5, [sp, #16]
	uart_settings.ul_baudrate = opt->baudrate;
  400318:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40031c:	9305      	str	r3, [sp, #20]
	uart_settings.ul_mode = opt->paritytype;
  40031e:	f44f 6700 	mov.w	r7, #2048	; 0x800
  400322:	9706      	str	r7, [sp, #24]
  400324:	2007      	movs	r0, #7
  400326:	47b0      	blx	r6
		uart_init((Uart*)p_usart, &uart_settings);
  400328:	a904      	add	r1, sp, #16
  40032a:	4620      	mov	r0, r4
  40032c:	4b63      	ldr	r3, [pc, #396]	; (4004bc <main+0x1e0>)
  40032e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400330:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 400520 <main+0x244>
  400334:	f8d8 3000 	ldr.w	r3, [r8]
  400338:	2100      	movs	r1, #0
  40033a:	6898      	ldr	r0, [r3, #8]
  40033c:	4c60      	ldr	r4, [pc, #384]	; (4004c0 <main+0x1e4>)
  40033e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400340:	f8d8 3000 	ldr.w	r3, [r8]
  400344:	2100      	movs	r1, #0
  400346:	6858      	ldr	r0, [r3, #4]
  400348:	47a0      	blx	r4
	ioport_init();

	configure_console();

	afec_enable(AFEC0);
  40034a:	4c5e      	ldr	r4, [pc, #376]	; (4004c4 <main+0x1e8>)
  40034c:	4620      	mov	r0, r4
  40034e:	4b5e      	ldr	r3, [pc, #376]	; (4004c8 <main+0x1ec>)
  400350:	4798      	blx	r3

	struct afec_config afec_cfg;

	afec_get_config_defaults(&afec_cfg);
  400352:	a807      	add	r0, sp, #28
  400354:	4b5d      	ldr	r3, [pc, #372]	; (4004cc <main+0x1f0>)
  400356:	4798      	blx	r3

	afec_init(AFEC0, &afec_cfg);
  400358:	a907      	add	r1, sp, #28
  40035a:	4620      	mov	r0, r4
  40035c:	4b5c      	ldr	r3, [pc, #368]	; (4004d0 <main+0x1f4>)
  40035e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
  400360:	2015      	movs	r0, #21
  400362:	47b0      	blx	r6
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400364:	9500      	str	r5, [sp, #0]
  400366:	ab04      	add	r3, sp, #16
  400368:	aa03      	add	r2, sp, #12
  40036a:	4629      	mov	r1, r5
  40036c:	4859      	ldr	r0, [pc, #356]	; (4004d4 <main+0x1f8>)
  40036e:	4e5a      	ldr	r6, [pc, #360]	; (4004d8 <main+0x1fc>)
  400370:	47b0      	blx	r6
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400372:	4e5a      	ldr	r6, [pc, #360]	; (4004dc <main+0x200>)
  400374:	9a04      	ldr	r2, [sp, #16]
  400376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40037a:	2100      	movs	r1, #0
  40037c:	4630      	mov	r0, r6
  40037e:	4b58      	ldr	r3, [pc, #352]	; (4004e0 <main+0x204>)
  400380:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / freq);
  400382:	9a03      	ldr	r2, [sp, #12]
  400384:	fbb5 f2f2 	udiv	r2, r5, r2
  400388:	0952      	lsrs	r2, r2, #5
  40038a:	4b56      	ldr	r3, [pc, #344]	; (4004e4 <main+0x208>)
  40038c:	fba3 3202 	umull	r3, r2, r3, r2
  400390:	09d2      	lsrs	r2, r2, #7
  400392:	2100      	movs	r1, #0
  400394:	4630      	mov	r0, r6
  400396:	4b54      	ldr	r3, [pc, #336]	; (4004e8 <main+0x20c>)
  400398:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40039a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40039e:	4b53      	ldr	r3, [pc, #332]	; (4004ec <main+0x210>)
  4003a0:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  4003a2:	2210      	movs	r2, #16
  4003a4:	2100      	movs	r1, #0
  4003a6:	4630      	mov	r0, r6
  4003a8:	4b51      	ldr	r3, [pc, #324]	; (4004f0 <main+0x214>)
  4003aa:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4003ac:	2320      	movs	r3, #32
  4003ae:	6163      	str	r3, [r4, #20]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4003b0:	a804      	add	r0, sp, #16
  4003b2:	4e50      	ldr	r6, [pc, #320]	; (4004f4 <main+0x218>)
  4003b4:	47b0      	blx	r6
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  4003b6:	aa04      	add	r2, sp, #16
  4003b8:	2105      	movs	r1, #5
  4003ba:	4620      	mov	r0, r4
  4003bc:	4d4e      	ldr	r5, [pc, #312]	; (4004f8 <main+0x21c>)
  4003be:	47a8      	blx	r5
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4003c0:	2305      	movs	r3, #5
  4003c2:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4003c4:	66e7      	str	r7, [r4, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4003c6:	2308      	movs	r3, #8
  4003c8:	6163      	str	r3, [r4, #20]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4003ca:	a804      	add	r0, sp, #16
  4003cc:	47b0      	blx	r6
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  4003ce:	aa04      	add	r2, sp, #16
  4003d0:	2103      	movs	r1, #3
  4003d2:	4620      	mov	r0, r4
  4003d4:	47a8      	blx	r5
	afec->AFEC_CSELR = afec_ch;
  4003d6:	2303      	movs	r3, #3
  4003d8:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4003da:	66e7      	str	r7, [r4, #108]	; 0x6c
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003dc:	4a47      	ldr	r2, [pc, #284]	; (4004fc <main+0x220>)
  4003de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  4003e2:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003e4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003e8:	6313      	str	r3, [r2, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003ea:	4b45      	ldr	r3, [pc, #276]	; (400500 <main+0x224>)
  4003ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4003f0:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003f2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4003fa:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003fc:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400400:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400404:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400406:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40040a:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(resp_pin, IOPORT_DIR_OUTPUT);
	
	/* Response pin will be on high level when sampling is done */
	ioport_set_pin_level(resp_pin, false);

	state = SL_READY;
  40040c:	2200      	movs	r2, #0
  40040e:	4b3d      	ldr	r3, [pc, #244]	; (400504 <main+0x228>)
  400410:	701a      	strb	r2, [r3, #0]

	while (1) {
		switch (state){
  400412:	461d      	mov	r5, r3
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400414:	f504 3444 	add.w	r4, r4, #200704	; 0x31000
  400418:	f504 7400 	add.w	r4, r4, #512	; 0x200
			case SL_READY:
				GO_status = ioport_get_pin_level(GO_pin);
  40041c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 400524 <main+0x248>
	REG_PIOC_OER |= PIO_PER_P17;
  400420:	f8df 8104 	ldr.w	r8, [pc, #260]	; 400528 <main+0x24c>
	REG_PIOC_SODR |= PIO_PER_P17;
  400424:	4f38      	ldr	r7, [pc, #224]	; (400508 <main+0x22c>)
	REG_PIOC_CODR |= PIO_PER_P17;
  400426:	4e39      	ldr	r6, [pc, #228]	; (40050c <main+0x230>)
  400428:	e008      	b.n	40043c <main+0x160>
  40042a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40042c:	0fdb      	lsrs	r3, r3, #31
				GO_status = ioport_get_pin_level(GO_pin);
  40042e:	f889 3000 	strb.w	r3, [r9]
				if (GO_status)
  400432:	f899 3000 	ldrb.w	r3, [r9]
  400436:	b10b      	cbz	r3, 40043c <main+0x160>
					state = SL_SAMPLING;
  400438:	2301      	movs	r3, #1
  40043a:	702b      	strb	r3, [r5, #0]
		switch (state){
  40043c:	782b      	ldrb	r3, [r5, #0]
  40043e:	2b00      	cmp	r3, #0
  400440:	d0f3      	beq.n	40042a <main+0x14e>
  400442:	2b01      	cmp	r3, #1
  400444:	d1fb      	bne.n	40043e <main+0x162>
				break;
			case SL_SAMPLING:
				tc_start(TC0, 0);
  400446:	2100      	movs	r1, #0
  400448:	4824      	ldr	r0, [pc, #144]	; (4004dc <main+0x200>)
  40044a:	4b31      	ldr	r3, [pc, #196]	; (400510 <main+0x234>)
  40044c:	4798      	blx	r3
	REG_PIOC_PER |= PIO_PER_P17;
  40044e:	6823      	ldr	r3, [r4, #0]
  400450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400454:	6023      	str	r3, [r4, #0]
	REG_PIOC_OER |= PIO_PER_P17;
  400456:	f8d8 3000 	ldr.w	r3, [r8]
  40045a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40045e:	f8c8 3000 	str.w	r3, [r8]
	REG_PIOC_SODR |= PIO_PER_P17;
  400462:	683b      	ldr	r3, [r7, #0]
  400464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400468:	603b      	str	r3, [r7, #0]
	delay_us(20);
  40046a:	20ac      	movs	r0, #172	; 0xac
  40046c:	4b29      	ldr	r3, [pc, #164]	; (400514 <main+0x238>)
  40046e:	4798      	blx	r3
	REG_PIOC_CODR |= PIO_PER_P17;
  400470:	6833      	ldr	r3, [r6, #0]
  400472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400476:	6033      	str	r3, [r6, #0]
				mk_sound();
				if (buffer_full) {
  400478:	4b27      	ldr	r3, [pc, #156]	; (400518 <main+0x23c>)
  40047a:	781b      	ldrb	r3, [r3, #0]
  40047c:	2b00      	cmp	r3, #0
  40047e:	d0dd      	beq.n	40043c <main+0x160>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400484:	6323      	str	r3, [r4, #48]	; 0x30
					ioport_set_pin_level(resp_pin, true);
					state = SL_WRITING;
  400486:	2302      	movs	r3, #2
  400488:	702b      	strb	r3, [r5, #0]
					data[0][0] = 0;
  40048a:	2200      	movs	r2, #0
  40048c:	4b23      	ldr	r3, [pc, #140]	; (40051c <main+0x240>)
  40048e:	801a      	strh	r2, [r3, #0]
  400490:	e7d4      	b.n	40043c <main+0x160>
  400492:	bf00      	nop
  400494:	0040052d 	.word	0x0040052d
  400498:	0040061d 	.word	0x0040061d
  40049c:	00400b7d 	.word	0x00400b7d
  4004a0:	400e0600 	.word	0x400e0600
  4004a4:	20018fd8 	.word	0x20018fd8
  4004a8:	004001ed 	.word	0x004001ed
  4004ac:	20018fd4 	.word	0x20018fd4
  4004b0:	00400165 	.word	0x00400165
  4004b4:	20018fd0 	.word	0x20018fd0
  4004b8:	07270e00 	.word	0x07270e00
  4004bc:	00400c7b 	.word	0x00400c7b
  4004c0:	00401085 	.word	0x00401085
  4004c4:	400b0000 	.word	0x400b0000
  4004c8:	0040095d 	.word	0x0040095d
  4004cc:	00400825 	.word	0x00400825
  4004d0:	00400861 	.word	0x00400861
  4004d4:	000186a0 	.word	0x000186a0
  4004d8:	00400c0b 	.word	0x00400c0b
  4004dc:	40090000 	.word	0x40090000
  4004e0:	00400bd1 	.word	0x00400bd1
  4004e4:	0a7c5ac5 	.word	0x0a7c5ac5
  4004e8:	00400bf3 	.word	0x00400bf3
  4004ec:	e000e100 	.word	0xe000e100
  4004f0:	00400bfb 	.word	0x00400bfb
  4004f4:	00400855 	.word	0x00400855
  4004f8:	004007f5 	.word	0x004007f5
  4004fc:	400e1400 	.word	0x400e1400
  400500:	400e1200 	.word	0x400e1200
  400504:	20000878 	.word	0x20000878
  400508:	400e1230 	.word	0x400e1230
  40050c:	400e1234 	.word	0x400e1234
  400510:	00400beb 	.word	0x00400beb
  400514:	20000001 	.word	0x20000001
  400518:	20000871 	.word	0x20000871
  40051c:	20000928 	.word	0x20000928
  400520:	20000010 	.word	0x20000010
  400524:	20000870 	.word	0x20000870
  400528:	400e1210 	.word	0x400e1210

0040052c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40052c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40052e:	480e      	ldr	r0, [pc, #56]	; (400568 <sysclk_init+0x3c>)
  400530:	4b0e      	ldr	r3, [pc, #56]	; (40056c <sysclk_init+0x40>)
  400532:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400534:	213e      	movs	r1, #62	; 0x3e
  400536:	2000      	movs	r0, #0
  400538:	4b0d      	ldr	r3, [pc, #52]	; (400570 <sysclk_init+0x44>)
  40053a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40053c:	4c0d      	ldr	r4, [pc, #52]	; (400574 <sysclk_init+0x48>)
  40053e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400540:	2800      	cmp	r0, #0
  400542:	d0fc      	beq.n	40053e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400544:	4b0c      	ldr	r3, [pc, #48]	; (400578 <sysclk_init+0x4c>)
  400546:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400548:	4a0c      	ldr	r2, [pc, #48]	; (40057c <sysclk_init+0x50>)
  40054a:	4b0d      	ldr	r3, [pc, #52]	; (400580 <sysclk_init+0x54>)
  40054c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  40054e:	4c0d      	ldr	r4, [pc, #52]	; (400584 <sysclk_init+0x58>)
  400550:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400552:	2800      	cmp	r0, #0
  400554:	d0fc      	beq.n	400550 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400556:	2010      	movs	r0, #16
  400558:	4b0b      	ldr	r3, [pc, #44]	; (400588 <sysclk_init+0x5c>)
  40055a:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40055c:	4b0b      	ldr	r3, [pc, #44]	; (40058c <sysclk_init+0x60>)
  40055e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400560:	4801      	ldr	r0, [pc, #4]	; (400568 <sysclk_init+0x3c>)
  400562:	4b02      	ldr	r3, [pc, #8]	; (40056c <sysclk_init+0x40>)
  400564:	4798      	blx	r3
  400566:	bd10      	pop	{r4, pc}
  400568:	07270e00 	.word	0x07270e00
  40056c:	00400ed9 	.word	0x00400ed9
  400570:	00400af9 	.word	0x00400af9
  400574:	00400b4d 	.word	0x00400b4d
  400578:	00400b5d 	.word	0x00400b5d
  40057c:	20133f01 	.word	0x20133f01
  400580:	400e0400 	.word	0x400e0400
  400584:	00400b6d 	.word	0x00400b6d
  400588:	00400a95 	.word	0x00400a95
  40058c:	00400dcd 	.word	0x00400dcd

00400590 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400594:	b980      	cbnz	r0, 4005b8 <_read+0x28>
  400596:	460c      	mov	r4, r1
  400598:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40059a:	2a00      	cmp	r2, #0
  40059c:	dd0f      	ble.n	4005be <_read+0x2e>
  40059e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4005a0:	4e08      	ldr	r6, [pc, #32]	; (4005c4 <_read+0x34>)
  4005a2:	4d09      	ldr	r5, [pc, #36]	; (4005c8 <_read+0x38>)
  4005a4:	6830      	ldr	r0, [r6, #0]
  4005a6:	4621      	mov	r1, r4
  4005a8:	682b      	ldr	r3, [r5, #0]
  4005aa:	4798      	blx	r3
		ptr++;
  4005ac:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4005ae:	42bc      	cmp	r4, r7
  4005b0:	d1f8      	bne.n	4005a4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4005b2:	4640      	mov	r0, r8
  4005b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4005b8:	f04f 38ff 	mov.w	r8, #4294967295
  4005bc:	e7f9      	b.n	4005b2 <_read+0x22>
	for (; len > 0; --len) {
  4005be:	4680      	mov	r8, r0
  4005c0:	e7f7      	b.n	4005b2 <_read+0x22>
  4005c2:	bf00      	nop
  4005c4:	20018fd8 	.word	0x20018fd8
  4005c8:	20018fd0 	.word	0x20018fd0

004005cc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4005cc:	3801      	subs	r0, #1
  4005ce:	2802      	cmp	r0, #2
  4005d0:	d815      	bhi.n	4005fe <_write+0x32>
{
  4005d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005d6:	460e      	mov	r6, r1
  4005d8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4005da:	b19a      	cbz	r2, 400604 <_write+0x38>
  4005dc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4005de:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400618 <_write+0x4c>
  4005e2:	4f0c      	ldr	r7, [pc, #48]	; (400614 <_write+0x48>)
  4005e4:	f8d8 0000 	ldr.w	r0, [r8]
  4005e8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4005ec:	683b      	ldr	r3, [r7, #0]
  4005ee:	4798      	blx	r3
  4005f0:	2800      	cmp	r0, #0
  4005f2:	db0a      	blt.n	40060a <_write+0x3e>
  4005f4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4005f6:	3c01      	subs	r4, #1
  4005f8:	d1f4      	bne.n	4005e4 <_write+0x18>
  4005fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4005fe:	f04f 30ff 	mov.w	r0, #4294967295
  400602:	4770      	bx	lr
	for (; len != 0; --len) {
  400604:	4610      	mov	r0, r2
  400606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40060a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40060e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400612:	bf00      	nop
  400614:	20018fd4 	.word	0x20018fd4
  400618:	20018fd8 	.word	0x20018fd8

0040061c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  40061c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40061e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400622:	4b49      	ldr	r3, [pc, #292]	; (400748 <board_init+0x12c>)
  400624:	605a      	str	r2, [r3, #4]
  400626:	2009      	movs	r0, #9
  400628:	4c48      	ldr	r4, [pc, #288]	; (40074c <board_init+0x130>)
  40062a:	47a0      	blx	r4
  40062c:	200a      	movs	r0, #10
  40062e:	47a0      	blx	r4
  400630:	200b      	movs	r0, #11
  400632:	47a0      	blx	r4
  400634:	200c      	movs	r0, #12
  400636:	47a0      	blx	r4
  400638:	200d      	movs	r0, #13
  40063a:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40063c:	4b44      	ldr	r3, [pc, #272]	; (400750 <board_init+0x134>)
  40063e:	2201      	movs	r2, #1
  400640:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400642:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400646:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400648:	4942      	ldr	r1, [pc, #264]	; (400754 <board_init+0x138>)
  40064a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40064e:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400650:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400654:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400656:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40065a:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40065c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400660:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400662:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400666:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400668:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40066c:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40066e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400672:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400674:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  400676:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40067a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  40067c:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400680:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400682:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400684:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400688:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40068a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40068e:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400692:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400696:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400698:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40069c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40069e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006a2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4006a4:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4006a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4006aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006ac:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4006b0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006b2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006b4:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  4006b8:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4006ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4006be:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  4006c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4006c6:	2202      	movs	r2, #2
  4006c8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4006ce:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4006d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006d4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4006d6:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4006d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4006dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4006de:	f021 0102 	bic.w	r1, r1, #2
  4006e2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006e4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4006e6:	f021 0102 	bic.w	r1, r1, #2
  4006ea:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  4006ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4006f0:	2204      	movs	r2, #4
  4006f2:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4006f8:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4006fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006fe:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400700:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400706:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400708:	f021 0104 	bic.w	r1, r1, #4
  40070c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40070e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400710:	f021 0104 	bic.w	r1, r1, #4
  400714:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  400716:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40071a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  40071e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400722:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  400726:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40072c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40072e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400734:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400736:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40073a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40073c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40073e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400742:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400744:	605a      	str	r2, [r3, #4]
  400746:	bd10      	pop	{r4, pc}
  400748:	400e1850 	.word	0x400e1850
  40074c:	00400b7d 	.word	0x00400b7d
  400750:	400e0e00 	.word	0x400e0e00
  400754:	400e1400 	.word	0x400e1400

00400758 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  400758:	b570      	push	{r4, r5, r6, lr}
  40075a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40075c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40075e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  400760:	4013      	ands	r3, r2
  400762:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400764:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  400766:	4d21      	ldr	r5, [pc, #132]	; (4007ec <afec_process_callback+0x94>)
  400768:	42a8      	cmp	r0, r5
  40076a:	bf14      	ite	ne
  40076c:	2500      	movne	r5, #0
  40076e:	2501      	moveq	r5, #1
  400770:	006e      	lsls	r6, r5, #1
  400772:	442e      	add	r6, r5
  400774:	e00b      	b.n	40078e <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  400776:	2c14      	cmp	r4, #20
  400778:	d824      	bhi.n	4007c4 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40077a:	9a01      	ldr	r2, [sp, #4]
  40077c:	f104 0108 	add.w	r1, r4, #8
  400780:	2301      	movs	r3, #1
  400782:	408b      	lsls	r3, r1
  400784:	4213      	tst	r3, r2
  400786:	d113      	bne.n	4007b0 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400788:	3401      	adds	r4, #1
  40078a:	2c17      	cmp	r4, #23
  40078c:	d02b      	beq.n	4007e6 <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40078e:	2c0f      	cmp	r4, #15
  400790:	d8f1      	bhi.n	400776 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  400792:	9a01      	ldr	r2, [sp, #4]
  400794:	2301      	movs	r3, #1
  400796:	40a3      	lsls	r3, r4
  400798:	4213      	tst	r3, r2
  40079a:	d0f5      	beq.n	400788 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40079c:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4007a0:	4423      	add	r3, r4
  4007a2:	4a13      	ldr	r2, [pc, #76]	; (4007f0 <afec_process_callback+0x98>)
  4007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4007a8:	2b00      	cmp	r3, #0
  4007aa:	d0ed      	beq.n	400788 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4007ac:	4798      	blx	r3
  4007ae:	e7eb      	b.n	400788 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4007b0:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4007b4:	4423      	add	r3, r4
  4007b6:	4a0e      	ldr	r2, [pc, #56]	; (4007f0 <afec_process_callback+0x98>)
  4007b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4007bc:	2b00      	cmp	r3, #0
  4007be:	d0e3      	beq.n	400788 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4007c0:	4798      	blx	r3
  4007c2:	e7e1      	b.n	400788 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4007c4:	9a01      	ldr	r2, [sp, #4]
  4007c6:	f104 0109 	add.w	r1, r4, #9
  4007ca:	2301      	movs	r3, #1
  4007cc:	408b      	lsls	r3, r1
  4007ce:	4213      	tst	r3, r2
  4007d0:	d0da      	beq.n	400788 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4007d2:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  4007d6:	4423      	add	r3, r4
  4007d8:	4a05      	ldr	r2, [pc, #20]	; (4007f0 <afec_process_callback+0x98>)
  4007da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4007de:	2b00      	cmp	r3, #0
  4007e0:	d0d2      	beq.n	400788 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4007e2:	4798      	blx	r3
  4007e4:	e7d0      	b.n	400788 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4007e6:	b002      	add	sp, #8
  4007e8:	bd70      	pop	{r4, r5, r6, pc}
  4007ea:	bf00      	nop
  4007ec:	400b4000 	.word	0x400b4000
  4007f0:	20018fdc 	.word	0x20018fdc

004007f4 <afec_ch_set_config>:
{
  4007f4:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4007f6:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4007f8:	2301      	movs	r3, #1
  4007fa:	408b      	lsls	r3, r1
  4007fc:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400800:	7815      	ldrb	r5, [r2, #0]
  400802:	2d00      	cmp	r5, #0
  400804:	bf08      	it	eq
  400806:	2300      	moveq	r3, #0
  400808:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40080a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40080c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40080e:	004b      	lsls	r3, r1, #1
  400810:	2103      	movs	r1, #3
  400812:	4099      	lsls	r1, r3
  400814:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400818:	7851      	ldrb	r1, [r2, #1]
  40081a:	4099      	lsls	r1, r3
  40081c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40081e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400820:	bc30      	pop	{r4, r5}
  400822:	4770      	bx	lr

00400824 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400824:	2200      	movs	r2, #0
  400826:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400828:	4b08      	ldr	r3, [pc, #32]	; (40084c <afec_get_config_defaults+0x28>)
  40082a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40082c:	4b08      	ldr	r3, [pc, #32]	; (400850 <afec_get_config_defaults+0x2c>)
  40082e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400830:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400834:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400836:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400838:	2302      	movs	r3, #2
  40083a:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  40083c:	2301      	movs	r3, #1
  40083e:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400840:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400842:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400844:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400846:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400848:	7683      	strb	r3, [r0, #26]
  40084a:	4770      	bx	lr
  40084c:	07270e00 	.word	0x07270e00
  400850:	005b8d80 	.word	0x005b8d80

00400854 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400854:	2300      	movs	r3, #0
  400856:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400858:	2301      	movs	r3, #1
  40085a:	7043      	strb	r3, [r0, #1]
  40085c:	4770      	bx	lr
	...

00400860 <afec_init>:
	return afec->AFEC_ISR;
  400860:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400862:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400866:	d001      	beq.n	40086c <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400868:	2019      	movs	r0, #25
  40086a:	4770      	bx	lr
{
  40086c:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  40086e:	2301      	movs	r3, #1
  400870:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400872:	7dcb      	ldrb	r3, [r1, #23]
  400874:	2b00      	cmp	r3, #0
  400876:	bf14      	ite	ne
  400878:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  40087c:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  40087e:	7d8b      	ldrb	r3, [r1, #22]
  400880:	2b00      	cmp	r3, #0
  400882:	bf14      	ite	ne
  400884:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  400888:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  40088a:	7d0b      	ldrb	r3, [r1, #20]
  40088c:	061b      	lsls	r3, r3, #24
  40088e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400892:	690a      	ldr	r2, [r1, #16]
  400894:	68ce      	ldr	r6, [r1, #12]
  400896:	4332      	orrs	r2, r6
  400898:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  40089a:	7d4a      	ldrb	r2, [r1, #21]
  40089c:	0712      	lsls	r2, r2, #28
  40089e:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4008a2:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  4008a4:	688a      	ldr	r2, [r1, #8]
  4008a6:	0056      	lsls	r6, r2, #1
  4008a8:	684a      	ldr	r2, [r1, #4]
  4008aa:	fbb2 f2f6 	udiv	r2, r2, r6
  4008ae:	3a01      	subs	r2, #1
  4008b0:	0212      	lsls	r2, r2, #8
  4008b2:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4008b4:	4313      	orrs	r3, r2
  4008b6:	432b      	orrs	r3, r5
  4008b8:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  4008ba:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4008bc:	7e0b      	ldrb	r3, [r1, #24]
  4008be:	2b00      	cmp	r3, #0
  4008c0:	bf14      	ite	ne
  4008c2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  4008c6:	2300      	moveq	r3, #0
  4008c8:	680a      	ldr	r2, [r1, #0]
  4008ca:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  4008cc:	7e4a      	ldrb	r2, [r1, #25]
  4008ce:	2a00      	cmp	r2, #0
  4008d0:	bf14      	ite	ne
  4008d2:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  4008d6:	2200      	moveq	r2, #0
			(config->resolution) |
  4008d8:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4008da:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  4008dc:	7e8b      	ldrb	r3, [r1, #26]
  4008de:	021b      	lsls	r3, r3, #8
  4008e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4008e4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  4008e8:	4b0e      	ldr	r3, [pc, #56]	; (400924 <afec_init+0xc4>)
  4008ea:	4298      	cmp	r0, r3
  4008ec:	d005      	beq.n	4008fa <afec_init+0x9a>
	if(afec == AFEC1) {
  4008ee:	4b0e      	ldr	r3, [pc, #56]	; (400928 <afec_init+0xc8>)
  4008f0:	4298      	cmp	r0, r3
  4008f2:	d00c      	beq.n	40090e <afec_init+0xae>
	return STATUS_OK;
  4008f4:	2000      	movs	r0, #0
}
  4008f6:	bc70      	pop	{r4, r5, r6}
  4008f8:	4770      	bx	lr
  4008fa:	4b0c      	ldr	r3, [pc, #48]	; (40092c <afec_init+0xcc>)
  4008fc:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400900:	2200      	movs	r2, #0
  400902:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400906:	428b      	cmp	r3, r1
  400908:	d1fb      	bne.n	400902 <afec_init+0xa2>
	return STATUS_OK;
  40090a:	2000      	movs	r0, #0
  40090c:	e7f3      	b.n	4008f6 <afec_init+0x96>
  40090e:	4b08      	ldr	r3, [pc, #32]	; (400930 <afec_init+0xd0>)
  400910:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400914:	2200      	movs	r2, #0
  400916:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40091a:	428b      	cmp	r3, r1
  40091c:	d1fb      	bne.n	400916 <afec_init+0xb6>
	return STATUS_OK;
  40091e:	2000      	movs	r0, #0
  400920:	e7e9      	b.n	4008f6 <afec_init+0x96>
  400922:	bf00      	nop
  400924:	400b0000 	.word	0x400b0000
  400928:	400b4000 	.word	0x400b4000
  40092c:	20018fd8 	.word	0x20018fd8
  400930:	20019034 	.word	0x20019034

00400934 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400934:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400936:	4802      	ldr	r0, [pc, #8]	; (400940 <AFEC0_Handler+0xc>)
  400938:	4b02      	ldr	r3, [pc, #8]	; (400944 <AFEC0_Handler+0x10>)
  40093a:	4798      	blx	r3
  40093c:	bd08      	pop	{r3, pc}
  40093e:	bf00      	nop
  400940:	400b0000 	.word	0x400b0000
  400944:	00400759 	.word	0x00400759

00400948 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400948:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40094a:	4802      	ldr	r0, [pc, #8]	; (400954 <AFEC1_Handler+0xc>)
  40094c:	4b02      	ldr	r3, [pc, #8]	; (400958 <AFEC1_Handler+0x10>)
  40094e:	4798      	blx	r3
  400950:	bd08      	pop	{r3, pc}
  400952:	bf00      	nop
  400954:	400b4000 	.word	0x400b4000
  400958:	00400759 	.word	0x00400759

0040095c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40095c:	b500      	push	{lr}
  40095e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400960:	4b13      	ldr	r3, [pc, #76]	; (4009b0 <afec_enable+0x54>)
  400962:	4298      	cmp	r0, r3
  400964:	bf0c      	ite	eq
  400966:	201f      	moveq	r0, #31
  400968:	201e      	movne	r0, #30
  40096a:	4b12      	ldr	r3, [pc, #72]	; (4009b4 <afec_enable+0x58>)
  40096c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40096e:	4b12      	ldr	r3, [pc, #72]	; (4009b8 <afec_enable+0x5c>)
  400970:	789b      	ldrb	r3, [r3, #2]
  400972:	2bff      	cmp	r3, #255	; 0xff
  400974:	d01a      	beq.n	4009ac <afec_enable+0x50>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400976:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40097a:	fab3 f383 	clz	r3, r3
  40097e:	095b      	lsrs	r3, r3, #5
  400980:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400982:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400984:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400988:	2200      	movs	r2, #0
  40098a:	4b0c      	ldr	r3, [pc, #48]	; (4009bc <afec_enable+0x60>)
  40098c:	701a      	strb	r2, [r3, #0]
	return flags;
  40098e:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400990:	4a09      	ldr	r2, [pc, #36]	; (4009b8 <afec_enable+0x5c>)
  400992:	7893      	ldrb	r3, [r2, #2]
  400994:	3301      	adds	r3, #1
  400996:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400998:	b129      	cbz	r1, 4009a6 <afec_enable+0x4a>
		cpu_irq_enable();
  40099a:	2201      	movs	r2, #1
  40099c:	4b07      	ldr	r3, [pc, #28]	; (4009bc <afec_enable+0x60>)
  40099e:	701a      	strb	r2, [r3, #0]
  4009a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009a4:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4009a6:	b003      	add	sp, #12
  4009a8:	f85d fb04 	ldr.w	pc, [sp], #4
  4009ac:	e7fe      	b.n	4009ac <afec_enable+0x50>
  4009ae:	bf00      	nop
  4009b0:	400b4000 	.word	0x400b4000
  4009b4:	00400b7d 	.word	0x00400b7d
  4009b8:	20018fc8 	.word	0x20018fc8
  4009bc:	2000000a 	.word	0x2000000a

004009c0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4009c0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4009c2:	4770      	bx	lr

004009c4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4009c4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4009c6:	4770      	bx	lr

004009c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4009c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4009cc:	4681      	mov	r9, r0
  4009ce:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4009d0:	4b12      	ldr	r3, [pc, #72]	; (400a1c <pio_handler_process+0x54>)
  4009d2:	4798      	blx	r3
  4009d4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4009d6:	4648      	mov	r0, r9
  4009d8:	4b11      	ldr	r3, [pc, #68]	; (400a20 <pio_handler_process+0x58>)
  4009da:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4009dc:	4005      	ands	r5, r0
  4009de:	d013      	beq.n	400a08 <pio_handler_process+0x40>
  4009e0:	4c10      	ldr	r4, [pc, #64]	; (400a24 <pio_handler_process+0x5c>)
  4009e2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4009e6:	e003      	b.n	4009f0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4009e8:	42b4      	cmp	r4, r6
  4009ea:	d00d      	beq.n	400a08 <pio_handler_process+0x40>
  4009ec:	3410      	adds	r4, #16
		while (status != 0) {
  4009ee:	b15d      	cbz	r5, 400a08 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4009f0:	6820      	ldr	r0, [r4, #0]
  4009f2:	42b8      	cmp	r0, r7
  4009f4:	d1f8      	bne.n	4009e8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4009f6:	6861      	ldr	r1, [r4, #4]
  4009f8:	4229      	tst	r1, r5
  4009fa:	d0f5      	beq.n	4009e8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4009fc:	68e3      	ldr	r3, [r4, #12]
  4009fe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400a00:	6863      	ldr	r3, [r4, #4]
  400a02:	ea25 0503 	bic.w	r5, r5, r3
  400a06:	e7ef      	b.n	4009e8 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400a08:	4b07      	ldr	r3, [pc, #28]	; (400a28 <pio_handler_process+0x60>)
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	b123      	cbz	r3, 400a18 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400a0e:	4b07      	ldr	r3, [pc, #28]	; (400a2c <pio_handler_process+0x64>)
  400a10:	681b      	ldr	r3, [r3, #0]
  400a12:	b10b      	cbz	r3, 400a18 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400a14:	4648      	mov	r0, r9
  400a16:	4798      	blx	r3
  400a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a1c:	004009c1 	.word	0x004009c1
  400a20:	004009c5 	.word	0x004009c5
  400a24:	2000087c 	.word	0x2000087c
  400a28:	20019094 	.word	0x20019094
  400a2c:	200008ec 	.word	0x200008ec

00400a30 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400a30:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400a32:	2109      	movs	r1, #9
  400a34:	4801      	ldr	r0, [pc, #4]	; (400a3c <PIOA_Handler+0xc>)
  400a36:	4b02      	ldr	r3, [pc, #8]	; (400a40 <PIOA_Handler+0x10>)
  400a38:	4798      	blx	r3
  400a3a:	bd08      	pop	{r3, pc}
  400a3c:	400e0e00 	.word	0x400e0e00
  400a40:	004009c9 	.word	0x004009c9

00400a44 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400a44:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400a46:	210a      	movs	r1, #10
  400a48:	4801      	ldr	r0, [pc, #4]	; (400a50 <PIOB_Handler+0xc>)
  400a4a:	4b02      	ldr	r3, [pc, #8]	; (400a54 <PIOB_Handler+0x10>)
  400a4c:	4798      	blx	r3
  400a4e:	bd08      	pop	{r3, pc}
  400a50:	400e1000 	.word	0x400e1000
  400a54:	004009c9 	.word	0x004009c9

00400a58 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400a58:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400a5a:	210b      	movs	r1, #11
  400a5c:	4801      	ldr	r0, [pc, #4]	; (400a64 <PIOC_Handler+0xc>)
  400a5e:	4b02      	ldr	r3, [pc, #8]	; (400a68 <PIOC_Handler+0x10>)
  400a60:	4798      	blx	r3
  400a62:	bd08      	pop	{r3, pc}
  400a64:	400e1200 	.word	0x400e1200
  400a68:	004009c9 	.word	0x004009c9

00400a6c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400a6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400a6e:	210c      	movs	r1, #12
  400a70:	4801      	ldr	r0, [pc, #4]	; (400a78 <PIOD_Handler+0xc>)
  400a72:	4b02      	ldr	r3, [pc, #8]	; (400a7c <PIOD_Handler+0x10>)
  400a74:	4798      	blx	r3
  400a76:	bd08      	pop	{r3, pc}
  400a78:	400e1400 	.word	0x400e1400
  400a7c:	004009c9 	.word	0x004009c9

00400a80 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400a80:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400a82:	210d      	movs	r1, #13
  400a84:	4801      	ldr	r0, [pc, #4]	; (400a8c <PIOE_Handler+0xc>)
  400a86:	4b02      	ldr	r3, [pc, #8]	; (400a90 <PIOE_Handler+0x10>)
  400a88:	4798      	blx	r3
  400a8a:	bd08      	pop	{r3, pc}
  400a8c:	400e1600 	.word	0x400e1600
  400a90:	004009c9 	.word	0x004009c9

00400a94 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400a94:	4a17      	ldr	r2, [pc, #92]	; (400af4 <pmc_switch_mck_to_pllack+0x60>)
  400a96:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400a9c:	4318      	orrs	r0, r3
  400a9e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400aa0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400aa2:	f013 0f08 	tst.w	r3, #8
  400aa6:	d10a      	bne.n	400abe <pmc_switch_mck_to_pllack+0x2a>
  400aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400aac:	4911      	ldr	r1, [pc, #68]	; (400af4 <pmc_switch_mck_to_pllack+0x60>)
  400aae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ab0:	f012 0f08 	tst.w	r2, #8
  400ab4:	d103      	bne.n	400abe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ab6:	3b01      	subs	r3, #1
  400ab8:	d1f9      	bne.n	400aae <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400aba:	2001      	movs	r0, #1
  400abc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400abe:	4a0d      	ldr	r2, [pc, #52]	; (400af4 <pmc_switch_mck_to_pllack+0x60>)
  400ac0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ac2:	f023 0303 	bic.w	r3, r3, #3
  400ac6:	f043 0302 	orr.w	r3, r3, #2
  400aca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400acc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ace:	f013 0f08 	tst.w	r3, #8
  400ad2:	d10a      	bne.n	400aea <pmc_switch_mck_to_pllack+0x56>
  400ad4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400ad8:	4906      	ldr	r1, [pc, #24]	; (400af4 <pmc_switch_mck_to_pllack+0x60>)
  400ada:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400adc:	f012 0f08 	tst.w	r2, #8
  400ae0:	d105      	bne.n	400aee <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ae2:	3b01      	subs	r3, #1
  400ae4:	d1f9      	bne.n	400ada <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400ae6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400ae8:	4770      	bx	lr
	return 0;
  400aea:	2000      	movs	r0, #0
  400aec:	4770      	bx	lr
  400aee:	2000      	movs	r0, #0
  400af0:	4770      	bx	lr
  400af2:	bf00      	nop
  400af4:	400e0400 	.word	0x400e0400

00400af8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400af8:	b9c8      	cbnz	r0, 400b2e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400afa:	4a11      	ldr	r2, [pc, #68]	; (400b40 <pmc_switch_mainck_to_xtal+0x48>)
  400afc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400afe:	0209      	lsls	r1, r1, #8
  400b00:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400b02:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400b06:	f023 0303 	bic.w	r3, r3, #3
  400b0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400b0e:	f043 0301 	orr.w	r3, r3, #1
  400b12:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400b14:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400b16:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400b18:	f013 0f01 	tst.w	r3, #1
  400b1c:	d0fb      	beq.n	400b16 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400b1e:	4a08      	ldr	r2, [pc, #32]	; (400b40 <pmc_switch_mainck_to_xtal+0x48>)
  400b20:	6a13      	ldr	r3, [r2, #32]
  400b22:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400b2a:	6213      	str	r3, [r2, #32]
  400b2c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b2e:	4904      	ldr	r1, [pc, #16]	; (400b40 <pmc_switch_mainck_to_xtal+0x48>)
  400b30:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400b32:	4a04      	ldr	r2, [pc, #16]	; (400b44 <pmc_switch_mainck_to_xtal+0x4c>)
  400b34:	401a      	ands	r2, r3
  400b36:	4b04      	ldr	r3, [pc, #16]	; (400b48 <pmc_switch_mainck_to_xtal+0x50>)
  400b38:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400b3a:	620b      	str	r3, [r1, #32]
  400b3c:	4770      	bx	lr
  400b3e:	bf00      	nop
  400b40:	400e0400 	.word	0x400e0400
  400b44:	fec8fffc 	.word	0xfec8fffc
  400b48:	01370002 	.word	0x01370002

00400b4c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400b4c:	4b02      	ldr	r3, [pc, #8]	; (400b58 <pmc_osc_is_ready_mainck+0xc>)
  400b4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b50:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400b54:	4770      	bx	lr
  400b56:	bf00      	nop
  400b58:	400e0400 	.word	0x400e0400

00400b5c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400b5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400b60:	4b01      	ldr	r3, [pc, #4]	; (400b68 <pmc_disable_pllack+0xc>)
  400b62:	629a      	str	r2, [r3, #40]	; 0x28
  400b64:	4770      	bx	lr
  400b66:	bf00      	nop
  400b68:	400e0400 	.word	0x400e0400

00400b6c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400b6c:	4b02      	ldr	r3, [pc, #8]	; (400b78 <pmc_is_locked_pllack+0xc>)
  400b6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400b70:	f000 0002 	and.w	r0, r0, #2
  400b74:	4770      	bx	lr
  400b76:	bf00      	nop
  400b78:	400e0400 	.word	0x400e0400

00400b7c <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400b7c:	282f      	cmp	r0, #47	; 0x2f
  400b7e:	d81e      	bhi.n	400bbe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400b80:	281f      	cmp	r0, #31
  400b82:	d80c      	bhi.n	400b9e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400b84:	4b11      	ldr	r3, [pc, #68]	; (400bcc <pmc_enable_periph_clk+0x50>)
  400b86:	699a      	ldr	r2, [r3, #24]
  400b88:	2301      	movs	r3, #1
  400b8a:	4083      	lsls	r3, r0
  400b8c:	4393      	bics	r3, r2
  400b8e:	d018      	beq.n	400bc2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400b90:	2301      	movs	r3, #1
  400b92:	fa03 f000 	lsl.w	r0, r3, r0
  400b96:	4b0d      	ldr	r3, [pc, #52]	; (400bcc <pmc_enable_periph_clk+0x50>)
  400b98:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400b9a:	2000      	movs	r0, #0
  400b9c:	4770      	bx	lr
		ul_id -= 32;
  400b9e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400ba0:	4b0a      	ldr	r3, [pc, #40]	; (400bcc <pmc_enable_periph_clk+0x50>)
  400ba2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400ba6:	2301      	movs	r3, #1
  400ba8:	4083      	lsls	r3, r0
  400baa:	4393      	bics	r3, r2
  400bac:	d00b      	beq.n	400bc6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400bae:	2301      	movs	r3, #1
  400bb0:	fa03 f000 	lsl.w	r0, r3, r0
  400bb4:	4b05      	ldr	r3, [pc, #20]	; (400bcc <pmc_enable_periph_clk+0x50>)
  400bb6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400bba:	2000      	movs	r0, #0
  400bbc:	4770      	bx	lr
		return 1;
  400bbe:	2001      	movs	r0, #1
  400bc0:	4770      	bx	lr
	return 0;
  400bc2:	2000      	movs	r0, #0
  400bc4:	4770      	bx	lr
  400bc6:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400bc8:	4770      	bx	lr
  400bca:	bf00      	nop
  400bcc:	400e0400 	.word	0x400e0400

00400bd0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400bd0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bd2:	0189      	lsls	r1, r1, #6
  400bd4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400bd6:	2402      	movs	r4, #2
  400bd8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400bda:	f04f 31ff 	mov.w	r1, #4294967295
  400bde:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400be0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400be2:	605a      	str	r2, [r3, #4]
}
  400be4:	f85d 4b04 	ldr.w	r4, [sp], #4
  400be8:	4770      	bx	lr

00400bea <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400bea:	0189      	lsls	r1, r1, #6
  400bec:	2305      	movs	r3, #5
  400bee:	5043      	str	r3, [r0, r1]
  400bf0:	4770      	bx	lr

00400bf2 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400bf2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400bf6:	61ca      	str	r2, [r1, #28]
  400bf8:	4770      	bx	lr

00400bfa <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400bfa:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400bfe:	624a      	str	r2, [r1, #36]	; 0x24
  400c00:	4770      	bx	lr

00400c02 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400c02:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400c06:	6a08      	ldr	r0, [r1, #32]
}
  400c08:	4770      	bx	lr

00400c0a <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400c0a:	b4f0      	push	{r4, r5, r6, r7}
  400c0c:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c0e:	2402      	movs	r4, #2
  400c10:	9401      	str	r4, [sp, #4]
  400c12:	2408      	movs	r4, #8
  400c14:	9402      	str	r4, [sp, #8]
  400c16:	2420      	movs	r4, #32
  400c18:	9403      	str	r4, [sp, #12]
  400c1a:	2480      	movs	r4, #128	; 0x80
  400c1c:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400c1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400c20:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400c22:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400c24:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400c28:	d814      	bhi.n	400c54 <tc_find_mck_divisor+0x4a>
  400c2a:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400c2c:	42a0      	cmp	r0, r4
  400c2e:	d217      	bcs.n	400c60 <tc_find_mck_divisor+0x56>
  400c30:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400c32:	af01      	add	r7, sp, #4
  400c34:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400c38:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400c3c:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400c3e:	4284      	cmp	r4, r0
  400c40:	d30a      	bcc.n	400c58 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400c42:	4286      	cmp	r6, r0
  400c44:	d90d      	bls.n	400c62 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400c46:	3501      	adds	r5, #1
	for (ul_index = 0;
  400c48:	2d05      	cmp	r5, #5
  400c4a:	d1f3      	bne.n	400c34 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400c4c:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400c4e:	b006      	add	sp, #24
  400c50:	bcf0      	pop	{r4, r5, r6, r7}
  400c52:	4770      	bx	lr
			return 0;
  400c54:	2000      	movs	r0, #0
  400c56:	e7fa      	b.n	400c4e <tc_find_mck_divisor+0x44>
  400c58:	2000      	movs	r0, #0
  400c5a:	e7f8      	b.n	400c4e <tc_find_mck_divisor+0x44>
	return 1;
  400c5c:	2001      	movs	r0, #1
  400c5e:	e7f6      	b.n	400c4e <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400c60:	2500      	movs	r5, #0
	if (p_uldiv) {
  400c62:	b12a      	cbz	r2, 400c70 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400c64:	a906      	add	r1, sp, #24
  400c66:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400c6a:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400c6e:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400c70:	2b00      	cmp	r3, #0
  400c72:	d0f3      	beq.n	400c5c <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400c74:	601d      	str	r5, [r3, #0]
	return 1;
  400c76:	2001      	movs	r0, #1
  400c78:	e7e9      	b.n	400c4e <tc_find_mck_divisor+0x44>

00400c7a <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400c7a:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400c7c:	23ac      	movs	r3, #172	; 0xac
  400c7e:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400c80:	680b      	ldr	r3, [r1, #0]
  400c82:	684a      	ldr	r2, [r1, #4]
  400c84:	fbb3 f3f2 	udiv	r3, r3, r2
  400c88:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400c8a:	1e5c      	subs	r4, r3, #1
  400c8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400c90:	4294      	cmp	r4, r2
  400c92:	d80c      	bhi.n	400cae <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400c94:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400c96:	688b      	ldr	r3, [r1, #8]
  400c98:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400c9a:	f240 2302 	movw	r3, #514	; 0x202
  400c9e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400ca2:	2350      	movs	r3, #80	; 0x50
  400ca4:	6003      	str	r3, [r0, #0]

	return 0;
  400ca6:	2000      	movs	r0, #0
}
  400ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cac:	4770      	bx	lr
		return 1;
  400cae:	2001      	movs	r0, #1
  400cb0:	e7fa      	b.n	400ca8 <uart_init+0x2e>

00400cb2 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400cb2:	6943      	ldr	r3, [r0, #20]
  400cb4:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400cb8:	bf1a      	itte	ne
  400cba:	61c1      	strne	r1, [r0, #28]
	return 0;
  400cbc:	2000      	movne	r0, #0
		return 1;
  400cbe:	2001      	moveq	r0, #1
}
  400cc0:	4770      	bx	lr

00400cc2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400cc2:	6943      	ldr	r3, [r0, #20]
  400cc4:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400cc8:	bf1d      	ittte	ne
  400cca:	6983      	ldrne	r3, [r0, #24]
  400ccc:	700b      	strbne	r3, [r1, #0]
	return 0;
  400cce:	2000      	movne	r0, #0
		return 1;
  400cd0:	2001      	moveq	r0, #1
}
  400cd2:	4770      	bx	lr

00400cd4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400cd4:	6943      	ldr	r3, [r0, #20]
  400cd6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400cda:	bf1d      	ittte	ne
  400cdc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400ce0:	61c1      	strne	r1, [r0, #28]
	return 0;
  400ce2:	2000      	movne	r0, #0
		return 1;
  400ce4:	2001      	moveq	r0, #1
}
  400ce6:	4770      	bx	lr

00400ce8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400ce8:	6943      	ldr	r3, [r0, #20]
  400cea:	f013 0f01 	tst.w	r3, #1
  400cee:	d005      	beq.n	400cfc <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400cf0:	6983      	ldr	r3, [r0, #24]
  400cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400cf6:	600b      	str	r3, [r1, #0]

	return 0;
  400cf8:	2000      	movs	r0, #0
  400cfa:	4770      	bx	lr
		return 1;
  400cfc:	2001      	movs	r0, #1
}
  400cfe:	4770      	bx	lr

00400d00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d00:	e7fe      	b.n	400d00 <Dummy_Handler>
	...

00400d04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400d04:	b500      	push	{lr}
  400d06:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400d08:	4b25      	ldr	r3, [pc, #148]	; (400da0 <Reset_Handler+0x9c>)
  400d0a:	4a26      	ldr	r2, [pc, #152]	; (400da4 <Reset_Handler+0xa0>)
  400d0c:	429a      	cmp	r2, r3
  400d0e:	d010      	beq.n	400d32 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  400d10:	4b25      	ldr	r3, [pc, #148]	; (400da8 <Reset_Handler+0xa4>)
  400d12:	4a23      	ldr	r2, [pc, #140]	; (400da0 <Reset_Handler+0x9c>)
  400d14:	429a      	cmp	r2, r3
  400d16:	d20c      	bcs.n	400d32 <Reset_Handler+0x2e>
  400d18:	3b01      	subs	r3, #1
  400d1a:	1a9b      	subs	r3, r3, r2
  400d1c:	f023 0303 	bic.w	r3, r3, #3
  400d20:	3304      	adds	r3, #4
  400d22:	4413      	add	r3, r2
  400d24:	491f      	ldr	r1, [pc, #124]	; (400da4 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  400d26:	f851 0b04 	ldr.w	r0, [r1], #4
  400d2a:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400d2e:	429a      	cmp	r2, r3
  400d30:	d1f9      	bne.n	400d26 <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400d32:	4b1e      	ldr	r3, [pc, #120]	; (400dac <Reset_Handler+0xa8>)
  400d34:	4a1e      	ldr	r2, [pc, #120]	; (400db0 <Reset_Handler+0xac>)
  400d36:	429a      	cmp	r2, r3
  400d38:	d20a      	bcs.n	400d50 <Reset_Handler+0x4c>
  400d3a:	3b01      	subs	r3, #1
  400d3c:	1a9b      	subs	r3, r3, r2
  400d3e:	f023 0303 	bic.w	r3, r3, #3
  400d42:	3304      	adds	r3, #4
  400d44:	4413      	add	r3, r2
		*pDest++ = 0;
  400d46:	2100      	movs	r1, #0
  400d48:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400d4c:	4293      	cmp	r3, r2
  400d4e:	d1fb      	bne.n	400d48 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400d50:	4a18      	ldr	r2, [pc, #96]	; (400db4 <Reset_Handler+0xb0>)
  400d52:	4b19      	ldr	r3, [pc, #100]	; (400db8 <Reset_Handler+0xb4>)
  400d54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400d58:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400d5a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d5e:	fab3 f383 	clz	r3, r3
  400d62:	095b      	lsrs	r3, r3, #5
  400d64:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400d66:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400d68:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d6c:	2200      	movs	r2, #0
  400d6e:	4b13      	ldr	r3, [pc, #76]	; (400dbc <Reset_Handler+0xb8>)
  400d70:	701a      	strb	r2, [r3, #0]
	return flags;
  400d72:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400d74:	4a12      	ldr	r2, [pc, #72]	; (400dc0 <Reset_Handler+0xbc>)
  400d76:	6813      	ldr	r3, [r2, #0]
  400d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400d7c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400d7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d82:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  400d86:	b129      	cbz	r1, 400d94 <Reset_Handler+0x90>
		cpu_irq_enable();
  400d88:	2201      	movs	r2, #1
  400d8a:	4b0c      	ldr	r3, [pc, #48]	; (400dbc <Reset_Handler+0xb8>)
  400d8c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400d8e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d92:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  400d94:	4b0b      	ldr	r3, [pc, #44]	; (400dc4 <Reset_Handler+0xc0>)
  400d96:	4798      	blx	r3

	/* Branch to main function */
	main();
  400d98:	4b0b      	ldr	r3, [pc, #44]	; (400dc8 <Reset_Handler+0xc4>)
  400d9a:	4798      	blx	r3
  400d9c:	e7fe      	b.n	400d9c <Reset_Handler+0x98>
  400d9e:	bf00      	nop
  400da0:	20000000 	.word	0x20000000
  400da4:	004020b8 	.word	0x004020b8
  400da8:	20000854 	.word	0x20000854
  400dac:	200190c0 	.word	0x200190c0
  400db0:	20000854 	.word	0x20000854
  400db4:	e000ed00 	.word	0xe000ed00
  400db8:	00400000 	.word	0x00400000
  400dbc:	2000000a 	.word	0x2000000a
  400dc0:	e000ed88 	.word	0xe000ed88
  400dc4:	00400f99 	.word	0x00400f99
  400dc8:	004002dd 	.word	0x004002dd

00400dcc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400dcc:	4b3b      	ldr	r3, [pc, #236]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dd0:	f003 0303 	and.w	r3, r3, #3
  400dd4:	2b01      	cmp	r3, #1
  400dd6:	d01d      	beq.n	400e14 <SystemCoreClockUpdate+0x48>
  400dd8:	b183      	cbz	r3, 400dfc <SystemCoreClockUpdate+0x30>
  400dda:	2b02      	cmp	r3, #2
  400ddc:	d036      	beq.n	400e4c <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400dde:	4b37      	ldr	r3, [pc, #220]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400de6:	2b70      	cmp	r3, #112	; 0x70
  400de8:	d05f      	beq.n	400eaa <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400dea:	4b34      	ldr	r3, [pc, #208]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400dee:	4934      	ldr	r1, [pc, #208]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400df0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400df4:	680b      	ldr	r3, [r1, #0]
  400df6:	40d3      	lsrs	r3, r2
  400df8:	600b      	str	r3, [r1, #0]
  400dfa:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400dfc:	4b31      	ldr	r3, [pc, #196]	; (400ec4 <SystemCoreClockUpdate+0xf8>)
  400dfe:	695b      	ldr	r3, [r3, #20]
  400e00:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400e04:	bf14      	ite	ne
  400e06:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400e0a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400e0e:	4b2c      	ldr	r3, [pc, #176]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400e10:	601a      	str	r2, [r3, #0]
  400e12:	e7e4      	b.n	400dde <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e14:	4b29      	ldr	r3, [pc, #164]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400e16:	6a1b      	ldr	r3, [r3, #32]
  400e18:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e1c:	d003      	beq.n	400e26 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400e1e:	4a2a      	ldr	r2, [pc, #168]	; (400ec8 <SystemCoreClockUpdate+0xfc>)
  400e20:	4b27      	ldr	r3, [pc, #156]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400e22:	601a      	str	r2, [r3, #0]
  400e24:	e7db      	b.n	400dde <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e26:	4a29      	ldr	r2, [pc, #164]	; (400ecc <SystemCoreClockUpdate+0x100>)
  400e28:	4b25      	ldr	r3, [pc, #148]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400e2a:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e2c:	4b23      	ldr	r3, [pc, #140]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400e2e:	6a1b      	ldr	r3, [r3, #32]
  400e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e34:	2b10      	cmp	r3, #16
  400e36:	d005      	beq.n	400e44 <SystemCoreClockUpdate+0x78>
  400e38:	2b20      	cmp	r3, #32
  400e3a:	d1d0      	bne.n	400dde <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  400e3c:	4a22      	ldr	r2, [pc, #136]	; (400ec8 <SystemCoreClockUpdate+0xfc>)
  400e3e:	4b20      	ldr	r3, [pc, #128]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400e40:	601a      	str	r2, [r3, #0]
				break;
  400e42:	e7cc      	b.n	400dde <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  400e44:	4a22      	ldr	r2, [pc, #136]	; (400ed0 <SystemCoreClockUpdate+0x104>)
  400e46:	4b1e      	ldr	r3, [pc, #120]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400e48:	601a      	str	r2, [r3, #0]
				break;
  400e4a:	e7c8      	b.n	400dde <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400e4c:	4b1b      	ldr	r3, [pc, #108]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400e4e:	6a1b      	ldr	r3, [r3, #32]
  400e50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e54:	d016      	beq.n	400e84 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400e56:	4a1c      	ldr	r2, [pc, #112]	; (400ec8 <SystemCoreClockUpdate+0xfc>)
  400e58:	4b19      	ldr	r3, [pc, #100]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400e5a:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  400e5c:	4b17      	ldr	r3, [pc, #92]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e60:	f003 0303 	and.w	r3, r3, #3
  400e64:	2b02      	cmp	r3, #2
  400e66:	d1ba      	bne.n	400dde <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e68:	4a14      	ldr	r2, [pc, #80]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400e6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400e6e:	4814      	ldr	r0, [pc, #80]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e70:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400e74:	6803      	ldr	r3, [r0, #0]
  400e76:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e7a:	b2d2      	uxtb	r2, r2
  400e7c:	fbb3 f3f2 	udiv	r3, r3, r2
  400e80:	6003      	str	r3, [r0, #0]
  400e82:	e7ac      	b.n	400dde <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e84:	4a11      	ldr	r2, [pc, #68]	; (400ecc <SystemCoreClockUpdate+0x100>)
  400e86:	4b0e      	ldr	r3, [pc, #56]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400e88:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400e8a:	4b0c      	ldr	r3, [pc, #48]	; (400ebc <SystemCoreClockUpdate+0xf0>)
  400e8c:	6a1b      	ldr	r3, [r3, #32]
  400e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e92:	2b10      	cmp	r3, #16
  400e94:	d005      	beq.n	400ea2 <SystemCoreClockUpdate+0xd6>
  400e96:	2b20      	cmp	r3, #32
  400e98:	d1e0      	bne.n	400e5c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  400e9a:	4a0b      	ldr	r2, [pc, #44]	; (400ec8 <SystemCoreClockUpdate+0xfc>)
  400e9c:	4b08      	ldr	r3, [pc, #32]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400e9e:	601a      	str	r2, [r3, #0]
				break;
  400ea0:	e7dc      	b.n	400e5c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  400ea2:	4a0b      	ldr	r2, [pc, #44]	; (400ed0 <SystemCoreClockUpdate+0x104>)
  400ea4:	4b06      	ldr	r3, [pc, #24]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400ea6:	601a      	str	r2, [r3, #0]
				break;
  400ea8:	e7d8      	b.n	400e5c <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400eaa:	4a05      	ldr	r2, [pc, #20]	; (400ec0 <SystemCoreClockUpdate+0xf4>)
  400eac:	6813      	ldr	r3, [r2, #0]
  400eae:	4909      	ldr	r1, [pc, #36]	; (400ed4 <SystemCoreClockUpdate+0x108>)
  400eb0:	fba1 1303 	umull	r1, r3, r1, r3
  400eb4:	085b      	lsrs	r3, r3, #1
  400eb6:	6013      	str	r3, [r2, #0]
  400eb8:	4770      	bx	lr
  400eba:	bf00      	nop
  400ebc:	400e0400 	.word	0x400e0400
  400ec0:	2000000c 	.word	0x2000000c
  400ec4:	400e1810 	.word	0x400e1810
  400ec8:	00b71b00 	.word	0x00b71b00
  400ecc:	003d0900 	.word	0x003d0900
  400ed0:	007a1200 	.word	0x007a1200
  400ed4:	aaaaaaab 	.word	0xaaaaaaab

00400ed8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400ed8:	4b12      	ldr	r3, [pc, #72]	; (400f24 <system_init_flash+0x4c>)
  400eda:	4298      	cmp	r0, r3
  400edc:	d911      	bls.n	400f02 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400ede:	4b12      	ldr	r3, [pc, #72]	; (400f28 <system_init_flash+0x50>)
  400ee0:	4298      	cmp	r0, r3
  400ee2:	d913      	bls.n	400f0c <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400ee4:	4b11      	ldr	r3, [pc, #68]	; (400f2c <system_init_flash+0x54>)
  400ee6:	4298      	cmp	r0, r3
  400ee8:	d914      	bls.n	400f14 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400eea:	4b11      	ldr	r3, [pc, #68]	; (400f30 <system_init_flash+0x58>)
  400eec:	4298      	cmp	r0, r3
  400eee:	d915      	bls.n	400f1c <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400ef0:	4b10      	ldr	r3, [pc, #64]	; (400f34 <system_init_flash+0x5c>)
  400ef2:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400ef4:	bf94      	ite	ls
  400ef6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400efa:	4a0f      	ldrhi	r2, [pc, #60]	; (400f38 <system_init_flash+0x60>)
  400efc:	4b0f      	ldr	r3, [pc, #60]	; (400f3c <system_init_flash+0x64>)
  400efe:	601a      	str	r2, [r3, #0]
  400f00:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400f06:	4b0d      	ldr	r3, [pc, #52]	; (400f3c <system_init_flash+0x64>)
  400f08:	601a      	str	r2, [r3, #0]
  400f0a:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f0c:	4a0c      	ldr	r2, [pc, #48]	; (400f40 <system_init_flash+0x68>)
  400f0e:	4b0b      	ldr	r3, [pc, #44]	; (400f3c <system_init_flash+0x64>)
  400f10:	601a      	str	r2, [r3, #0]
  400f12:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f14:	4a0b      	ldr	r2, [pc, #44]	; (400f44 <system_init_flash+0x6c>)
  400f16:	4b09      	ldr	r3, [pc, #36]	; (400f3c <system_init_flash+0x64>)
  400f18:	601a      	str	r2, [r3, #0]
  400f1a:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f1c:	4a0a      	ldr	r2, [pc, #40]	; (400f48 <system_init_flash+0x70>)
  400f1e:	4b07      	ldr	r3, [pc, #28]	; (400f3c <system_init_flash+0x64>)
  400f20:	601a      	str	r2, [r3, #0]
  400f22:	4770      	bx	lr
  400f24:	01312cff 	.word	0x01312cff
  400f28:	026259ff 	.word	0x026259ff
  400f2c:	039386ff 	.word	0x039386ff
  400f30:	04c4b3ff 	.word	0x04c4b3ff
  400f34:	05f5e0ff 	.word	0x05f5e0ff
  400f38:	04000500 	.word	0x04000500
  400f3c:	400e0a00 	.word	0x400e0a00
  400f40:	04000100 	.word	0x04000100
  400f44:	04000200 	.word	0x04000200
  400f48:	04000300 	.word	0x04000300

00400f4c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400f4c:	4b0a      	ldr	r3, [pc, #40]	; (400f78 <_sbrk+0x2c>)
  400f4e:	681b      	ldr	r3, [r3, #0]
  400f50:	b153      	cbz	r3, 400f68 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400f52:	4b09      	ldr	r3, [pc, #36]	; (400f78 <_sbrk+0x2c>)
  400f54:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400f56:	181a      	adds	r2, r3, r0
  400f58:	4908      	ldr	r1, [pc, #32]	; (400f7c <_sbrk+0x30>)
  400f5a:	4291      	cmp	r1, r2
  400f5c:	db08      	blt.n	400f70 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400f5e:	4610      	mov	r0, r2
  400f60:	4a05      	ldr	r2, [pc, #20]	; (400f78 <_sbrk+0x2c>)
  400f62:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400f64:	4618      	mov	r0, r3
  400f66:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400f68:	4a05      	ldr	r2, [pc, #20]	; (400f80 <_sbrk+0x34>)
  400f6a:	4b03      	ldr	r3, [pc, #12]	; (400f78 <_sbrk+0x2c>)
  400f6c:	601a      	str	r2, [r3, #0]
  400f6e:	e7f0      	b.n	400f52 <_sbrk+0x6>
		return (caddr_t) -1;	
  400f70:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f74:	4770      	bx	lr
  400f76:	bf00      	nop
  400f78:	200008f0 	.word	0x200008f0
  400f7c:	2001fffc 	.word	0x2001fffc
  400f80:	2001c0c0 	.word	0x2001c0c0

00400f84 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400f84:	f04f 30ff 	mov.w	r0, #4294967295
  400f88:	4770      	bx	lr

00400f8a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400f8e:	604b      	str	r3, [r1, #4]

	return 0;
}
  400f90:	2000      	movs	r0, #0
  400f92:	4770      	bx	lr

00400f94 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400f94:	2000      	movs	r0, #0
  400f96:	4770      	bx	lr

00400f98 <__libc_init_array>:
  400f98:	b570      	push	{r4, r5, r6, lr}
  400f9a:	4e0f      	ldr	r6, [pc, #60]	; (400fd8 <__libc_init_array+0x40>)
  400f9c:	4d0f      	ldr	r5, [pc, #60]	; (400fdc <__libc_init_array+0x44>)
  400f9e:	1b76      	subs	r6, r6, r5
  400fa0:	10b6      	asrs	r6, r6, #2
  400fa2:	bf18      	it	ne
  400fa4:	2400      	movne	r4, #0
  400fa6:	d005      	beq.n	400fb4 <__libc_init_array+0x1c>
  400fa8:	3401      	adds	r4, #1
  400faa:	f855 3b04 	ldr.w	r3, [r5], #4
  400fae:	4798      	blx	r3
  400fb0:	42a6      	cmp	r6, r4
  400fb2:	d1f9      	bne.n	400fa8 <__libc_init_array+0x10>
  400fb4:	4e0a      	ldr	r6, [pc, #40]	; (400fe0 <__libc_init_array+0x48>)
  400fb6:	4d0b      	ldr	r5, [pc, #44]	; (400fe4 <__libc_init_array+0x4c>)
  400fb8:	1b76      	subs	r6, r6, r5
  400fba:	f001 f86b 	bl	402094 <_init>
  400fbe:	10b6      	asrs	r6, r6, #2
  400fc0:	bf18      	it	ne
  400fc2:	2400      	movne	r4, #0
  400fc4:	d006      	beq.n	400fd4 <__libc_init_array+0x3c>
  400fc6:	3401      	adds	r4, #1
  400fc8:	f855 3b04 	ldr.w	r3, [r5], #4
  400fcc:	4798      	blx	r3
  400fce:	42a6      	cmp	r6, r4
  400fd0:	d1f9      	bne.n	400fc6 <__libc_init_array+0x2e>
  400fd2:	bd70      	pop	{r4, r5, r6, pc}
  400fd4:	bd70      	pop	{r4, r5, r6, pc}
  400fd6:	bf00      	nop
  400fd8:	004020a0 	.word	0x004020a0
  400fdc:	004020a0 	.word	0x004020a0
  400fe0:	004020a8 	.word	0x004020a8
  400fe4:	004020a0 	.word	0x004020a0

00400fe8 <memset>:
  400fe8:	b470      	push	{r4, r5, r6}
  400fea:	0786      	lsls	r6, r0, #30
  400fec:	d046      	beq.n	40107c <memset+0x94>
  400fee:	1e54      	subs	r4, r2, #1
  400ff0:	2a00      	cmp	r2, #0
  400ff2:	d041      	beq.n	401078 <memset+0x90>
  400ff4:	b2ca      	uxtb	r2, r1
  400ff6:	4603      	mov	r3, r0
  400ff8:	e002      	b.n	401000 <memset+0x18>
  400ffa:	f114 34ff 	adds.w	r4, r4, #4294967295
  400ffe:	d33b      	bcc.n	401078 <memset+0x90>
  401000:	f803 2b01 	strb.w	r2, [r3], #1
  401004:	079d      	lsls	r5, r3, #30
  401006:	d1f8      	bne.n	400ffa <memset+0x12>
  401008:	2c03      	cmp	r4, #3
  40100a:	d92e      	bls.n	40106a <memset+0x82>
  40100c:	b2cd      	uxtb	r5, r1
  40100e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401012:	2c0f      	cmp	r4, #15
  401014:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401018:	d919      	bls.n	40104e <memset+0x66>
  40101a:	f103 0210 	add.w	r2, r3, #16
  40101e:	4626      	mov	r6, r4
  401020:	3e10      	subs	r6, #16
  401022:	2e0f      	cmp	r6, #15
  401024:	f842 5c10 	str.w	r5, [r2, #-16]
  401028:	f842 5c0c 	str.w	r5, [r2, #-12]
  40102c:	f842 5c08 	str.w	r5, [r2, #-8]
  401030:	f842 5c04 	str.w	r5, [r2, #-4]
  401034:	f102 0210 	add.w	r2, r2, #16
  401038:	d8f2      	bhi.n	401020 <memset+0x38>
  40103a:	f1a4 0210 	sub.w	r2, r4, #16
  40103e:	f022 020f 	bic.w	r2, r2, #15
  401042:	f004 040f 	and.w	r4, r4, #15
  401046:	3210      	adds	r2, #16
  401048:	2c03      	cmp	r4, #3
  40104a:	4413      	add	r3, r2
  40104c:	d90d      	bls.n	40106a <memset+0x82>
  40104e:	461e      	mov	r6, r3
  401050:	4622      	mov	r2, r4
  401052:	3a04      	subs	r2, #4
  401054:	2a03      	cmp	r2, #3
  401056:	f846 5b04 	str.w	r5, [r6], #4
  40105a:	d8fa      	bhi.n	401052 <memset+0x6a>
  40105c:	1f22      	subs	r2, r4, #4
  40105e:	f022 0203 	bic.w	r2, r2, #3
  401062:	3204      	adds	r2, #4
  401064:	4413      	add	r3, r2
  401066:	f004 0403 	and.w	r4, r4, #3
  40106a:	b12c      	cbz	r4, 401078 <memset+0x90>
  40106c:	b2c9      	uxtb	r1, r1
  40106e:	441c      	add	r4, r3
  401070:	f803 1b01 	strb.w	r1, [r3], #1
  401074:	429c      	cmp	r4, r3
  401076:	d1fb      	bne.n	401070 <memset+0x88>
  401078:	bc70      	pop	{r4, r5, r6}
  40107a:	4770      	bx	lr
  40107c:	4614      	mov	r4, r2
  40107e:	4603      	mov	r3, r0
  401080:	e7c2      	b.n	401008 <memset+0x20>
  401082:	bf00      	nop

00401084 <setbuf>:
  401084:	2900      	cmp	r1, #0
  401086:	bf0c      	ite	eq
  401088:	2202      	moveq	r2, #2
  40108a:	2200      	movne	r2, #0
  40108c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401090:	f000 b800 	b.w	401094 <setvbuf>

00401094 <setvbuf>:
  401094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401098:	4c61      	ldr	r4, [pc, #388]	; (401220 <setvbuf+0x18c>)
  40109a:	6825      	ldr	r5, [r4, #0]
  40109c:	b083      	sub	sp, #12
  40109e:	4604      	mov	r4, r0
  4010a0:	460f      	mov	r7, r1
  4010a2:	4690      	mov	r8, r2
  4010a4:	461e      	mov	r6, r3
  4010a6:	b115      	cbz	r5, 4010ae <setvbuf+0x1a>
  4010a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4010aa:	2b00      	cmp	r3, #0
  4010ac:	d064      	beq.n	401178 <setvbuf+0xe4>
  4010ae:	f1b8 0f02 	cmp.w	r8, #2
  4010b2:	d006      	beq.n	4010c2 <setvbuf+0x2e>
  4010b4:	f1b8 0f01 	cmp.w	r8, #1
  4010b8:	f200 809f 	bhi.w	4011fa <setvbuf+0x166>
  4010bc:	2e00      	cmp	r6, #0
  4010be:	f2c0 809c 	blt.w	4011fa <setvbuf+0x166>
  4010c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4010c4:	07d8      	lsls	r0, r3, #31
  4010c6:	d534      	bpl.n	401132 <setvbuf+0x9e>
  4010c8:	4621      	mov	r1, r4
  4010ca:	4628      	mov	r0, r5
  4010cc:	f000 f95a 	bl	401384 <_fflush_r>
  4010d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4010d2:	b141      	cbz	r1, 4010e6 <setvbuf+0x52>
  4010d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4010d8:	4299      	cmp	r1, r3
  4010da:	d002      	beq.n	4010e2 <setvbuf+0x4e>
  4010dc:	4628      	mov	r0, r5
  4010de:	f000 fa4b 	bl	401578 <_free_r>
  4010e2:	2300      	movs	r3, #0
  4010e4:	6323      	str	r3, [r4, #48]	; 0x30
  4010e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010ea:	2200      	movs	r2, #0
  4010ec:	61a2      	str	r2, [r4, #24]
  4010ee:	6062      	str	r2, [r4, #4]
  4010f0:	061a      	lsls	r2, r3, #24
  4010f2:	d43a      	bmi.n	40116a <setvbuf+0xd6>
  4010f4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4010f8:	f023 0303 	bic.w	r3, r3, #3
  4010fc:	f1b8 0f02 	cmp.w	r8, #2
  401100:	81a3      	strh	r3, [r4, #12]
  401102:	d01d      	beq.n	401140 <setvbuf+0xac>
  401104:	ab01      	add	r3, sp, #4
  401106:	466a      	mov	r2, sp
  401108:	4621      	mov	r1, r4
  40110a:	4628      	mov	r0, r5
  40110c:	f000 fb4c 	bl	4017a8 <__swhatbuf_r>
  401110:	89a3      	ldrh	r3, [r4, #12]
  401112:	4318      	orrs	r0, r3
  401114:	81a0      	strh	r0, [r4, #12]
  401116:	2e00      	cmp	r6, #0
  401118:	d132      	bne.n	401180 <setvbuf+0xec>
  40111a:	9e00      	ldr	r6, [sp, #0]
  40111c:	4630      	mov	r0, r6
  40111e:	f000 fb71 	bl	401804 <malloc>
  401122:	4607      	mov	r7, r0
  401124:	2800      	cmp	r0, #0
  401126:	d06b      	beq.n	401200 <setvbuf+0x16c>
  401128:	89a3      	ldrh	r3, [r4, #12]
  40112a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40112e:	81a3      	strh	r3, [r4, #12]
  401130:	e028      	b.n	401184 <setvbuf+0xf0>
  401132:	89a3      	ldrh	r3, [r4, #12]
  401134:	0599      	lsls	r1, r3, #22
  401136:	d4c7      	bmi.n	4010c8 <setvbuf+0x34>
  401138:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40113a:	f000 fb31 	bl	4017a0 <__retarget_lock_acquire_recursive>
  40113e:	e7c3      	b.n	4010c8 <setvbuf+0x34>
  401140:	2500      	movs	r5, #0
  401142:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401144:	2600      	movs	r6, #0
  401146:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40114a:	f043 0302 	orr.w	r3, r3, #2
  40114e:	2001      	movs	r0, #1
  401150:	60a6      	str	r6, [r4, #8]
  401152:	07ce      	lsls	r6, r1, #31
  401154:	81a3      	strh	r3, [r4, #12]
  401156:	6022      	str	r2, [r4, #0]
  401158:	6122      	str	r2, [r4, #16]
  40115a:	6160      	str	r0, [r4, #20]
  40115c:	d401      	bmi.n	401162 <setvbuf+0xce>
  40115e:	0598      	lsls	r0, r3, #22
  401160:	d53e      	bpl.n	4011e0 <setvbuf+0x14c>
  401162:	4628      	mov	r0, r5
  401164:	b003      	add	sp, #12
  401166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40116a:	6921      	ldr	r1, [r4, #16]
  40116c:	4628      	mov	r0, r5
  40116e:	f000 fa03 	bl	401578 <_free_r>
  401172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401176:	e7bd      	b.n	4010f4 <setvbuf+0x60>
  401178:	4628      	mov	r0, r5
  40117a:	f000 f95b 	bl	401434 <__sinit>
  40117e:	e796      	b.n	4010ae <setvbuf+0x1a>
  401180:	2f00      	cmp	r7, #0
  401182:	d0cb      	beq.n	40111c <setvbuf+0x88>
  401184:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401186:	2b00      	cmp	r3, #0
  401188:	d033      	beq.n	4011f2 <setvbuf+0x15e>
  40118a:	9b00      	ldr	r3, [sp, #0]
  40118c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401190:	6027      	str	r7, [r4, #0]
  401192:	429e      	cmp	r6, r3
  401194:	bf1c      	itt	ne
  401196:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40119a:	81a2      	strhne	r2, [r4, #12]
  40119c:	f1b8 0f01 	cmp.w	r8, #1
  4011a0:	bf04      	itt	eq
  4011a2:	f042 0201 	orreq.w	r2, r2, #1
  4011a6:	81a2      	strheq	r2, [r4, #12]
  4011a8:	b292      	uxth	r2, r2
  4011aa:	f012 0308 	ands.w	r3, r2, #8
  4011ae:	6127      	str	r7, [r4, #16]
  4011b0:	6166      	str	r6, [r4, #20]
  4011b2:	d00e      	beq.n	4011d2 <setvbuf+0x13e>
  4011b4:	07d1      	lsls	r1, r2, #31
  4011b6:	d51a      	bpl.n	4011ee <setvbuf+0x15a>
  4011b8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4011ba:	4276      	negs	r6, r6
  4011bc:	2300      	movs	r3, #0
  4011be:	f015 0501 	ands.w	r5, r5, #1
  4011c2:	61a6      	str	r6, [r4, #24]
  4011c4:	60a3      	str	r3, [r4, #8]
  4011c6:	d009      	beq.n	4011dc <setvbuf+0x148>
  4011c8:	2500      	movs	r5, #0
  4011ca:	4628      	mov	r0, r5
  4011cc:	b003      	add	sp, #12
  4011ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011d2:	60a3      	str	r3, [r4, #8]
  4011d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4011d6:	f015 0501 	ands.w	r5, r5, #1
  4011da:	d1f5      	bne.n	4011c8 <setvbuf+0x134>
  4011dc:	0593      	lsls	r3, r2, #22
  4011de:	d4c0      	bmi.n	401162 <setvbuf+0xce>
  4011e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4011e2:	f000 fadf 	bl	4017a4 <__retarget_lock_release_recursive>
  4011e6:	4628      	mov	r0, r5
  4011e8:	b003      	add	sp, #12
  4011ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4011ee:	60a6      	str	r6, [r4, #8]
  4011f0:	e7f0      	b.n	4011d4 <setvbuf+0x140>
  4011f2:	4628      	mov	r0, r5
  4011f4:	f000 f91e 	bl	401434 <__sinit>
  4011f8:	e7c7      	b.n	40118a <setvbuf+0xf6>
  4011fa:	f04f 35ff 	mov.w	r5, #4294967295
  4011fe:	e7b0      	b.n	401162 <setvbuf+0xce>
  401200:	f8dd 9000 	ldr.w	r9, [sp]
  401204:	45b1      	cmp	r9, r6
  401206:	d004      	beq.n	401212 <setvbuf+0x17e>
  401208:	4648      	mov	r0, r9
  40120a:	f000 fafb 	bl	401804 <malloc>
  40120e:	4607      	mov	r7, r0
  401210:	b920      	cbnz	r0, 40121c <setvbuf+0x188>
  401212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401216:	f04f 35ff 	mov.w	r5, #4294967295
  40121a:	e792      	b.n	401142 <setvbuf+0xae>
  40121c:	464e      	mov	r6, r9
  40121e:	e783      	b.n	401128 <setvbuf+0x94>
  401220:	20000010 	.word	0x20000010

00401224 <register_fini>:
  401224:	4b02      	ldr	r3, [pc, #8]	; (401230 <register_fini+0xc>)
  401226:	b113      	cbz	r3, 40122e <register_fini+0xa>
  401228:	4802      	ldr	r0, [pc, #8]	; (401234 <register_fini+0x10>)
  40122a:	f000 b805 	b.w	401238 <atexit>
  40122e:	4770      	bx	lr
  401230:	00000000 	.word	0x00000000
  401234:	004014a5 	.word	0x004014a5

00401238 <atexit>:
  401238:	2300      	movs	r3, #0
  40123a:	4601      	mov	r1, r0
  40123c:	461a      	mov	r2, r3
  40123e:	4618      	mov	r0, r3
  401240:	f000 be10 	b.w	401e64 <__register_exitproc>

00401244 <__sflush_r>:
  401244:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401248:	b29a      	uxth	r2, r3
  40124a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40124e:	460d      	mov	r5, r1
  401250:	0711      	lsls	r1, r2, #28
  401252:	4680      	mov	r8, r0
  401254:	d43a      	bmi.n	4012cc <__sflush_r+0x88>
  401256:	686a      	ldr	r2, [r5, #4]
  401258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40125c:	2a00      	cmp	r2, #0
  40125e:	81ab      	strh	r3, [r5, #12]
  401260:	dd6f      	ble.n	401342 <__sflush_r+0xfe>
  401262:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401264:	2c00      	cmp	r4, #0
  401266:	d049      	beq.n	4012fc <__sflush_r+0xb8>
  401268:	2200      	movs	r2, #0
  40126a:	b29b      	uxth	r3, r3
  40126c:	f8d8 6000 	ldr.w	r6, [r8]
  401270:	f8c8 2000 	str.w	r2, [r8]
  401274:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401278:	d067      	beq.n	40134a <__sflush_r+0x106>
  40127a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40127c:	075f      	lsls	r7, r3, #29
  40127e:	d505      	bpl.n	40128c <__sflush_r+0x48>
  401280:	6869      	ldr	r1, [r5, #4]
  401282:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401284:	1a52      	subs	r2, r2, r1
  401286:	b10b      	cbz	r3, 40128c <__sflush_r+0x48>
  401288:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40128a:	1ad2      	subs	r2, r2, r3
  40128c:	2300      	movs	r3, #0
  40128e:	69e9      	ldr	r1, [r5, #28]
  401290:	4640      	mov	r0, r8
  401292:	47a0      	blx	r4
  401294:	1c44      	adds	r4, r0, #1
  401296:	d03c      	beq.n	401312 <__sflush_r+0xce>
  401298:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40129c:	692a      	ldr	r2, [r5, #16]
  40129e:	602a      	str	r2, [r5, #0]
  4012a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4012a4:	2200      	movs	r2, #0
  4012a6:	81ab      	strh	r3, [r5, #12]
  4012a8:	04db      	lsls	r3, r3, #19
  4012aa:	606a      	str	r2, [r5, #4]
  4012ac:	d447      	bmi.n	40133e <__sflush_r+0xfa>
  4012ae:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4012b0:	f8c8 6000 	str.w	r6, [r8]
  4012b4:	b311      	cbz	r1, 4012fc <__sflush_r+0xb8>
  4012b6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4012ba:	4299      	cmp	r1, r3
  4012bc:	d002      	beq.n	4012c4 <__sflush_r+0x80>
  4012be:	4640      	mov	r0, r8
  4012c0:	f000 f95a 	bl	401578 <_free_r>
  4012c4:	2000      	movs	r0, #0
  4012c6:	6328      	str	r0, [r5, #48]	; 0x30
  4012c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012cc:	692e      	ldr	r6, [r5, #16]
  4012ce:	b1ae      	cbz	r6, 4012fc <__sflush_r+0xb8>
  4012d0:	682c      	ldr	r4, [r5, #0]
  4012d2:	602e      	str	r6, [r5, #0]
  4012d4:	0791      	lsls	r1, r2, #30
  4012d6:	bf0c      	ite	eq
  4012d8:	696b      	ldreq	r3, [r5, #20]
  4012da:	2300      	movne	r3, #0
  4012dc:	1ba4      	subs	r4, r4, r6
  4012de:	60ab      	str	r3, [r5, #8]
  4012e0:	e00a      	b.n	4012f8 <__sflush_r+0xb4>
  4012e2:	4623      	mov	r3, r4
  4012e4:	4632      	mov	r2, r6
  4012e6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4012e8:	69e9      	ldr	r1, [r5, #28]
  4012ea:	4640      	mov	r0, r8
  4012ec:	47b8      	blx	r7
  4012ee:	2800      	cmp	r0, #0
  4012f0:	eba4 0400 	sub.w	r4, r4, r0
  4012f4:	4406      	add	r6, r0
  4012f6:	dd04      	ble.n	401302 <__sflush_r+0xbe>
  4012f8:	2c00      	cmp	r4, #0
  4012fa:	dcf2      	bgt.n	4012e2 <__sflush_r+0x9e>
  4012fc:	2000      	movs	r0, #0
  4012fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401302:	89ab      	ldrh	r3, [r5, #12]
  401304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401308:	81ab      	strh	r3, [r5, #12]
  40130a:	f04f 30ff 	mov.w	r0, #4294967295
  40130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401312:	f8d8 4000 	ldr.w	r4, [r8]
  401316:	2c1d      	cmp	r4, #29
  401318:	d8f3      	bhi.n	401302 <__sflush_r+0xbe>
  40131a:	4b19      	ldr	r3, [pc, #100]	; (401380 <__sflush_r+0x13c>)
  40131c:	40e3      	lsrs	r3, r4
  40131e:	43db      	mvns	r3, r3
  401320:	f013 0301 	ands.w	r3, r3, #1
  401324:	d1ed      	bne.n	401302 <__sflush_r+0xbe>
  401326:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40132a:	606b      	str	r3, [r5, #4]
  40132c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401330:	6929      	ldr	r1, [r5, #16]
  401332:	81ab      	strh	r3, [r5, #12]
  401334:	04da      	lsls	r2, r3, #19
  401336:	6029      	str	r1, [r5, #0]
  401338:	d5b9      	bpl.n	4012ae <__sflush_r+0x6a>
  40133a:	2c00      	cmp	r4, #0
  40133c:	d1b7      	bne.n	4012ae <__sflush_r+0x6a>
  40133e:	6528      	str	r0, [r5, #80]	; 0x50
  401340:	e7b5      	b.n	4012ae <__sflush_r+0x6a>
  401342:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401344:	2a00      	cmp	r2, #0
  401346:	dc8c      	bgt.n	401262 <__sflush_r+0x1e>
  401348:	e7d8      	b.n	4012fc <__sflush_r+0xb8>
  40134a:	2301      	movs	r3, #1
  40134c:	69e9      	ldr	r1, [r5, #28]
  40134e:	4640      	mov	r0, r8
  401350:	47a0      	blx	r4
  401352:	1c43      	adds	r3, r0, #1
  401354:	4602      	mov	r2, r0
  401356:	d002      	beq.n	40135e <__sflush_r+0x11a>
  401358:	89ab      	ldrh	r3, [r5, #12]
  40135a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40135c:	e78e      	b.n	40127c <__sflush_r+0x38>
  40135e:	f8d8 3000 	ldr.w	r3, [r8]
  401362:	2b00      	cmp	r3, #0
  401364:	d0f8      	beq.n	401358 <__sflush_r+0x114>
  401366:	2b1d      	cmp	r3, #29
  401368:	d001      	beq.n	40136e <__sflush_r+0x12a>
  40136a:	2b16      	cmp	r3, #22
  40136c:	d102      	bne.n	401374 <__sflush_r+0x130>
  40136e:	f8c8 6000 	str.w	r6, [r8]
  401372:	e7c3      	b.n	4012fc <__sflush_r+0xb8>
  401374:	89ab      	ldrh	r3, [r5, #12]
  401376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40137a:	81ab      	strh	r3, [r5, #12]
  40137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401380:	20400001 	.word	0x20400001

00401384 <_fflush_r>:
  401384:	b538      	push	{r3, r4, r5, lr}
  401386:	460d      	mov	r5, r1
  401388:	4604      	mov	r4, r0
  40138a:	b108      	cbz	r0, 401390 <_fflush_r+0xc>
  40138c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40138e:	b1bb      	cbz	r3, 4013c0 <_fflush_r+0x3c>
  401390:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  401394:	b188      	cbz	r0, 4013ba <_fflush_r+0x36>
  401396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  401398:	07db      	lsls	r3, r3, #31
  40139a:	d401      	bmi.n	4013a0 <_fflush_r+0x1c>
  40139c:	0581      	lsls	r1, r0, #22
  40139e:	d517      	bpl.n	4013d0 <_fflush_r+0x4c>
  4013a0:	4620      	mov	r0, r4
  4013a2:	4629      	mov	r1, r5
  4013a4:	f7ff ff4e 	bl	401244 <__sflush_r>
  4013a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4013aa:	07da      	lsls	r2, r3, #31
  4013ac:	4604      	mov	r4, r0
  4013ae:	d402      	bmi.n	4013b6 <_fflush_r+0x32>
  4013b0:	89ab      	ldrh	r3, [r5, #12]
  4013b2:	059b      	lsls	r3, r3, #22
  4013b4:	d507      	bpl.n	4013c6 <_fflush_r+0x42>
  4013b6:	4620      	mov	r0, r4
  4013b8:	bd38      	pop	{r3, r4, r5, pc}
  4013ba:	4604      	mov	r4, r0
  4013bc:	4620      	mov	r0, r4
  4013be:	bd38      	pop	{r3, r4, r5, pc}
  4013c0:	f000 f838 	bl	401434 <__sinit>
  4013c4:	e7e4      	b.n	401390 <_fflush_r+0xc>
  4013c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4013c8:	f000 f9ec 	bl	4017a4 <__retarget_lock_release_recursive>
  4013cc:	4620      	mov	r0, r4
  4013ce:	bd38      	pop	{r3, r4, r5, pc}
  4013d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4013d2:	f000 f9e5 	bl	4017a0 <__retarget_lock_acquire_recursive>
  4013d6:	e7e3      	b.n	4013a0 <_fflush_r+0x1c>

004013d8 <_cleanup_r>:
  4013d8:	4901      	ldr	r1, [pc, #4]	; (4013e0 <_cleanup_r+0x8>)
  4013da:	f000 b9b3 	b.w	401744 <_fwalk_reent>
  4013de:	bf00      	nop
  4013e0:	00401f4d 	.word	0x00401f4d

004013e4 <std.isra.0>:
  4013e4:	b510      	push	{r4, lr}
  4013e6:	2300      	movs	r3, #0
  4013e8:	4604      	mov	r4, r0
  4013ea:	8181      	strh	r1, [r0, #12]
  4013ec:	81c2      	strh	r2, [r0, #14]
  4013ee:	6003      	str	r3, [r0, #0]
  4013f0:	6043      	str	r3, [r0, #4]
  4013f2:	6083      	str	r3, [r0, #8]
  4013f4:	6643      	str	r3, [r0, #100]	; 0x64
  4013f6:	6103      	str	r3, [r0, #16]
  4013f8:	6143      	str	r3, [r0, #20]
  4013fa:	6183      	str	r3, [r0, #24]
  4013fc:	4619      	mov	r1, r3
  4013fe:	2208      	movs	r2, #8
  401400:	305c      	adds	r0, #92	; 0x5c
  401402:	f7ff fdf1 	bl	400fe8 <memset>
  401406:	4807      	ldr	r0, [pc, #28]	; (401424 <std.isra.0+0x40>)
  401408:	4907      	ldr	r1, [pc, #28]	; (401428 <std.isra.0+0x44>)
  40140a:	4a08      	ldr	r2, [pc, #32]	; (40142c <std.isra.0+0x48>)
  40140c:	4b08      	ldr	r3, [pc, #32]	; (401430 <std.isra.0+0x4c>)
  40140e:	6220      	str	r0, [r4, #32]
  401410:	61e4      	str	r4, [r4, #28]
  401412:	6261      	str	r1, [r4, #36]	; 0x24
  401414:	62a2      	str	r2, [r4, #40]	; 0x28
  401416:	62e3      	str	r3, [r4, #44]	; 0x2c
  401418:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40141c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401420:	f000 b9ba 	b.w	401798 <__retarget_lock_init_recursive>
  401424:	00401db1 	.word	0x00401db1
  401428:	00401dd5 	.word	0x00401dd5
  40142c:	00401e11 	.word	0x00401e11
  401430:	00401e31 	.word	0x00401e31

00401434 <__sinit>:
  401434:	b510      	push	{r4, lr}
  401436:	4604      	mov	r4, r0
  401438:	4812      	ldr	r0, [pc, #72]	; (401484 <__sinit+0x50>)
  40143a:	f000 f9b1 	bl	4017a0 <__retarget_lock_acquire_recursive>
  40143e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401440:	b9d2      	cbnz	r2, 401478 <__sinit+0x44>
  401442:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  401446:	4810      	ldr	r0, [pc, #64]	; (401488 <__sinit+0x54>)
  401448:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40144c:	2103      	movs	r1, #3
  40144e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  401452:	63e0      	str	r0, [r4, #60]	; 0x3c
  401454:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401458:	6860      	ldr	r0, [r4, #4]
  40145a:	2104      	movs	r1, #4
  40145c:	f7ff ffc2 	bl	4013e4 <std.isra.0>
  401460:	2201      	movs	r2, #1
  401462:	2109      	movs	r1, #9
  401464:	68a0      	ldr	r0, [r4, #8]
  401466:	f7ff ffbd 	bl	4013e4 <std.isra.0>
  40146a:	2202      	movs	r2, #2
  40146c:	2112      	movs	r1, #18
  40146e:	68e0      	ldr	r0, [r4, #12]
  401470:	f7ff ffb8 	bl	4013e4 <std.isra.0>
  401474:	2301      	movs	r3, #1
  401476:	63a3      	str	r3, [r4, #56]	; 0x38
  401478:	4802      	ldr	r0, [pc, #8]	; (401484 <__sinit+0x50>)
  40147a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40147e:	f000 b991 	b.w	4017a4 <__retarget_lock_release_recursive>
  401482:	bf00      	nop
  401484:	200190a4 	.word	0x200190a4
  401488:	004013d9 	.word	0x004013d9

0040148c <__sfp_lock_acquire>:
  40148c:	4801      	ldr	r0, [pc, #4]	; (401494 <__sfp_lock_acquire+0x8>)
  40148e:	f000 b987 	b.w	4017a0 <__retarget_lock_acquire_recursive>
  401492:	bf00      	nop
  401494:	200190b8 	.word	0x200190b8

00401498 <__sfp_lock_release>:
  401498:	4801      	ldr	r0, [pc, #4]	; (4014a0 <__sfp_lock_release+0x8>)
  40149a:	f000 b983 	b.w	4017a4 <__retarget_lock_release_recursive>
  40149e:	bf00      	nop
  4014a0:	200190b8 	.word	0x200190b8

004014a4 <__libc_fini_array>:
  4014a4:	b538      	push	{r3, r4, r5, lr}
  4014a6:	4c0a      	ldr	r4, [pc, #40]	; (4014d0 <__libc_fini_array+0x2c>)
  4014a8:	4d0a      	ldr	r5, [pc, #40]	; (4014d4 <__libc_fini_array+0x30>)
  4014aa:	1b64      	subs	r4, r4, r5
  4014ac:	10a4      	asrs	r4, r4, #2
  4014ae:	d00a      	beq.n	4014c6 <__libc_fini_array+0x22>
  4014b0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4014b4:	3b01      	subs	r3, #1
  4014b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4014ba:	3c01      	subs	r4, #1
  4014bc:	f855 3904 	ldr.w	r3, [r5], #-4
  4014c0:	4798      	blx	r3
  4014c2:	2c00      	cmp	r4, #0
  4014c4:	d1f9      	bne.n	4014ba <__libc_fini_array+0x16>
  4014c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4014ca:	f000 bded 	b.w	4020a8 <_fini>
  4014ce:	bf00      	nop
  4014d0:	004020b8 	.word	0x004020b8
  4014d4:	004020b4 	.word	0x004020b4

004014d8 <_malloc_trim_r>:
  4014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014da:	4f24      	ldr	r7, [pc, #144]	; (40156c <_malloc_trim_r+0x94>)
  4014dc:	460c      	mov	r4, r1
  4014de:	4606      	mov	r6, r0
  4014e0:	f000 fc48 	bl	401d74 <__malloc_lock>
  4014e4:	68bb      	ldr	r3, [r7, #8]
  4014e6:	685d      	ldr	r5, [r3, #4]
  4014e8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4014ec:	310f      	adds	r1, #15
  4014ee:	f025 0503 	bic.w	r5, r5, #3
  4014f2:	4429      	add	r1, r5
  4014f4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4014f8:	f021 010f 	bic.w	r1, r1, #15
  4014fc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401500:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401504:	db07      	blt.n	401516 <_malloc_trim_r+0x3e>
  401506:	2100      	movs	r1, #0
  401508:	4630      	mov	r0, r6
  40150a:	f000 fc3f 	bl	401d8c <_sbrk_r>
  40150e:	68bb      	ldr	r3, [r7, #8]
  401510:	442b      	add	r3, r5
  401512:	4298      	cmp	r0, r3
  401514:	d004      	beq.n	401520 <_malloc_trim_r+0x48>
  401516:	4630      	mov	r0, r6
  401518:	f000 fc32 	bl	401d80 <__malloc_unlock>
  40151c:	2000      	movs	r0, #0
  40151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401520:	4261      	negs	r1, r4
  401522:	4630      	mov	r0, r6
  401524:	f000 fc32 	bl	401d8c <_sbrk_r>
  401528:	3001      	adds	r0, #1
  40152a:	d00d      	beq.n	401548 <_malloc_trim_r+0x70>
  40152c:	4b10      	ldr	r3, [pc, #64]	; (401570 <_malloc_trim_r+0x98>)
  40152e:	68ba      	ldr	r2, [r7, #8]
  401530:	6819      	ldr	r1, [r3, #0]
  401532:	1b2d      	subs	r5, r5, r4
  401534:	f045 0501 	orr.w	r5, r5, #1
  401538:	4630      	mov	r0, r6
  40153a:	1b09      	subs	r1, r1, r4
  40153c:	6055      	str	r5, [r2, #4]
  40153e:	6019      	str	r1, [r3, #0]
  401540:	f000 fc1e 	bl	401d80 <__malloc_unlock>
  401544:	2001      	movs	r0, #1
  401546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401548:	2100      	movs	r1, #0
  40154a:	4630      	mov	r0, r6
  40154c:	f000 fc1e 	bl	401d8c <_sbrk_r>
  401550:	68ba      	ldr	r2, [r7, #8]
  401552:	1a83      	subs	r3, r0, r2
  401554:	2b0f      	cmp	r3, #15
  401556:	ddde      	ble.n	401516 <_malloc_trim_r+0x3e>
  401558:	4c06      	ldr	r4, [pc, #24]	; (401574 <_malloc_trim_r+0x9c>)
  40155a:	4905      	ldr	r1, [pc, #20]	; (401570 <_malloc_trim_r+0x98>)
  40155c:	6824      	ldr	r4, [r4, #0]
  40155e:	f043 0301 	orr.w	r3, r3, #1
  401562:	1b00      	subs	r0, r0, r4
  401564:	6053      	str	r3, [r2, #4]
  401566:	6008      	str	r0, [r1, #0]
  401568:	e7d5      	b.n	401516 <_malloc_trim_r+0x3e>
  40156a:	bf00      	nop
  40156c:	20000444 	.word	0x20000444
  401570:	200008f4 	.word	0x200008f4
  401574:	2000084c 	.word	0x2000084c

00401578 <_free_r>:
  401578:	2900      	cmp	r1, #0
  40157a:	d044      	beq.n	401606 <_free_r+0x8e>
  40157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401580:	460d      	mov	r5, r1
  401582:	4680      	mov	r8, r0
  401584:	f000 fbf6 	bl	401d74 <__malloc_lock>
  401588:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40158c:	4969      	ldr	r1, [pc, #420]	; (401734 <_free_r+0x1bc>)
  40158e:	f027 0301 	bic.w	r3, r7, #1
  401592:	f1a5 0408 	sub.w	r4, r5, #8
  401596:	18e2      	adds	r2, r4, r3
  401598:	688e      	ldr	r6, [r1, #8]
  40159a:	6850      	ldr	r0, [r2, #4]
  40159c:	42b2      	cmp	r2, r6
  40159e:	f020 0003 	bic.w	r0, r0, #3
  4015a2:	d05e      	beq.n	401662 <_free_r+0xea>
  4015a4:	07fe      	lsls	r6, r7, #31
  4015a6:	6050      	str	r0, [r2, #4]
  4015a8:	d40b      	bmi.n	4015c2 <_free_r+0x4a>
  4015aa:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4015ae:	1be4      	subs	r4, r4, r7
  4015b0:	f101 0e08 	add.w	lr, r1, #8
  4015b4:	68a5      	ldr	r5, [r4, #8]
  4015b6:	4575      	cmp	r5, lr
  4015b8:	443b      	add	r3, r7
  4015ba:	d06d      	beq.n	401698 <_free_r+0x120>
  4015bc:	68e7      	ldr	r7, [r4, #12]
  4015be:	60ef      	str	r7, [r5, #12]
  4015c0:	60bd      	str	r5, [r7, #8]
  4015c2:	1815      	adds	r5, r2, r0
  4015c4:	686d      	ldr	r5, [r5, #4]
  4015c6:	07ed      	lsls	r5, r5, #31
  4015c8:	d53e      	bpl.n	401648 <_free_r+0xd0>
  4015ca:	f043 0201 	orr.w	r2, r3, #1
  4015ce:	6062      	str	r2, [r4, #4]
  4015d0:	50e3      	str	r3, [r4, r3]
  4015d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4015d6:	d217      	bcs.n	401608 <_free_r+0x90>
  4015d8:	08db      	lsrs	r3, r3, #3
  4015da:	1c58      	adds	r0, r3, #1
  4015dc:	109a      	asrs	r2, r3, #2
  4015de:	684d      	ldr	r5, [r1, #4]
  4015e0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4015e4:	60a7      	str	r7, [r4, #8]
  4015e6:	2301      	movs	r3, #1
  4015e8:	4093      	lsls	r3, r2
  4015ea:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4015ee:	432b      	orrs	r3, r5
  4015f0:	3a08      	subs	r2, #8
  4015f2:	60e2      	str	r2, [r4, #12]
  4015f4:	604b      	str	r3, [r1, #4]
  4015f6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4015fa:	60fc      	str	r4, [r7, #12]
  4015fc:	4640      	mov	r0, r8
  4015fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401602:	f000 bbbd 	b.w	401d80 <__malloc_unlock>
  401606:	4770      	bx	lr
  401608:	0a5a      	lsrs	r2, r3, #9
  40160a:	2a04      	cmp	r2, #4
  40160c:	d852      	bhi.n	4016b4 <_free_r+0x13c>
  40160e:	099a      	lsrs	r2, r3, #6
  401610:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401614:	00ff      	lsls	r7, r7, #3
  401616:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40161a:	19c8      	adds	r0, r1, r7
  40161c:	59ca      	ldr	r2, [r1, r7]
  40161e:	3808      	subs	r0, #8
  401620:	4290      	cmp	r0, r2
  401622:	d04f      	beq.n	4016c4 <_free_r+0x14c>
  401624:	6851      	ldr	r1, [r2, #4]
  401626:	f021 0103 	bic.w	r1, r1, #3
  40162a:	428b      	cmp	r3, r1
  40162c:	d232      	bcs.n	401694 <_free_r+0x11c>
  40162e:	6892      	ldr	r2, [r2, #8]
  401630:	4290      	cmp	r0, r2
  401632:	d1f7      	bne.n	401624 <_free_r+0xac>
  401634:	68c3      	ldr	r3, [r0, #12]
  401636:	60a0      	str	r0, [r4, #8]
  401638:	60e3      	str	r3, [r4, #12]
  40163a:	609c      	str	r4, [r3, #8]
  40163c:	60c4      	str	r4, [r0, #12]
  40163e:	4640      	mov	r0, r8
  401640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401644:	f000 bb9c 	b.w	401d80 <__malloc_unlock>
  401648:	6895      	ldr	r5, [r2, #8]
  40164a:	4f3b      	ldr	r7, [pc, #236]	; (401738 <_free_r+0x1c0>)
  40164c:	42bd      	cmp	r5, r7
  40164e:	4403      	add	r3, r0
  401650:	d040      	beq.n	4016d4 <_free_r+0x15c>
  401652:	68d0      	ldr	r0, [r2, #12]
  401654:	60e8      	str	r0, [r5, #12]
  401656:	f043 0201 	orr.w	r2, r3, #1
  40165a:	6085      	str	r5, [r0, #8]
  40165c:	6062      	str	r2, [r4, #4]
  40165e:	50e3      	str	r3, [r4, r3]
  401660:	e7b7      	b.n	4015d2 <_free_r+0x5a>
  401662:	07ff      	lsls	r7, r7, #31
  401664:	4403      	add	r3, r0
  401666:	d407      	bmi.n	401678 <_free_r+0x100>
  401668:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40166c:	1aa4      	subs	r4, r4, r2
  40166e:	4413      	add	r3, r2
  401670:	68a0      	ldr	r0, [r4, #8]
  401672:	68e2      	ldr	r2, [r4, #12]
  401674:	60c2      	str	r2, [r0, #12]
  401676:	6090      	str	r0, [r2, #8]
  401678:	4a30      	ldr	r2, [pc, #192]	; (40173c <_free_r+0x1c4>)
  40167a:	6812      	ldr	r2, [r2, #0]
  40167c:	f043 0001 	orr.w	r0, r3, #1
  401680:	4293      	cmp	r3, r2
  401682:	6060      	str	r0, [r4, #4]
  401684:	608c      	str	r4, [r1, #8]
  401686:	d3b9      	bcc.n	4015fc <_free_r+0x84>
  401688:	4b2d      	ldr	r3, [pc, #180]	; (401740 <_free_r+0x1c8>)
  40168a:	4640      	mov	r0, r8
  40168c:	6819      	ldr	r1, [r3, #0]
  40168e:	f7ff ff23 	bl	4014d8 <_malloc_trim_r>
  401692:	e7b3      	b.n	4015fc <_free_r+0x84>
  401694:	4610      	mov	r0, r2
  401696:	e7cd      	b.n	401634 <_free_r+0xbc>
  401698:	1811      	adds	r1, r2, r0
  40169a:	6849      	ldr	r1, [r1, #4]
  40169c:	07c9      	lsls	r1, r1, #31
  40169e:	d444      	bmi.n	40172a <_free_r+0x1b2>
  4016a0:	6891      	ldr	r1, [r2, #8]
  4016a2:	68d2      	ldr	r2, [r2, #12]
  4016a4:	60ca      	str	r2, [r1, #12]
  4016a6:	4403      	add	r3, r0
  4016a8:	f043 0001 	orr.w	r0, r3, #1
  4016ac:	6091      	str	r1, [r2, #8]
  4016ae:	6060      	str	r0, [r4, #4]
  4016b0:	50e3      	str	r3, [r4, r3]
  4016b2:	e7a3      	b.n	4015fc <_free_r+0x84>
  4016b4:	2a14      	cmp	r2, #20
  4016b6:	d816      	bhi.n	4016e6 <_free_r+0x16e>
  4016b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4016bc:	00ff      	lsls	r7, r7, #3
  4016be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4016c2:	e7aa      	b.n	40161a <_free_r+0xa2>
  4016c4:	10aa      	asrs	r2, r5, #2
  4016c6:	2301      	movs	r3, #1
  4016c8:	684d      	ldr	r5, [r1, #4]
  4016ca:	4093      	lsls	r3, r2
  4016cc:	432b      	orrs	r3, r5
  4016ce:	604b      	str	r3, [r1, #4]
  4016d0:	4603      	mov	r3, r0
  4016d2:	e7b0      	b.n	401636 <_free_r+0xbe>
  4016d4:	f043 0201 	orr.w	r2, r3, #1
  4016d8:	614c      	str	r4, [r1, #20]
  4016da:	610c      	str	r4, [r1, #16]
  4016dc:	60e5      	str	r5, [r4, #12]
  4016de:	60a5      	str	r5, [r4, #8]
  4016e0:	6062      	str	r2, [r4, #4]
  4016e2:	50e3      	str	r3, [r4, r3]
  4016e4:	e78a      	b.n	4015fc <_free_r+0x84>
  4016e6:	2a54      	cmp	r2, #84	; 0x54
  4016e8:	d806      	bhi.n	4016f8 <_free_r+0x180>
  4016ea:	0b1a      	lsrs	r2, r3, #12
  4016ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4016f0:	00ff      	lsls	r7, r7, #3
  4016f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4016f6:	e790      	b.n	40161a <_free_r+0xa2>
  4016f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4016fc:	d806      	bhi.n	40170c <_free_r+0x194>
  4016fe:	0bda      	lsrs	r2, r3, #15
  401700:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401704:	00ff      	lsls	r7, r7, #3
  401706:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40170a:	e786      	b.n	40161a <_free_r+0xa2>
  40170c:	f240 5054 	movw	r0, #1364	; 0x554
  401710:	4282      	cmp	r2, r0
  401712:	d806      	bhi.n	401722 <_free_r+0x1aa>
  401714:	0c9a      	lsrs	r2, r3, #18
  401716:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40171a:	00ff      	lsls	r7, r7, #3
  40171c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401720:	e77b      	b.n	40161a <_free_r+0xa2>
  401722:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  401726:	257e      	movs	r5, #126	; 0x7e
  401728:	e777      	b.n	40161a <_free_r+0xa2>
  40172a:	f043 0101 	orr.w	r1, r3, #1
  40172e:	6061      	str	r1, [r4, #4]
  401730:	6013      	str	r3, [r2, #0]
  401732:	e763      	b.n	4015fc <_free_r+0x84>
  401734:	20000444 	.word	0x20000444
  401738:	2000044c 	.word	0x2000044c
  40173c:	20000850 	.word	0x20000850
  401740:	20000924 	.word	0x20000924

00401744 <_fwalk_reent>:
  401744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401748:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40174c:	d01f      	beq.n	40178e <_fwalk_reent+0x4a>
  40174e:	4688      	mov	r8, r1
  401750:	4606      	mov	r6, r0
  401752:	f04f 0900 	mov.w	r9, #0
  401756:	687d      	ldr	r5, [r7, #4]
  401758:	68bc      	ldr	r4, [r7, #8]
  40175a:	3d01      	subs	r5, #1
  40175c:	d411      	bmi.n	401782 <_fwalk_reent+0x3e>
  40175e:	89a3      	ldrh	r3, [r4, #12]
  401760:	2b01      	cmp	r3, #1
  401762:	f105 35ff 	add.w	r5, r5, #4294967295
  401766:	d908      	bls.n	40177a <_fwalk_reent+0x36>
  401768:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40176c:	3301      	adds	r3, #1
  40176e:	4621      	mov	r1, r4
  401770:	4630      	mov	r0, r6
  401772:	d002      	beq.n	40177a <_fwalk_reent+0x36>
  401774:	47c0      	blx	r8
  401776:	ea49 0900 	orr.w	r9, r9, r0
  40177a:	1c6b      	adds	r3, r5, #1
  40177c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401780:	d1ed      	bne.n	40175e <_fwalk_reent+0x1a>
  401782:	683f      	ldr	r7, [r7, #0]
  401784:	2f00      	cmp	r7, #0
  401786:	d1e6      	bne.n	401756 <_fwalk_reent+0x12>
  401788:	4648      	mov	r0, r9
  40178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40178e:	46b9      	mov	r9, r7
  401790:	4648      	mov	r0, r9
  401792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401796:	bf00      	nop

00401798 <__retarget_lock_init_recursive>:
  401798:	4770      	bx	lr
  40179a:	bf00      	nop

0040179c <__retarget_lock_close_recursive>:
  40179c:	4770      	bx	lr
  40179e:	bf00      	nop

004017a0 <__retarget_lock_acquire_recursive>:
  4017a0:	4770      	bx	lr
  4017a2:	bf00      	nop

004017a4 <__retarget_lock_release_recursive>:
  4017a4:	4770      	bx	lr
  4017a6:	bf00      	nop

004017a8 <__swhatbuf_r>:
  4017a8:	b570      	push	{r4, r5, r6, lr}
  4017aa:	460c      	mov	r4, r1
  4017ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4017b0:	2900      	cmp	r1, #0
  4017b2:	b090      	sub	sp, #64	; 0x40
  4017b4:	4615      	mov	r5, r2
  4017b6:	461e      	mov	r6, r3
  4017b8:	db14      	blt.n	4017e4 <__swhatbuf_r+0x3c>
  4017ba:	aa01      	add	r2, sp, #4
  4017bc:	f000 fc28 	bl	402010 <_fstat_r>
  4017c0:	2800      	cmp	r0, #0
  4017c2:	db0f      	blt.n	4017e4 <__swhatbuf_r+0x3c>
  4017c4:	9a02      	ldr	r2, [sp, #8]
  4017c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4017ca:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4017ce:	fab2 f282 	clz	r2, r2
  4017d2:	0952      	lsrs	r2, r2, #5
  4017d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4017d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4017dc:	6032      	str	r2, [r6, #0]
  4017de:	602b      	str	r3, [r5, #0]
  4017e0:	b010      	add	sp, #64	; 0x40
  4017e2:	bd70      	pop	{r4, r5, r6, pc}
  4017e4:	89a2      	ldrh	r2, [r4, #12]
  4017e6:	2300      	movs	r3, #0
  4017e8:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4017ec:	6033      	str	r3, [r6, #0]
  4017ee:	d004      	beq.n	4017fa <__swhatbuf_r+0x52>
  4017f0:	2240      	movs	r2, #64	; 0x40
  4017f2:	4618      	mov	r0, r3
  4017f4:	602a      	str	r2, [r5, #0]
  4017f6:	b010      	add	sp, #64	; 0x40
  4017f8:	bd70      	pop	{r4, r5, r6, pc}
  4017fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4017fe:	602b      	str	r3, [r5, #0]
  401800:	b010      	add	sp, #64	; 0x40
  401802:	bd70      	pop	{r4, r5, r6, pc}

00401804 <malloc>:
  401804:	4b02      	ldr	r3, [pc, #8]	; (401810 <malloc+0xc>)
  401806:	4601      	mov	r1, r0
  401808:	6818      	ldr	r0, [r3, #0]
  40180a:	f000 b803 	b.w	401814 <_malloc_r>
  40180e:	bf00      	nop
  401810:	20000010 	.word	0x20000010

00401814 <_malloc_r>:
  401814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401818:	f101 060b 	add.w	r6, r1, #11
  40181c:	2e16      	cmp	r6, #22
  40181e:	b083      	sub	sp, #12
  401820:	4605      	mov	r5, r0
  401822:	f240 809e 	bls.w	401962 <_malloc_r+0x14e>
  401826:	f036 0607 	bics.w	r6, r6, #7
  40182a:	f100 80bd 	bmi.w	4019a8 <_malloc_r+0x194>
  40182e:	42b1      	cmp	r1, r6
  401830:	f200 80ba 	bhi.w	4019a8 <_malloc_r+0x194>
  401834:	f000 fa9e 	bl	401d74 <__malloc_lock>
  401838:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40183c:	f0c0 8293 	bcc.w	401d66 <_malloc_r+0x552>
  401840:	0a73      	lsrs	r3, r6, #9
  401842:	f000 80b8 	beq.w	4019b6 <_malloc_r+0x1a2>
  401846:	2b04      	cmp	r3, #4
  401848:	f200 8179 	bhi.w	401b3e <_malloc_r+0x32a>
  40184c:	09b3      	lsrs	r3, r6, #6
  40184e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401852:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401856:	00c3      	lsls	r3, r0, #3
  401858:	4fbf      	ldr	r7, [pc, #764]	; (401b58 <_malloc_r+0x344>)
  40185a:	443b      	add	r3, r7
  40185c:	f1a3 0108 	sub.w	r1, r3, #8
  401860:	685c      	ldr	r4, [r3, #4]
  401862:	42a1      	cmp	r1, r4
  401864:	d106      	bne.n	401874 <_malloc_r+0x60>
  401866:	e00c      	b.n	401882 <_malloc_r+0x6e>
  401868:	2a00      	cmp	r2, #0
  40186a:	f280 80aa 	bge.w	4019c2 <_malloc_r+0x1ae>
  40186e:	68e4      	ldr	r4, [r4, #12]
  401870:	42a1      	cmp	r1, r4
  401872:	d006      	beq.n	401882 <_malloc_r+0x6e>
  401874:	6863      	ldr	r3, [r4, #4]
  401876:	f023 0303 	bic.w	r3, r3, #3
  40187a:	1b9a      	subs	r2, r3, r6
  40187c:	2a0f      	cmp	r2, #15
  40187e:	ddf3      	ble.n	401868 <_malloc_r+0x54>
  401880:	4670      	mov	r0, lr
  401882:	693c      	ldr	r4, [r7, #16]
  401884:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401b6c <_malloc_r+0x358>
  401888:	4574      	cmp	r4, lr
  40188a:	f000 81ab 	beq.w	401be4 <_malloc_r+0x3d0>
  40188e:	6863      	ldr	r3, [r4, #4]
  401890:	f023 0303 	bic.w	r3, r3, #3
  401894:	1b9a      	subs	r2, r3, r6
  401896:	2a0f      	cmp	r2, #15
  401898:	f300 8190 	bgt.w	401bbc <_malloc_r+0x3a8>
  40189c:	2a00      	cmp	r2, #0
  40189e:	f8c7 e014 	str.w	lr, [r7, #20]
  4018a2:	f8c7 e010 	str.w	lr, [r7, #16]
  4018a6:	f280 809d 	bge.w	4019e4 <_malloc_r+0x1d0>
  4018aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4018ae:	f080 8161 	bcs.w	401b74 <_malloc_r+0x360>
  4018b2:	08db      	lsrs	r3, r3, #3
  4018b4:	f103 0c01 	add.w	ip, r3, #1
  4018b8:	1099      	asrs	r1, r3, #2
  4018ba:	687a      	ldr	r2, [r7, #4]
  4018bc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4018c0:	f8c4 8008 	str.w	r8, [r4, #8]
  4018c4:	2301      	movs	r3, #1
  4018c6:	408b      	lsls	r3, r1
  4018c8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4018cc:	4313      	orrs	r3, r2
  4018ce:	3908      	subs	r1, #8
  4018d0:	60e1      	str	r1, [r4, #12]
  4018d2:	607b      	str	r3, [r7, #4]
  4018d4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4018d8:	f8c8 400c 	str.w	r4, [r8, #12]
  4018dc:	1082      	asrs	r2, r0, #2
  4018de:	2401      	movs	r4, #1
  4018e0:	4094      	lsls	r4, r2
  4018e2:	429c      	cmp	r4, r3
  4018e4:	f200 808b 	bhi.w	4019fe <_malloc_r+0x1ea>
  4018e8:	421c      	tst	r4, r3
  4018ea:	d106      	bne.n	4018fa <_malloc_r+0xe6>
  4018ec:	f020 0003 	bic.w	r0, r0, #3
  4018f0:	0064      	lsls	r4, r4, #1
  4018f2:	421c      	tst	r4, r3
  4018f4:	f100 0004 	add.w	r0, r0, #4
  4018f8:	d0fa      	beq.n	4018f0 <_malloc_r+0xdc>
  4018fa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4018fe:	46cc      	mov	ip, r9
  401900:	4680      	mov	r8, r0
  401902:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401906:	459c      	cmp	ip, r3
  401908:	d107      	bne.n	40191a <_malloc_r+0x106>
  40190a:	e16d      	b.n	401be8 <_malloc_r+0x3d4>
  40190c:	2a00      	cmp	r2, #0
  40190e:	f280 817b 	bge.w	401c08 <_malloc_r+0x3f4>
  401912:	68db      	ldr	r3, [r3, #12]
  401914:	459c      	cmp	ip, r3
  401916:	f000 8167 	beq.w	401be8 <_malloc_r+0x3d4>
  40191a:	6859      	ldr	r1, [r3, #4]
  40191c:	f021 0103 	bic.w	r1, r1, #3
  401920:	1b8a      	subs	r2, r1, r6
  401922:	2a0f      	cmp	r2, #15
  401924:	ddf2      	ble.n	40190c <_malloc_r+0xf8>
  401926:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40192a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40192e:	9300      	str	r3, [sp, #0]
  401930:	199c      	adds	r4, r3, r6
  401932:	4628      	mov	r0, r5
  401934:	f046 0601 	orr.w	r6, r6, #1
  401938:	f042 0501 	orr.w	r5, r2, #1
  40193c:	605e      	str	r6, [r3, #4]
  40193e:	f8c8 c00c 	str.w	ip, [r8, #12]
  401942:	f8cc 8008 	str.w	r8, [ip, #8]
  401946:	617c      	str	r4, [r7, #20]
  401948:	613c      	str	r4, [r7, #16]
  40194a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40194e:	f8c4 e008 	str.w	lr, [r4, #8]
  401952:	6065      	str	r5, [r4, #4]
  401954:	505a      	str	r2, [r3, r1]
  401956:	f000 fa13 	bl	401d80 <__malloc_unlock>
  40195a:	9b00      	ldr	r3, [sp, #0]
  40195c:	f103 0408 	add.w	r4, r3, #8
  401960:	e01e      	b.n	4019a0 <_malloc_r+0x18c>
  401962:	2910      	cmp	r1, #16
  401964:	d820      	bhi.n	4019a8 <_malloc_r+0x194>
  401966:	f000 fa05 	bl	401d74 <__malloc_lock>
  40196a:	2610      	movs	r6, #16
  40196c:	2318      	movs	r3, #24
  40196e:	2002      	movs	r0, #2
  401970:	4f79      	ldr	r7, [pc, #484]	; (401b58 <_malloc_r+0x344>)
  401972:	443b      	add	r3, r7
  401974:	f1a3 0208 	sub.w	r2, r3, #8
  401978:	685c      	ldr	r4, [r3, #4]
  40197a:	4294      	cmp	r4, r2
  40197c:	f000 813d 	beq.w	401bfa <_malloc_r+0x3e6>
  401980:	6863      	ldr	r3, [r4, #4]
  401982:	68e1      	ldr	r1, [r4, #12]
  401984:	68a6      	ldr	r6, [r4, #8]
  401986:	f023 0303 	bic.w	r3, r3, #3
  40198a:	4423      	add	r3, r4
  40198c:	4628      	mov	r0, r5
  40198e:	685a      	ldr	r2, [r3, #4]
  401990:	60f1      	str	r1, [r6, #12]
  401992:	f042 0201 	orr.w	r2, r2, #1
  401996:	608e      	str	r6, [r1, #8]
  401998:	605a      	str	r2, [r3, #4]
  40199a:	f000 f9f1 	bl	401d80 <__malloc_unlock>
  40199e:	3408      	adds	r4, #8
  4019a0:	4620      	mov	r0, r4
  4019a2:	b003      	add	sp, #12
  4019a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019a8:	2400      	movs	r4, #0
  4019aa:	230c      	movs	r3, #12
  4019ac:	4620      	mov	r0, r4
  4019ae:	602b      	str	r3, [r5, #0]
  4019b0:	b003      	add	sp, #12
  4019b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019b6:	2040      	movs	r0, #64	; 0x40
  4019b8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4019bc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4019c0:	e74a      	b.n	401858 <_malloc_r+0x44>
  4019c2:	4423      	add	r3, r4
  4019c4:	68e1      	ldr	r1, [r4, #12]
  4019c6:	685a      	ldr	r2, [r3, #4]
  4019c8:	68a6      	ldr	r6, [r4, #8]
  4019ca:	f042 0201 	orr.w	r2, r2, #1
  4019ce:	60f1      	str	r1, [r6, #12]
  4019d0:	4628      	mov	r0, r5
  4019d2:	608e      	str	r6, [r1, #8]
  4019d4:	605a      	str	r2, [r3, #4]
  4019d6:	f000 f9d3 	bl	401d80 <__malloc_unlock>
  4019da:	3408      	adds	r4, #8
  4019dc:	4620      	mov	r0, r4
  4019de:	b003      	add	sp, #12
  4019e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019e4:	4423      	add	r3, r4
  4019e6:	4628      	mov	r0, r5
  4019e8:	685a      	ldr	r2, [r3, #4]
  4019ea:	f042 0201 	orr.w	r2, r2, #1
  4019ee:	605a      	str	r2, [r3, #4]
  4019f0:	f000 f9c6 	bl	401d80 <__malloc_unlock>
  4019f4:	3408      	adds	r4, #8
  4019f6:	4620      	mov	r0, r4
  4019f8:	b003      	add	sp, #12
  4019fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019fe:	68bc      	ldr	r4, [r7, #8]
  401a00:	6863      	ldr	r3, [r4, #4]
  401a02:	f023 0803 	bic.w	r8, r3, #3
  401a06:	45b0      	cmp	r8, r6
  401a08:	d304      	bcc.n	401a14 <_malloc_r+0x200>
  401a0a:	eba8 0306 	sub.w	r3, r8, r6
  401a0e:	2b0f      	cmp	r3, #15
  401a10:	f300 8085 	bgt.w	401b1e <_malloc_r+0x30a>
  401a14:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401b70 <_malloc_r+0x35c>
  401a18:	4b50      	ldr	r3, [pc, #320]	; (401b5c <_malloc_r+0x348>)
  401a1a:	f8d9 2000 	ldr.w	r2, [r9]
  401a1e:	681b      	ldr	r3, [r3, #0]
  401a20:	3201      	adds	r2, #1
  401a22:	4433      	add	r3, r6
  401a24:	eb04 0a08 	add.w	sl, r4, r8
  401a28:	f000 8155 	beq.w	401cd6 <_malloc_r+0x4c2>
  401a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401a30:	330f      	adds	r3, #15
  401a32:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401a36:	f02b 0b0f 	bic.w	fp, fp, #15
  401a3a:	4659      	mov	r1, fp
  401a3c:	4628      	mov	r0, r5
  401a3e:	f000 f9a5 	bl	401d8c <_sbrk_r>
  401a42:	1c41      	adds	r1, r0, #1
  401a44:	4602      	mov	r2, r0
  401a46:	f000 80fc 	beq.w	401c42 <_malloc_r+0x42e>
  401a4a:	4582      	cmp	sl, r0
  401a4c:	f200 80f7 	bhi.w	401c3e <_malloc_r+0x42a>
  401a50:	4b43      	ldr	r3, [pc, #268]	; (401b60 <_malloc_r+0x34c>)
  401a52:	6819      	ldr	r1, [r3, #0]
  401a54:	4459      	add	r1, fp
  401a56:	6019      	str	r1, [r3, #0]
  401a58:	f000 814d 	beq.w	401cf6 <_malloc_r+0x4e2>
  401a5c:	f8d9 0000 	ldr.w	r0, [r9]
  401a60:	3001      	adds	r0, #1
  401a62:	bf1b      	ittet	ne
  401a64:	eba2 0a0a 	subne.w	sl, r2, sl
  401a68:	4451      	addne	r1, sl
  401a6a:	f8c9 2000 	streq.w	r2, [r9]
  401a6e:	6019      	strne	r1, [r3, #0]
  401a70:	f012 0107 	ands.w	r1, r2, #7
  401a74:	f000 8115 	beq.w	401ca2 <_malloc_r+0x48e>
  401a78:	f1c1 0008 	rsb	r0, r1, #8
  401a7c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401a80:	4402      	add	r2, r0
  401a82:	3108      	adds	r1, #8
  401a84:	eb02 090b 	add.w	r9, r2, fp
  401a88:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401a8c:	eba1 0909 	sub.w	r9, r1, r9
  401a90:	4649      	mov	r1, r9
  401a92:	4628      	mov	r0, r5
  401a94:	9301      	str	r3, [sp, #4]
  401a96:	9200      	str	r2, [sp, #0]
  401a98:	f000 f978 	bl	401d8c <_sbrk_r>
  401a9c:	1c43      	adds	r3, r0, #1
  401a9e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401aa2:	f000 8143 	beq.w	401d2c <_malloc_r+0x518>
  401aa6:	1a80      	subs	r0, r0, r2
  401aa8:	4448      	add	r0, r9
  401aaa:	f040 0001 	orr.w	r0, r0, #1
  401aae:	6819      	ldr	r1, [r3, #0]
  401ab0:	60ba      	str	r2, [r7, #8]
  401ab2:	4449      	add	r1, r9
  401ab4:	42bc      	cmp	r4, r7
  401ab6:	6050      	str	r0, [r2, #4]
  401ab8:	6019      	str	r1, [r3, #0]
  401aba:	d017      	beq.n	401aec <_malloc_r+0x2d8>
  401abc:	f1b8 0f0f 	cmp.w	r8, #15
  401ac0:	f240 80fb 	bls.w	401cba <_malloc_r+0x4a6>
  401ac4:	6860      	ldr	r0, [r4, #4]
  401ac6:	f1a8 020c 	sub.w	r2, r8, #12
  401aca:	f022 0207 	bic.w	r2, r2, #7
  401ace:	eb04 0e02 	add.w	lr, r4, r2
  401ad2:	f000 0001 	and.w	r0, r0, #1
  401ad6:	f04f 0c05 	mov.w	ip, #5
  401ada:	4310      	orrs	r0, r2
  401adc:	2a0f      	cmp	r2, #15
  401ade:	6060      	str	r0, [r4, #4]
  401ae0:	f8ce c004 	str.w	ip, [lr, #4]
  401ae4:	f8ce c008 	str.w	ip, [lr, #8]
  401ae8:	f200 8117 	bhi.w	401d1a <_malloc_r+0x506>
  401aec:	4b1d      	ldr	r3, [pc, #116]	; (401b64 <_malloc_r+0x350>)
  401aee:	68bc      	ldr	r4, [r7, #8]
  401af0:	681a      	ldr	r2, [r3, #0]
  401af2:	4291      	cmp	r1, r2
  401af4:	bf88      	it	hi
  401af6:	6019      	strhi	r1, [r3, #0]
  401af8:	4b1b      	ldr	r3, [pc, #108]	; (401b68 <_malloc_r+0x354>)
  401afa:	681a      	ldr	r2, [r3, #0]
  401afc:	4291      	cmp	r1, r2
  401afe:	6862      	ldr	r2, [r4, #4]
  401b00:	bf88      	it	hi
  401b02:	6019      	strhi	r1, [r3, #0]
  401b04:	f022 0203 	bic.w	r2, r2, #3
  401b08:	4296      	cmp	r6, r2
  401b0a:	eba2 0306 	sub.w	r3, r2, r6
  401b0e:	d801      	bhi.n	401b14 <_malloc_r+0x300>
  401b10:	2b0f      	cmp	r3, #15
  401b12:	dc04      	bgt.n	401b1e <_malloc_r+0x30a>
  401b14:	4628      	mov	r0, r5
  401b16:	f000 f933 	bl	401d80 <__malloc_unlock>
  401b1a:	2400      	movs	r4, #0
  401b1c:	e740      	b.n	4019a0 <_malloc_r+0x18c>
  401b1e:	19a2      	adds	r2, r4, r6
  401b20:	f043 0301 	orr.w	r3, r3, #1
  401b24:	f046 0601 	orr.w	r6, r6, #1
  401b28:	6066      	str	r6, [r4, #4]
  401b2a:	4628      	mov	r0, r5
  401b2c:	60ba      	str	r2, [r7, #8]
  401b2e:	6053      	str	r3, [r2, #4]
  401b30:	f000 f926 	bl	401d80 <__malloc_unlock>
  401b34:	3408      	adds	r4, #8
  401b36:	4620      	mov	r0, r4
  401b38:	b003      	add	sp, #12
  401b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b3e:	2b14      	cmp	r3, #20
  401b40:	d971      	bls.n	401c26 <_malloc_r+0x412>
  401b42:	2b54      	cmp	r3, #84	; 0x54
  401b44:	f200 80a3 	bhi.w	401c8e <_malloc_r+0x47a>
  401b48:	0b33      	lsrs	r3, r6, #12
  401b4a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401b4e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401b52:	00c3      	lsls	r3, r0, #3
  401b54:	e680      	b.n	401858 <_malloc_r+0x44>
  401b56:	bf00      	nop
  401b58:	20000444 	.word	0x20000444
  401b5c:	20000924 	.word	0x20000924
  401b60:	200008f4 	.word	0x200008f4
  401b64:	2000091c 	.word	0x2000091c
  401b68:	20000920 	.word	0x20000920
  401b6c:	2000044c 	.word	0x2000044c
  401b70:	2000084c 	.word	0x2000084c
  401b74:	0a5a      	lsrs	r2, r3, #9
  401b76:	2a04      	cmp	r2, #4
  401b78:	d95b      	bls.n	401c32 <_malloc_r+0x41e>
  401b7a:	2a14      	cmp	r2, #20
  401b7c:	f200 80ae 	bhi.w	401cdc <_malloc_r+0x4c8>
  401b80:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401b84:	00c9      	lsls	r1, r1, #3
  401b86:	325b      	adds	r2, #91	; 0x5b
  401b88:	eb07 0c01 	add.w	ip, r7, r1
  401b8c:	5879      	ldr	r1, [r7, r1]
  401b8e:	f1ac 0c08 	sub.w	ip, ip, #8
  401b92:	458c      	cmp	ip, r1
  401b94:	f000 8088 	beq.w	401ca8 <_malloc_r+0x494>
  401b98:	684a      	ldr	r2, [r1, #4]
  401b9a:	f022 0203 	bic.w	r2, r2, #3
  401b9e:	4293      	cmp	r3, r2
  401ba0:	d273      	bcs.n	401c8a <_malloc_r+0x476>
  401ba2:	6889      	ldr	r1, [r1, #8]
  401ba4:	458c      	cmp	ip, r1
  401ba6:	d1f7      	bne.n	401b98 <_malloc_r+0x384>
  401ba8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401bac:	687b      	ldr	r3, [r7, #4]
  401bae:	60e2      	str	r2, [r4, #12]
  401bb0:	f8c4 c008 	str.w	ip, [r4, #8]
  401bb4:	6094      	str	r4, [r2, #8]
  401bb6:	f8cc 400c 	str.w	r4, [ip, #12]
  401bba:	e68f      	b.n	4018dc <_malloc_r+0xc8>
  401bbc:	19a1      	adds	r1, r4, r6
  401bbe:	f046 0c01 	orr.w	ip, r6, #1
  401bc2:	f042 0601 	orr.w	r6, r2, #1
  401bc6:	f8c4 c004 	str.w	ip, [r4, #4]
  401bca:	4628      	mov	r0, r5
  401bcc:	6179      	str	r1, [r7, #20]
  401bce:	6139      	str	r1, [r7, #16]
  401bd0:	f8c1 e00c 	str.w	lr, [r1, #12]
  401bd4:	f8c1 e008 	str.w	lr, [r1, #8]
  401bd8:	604e      	str	r6, [r1, #4]
  401bda:	50e2      	str	r2, [r4, r3]
  401bdc:	f000 f8d0 	bl	401d80 <__malloc_unlock>
  401be0:	3408      	adds	r4, #8
  401be2:	e6dd      	b.n	4019a0 <_malloc_r+0x18c>
  401be4:	687b      	ldr	r3, [r7, #4]
  401be6:	e679      	b.n	4018dc <_malloc_r+0xc8>
  401be8:	f108 0801 	add.w	r8, r8, #1
  401bec:	f018 0f03 	tst.w	r8, #3
  401bf0:	f10c 0c08 	add.w	ip, ip, #8
  401bf4:	f47f ae85 	bne.w	401902 <_malloc_r+0xee>
  401bf8:	e02d      	b.n	401c56 <_malloc_r+0x442>
  401bfa:	68dc      	ldr	r4, [r3, #12]
  401bfc:	42a3      	cmp	r3, r4
  401bfe:	bf08      	it	eq
  401c00:	3002      	addeq	r0, #2
  401c02:	f43f ae3e 	beq.w	401882 <_malloc_r+0x6e>
  401c06:	e6bb      	b.n	401980 <_malloc_r+0x16c>
  401c08:	4419      	add	r1, r3
  401c0a:	461c      	mov	r4, r3
  401c0c:	684a      	ldr	r2, [r1, #4]
  401c0e:	68db      	ldr	r3, [r3, #12]
  401c10:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401c14:	f042 0201 	orr.w	r2, r2, #1
  401c18:	604a      	str	r2, [r1, #4]
  401c1a:	4628      	mov	r0, r5
  401c1c:	60f3      	str	r3, [r6, #12]
  401c1e:	609e      	str	r6, [r3, #8]
  401c20:	f000 f8ae 	bl	401d80 <__malloc_unlock>
  401c24:	e6bc      	b.n	4019a0 <_malloc_r+0x18c>
  401c26:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  401c2a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  401c2e:	00c3      	lsls	r3, r0, #3
  401c30:	e612      	b.n	401858 <_malloc_r+0x44>
  401c32:	099a      	lsrs	r2, r3, #6
  401c34:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401c38:	00c9      	lsls	r1, r1, #3
  401c3a:	3238      	adds	r2, #56	; 0x38
  401c3c:	e7a4      	b.n	401b88 <_malloc_r+0x374>
  401c3e:	42bc      	cmp	r4, r7
  401c40:	d054      	beq.n	401cec <_malloc_r+0x4d8>
  401c42:	68bc      	ldr	r4, [r7, #8]
  401c44:	6862      	ldr	r2, [r4, #4]
  401c46:	f022 0203 	bic.w	r2, r2, #3
  401c4a:	e75d      	b.n	401b08 <_malloc_r+0x2f4>
  401c4c:	f859 3908 	ldr.w	r3, [r9], #-8
  401c50:	4599      	cmp	r9, r3
  401c52:	f040 8086 	bne.w	401d62 <_malloc_r+0x54e>
  401c56:	f010 0f03 	tst.w	r0, #3
  401c5a:	f100 30ff 	add.w	r0, r0, #4294967295
  401c5e:	d1f5      	bne.n	401c4c <_malloc_r+0x438>
  401c60:	687b      	ldr	r3, [r7, #4]
  401c62:	ea23 0304 	bic.w	r3, r3, r4
  401c66:	607b      	str	r3, [r7, #4]
  401c68:	0064      	lsls	r4, r4, #1
  401c6a:	429c      	cmp	r4, r3
  401c6c:	f63f aec7 	bhi.w	4019fe <_malloc_r+0x1ea>
  401c70:	2c00      	cmp	r4, #0
  401c72:	f43f aec4 	beq.w	4019fe <_malloc_r+0x1ea>
  401c76:	421c      	tst	r4, r3
  401c78:	4640      	mov	r0, r8
  401c7a:	f47f ae3e 	bne.w	4018fa <_malloc_r+0xe6>
  401c7e:	0064      	lsls	r4, r4, #1
  401c80:	421c      	tst	r4, r3
  401c82:	f100 0004 	add.w	r0, r0, #4
  401c86:	d0fa      	beq.n	401c7e <_malloc_r+0x46a>
  401c88:	e637      	b.n	4018fa <_malloc_r+0xe6>
  401c8a:	468c      	mov	ip, r1
  401c8c:	e78c      	b.n	401ba8 <_malloc_r+0x394>
  401c8e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401c92:	d815      	bhi.n	401cc0 <_malloc_r+0x4ac>
  401c94:	0bf3      	lsrs	r3, r6, #15
  401c96:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401c9a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  401c9e:	00c3      	lsls	r3, r0, #3
  401ca0:	e5da      	b.n	401858 <_malloc_r+0x44>
  401ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401ca6:	e6ed      	b.n	401a84 <_malloc_r+0x270>
  401ca8:	687b      	ldr	r3, [r7, #4]
  401caa:	1092      	asrs	r2, r2, #2
  401cac:	2101      	movs	r1, #1
  401cae:	fa01 f202 	lsl.w	r2, r1, r2
  401cb2:	4313      	orrs	r3, r2
  401cb4:	607b      	str	r3, [r7, #4]
  401cb6:	4662      	mov	r2, ip
  401cb8:	e779      	b.n	401bae <_malloc_r+0x39a>
  401cba:	2301      	movs	r3, #1
  401cbc:	6053      	str	r3, [r2, #4]
  401cbe:	e729      	b.n	401b14 <_malloc_r+0x300>
  401cc0:	f240 5254 	movw	r2, #1364	; 0x554
  401cc4:	4293      	cmp	r3, r2
  401cc6:	d822      	bhi.n	401d0e <_malloc_r+0x4fa>
  401cc8:	0cb3      	lsrs	r3, r6, #18
  401cca:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  401cce:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  401cd2:	00c3      	lsls	r3, r0, #3
  401cd4:	e5c0      	b.n	401858 <_malloc_r+0x44>
  401cd6:	f103 0b10 	add.w	fp, r3, #16
  401cda:	e6ae      	b.n	401a3a <_malloc_r+0x226>
  401cdc:	2a54      	cmp	r2, #84	; 0x54
  401cde:	d829      	bhi.n	401d34 <_malloc_r+0x520>
  401ce0:	0b1a      	lsrs	r2, r3, #12
  401ce2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401ce6:	00c9      	lsls	r1, r1, #3
  401ce8:	326e      	adds	r2, #110	; 0x6e
  401cea:	e74d      	b.n	401b88 <_malloc_r+0x374>
  401cec:	4b20      	ldr	r3, [pc, #128]	; (401d70 <_malloc_r+0x55c>)
  401cee:	6819      	ldr	r1, [r3, #0]
  401cf0:	4459      	add	r1, fp
  401cf2:	6019      	str	r1, [r3, #0]
  401cf4:	e6b2      	b.n	401a5c <_malloc_r+0x248>
  401cf6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  401cfa:	2800      	cmp	r0, #0
  401cfc:	f47f aeae 	bne.w	401a5c <_malloc_r+0x248>
  401d00:	eb08 030b 	add.w	r3, r8, fp
  401d04:	68ba      	ldr	r2, [r7, #8]
  401d06:	f043 0301 	orr.w	r3, r3, #1
  401d0a:	6053      	str	r3, [r2, #4]
  401d0c:	e6ee      	b.n	401aec <_malloc_r+0x2d8>
  401d0e:	207f      	movs	r0, #127	; 0x7f
  401d10:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  401d14:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  401d18:	e59e      	b.n	401858 <_malloc_r+0x44>
  401d1a:	f104 0108 	add.w	r1, r4, #8
  401d1e:	4628      	mov	r0, r5
  401d20:	9300      	str	r3, [sp, #0]
  401d22:	f7ff fc29 	bl	401578 <_free_r>
  401d26:	9b00      	ldr	r3, [sp, #0]
  401d28:	6819      	ldr	r1, [r3, #0]
  401d2a:	e6df      	b.n	401aec <_malloc_r+0x2d8>
  401d2c:	2001      	movs	r0, #1
  401d2e:	f04f 0900 	mov.w	r9, #0
  401d32:	e6bc      	b.n	401aae <_malloc_r+0x29a>
  401d34:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401d38:	d805      	bhi.n	401d46 <_malloc_r+0x532>
  401d3a:	0bda      	lsrs	r2, r3, #15
  401d3c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  401d40:	00c9      	lsls	r1, r1, #3
  401d42:	3277      	adds	r2, #119	; 0x77
  401d44:	e720      	b.n	401b88 <_malloc_r+0x374>
  401d46:	f240 5154 	movw	r1, #1364	; 0x554
  401d4a:	428a      	cmp	r2, r1
  401d4c:	d805      	bhi.n	401d5a <_malloc_r+0x546>
  401d4e:	0c9a      	lsrs	r2, r3, #18
  401d50:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  401d54:	00c9      	lsls	r1, r1, #3
  401d56:	327c      	adds	r2, #124	; 0x7c
  401d58:	e716      	b.n	401b88 <_malloc_r+0x374>
  401d5a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  401d5e:	227e      	movs	r2, #126	; 0x7e
  401d60:	e712      	b.n	401b88 <_malloc_r+0x374>
  401d62:	687b      	ldr	r3, [r7, #4]
  401d64:	e780      	b.n	401c68 <_malloc_r+0x454>
  401d66:	08f0      	lsrs	r0, r6, #3
  401d68:	f106 0308 	add.w	r3, r6, #8
  401d6c:	e600      	b.n	401970 <_malloc_r+0x15c>
  401d6e:	bf00      	nop
  401d70:	200008f4 	.word	0x200008f4

00401d74 <__malloc_lock>:
  401d74:	4801      	ldr	r0, [pc, #4]	; (401d7c <__malloc_lock+0x8>)
  401d76:	f7ff bd13 	b.w	4017a0 <__retarget_lock_acquire_recursive>
  401d7a:	bf00      	nop
  401d7c:	200190a8 	.word	0x200190a8

00401d80 <__malloc_unlock>:
  401d80:	4801      	ldr	r0, [pc, #4]	; (401d88 <__malloc_unlock+0x8>)
  401d82:	f7ff bd0f 	b.w	4017a4 <__retarget_lock_release_recursive>
  401d86:	bf00      	nop
  401d88:	200190a8 	.word	0x200190a8

00401d8c <_sbrk_r>:
  401d8c:	b538      	push	{r3, r4, r5, lr}
  401d8e:	4c07      	ldr	r4, [pc, #28]	; (401dac <_sbrk_r+0x20>)
  401d90:	2300      	movs	r3, #0
  401d92:	4605      	mov	r5, r0
  401d94:	4608      	mov	r0, r1
  401d96:	6023      	str	r3, [r4, #0]
  401d98:	f7ff f8d8 	bl	400f4c <_sbrk>
  401d9c:	1c43      	adds	r3, r0, #1
  401d9e:	d000      	beq.n	401da2 <_sbrk_r+0x16>
  401da0:	bd38      	pop	{r3, r4, r5, pc}
  401da2:	6823      	ldr	r3, [r4, #0]
  401da4:	2b00      	cmp	r3, #0
  401da6:	d0fb      	beq.n	401da0 <_sbrk_r+0x14>
  401da8:	602b      	str	r3, [r5, #0]
  401daa:	bd38      	pop	{r3, r4, r5, pc}
  401dac:	200190bc 	.word	0x200190bc

00401db0 <__sread>:
  401db0:	b510      	push	{r4, lr}
  401db2:	460c      	mov	r4, r1
  401db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401db8:	f000 f954 	bl	402064 <_read_r>
  401dbc:	2800      	cmp	r0, #0
  401dbe:	db03      	blt.n	401dc8 <__sread+0x18>
  401dc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  401dc2:	4403      	add	r3, r0
  401dc4:	6523      	str	r3, [r4, #80]	; 0x50
  401dc6:	bd10      	pop	{r4, pc}
  401dc8:	89a3      	ldrh	r3, [r4, #12]
  401dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  401dce:	81a3      	strh	r3, [r4, #12]
  401dd0:	bd10      	pop	{r4, pc}
  401dd2:	bf00      	nop

00401dd4 <__swrite>:
  401dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401dd8:	4616      	mov	r6, r2
  401dda:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  401dde:	461f      	mov	r7, r3
  401de0:	05d3      	lsls	r3, r2, #23
  401de2:	460c      	mov	r4, r1
  401de4:	4605      	mov	r5, r0
  401de6:	d507      	bpl.n	401df8 <__swrite+0x24>
  401de8:	2200      	movs	r2, #0
  401dea:	2302      	movs	r3, #2
  401dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401df0:	f000 f922 	bl	402038 <_lseek_r>
  401df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  401df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401dfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  401e00:	81a2      	strh	r2, [r4, #12]
  401e02:	463b      	mov	r3, r7
  401e04:	4632      	mov	r2, r6
  401e06:	4628      	mov	r0, r5
  401e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401e0c:	f000 b814 	b.w	401e38 <_write_r>

00401e10 <__sseek>:
  401e10:	b510      	push	{r4, lr}
  401e12:	460c      	mov	r4, r1
  401e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401e18:	f000 f90e 	bl	402038 <_lseek_r>
  401e1c:	89a3      	ldrh	r3, [r4, #12]
  401e1e:	1c42      	adds	r2, r0, #1
  401e20:	bf0e      	itee	eq
  401e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  401e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  401e2a:	6520      	strne	r0, [r4, #80]	; 0x50
  401e2c:	81a3      	strh	r3, [r4, #12]
  401e2e:	bd10      	pop	{r4, pc}

00401e30 <__sclose>:
  401e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401e34:	f000 b878 	b.w	401f28 <_close_r>

00401e38 <_write_r>:
  401e38:	b570      	push	{r4, r5, r6, lr}
  401e3a:	460d      	mov	r5, r1
  401e3c:	4c08      	ldr	r4, [pc, #32]	; (401e60 <_write_r+0x28>)
  401e3e:	4611      	mov	r1, r2
  401e40:	4606      	mov	r6, r0
  401e42:	461a      	mov	r2, r3
  401e44:	4628      	mov	r0, r5
  401e46:	2300      	movs	r3, #0
  401e48:	6023      	str	r3, [r4, #0]
  401e4a:	f7fe fbbf 	bl	4005cc <_write>
  401e4e:	1c43      	adds	r3, r0, #1
  401e50:	d000      	beq.n	401e54 <_write_r+0x1c>
  401e52:	bd70      	pop	{r4, r5, r6, pc}
  401e54:	6823      	ldr	r3, [r4, #0]
  401e56:	2b00      	cmp	r3, #0
  401e58:	d0fb      	beq.n	401e52 <_write_r+0x1a>
  401e5a:	6033      	str	r3, [r6, #0]
  401e5c:	bd70      	pop	{r4, r5, r6, pc}
  401e5e:	bf00      	nop
  401e60:	200190bc 	.word	0x200190bc

00401e64 <__register_exitproc>:
  401e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401e68:	4d2c      	ldr	r5, [pc, #176]	; (401f1c <__register_exitproc+0xb8>)
  401e6a:	4606      	mov	r6, r0
  401e6c:	6828      	ldr	r0, [r5, #0]
  401e6e:	4698      	mov	r8, r3
  401e70:	460f      	mov	r7, r1
  401e72:	4691      	mov	r9, r2
  401e74:	f7ff fc94 	bl	4017a0 <__retarget_lock_acquire_recursive>
  401e78:	4b29      	ldr	r3, [pc, #164]	; (401f20 <__register_exitproc+0xbc>)
  401e7a:	681c      	ldr	r4, [r3, #0]
  401e7c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401e80:	2b00      	cmp	r3, #0
  401e82:	d03e      	beq.n	401f02 <__register_exitproc+0x9e>
  401e84:	685a      	ldr	r2, [r3, #4]
  401e86:	2a1f      	cmp	r2, #31
  401e88:	dc1c      	bgt.n	401ec4 <__register_exitproc+0x60>
  401e8a:	f102 0e01 	add.w	lr, r2, #1
  401e8e:	b176      	cbz	r6, 401eae <__register_exitproc+0x4a>
  401e90:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401e94:	2401      	movs	r4, #1
  401e96:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401e9a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401e9e:	4094      	lsls	r4, r2
  401ea0:	4320      	orrs	r0, r4
  401ea2:	2e02      	cmp	r6, #2
  401ea4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401ea8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401eac:	d023      	beq.n	401ef6 <__register_exitproc+0x92>
  401eae:	3202      	adds	r2, #2
  401eb0:	f8c3 e004 	str.w	lr, [r3, #4]
  401eb4:	6828      	ldr	r0, [r5, #0]
  401eb6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401eba:	f7ff fc73 	bl	4017a4 <__retarget_lock_release_recursive>
  401ebe:	2000      	movs	r0, #0
  401ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401ec4:	4b17      	ldr	r3, [pc, #92]	; (401f24 <__register_exitproc+0xc0>)
  401ec6:	b30b      	cbz	r3, 401f0c <__register_exitproc+0xa8>
  401ec8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401ecc:	f7ff fc9a 	bl	401804 <malloc>
  401ed0:	4603      	mov	r3, r0
  401ed2:	b1d8      	cbz	r0, 401f0c <__register_exitproc+0xa8>
  401ed4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401ed8:	6002      	str	r2, [r0, #0]
  401eda:	2100      	movs	r1, #0
  401edc:	6041      	str	r1, [r0, #4]
  401ede:	460a      	mov	r2, r1
  401ee0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401ee4:	f04f 0e01 	mov.w	lr, #1
  401ee8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401eec:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401ef0:	2e00      	cmp	r6, #0
  401ef2:	d0dc      	beq.n	401eae <__register_exitproc+0x4a>
  401ef4:	e7cc      	b.n	401e90 <__register_exitproc+0x2c>
  401ef6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401efa:	430c      	orrs	r4, r1
  401efc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401f00:	e7d5      	b.n	401eae <__register_exitproc+0x4a>
  401f02:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401f06:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401f0a:	e7bb      	b.n	401e84 <__register_exitproc+0x20>
  401f0c:	6828      	ldr	r0, [r5, #0]
  401f0e:	f7ff fc49 	bl	4017a4 <__retarget_lock_release_recursive>
  401f12:	f04f 30ff 	mov.w	r0, #4294967295
  401f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401f1a:	bf00      	nop
  401f1c:	20000440 	.word	0x20000440
  401f20:	00402090 	.word	0x00402090
  401f24:	00401805 	.word	0x00401805

00401f28 <_close_r>:
  401f28:	b538      	push	{r3, r4, r5, lr}
  401f2a:	4c07      	ldr	r4, [pc, #28]	; (401f48 <_close_r+0x20>)
  401f2c:	2300      	movs	r3, #0
  401f2e:	4605      	mov	r5, r0
  401f30:	4608      	mov	r0, r1
  401f32:	6023      	str	r3, [r4, #0]
  401f34:	f7ff f826 	bl	400f84 <_close>
  401f38:	1c43      	adds	r3, r0, #1
  401f3a:	d000      	beq.n	401f3e <_close_r+0x16>
  401f3c:	bd38      	pop	{r3, r4, r5, pc}
  401f3e:	6823      	ldr	r3, [r4, #0]
  401f40:	2b00      	cmp	r3, #0
  401f42:	d0fb      	beq.n	401f3c <_close_r+0x14>
  401f44:	602b      	str	r3, [r5, #0]
  401f46:	bd38      	pop	{r3, r4, r5, pc}
  401f48:	200190bc 	.word	0x200190bc

00401f4c <_fclose_r>:
  401f4c:	b570      	push	{r4, r5, r6, lr}
  401f4e:	b159      	cbz	r1, 401f68 <_fclose_r+0x1c>
  401f50:	4605      	mov	r5, r0
  401f52:	460c      	mov	r4, r1
  401f54:	b110      	cbz	r0, 401f5c <_fclose_r+0x10>
  401f56:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401f58:	2b00      	cmp	r3, #0
  401f5a:	d03c      	beq.n	401fd6 <_fclose_r+0x8a>
  401f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401f5e:	07d8      	lsls	r0, r3, #31
  401f60:	d505      	bpl.n	401f6e <_fclose_r+0x22>
  401f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401f66:	b92b      	cbnz	r3, 401f74 <_fclose_r+0x28>
  401f68:	2600      	movs	r6, #0
  401f6a:	4630      	mov	r0, r6
  401f6c:	bd70      	pop	{r4, r5, r6, pc}
  401f6e:	89a3      	ldrh	r3, [r4, #12]
  401f70:	0599      	lsls	r1, r3, #22
  401f72:	d53c      	bpl.n	401fee <_fclose_r+0xa2>
  401f74:	4621      	mov	r1, r4
  401f76:	4628      	mov	r0, r5
  401f78:	f7ff f964 	bl	401244 <__sflush_r>
  401f7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401f7e:	4606      	mov	r6, r0
  401f80:	b133      	cbz	r3, 401f90 <_fclose_r+0x44>
  401f82:	69e1      	ldr	r1, [r4, #28]
  401f84:	4628      	mov	r0, r5
  401f86:	4798      	blx	r3
  401f88:	2800      	cmp	r0, #0
  401f8a:	bfb8      	it	lt
  401f8c:	f04f 36ff 	movlt.w	r6, #4294967295
  401f90:	89a3      	ldrh	r3, [r4, #12]
  401f92:	061a      	lsls	r2, r3, #24
  401f94:	d422      	bmi.n	401fdc <_fclose_r+0x90>
  401f96:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401f98:	b141      	cbz	r1, 401fac <_fclose_r+0x60>
  401f9a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401f9e:	4299      	cmp	r1, r3
  401fa0:	d002      	beq.n	401fa8 <_fclose_r+0x5c>
  401fa2:	4628      	mov	r0, r5
  401fa4:	f7ff fae8 	bl	401578 <_free_r>
  401fa8:	2300      	movs	r3, #0
  401faa:	6323      	str	r3, [r4, #48]	; 0x30
  401fac:	6c61      	ldr	r1, [r4, #68]	; 0x44
  401fae:	b121      	cbz	r1, 401fba <_fclose_r+0x6e>
  401fb0:	4628      	mov	r0, r5
  401fb2:	f7ff fae1 	bl	401578 <_free_r>
  401fb6:	2300      	movs	r3, #0
  401fb8:	6463      	str	r3, [r4, #68]	; 0x44
  401fba:	f7ff fa67 	bl	40148c <__sfp_lock_acquire>
  401fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
  401fc0:	2200      	movs	r2, #0
  401fc2:	07db      	lsls	r3, r3, #31
  401fc4:	81a2      	strh	r2, [r4, #12]
  401fc6:	d50e      	bpl.n	401fe6 <_fclose_r+0x9a>
  401fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401fca:	f7ff fbe7 	bl	40179c <__retarget_lock_close_recursive>
  401fce:	f7ff fa63 	bl	401498 <__sfp_lock_release>
  401fd2:	4630      	mov	r0, r6
  401fd4:	bd70      	pop	{r4, r5, r6, pc}
  401fd6:	f7ff fa2d 	bl	401434 <__sinit>
  401fda:	e7bf      	b.n	401f5c <_fclose_r+0x10>
  401fdc:	6921      	ldr	r1, [r4, #16]
  401fde:	4628      	mov	r0, r5
  401fe0:	f7ff faca 	bl	401578 <_free_r>
  401fe4:	e7d7      	b.n	401f96 <_fclose_r+0x4a>
  401fe6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401fe8:	f7ff fbdc 	bl	4017a4 <__retarget_lock_release_recursive>
  401fec:	e7ec      	b.n	401fc8 <_fclose_r+0x7c>
  401fee:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401ff0:	f7ff fbd6 	bl	4017a0 <__retarget_lock_acquire_recursive>
  401ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401ff8:	2b00      	cmp	r3, #0
  401ffa:	d1bb      	bne.n	401f74 <_fclose_r+0x28>
  401ffc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  401ffe:	f016 0601 	ands.w	r6, r6, #1
  402002:	d1b1      	bne.n	401f68 <_fclose_r+0x1c>
  402004:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402006:	f7ff fbcd 	bl	4017a4 <__retarget_lock_release_recursive>
  40200a:	4630      	mov	r0, r6
  40200c:	bd70      	pop	{r4, r5, r6, pc}
  40200e:	bf00      	nop

00402010 <_fstat_r>:
  402010:	b538      	push	{r3, r4, r5, lr}
  402012:	460b      	mov	r3, r1
  402014:	4c07      	ldr	r4, [pc, #28]	; (402034 <_fstat_r+0x24>)
  402016:	4605      	mov	r5, r0
  402018:	4611      	mov	r1, r2
  40201a:	4618      	mov	r0, r3
  40201c:	2300      	movs	r3, #0
  40201e:	6023      	str	r3, [r4, #0]
  402020:	f7fe ffb3 	bl	400f8a <_fstat>
  402024:	1c43      	adds	r3, r0, #1
  402026:	d000      	beq.n	40202a <_fstat_r+0x1a>
  402028:	bd38      	pop	{r3, r4, r5, pc}
  40202a:	6823      	ldr	r3, [r4, #0]
  40202c:	2b00      	cmp	r3, #0
  40202e:	d0fb      	beq.n	402028 <_fstat_r+0x18>
  402030:	602b      	str	r3, [r5, #0]
  402032:	bd38      	pop	{r3, r4, r5, pc}
  402034:	200190bc 	.word	0x200190bc

00402038 <_lseek_r>:
  402038:	b570      	push	{r4, r5, r6, lr}
  40203a:	460d      	mov	r5, r1
  40203c:	4c08      	ldr	r4, [pc, #32]	; (402060 <_lseek_r+0x28>)
  40203e:	4611      	mov	r1, r2
  402040:	4606      	mov	r6, r0
  402042:	461a      	mov	r2, r3
  402044:	4628      	mov	r0, r5
  402046:	2300      	movs	r3, #0
  402048:	6023      	str	r3, [r4, #0]
  40204a:	f7fe ffa3 	bl	400f94 <_lseek>
  40204e:	1c43      	adds	r3, r0, #1
  402050:	d000      	beq.n	402054 <_lseek_r+0x1c>
  402052:	bd70      	pop	{r4, r5, r6, pc}
  402054:	6823      	ldr	r3, [r4, #0]
  402056:	2b00      	cmp	r3, #0
  402058:	d0fb      	beq.n	402052 <_lseek_r+0x1a>
  40205a:	6033      	str	r3, [r6, #0]
  40205c:	bd70      	pop	{r4, r5, r6, pc}
  40205e:	bf00      	nop
  402060:	200190bc 	.word	0x200190bc

00402064 <_read_r>:
  402064:	b570      	push	{r4, r5, r6, lr}
  402066:	460d      	mov	r5, r1
  402068:	4c08      	ldr	r4, [pc, #32]	; (40208c <_read_r+0x28>)
  40206a:	4611      	mov	r1, r2
  40206c:	4606      	mov	r6, r0
  40206e:	461a      	mov	r2, r3
  402070:	4628      	mov	r0, r5
  402072:	2300      	movs	r3, #0
  402074:	6023      	str	r3, [r4, #0]
  402076:	f7fe fa8b 	bl	400590 <_read>
  40207a:	1c43      	adds	r3, r0, #1
  40207c:	d000      	beq.n	402080 <_read_r+0x1c>
  40207e:	bd70      	pop	{r4, r5, r6, pc}
  402080:	6823      	ldr	r3, [r4, #0]
  402082:	2b00      	cmp	r3, #0
  402084:	d0fb      	beq.n	40207e <_read_r+0x1a>
  402086:	6033      	str	r3, [r6, #0]
  402088:	bd70      	pop	{r4, r5, r6, pc}
  40208a:	bf00      	nop
  40208c:	200190bc 	.word	0x200190bc

00402090 <_global_impure_ptr>:
  402090:	20000018                                ... 

00402094 <_init>:
  402094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402096:	bf00      	nop
  402098:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40209a:	bc08      	pop	{r3}
  40209c:	469e      	mov	lr, r3
  40209e:	4770      	bx	lr

004020a0 <__init_array_start>:
  4020a0:	00401225 	.word	0x00401225

004020a4 <__frame_dummy_init_array_entry>:
  4020a4:	0040011d                                ..@.

004020a8 <_fini>:
  4020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4020aa:	bf00      	nop
  4020ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4020ae:	bc08      	pop	{r3}
  4020b0:	469e      	mov	lr, r3
  4020b2:	4770      	bx	lr

004020b4 <__fini_array_start>:
  4020b4:	004000f9 	.word	0x004000f9

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <g_interrupt_enabled>:
2000000a:	0001                                        ..

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <_impure_ptr>:
20000010:	0018 2000 0000 0000                         ... ....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <__atexit_recursive_mutex>:
20000440:	9098 2001                                   ... 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_sbrk_base>:
2000084c:	ffff ffff                                   ....

20000850 <__malloc_trim_threshold>:
20000850:	0000 0002                                   ....
