
AFEC_EXAMPLE12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023d0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20000000  004023d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00009e0c  2000084c  00402c1c  0002084c  2**2
                  ALLOC
  3 .stack        00003000  2000a658  0040ca28  0002084c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018a31  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003537  00000000  00000000  00039304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000543a  00000000  00000000  0003c83b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ac8  00000000  00000000  00041c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a50  00000000  00000000  0004273d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018bed  00000000  00000000  0004318d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c8ed  00000000  00000000  0005bd7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00065f15  00000000  00000000  00068667  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e38  00000000  00000000  000ce57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 d6 00 20 1d 10 40 00 1b 10 40 00 1b 10 40 00     X.. ..@...@...@.
  400010:	1b 10 40 00 1b 10 40 00 1b 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	1b 10 40 00 1b 10 40 00 00 00 00 00 1b 10 40 00     ..@...@.......@.
  40003c:	1b 10 40 00 1b 10 40 00 1b 10 40 00 1b 10 40 00     ..@...@...@...@.
  40004c:	1b 10 40 00 1b 10 40 00 1b 10 40 00 1b 10 40 00     ..@...@...@...@.
  40005c:	1b 10 40 00 1b 10 40 00 99 0c 40 00 ad 0c 40 00     ..@...@...@...@.
  40006c:	c1 0c 40 00 d5 0c 40 00 e9 0c 40 00 1b 10 40 00     ..@...@...@...@.
  40007c:	1b 10 40 00 1b 10 40 00 1b 10 40 00 1b 10 40 00     ..@...@...@...@.
  40008c:	c9 02 40 00 1b 10 40 00 2d 03 40 00 1b 10 40 00     ..@...@.-.@...@.
  40009c:	1b 10 40 00 1b 10 40 00 1b 10 40 00 1b 10 40 00     ..@...@...@...@.
  4000ac:	1b 10 40 00 1b 10 40 00 1b 10 40 00 9d 0b 40 00     ..@...@...@...@.
  4000bc:	b1 0b 40 00 1b 10 40 00 1b 10 40 00 1b 10 40 00     ..@...@...@...@.
  4000cc:	1b 10 40 00 1b 10 40 00 1b 10 40 00 1b 10 40 00     ..@...@...@...@.
  4000dc:	1b 10 40 00 1b 10 40 00 1b 10 40 00 1b 10 40 00     ..@...@...@...@.
  4000ec:	1b 10 40 00 1b 10 40 00 1b 10 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000084c 	.word	0x2000084c
  400114:	00000000 	.word	0x00000000
  400118:	004023d0 	.word	0x004023d0

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004023d0 	.word	0x004023d0
  400158:	20000850 	.word	0x20000850
  40015c:	004023d0 	.word	0x004023d0
  400160:	00000000 	.word	0x00000000

00400164 <restart>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400164:	4b11      	ldr	r3, [pc, #68]	; (4001ac <restart+0x48>)
  400166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400168:	0fdb      	lsrs	r3, r3, #31
		ioport_set_pin_dir(is_written_pin, IOPORT_DIR_OUTPUT);
}

static void restart(void)
{
	GO_status = ioport_get_pin_level(GO_pin);
  40016a:	4a11      	ldr	r2, [pc, #68]	; (4001b0 <restart+0x4c>)
  40016c:	7013      	strb	r3, [r2, #0]
	if (!GO_status)
  40016e:	7813      	ldrb	r3, [r2, #0]
  400170:	b103      	cbz	r3, 400174 <restart+0x10>
  400172:	4770      	bx	lr
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400174:	4b0d      	ldr	r3, [pc, #52]	; (4001ac <restart+0x48>)
  400176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40017a:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40017c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400180:	631a      	str	r2, [r3, #48]	; 0x30
  400182:	2201      	movs	r2, #1
  400184:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400188:	631a      	str	r2, [r3, #48]	; 0x30
  40018a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  40018e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400192:	631a      	str	r2, [r3, #48]	; 0x30
  400194:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400198:	631a      	str	r2, [r3, #48]	; 0x30
	{
		set_default_pin_levels();
		i = 0;
  40019a:	2300      	movs	r3, #0
  40019c:	4a05      	ldr	r2, [pc, #20]	; (4001b4 <restart+0x50>)
  40019e:	6013      	str	r3, [r2, #0]
		state = SL_READY;
  4001a0:	4a05      	ldr	r2, [pc, #20]	; (4001b8 <restart+0x54>)
  4001a2:	7013      	strb	r3, [r2, #0]
		buffer_full = false;
  4001a4:	4a05      	ldr	r2, [pc, #20]	; (4001bc <restart+0x58>)
  4001a6:	7013      	strb	r3, [r2, #0]
	}
}
  4001a8:	e7e3      	b.n	400172 <restart+0xe>
  4001aa:	bf00      	nop
  4001ac:	400e1200 	.word	0x400e1200
  4001b0:	20000868 	.word	0x20000868
  4001b4:	2000a4ac 	.word	0x2000a4ac
  4001b8:	2000a55c 	.word	0x2000a55c
  4001bc:	20000869 	.word	0x20000869

004001c0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001c2:	b083      	sub	sp, #12
  4001c4:	4605      	mov	r5, r0
  4001c6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4001c8:	2300      	movs	r3, #0
  4001ca:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001cc:	4b18      	ldr	r3, [pc, #96]	; (400230 <usart_serial_getchar+0x70>)
  4001ce:	4298      	cmp	r0, r3
  4001d0:	d00a      	beq.n	4001e8 <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001d2:	4b18      	ldr	r3, [pc, #96]	; (400234 <usart_serial_getchar+0x74>)
  4001d4:	4298      	cmp	r0, r3
  4001d6:	d00f      	beq.n	4001f8 <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001d8:	4b17      	ldr	r3, [pc, #92]	; (400238 <usart_serial_getchar+0x78>)
  4001da:	4298      	cmp	r0, r3
  4001dc:	d014      	beq.n	400208 <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4001de:	4b17      	ldr	r3, [pc, #92]	; (40023c <usart_serial_getchar+0x7c>)
  4001e0:	429d      	cmp	r5, r3
  4001e2:	d01b      	beq.n	40021c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4001e4:	b003      	add	sp, #12
  4001e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4001e8:	461f      	mov	r7, r3
  4001ea:	4e15      	ldr	r6, [pc, #84]	; (400240 <usart_serial_getchar+0x80>)
  4001ec:	4621      	mov	r1, r4
  4001ee:	4638      	mov	r0, r7
  4001f0:	47b0      	blx	r6
  4001f2:	2800      	cmp	r0, #0
  4001f4:	d1fa      	bne.n	4001ec <usart_serial_getchar+0x2c>
  4001f6:	e7f2      	b.n	4001de <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  4001f8:	461e      	mov	r6, r3
  4001fa:	4d11      	ldr	r5, [pc, #68]	; (400240 <usart_serial_getchar+0x80>)
  4001fc:	4621      	mov	r1, r4
  4001fe:	4630      	mov	r0, r6
  400200:	47a8      	blx	r5
  400202:	2800      	cmp	r0, #0
  400204:	d1fa      	bne.n	4001fc <usart_serial_getchar+0x3c>
  400206:	e7ed      	b.n	4001e4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400208:	461e      	mov	r6, r3
  40020a:	4d0e      	ldr	r5, [pc, #56]	; (400244 <usart_serial_getchar+0x84>)
  40020c:	a901      	add	r1, sp, #4
  40020e:	4630      	mov	r0, r6
  400210:	47a8      	blx	r5
  400212:	2800      	cmp	r0, #0
  400214:	d1fa      	bne.n	40020c <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  400216:	9b01      	ldr	r3, [sp, #4]
  400218:	7023      	strb	r3, [r4, #0]
  40021a:	e7e3      	b.n	4001e4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  40021c:	461e      	mov	r6, r3
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <usart_serial_getchar+0x84>)
  400220:	a901      	add	r1, sp, #4
  400222:	4630      	mov	r0, r6
  400224:	47a8      	blx	r5
  400226:	2800      	cmp	r0, #0
  400228:	d1fa      	bne.n	400220 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  40022a:	9b01      	ldr	r3, [sp, #4]
  40022c:	7023      	strb	r3, [r4, #0]
}
  40022e:	e7d9      	b.n	4001e4 <usart_serial_getchar+0x24>
  400230:	400e0600 	.word	0x400e0600
  400234:	40060600 	.word	0x40060600
  400238:	400a0000 	.word	0x400a0000
  40023c:	400a4000 	.word	0x400a4000
  400240:	00400fdd 	.word	0x00400fdd
  400244:	00401003 	.word	0x00401003

00400248 <usart_serial_putchar>:
{
  400248:	b570      	push	{r4, r5, r6, lr}
  40024a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40024c:	4b18      	ldr	r3, [pc, #96]	; (4002b0 <usart_serial_putchar+0x68>)
  40024e:	4298      	cmp	r0, r3
  400250:	d00a      	beq.n	400268 <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400252:	4b18      	ldr	r3, [pc, #96]	; (4002b4 <usart_serial_putchar+0x6c>)
  400254:	4298      	cmp	r0, r3
  400256:	d010      	beq.n	40027a <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  400258:	4b17      	ldr	r3, [pc, #92]	; (4002b8 <usart_serial_putchar+0x70>)
  40025a:	4298      	cmp	r0, r3
  40025c:	d016      	beq.n	40028c <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  40025e:	4b17      	ldr	r3, [pc, #92]	; (4002bc <usart_serial_putchar+0x74>)
  400260:	4298      	cmp	r0, r3
  400262:	d01c      	beq.n	40029e <usart_serial_putchar+0x56>
	return 0;
  400264:	2000      	movs	r0, #0
}
  400266:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  400268:	461e      	mov	r6, r3
  40026a:	4d15      	ldr	r5, [pc, #84]	; (4002c0 <usart_serial_putchar+0x78>)
  40026c:	4621      	mov	r1, r4
  40026e:	4630      	mov	r0, r6
  400270:	47a8      	blx	r5
  400272:	2800      	cmp	r0, #0
  400274:	d1fa      	bne.n	40026c <usart_serial_putchar+0x24>
		return 1;
  400276:	2001      	movs	r0, #1
  400278:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40027a:	461e      	mov	r6, r3
  40027c:	4d10      	ldr	r5, [pc, #64]	; (4002c0 <usart_serial_putchar+0x78>)
  40027e:	4621      	mov	r1, r4
  400280:	4630      	mov	r0, r6
  400282:	47a8      	blx	r5
  400284:	2800      	cmp	r0, #0
  400286:	d1fa      	bne.n	40027e <usart_serial_putchar+0x36>
		return 1;
  400288:	2001      	movs	r0, #1
  40028a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40028c:	461e      	mov	r6, r3
  40028e:	4d0d      	ldr	r5, [pc, #52]	; (4002c4 <usart_serial_putchar+0x7c>)
  400290:	4621      	mov	r1, r4
  400292:	4630      	mov	r0, r6
  400294:	47a8      	blx	r5
  400296:	2800      	cmp	r0, #0
  400298:	d1fa      	bne.n	400290 <usart_serial_putchar+0x48>
		return 1;
  40029a:	2001      	movs	r0, #1
  40029c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40029e:	461e      	mov	r6, r3
  4002a0:	4d08      	ldr	r5, [pc, #32]	; (4002c4 <usart_serial_putchar+0x7c>)
  4002a2:	4621      	mov	r1, r4
  4002a4:	4630      	mov	r0, r6
  4002a6:	47a8      	blx	r5
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1fa      	bne.n	4002a2 <usart_serial_putchar+0x5a>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd70      	pop	{r4, r5, r6, pc}
  4002b0:	400e0600 	.word	0x400e0600
  4002b4:	40060600 	.word	0x40060600
  4002b8:	400a0000 	.word	0x400a0000
  4002bc:	400a4000 	.word	0x400a4000
  4002c0:	00400fcd 	.word	0x00400fcd
  4002c4:	00400fef 	.word	0x00400fef

004002c8 <SPI_Handler>:
{	
  4002c8:	b538      	push	{r3, r4, r5, lr}
	if(channel_to_write > 1)
  4002ca:	4b12      	ldr	r3, [pc, #72]	; (400314 <SPI_Handler+0x4c>)
  4002cc:	781b      	ldrb	r3, [r3, #0]
  4002ce:	b2db      	uxtb	r3, r3
  4002d0:	2b01      	cmp	r3, #1
  4002d2:	d900      	bls.n	4002d6 <SPI_Handler+0xe>
  4002d4:	bd38      	pop	{r3, r4, r5, pc}
	if(i < data_size)
  4002d6:	4b10      	ldr	r3, [pc, #64]	; (400318 <SPI_Handler+0x50>)
  4002d8:	681a      	ldr	r2, [r3, #0]
  4002da:	f242 730f 	movw	r3, #9999	; 0x270f
  4002de:	429a      	cmp	r2, r3
  4002e0:	d903      	bls.n	4002ea <SPI_Handler+0x22>
	else ch_written = true;
  4002e2:	2201      	movs	r2, #1
  4002e4:	4b0d      	ldr	r3, [pc, #52]	; (40031c <SPI_Handler+0x54>)
  4002e6:	701a      	strb	r2, [r3, #0]
}
  4002e8:	e7f4      	b.n	4002d4 <SPI_Handler+0xc>
		spi_write(SPI_SLAVE_BASE, data[channel_to_write][i], 0, 0);
  4002ea:	4b0a      	ldr	r3, [pc, #40]	; (400314 <SPI_Handler+0x4c>)
  4002ec:	781a      	ldrb	r2, [r3, #0]
  4002ee:	4c0a      	ldr	r4, [pc, #40]	; (400318 <SPI_Handler+0x50>)
  4002f0:	6823      	ldr	r3, [r4, #0]
  4002f2:	f242 7110 	movw	r1, #10000	; 0x2710
  4002f6:	fb02 3101 	mla	r1, r2, r1, r3
  4002fa:	2300      	movs	r3, #0
  4002fc:	461a      	mov	r2, r3
  4002fe:	4808      	ldr	r0, [pc, #32]	; (400320 <SPI_Handler+0x58>)
  400300:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
  400304:	4807      	ldr	r0, [pc, #28]	; (400324 <SPI_Handler+0x5c>)
  400306:	4d08      	ldr	r5, [pc, #32]	; (400328 <SPI_Handler+0x60>)
  400308:	47a8      	blx	r5
		i++; 
  40030a:	6823      	ldr	r3, [r4, #0]
  40030c:	3301      	adds	r3, #1
  40030e:	6023      	str	r3, [r4, #0]
  400310:	bd38      	pop	{r3, r4, r5, pc}
  400312:	bf00      	nop
  400314:	20000001 	.word	0x20000001
  400318:	2000a4ac 	.word	0x2000a4ac
  40031c:	2000086a 	.word	0x2000086a
  400320:	2000086c 	.word	0x2000086c
  400324:	40088000 	.word	0x40088000
  400328:	00400e5f 	.word	0x00400e5f

0040032c <TC0_Handler>:
{
  40032c:	b510      	push	{r4, lr}
  40032e:	b082      	sub	sp, #8
	ul_dummy = tc_get_status(TC0, 0);
  400330:	2100      	movs	r1, #0
  400332:	4814      	ldr	r0, [pc, #80]	; (400384 <TC0_Handler+0x58>)
  400334:	4b14      	ldr	r3, [pc, #80]	; (400388 <TC0_Handler+0x5c>)
  400336:	4798      	blx	r3
  400338:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  40033a:	9b01      	ldr	r3, [sp, #4]
	if (i < data_size) {
  40033c:	4b13      	ldr	r3, [pc, #76]	; (40038c <TC0_Handler+0x60>)
  40033e:	681a      	ldr	r2, [r3, #0]
  400340:	f242 730f 	movw	r3, #9999	; 0x270f
  400344:	429a      	cmp	r2, r3
  400346:	d904      	bls.n	400352 <TC0_Handler+0x26>
		buffer_full = true;
  400348:	2201      	movs	r2, #1
  40034a:	4b11      	ldr	r3, [pc, #68]	; (400390 <TC0_Handler+0x64>)
  40034c:	701a      	strb	r2, [r3, #0]
}
  40034e:	b002      	add	sp, #8
  400350:	bd10      	pop	{r4, pc}
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  400352:	4a10      	ldr	r2, [pc, #64]	; (400394 <TC0_Handler+0x68>)
  400354:	2302      	movs	r3, #2
  400356:	6013      	str	r3, [r2, #0]
		data[0][i] = afec_channel_get_value(AFEC0, channel_1);
  400358:	490c      	ldr	r1, [pc, #48]	; (40038c <TC0_Handler+0x60>)
  40035a:	680b      	ldr	r3, [r1, #0]
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  40035c:	2005      	movs	r0, #5
  40035e:	6650      	str	r0, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  400360:	6e94      	ldr	r4, [r2, #104]	; 0x68
  400362:	480d      	ldr	r0, [pc, #52]	; (400398 <TC0_Handler+0x6c>)
  400364:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
		data[1][i] = afec_channel_get_value(AFEC0, channel_2);
  400368:	680b      	ldr	r3, [r1, #0]
	afec->AFEC_CSELR = afec_ch;
  40036a:	2404      	movs	r4, #4
  40036c:	6654      	str	r4, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  40036e:	6e92      	ldr	r2, [r2, #104]	; 0x68
  400370:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
  400374:	3310      	adds	r3, #16
  400376:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		i++;
  40037a:	680b      	ldr	r3, [r1, #0]
  40037c:	3301      	adds	r3, #1
  40037e:	600b      	str	r3, [r1, #0]
  400380:	e7e5      	b.n	40034e <TC0_Handler+0x22>
  400382:	bf00      	nop
  400384:	40090000 	.word	0x40090000
  400388:	00400f1d 	.word	0x00400f1d
  40038c:	2000a4ac 	.word	0x2000a4ac
  400390:	20000869 	.word	0x20000869
  400394:	400b0000 	.word	0x400b0000
  400398:	2000086c 	.word	0x2000086c

0040039c <main>:

int main(void)
{
  40039c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  4003a0:	b08f      	sub	sp, #60	; 0x3c
	/* Initialize the SAM system. */
	sysclk_init();
  4003a2:	4baa      	ldr	r3, [pc, #680]	; (40064c <main+0x2b0>)
  4003a4:	4798      	blx	r3
	board_init();
  4003a6:	4baa      	ldr	r3, [pc, #680]	; (400650 <main+0x2b4>)
  4003a8:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003aa:	2009      	movs	r0, #9
  4003ac:	4ca9      	ldr	r4, [pc, #676]	; (400654 <main+0x2b8>)
  4003ae:	47a0      	blx	r4
  4003b0:	200a      	movs	r0, #10
  4003b2:	47a0      	blx	r4
  4003b4:	200b      	movs	r0, #11
  4003b6:	47a0      	blx	r4
  4003b8:	200c      	movs	r0, #12
  4003ba:	47a0      	blx	r4
  4003bc:	200d      	movs	r0, #13
  4003be:	47a0      	blx	r4
  4003c0:	2007      	movs	r0, #7
  4003c2:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4003c4:	4ea4      	ldr	r6, [pc, #656]	; (400658 <main+0x2bc>)
  4003c6:	4ba5      	ldr	r3, [pc, #660]	; (40065c <main+0x2c0>)
  4003c8:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4003ca:	4aa5      	ldr	r2, [pc, #660]	; (400660 <main+0x2c4>)
  4003cc:	4ba5      	ldr	r3, [pc, #660]	; (400664 <main+0x2c8>)
  4003ce:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4003d0:	4aa5      	ldr	r2, [pc, #660]	; (400668 <main+0x2cc>)
  4003d2:	4ba6      	ldr	r3, [pc, #664]	; (40066c <main+0x2d0>)
  4003d4:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4003d6:	4ba6      	ldr	r3, [pc, #664]	; (400670 <main+0x2d4>)
  4003d8:	9304      	str	r3, [sp, #16]
	uart_settings.ul_baudrate = opt->baudrate;
  4003da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4003de:	9305      	str	r3, [sp, #20]
	uart_settings.ul_mode = opt->paritytype;
  4003e0:	f44f 6500 	mov.w	r5, #2048	; 0x800
  4003e4:	9506      	str	r5, [sp, #24]
  4003e6:	2007      	movs	r0, #7
  4003e8:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  4003ea:	a904      	add	r1, sp, #16
  4003ec:	4630      	mov	r0, r6
  4003ee:	4ba1      	ldr	r3, [pc, #644]	; (400674 <main+0x2d8>)
  4003f0:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4003f2:	4ea1      	ldr	r6, [pc, #644]	; (400678 <main+0x2dc>)
  4003f4:	6833      	ldr	r3, [r6, #0]
  4003f6:	2100      	movs	r1, #0
  4003f8:	6898      	ldr	r0, [r3, #8]
  4003fa:	4ca0      	ldr	r4, [pc, #640]	; (40067c <main+0x2e0>)
  4003fc:	47a0      	blx	r4
	setbuf(stdin, NULL);
  4003fe:	6833      	ldr	r3, [r6, #0]
  400400:	2100      	movs	r1, #0
  400402:	6858      	ldr	r0, [r3, #4]
  400404:	47a0      	blx	r4
	ioport_init();

	configure_console();

	afec_enable(AFEC0);
  400406:	4c9e      	ldr	r4, [pc, #632]	; (400680 <main+0x2e4>)
  400408:	4620      	mov	r0, r4
  40040a:	4b9e      	ldr	r3, [pc, #632]	; (400684 <main+0x2e8>)
  40040c:	4798      	blx	r3
	struct afec_config afec_cfg;
	afec_get_config_defaults(&afec_cfg);
  40040e:	a807      	add	r0, sp, #28
  400410:	4b9d      	ldr	r3, [pc, #628]	; (400688 <main+0x2ec>)
  400412:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  400414:	a907      	add	r1, sp, #28
  400416:	4620      	mov	r0, r4
  400418:	4b9c      	ldr	r3, [pc, #624]	; (40068c <main+0x2f0>)
  40041a:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40041c:	2320      	movs	r3, #32
  40041e:	6163      	str	r3, [r4, #20]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400420:	a804      	add	r0, sp, #16
  400422:	4f9b      	ldr	r7, [pc, #620]	; (400690 <main+0x2f4>)
  400424:	47b8      	blx	r7
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  400426:	aa04      	add	r2, sp, #16
  400428:	2105      	movs	r1, #5
  40042a:	4620      	mov	r0, r4
  40042c:	4e99      	ldr	r6, [pc, #612]	; (400694 <main+0x2f8>)
  40042e:	47b0      	blx	r6
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400430:	2305      	movs	r3, #5
  400432:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400434:	66e5      	str	r5, [r4, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400436:	2310      	movs	r3, #16
  400438:	6163      	str	r3, [r4, #20]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40043a:	eb0d 0003 	add.w	r0, sp, r3
  40043e:	47b8      	blx	r7
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  400440:	aa04      	add	r2, sp, #16
  400442:	2104      	movs	r1, #4
  400444:	4620      	mov	r0, r4
  400446:	47b0      	blx	r6
	afec->AFEC_CSELR = afec_ch;
  400448:	2304      	movs	r3, #4
  40044a:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40044c:	66e5      	str	r5, [r4, #108]	; 0x6c
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40044e:	4b92      	ldr	r3, [pc, #584]	; (400698 <main+0x2fc>)
  400450:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400454:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400456:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40045a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40045e:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400460:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400464:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400468:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40046a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40046e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400472:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400474:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400478:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40047a:	631a      	str	r2, [r3, #48]	; 0x30
  40047c:	2201      	movs	r2, #1
  40047e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400482:	631a      	str	r2, [r3, #48]	; 0x30
  400484:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  400488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40048c:	631a      	str	r2, [r3, #48]	; 0x30
  40048e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400492:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Configuring PIO */
	configure_pio();
	set_default_pin_levels();
	
	state = SL_READY;
  400494:	2200      	movs	r2, #0
  400496:	4b81      	ldr	r3, [pc, #516]	; (40069c <main+0x300>)
  400498:	701a      	strb	r2, [r3, #0]

	while (1) {
		switch (state){
  40049a:	461c      	mov	r4, r3
  40049c:	f8df b260 	ldr.w	fp, [pc, #608]	; 400700 <main+0x364>
  4004a0:	4e7d      	ldr	r6, [pc, #500]	; (400698 <main+0x2fc>)
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4004a2:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 400670 <main+0x2d4>
  4004a6:	e045      	b.n	400534 <main+0x198>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4004a8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  4004aa:	0fdb      	lsrs	r3, r3, #31
			case SL_READY:
				GO_status = ioport_get_pin_level(GO_pin);
  4004ac:	4a7c      	ldr	r2, [pc, #496]	; (4006a0 <main+0x304>)
  4004ae:	7013      	strb	r3, [r2, #0]
				if (GO_status)
  4004b0:	7813      	ldrb	r3, [r2, #0]
  4004b2:	2b00      	cmp	r3, #0
  4004b4:	d03e      	beq.n	400534 <main+0x198>
	pmc_enable_periph_clk(ID_TC0);
  4004b6:	2015      	movs	r0, #21
  4004b8:	4b66      	ldr	r3, [pc, #408]	; (400654 <main+0x2b8>)
  4004ba:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4004bc:	f8cd 8000 	str.w	r8, [sp]
  4004c0:	ab04      	add	r3, sp, #16
  4004c2:	aa03      	add	r2, sp, #12
  4004c4:	4641      	mov	r1, r8
  4004c6:	4877      	ldr	r0, [pc, #476]	; (4006a4 <main+0x308>)
  4004c8:	4d77      	ldr	r5, [pc, #476]	; (4006a8 <main+0x30c>)
  4004ca:	47a8      	blx	r5
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4004cc:	4d77      	ldr	r5, [pc, #476]	; (4006ac <main+0x310>)
  4004ce:	9a04      	ldr	r2, [sp, #16]
  4004d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4004d4:	2100      	movs	r1, #0
  4004d6:	4628      	mov	r0, r5
  4004d8:	4b75      	ldr	r3, [pc, #468]	; (4006b0 <main+0x314>)
  4004da:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / freq);
  4004dc:	9b03      	ldr	r3, [sp, #12]
  4004de:	fbb8 f2f3 	udiv	r2, r8, r3
  4004e2:	0952      	lsrs	r2, r2, #5
  4004e4:	4b73      	ldr	r3, [pc, #460]	; (4006b4 <main+0x318>)
  4004e6:	fba3 3202 	umull	r3, r2, r3, r2
  4004ea:	09d2      	lsrs	r2, r2, #7
  4004ec:	2100      	movs	r1, #0
  4004ee:	4628      	mov	r0, r5
  4004f0:	4b71      	ldr	r3, [pc, #452]	; (4006b8 <main+0x31c>)
  4004f2:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4004f4:	4b71      	ldr	r3, [pc, #452]	; (4006bc <main+0x320>)
  4004f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4004fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400502:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400506:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40050a:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40050c:	2210      	movs	r2, #16
  40050e:	2100      	movs	r1, #0
  400510:	4628      	mov	r0, r5
  400512:	4b6b      	ldr	r3, [pc, #428]	; (4006c0 <main+0x324>)
  400514:	4798      	blx	r3
	tc_start(TC0, 0);
  400516:	2100      	movs	r1, #0
  400518:	4628      	mov	r0, r5
  40051a:	4b6a      	ldr	r3, [pc, #424]	; (4006c4 <main+0x328>)
  40051c:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40051e:	2301      	movs	r3, #1
  400520:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
				{
					configure_tc();	
					ioport_set_pin_level(LED0_GPIO, 0);
					state = SL_SAMPLING;
  400524:	7023      	strb	r3, [r4, #0]
  400526:	e005      	b.n	400534 <main+0x198>
				}
				break;
			case SL_SAMPLING:
				//mk_sound();
				if (buffer_full) 
  400528:	4b67      	ldr	r3, [pc, #412]	; (4006c8 <main+0x32c>)
  40052a:	781b      	ldrb	r3, [r3, #0]
  40052c:	2b00      	cmp	r3, #0
  40052e:	d139      	bne.n	4005a4 <main+0x208>
					tc_stop(TC0, 0);
					state = SL_WRITING;
					spi_slave_initialize();
				}

				restart();
  400530:	4b66      	ldr	r3, [pc, #408]	; (4006cc <main+0x330>)
  400532:	4798      	blx	r3
		switch (state){
  400534:	7823      	ldrb	r3, [r4, #0]
  400536:	b2db      	uxtb	r3, r3
  400538:	2b01      	cmp	r3, #1
  40053a:	d0f5      	beq.n	400528 <main+0x18c>
  40053c:	2b00      	cmp	r3, #0
  40053e:	d0b3      	beq.n	4004a8 <main+0x10c>
  400540:	2b02      	cmp	r3, #2
  400542:	d1f7      	bne.n	400534 <main+0x198>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400544:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
				break;

			case SL_WRITING:
				ch_select = ioport_get_pin_level(ch_select_pin);
  400546:	f3c3 7340 	ubfx	r3, r3, #29, #1
  40054a:	4a61      	ldr	r2, [pc, #388]	; (4006d0 <main+0x334>)
  40054c:	7013      	strb	r3, [r2, #0]
				if(channel_to_write != ch_select)
  40054e:	4b61      	ldr	r3, [pc, #388]	; (4006d4 <main+0x338>)
  400550:	781b      	ldrb	r3, [r3, #0]
  400552:	7812      	ldrb	r2, [r2, #0]
  400554:	b2db      	uxtb	r3, r3
  400556:	4293      	cmp	r3, r2
  400558:	d012      	beq.n	400580 <main+0x1e4>
				{
					restart();
  40055a:	4b5c      	ldr	r3, [pc, #368]	; (4006cc <main+0x330>)
  40055c:	4798      	blx	r3
					channel_to_write = ch_select;
  40055e:	4b5c      	ldr	r3, [pc, #368]	; (4006d0 <main+0x334>)
  400560:	781b      	ldrb	r3, [r3, #0]
  400562:	b2db      	uxtb	r3, r3
  400564:	4a5b      	ldr	r2, [pc, #364]	; (4006d4 <main+0x338>)
  400566:	7013      	strb	r3, [r2, #0]
					i = 0;
  400568:	2300      	movs	r3, #0
  40056a:	4a5b      	ldr	r2, [pc, #364]	; (4006d8 <main+0x33c>)
  40056c:	6013      	str	r3, [r2, #0]
					ch_written = false;
  40056e:	4a5b      	ldr	r2, [pc, #364]	; (4006dc <main+0x340>)
  400570:	7013      	strb	r3, [r2, #0]
  400572:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400576:	4b51      	ldr	r3, [pc, #324]	; (4006bc <main+0x320>)
  400578:	601a      	str	r2, [r3, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40057a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40057e:	6373      	str	r3, [r6, #52]	; 0x34
					NVIC_EnableIRQ(SPI_IRQn);
					ioport_set_pin_level(is_written_pin, 0);
				}
				
				if(ch_written)
  400580:	4b56      	ldr	r3, [pc, #344]	; (4006dc <main+0x340>)
  400582:	781b      	ldrb	r3, [r3, #0]
  400584:	b15b      	cbz	r3, 40059e <main+0x202>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40058a:	6333      	str	r3, [r6, #48]	; 0x30
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40058c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400590:	4b4a      	ldr	r3, [pc, #296]	; (4006bc <main+0x320>)
  400592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40059a:	f3bf 8f6f 	isb	sy
				{
					ioport_set_pin_level(is_written_pin, 1);
					NVIC_DisableIRQ(SPI_IRQn);
				}
				
				restart();
  40059e:	4b4b      	ldr	r3, [pc, #300]	; (4006cc <main+0x330>)
  4005a0:	4798      	blx	r3
				break;
  4005a2:	e7c7      	b.n	400534 <main+0x198>
  4005a4:	f04f 0901 	mov.w	r9, #1
  4005a8:	f8cb 9030 	str.w	r9, [fp, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4005ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4005b0:	4a4b      	ldr	r2, [pc, #300]	; (4006e0 <main+0x344>)
  4005b2:	6353      	str	r3, [r2, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4005b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4005b8:	6333      	str	r3, [r6, #48]	; 0x30
					tc_stop(TC0, 0);
  4005ba:	2100      	movs	r1, #0
  4005bc:	483b      	ldr	r0, [pc, #236]	; (4006ac <main+0x310>)
  4005be:	4b49      	ldr	r3, [pc, #292]	; (4006e4 <main+0x348>)
  4005c0:	4798      	blx	r3
					state = SL_WRITING;
  4005c2:	f04f 0a02 	mov.w	sl, #2
  4005c6:	f884 a000 	strb.w	sl, [r4]
  4005ca:	4b3c      	ldr	r3, [pc, #240]	; (4006bc <main+0x320>)
  4005cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4005d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4005d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005d8:	f3bf 8f6f 	isb	sy
  4005dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4005e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  4005e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005e8:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4005ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4005f0:	2700      	movs	r7, #0
  4005f2:	f883 7313 	strb.w	r7, [r3, #787]	; 0x313
	spi_enable_clock(SPI_SLAVE_BASE);
  4005f6:	4d3c      	ldr	r5, [pc, #240]	; (4006e8 <main+0x34c>)
  4005f8:	4628      	mov	r0, r5
  4005fa:	4b3c      	ldr	r3, [pc, #240]	; (4006ec <main+0x350>)
  4005fc:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4005fe:	f8c5 a000 	str.w	sl, [r5]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400602:	f04f 0a80 	mov.w	sl, #128	; 0x80
  400606:	f8c5 a000 	str.w	sl, [r5]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  40060a:	686b      	ldr	r3, [r5, #4]
  40060c:	f023 0301 	bic.w	r3, r3, #1
  400610:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400612:	686b      	ldr	r3, [r5, #4]
  400614:	f043 0310 	orr.w	r3, r3, #16
  400618:	606b      	str	r3, [r5, #4]
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
  40061a:	210e      	movs	r1, #14
  40061c:	4628      	mov	r0, r5
  40061e:	4b34      	ldr	r3, [pc, #208]	; (4006f0 <main+0x354>)
  400620:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400622:	463a      	mov	r2, r7
  400624:	4639      	mov	r1, r7
  400626:	4628      	mov	r0, r5
  400628:	4b32      	ldr	r3, [pc, #200]	; (4006f4 <main+0x358>)
  40062a:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  40062c:	463a      	mov	r2, r7
  40062e:	4639      	mov	r1, r7
  400630:	4628      	mov	r0, r5
  400632:	4b31      	ldr	r3, [pc, #196]	; (4006f8 <main+0x35c>)
  400634:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, bits_per_transfer);
  400636:	4652      	mov	r2, sl
  400638:	4639      	mov	r1, r7
  40063a:	4628      	mov	r0, r5
  40063c:	4b2f      	ldr	r3, [pc, #188]	; (4006fc <main+0x360>)
  40063e:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400640:	f44f 7380 	mov.w	r3, #256	; 0x100
  400644:	616b      	str	r3, [r5, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400646:	f8c5 9000 	str.w	r9, [r5]
  40064a:	e771      	b.n	400530 <main+0x194>
  40064c:	00400705 	.word	0x00400705
  400650:	004007f5 	.word	0x004007f5
  400654:	00400de5 	.word	0x00400de5
  400658:	400e0600 	.word	0x400e0600
  40065c:	2000a570 	.word	0x2000a570
  400660:	00400249 	.word	0x00400249
  400664:	2000a56c 	.word	0x2000a56c
  400668:	004001c1 	.word	0x004001c1
  40066c:	2000a568 	.word	0x2000a568
  400670:	07270e00 	.word	0x07270e00
  400674:	00400f95 	.word	0x00400f95
  400678:	20000008 	.word	0x20000008
  40067c:	0040139d 	.word	0x0040139d
  400680:	400b0000 	.word	0x400b0000
  400684:	00400bc5 	.word	0x00400bc5
  400688:	00400a8d 	.word	0x00400a8d
  40068c:	00400ac9 	.word	0x00400ac9
  400690:	00400abd 	.word	0x00400abd
  400694:	00400a5d 	.word	0x00400a5d
  400698:	400e1200 	.word	0x400e1200
  40069c:	2000a55c 	.word	0x2000a55c
  4006a0:	20000868 	.word	0x20000868
  4006a4:	000186a0 	.word	0x000186a0
  4006a8:	00400f25 	.word	0x00400f25
  4006ac:	40090000 	.word	0x40090000
  4006b0:	00400ee3 	.word	0x00400ee3
  4006b4:	0a7c5ac5 	.word	0x0a7c5ac5
  4006b8:	00400f0d 	.word	0x00400f0d
  4006bc:	e000e100 	.word	0xe000e100
  4006c0:	00400f15 	.word	0x00400f15
  4006c4:	00400efd 	.word	0x00400efd
  4006c8:	20000869 	.word	0x20000869
  4006cc:	00400165 	.word	0x00400165
  4006d0:	20000000 	.word	0x20000000
  4006d4:	20000001 	.word	0x20000001
  4006d8:	2000a4ac 	.word	0x2000a4ac
  4006dc:	2000086a 	.word	0x2000086a
  4006e0:	400e1400 	.word	0x400e1400
  4006e4:	00400f05 	.word	0x00400f05
  4006e8:	40088000 	.word	0x40088000
  4006ec:	00400e39 	.word	0x00400e39
  4006f0:	00400e49 	.word	0x00400e49
  4006f4:	00400e93 	.word	0x00400e93
  4006f8:	00400eb1 	.word	0x00400eb1
  4006fc:	00400ecf 	.word	0x00400ecf
  400700:	400e0e00 	.word	0x400e0e00

00400704 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400704:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400706:	480e      	ldr	r0, [pc, #56]	; (400740 <sysclk_init+0x3c>)
  400708:	4b0e      	ldr	r3, [pc, #56]	; (400744 <sysclk_init+0x40>)
  40070a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40070c:	213e      	movs	r1, #62	; 0x3e
  40070e:	2000      	movs	r0, #0
  400710:	4b0d      	ldr	r3, [pc, #52]	; (400748 <sysclk_init+0x44>)
  400712:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400714:	4c0d      	ldr	r4, [pc, #52]	; (40074c <sysclk_init+0x48>)
  400716:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400718:	2800      	cmp	r0, #0
  40071a:	d0fc      	beq.n	400716 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40071c:	4b0c      	ldr	r3, [pc, #48]	; (400750 <sysclk_init+0x4c>)
  40071e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400720:	4a0c      	ldr	r2, [pc, #48]	; (400754 <sysclk_init+0x50>)
  400722:	4b0d      	ldr	r3, [pc, #52]	; (400758 <sysclk_init+0x54>)
  400724:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400726:	4c0d      	ldr	r4, [pc, #52]	; (40075c <sysclk_init+0x58>)
  400728:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40072a:	2800      	cmp	r0, #0
  40072c:	d0fc      	beq.n	400728 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40072e:	2010      	movs	r0, #16
  400730:	4b0b      	ldr	r3, [pc, #44]	; (400760 <sysclk_init+0x5c>)
  400732:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400734:	4b0b      	ldr	r3, [pc, #44]	; (400764 <sysclk_init+0x60>)
  400736:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400738:	4801      	ldr	r0, [pc, #4]	; (400740 <sysclk_init+0x3c>)
  40073a:	4b02      	ldr	r3, [pc, #8]	; (400744 <sysclk_init+0x40>)
  40073c:	4798      	blx	r3
  40073e:	bd10      	pop	{r4, pc}
  400740:	07270e00 	.word	0x07270e00
  400744:	004011f1 	.word	0x004011f1
  400748:	00400d61 	.word	0x00400d61
  40074c:	00400db5 	.word	0x00400db5
  400750:	00400dc5 	.word	0x00400dc5
  400754:	20133f01 	.word	0x20133f01
  400758:	400e0400 	.word	0x400e0400
  40075c:	00400dd5 	.word	0x00400dd5
  400760:	00400cfd 	.word	0x00400cfd
  400764:	004010e5 	.word	0x004010e5

00400768 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40076c:	b980      	cbnz	r0, 400790 <_read+0x28>
  40076e:	460c      	mov	r4, r1
  400770:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400772:	2a00      	cmp	r2, #0
  400774:	dd0f      	ble.n	400796 <_read+0x2e>
  400776:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400778:	4e08      	ldr	r6, [pc, #32]	; (40079c <_read+0x34>)
  40077a:	4d09      	ldr	r5, [pc, #36]	; (4007a0 <_read+0x38>)
  40077c:	6830      	ldr	r0, [r6, #0]
  40077e:	4621      	mov	r1, r4
  400780:	682b      	ldr	r3, [r5, #0]
  400782:	4798      	blx	r3
		ptr++;
  400784:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400786:	42bc      	cmp	r4, r7
  400788:	d1f8      	bne.n	40077c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40078a:	4640      	mov	r0, r8
  40078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400790:	f04f 38ff 	mov.w	r8, #4294967295
  400794:	e7f9      	b.n	40078a <_read+0x22>
	for (; len > 0; --len) {
  400796:	4680      	mov	r8, r0
  400798:	e7f7      	b.n	40078a <_read+0x22>
  40079a:	bf00      	nop
  40079c:	2000a570 	.word	0x2000a570
  4007a0:	2000a568 	.word	0x2000a568

004007a4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4007a4:	3801      	subs	r0, #1
  4007a6:	2802      	cmp	r0, #2
  4007a8:	d815      	bhi.n	4007d6 <_write+0x32>
{
  4007aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007ae:	460e      	mov	r6, r1
  4007b0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4007b2:	b19a      	cbz	r2, 4007dc <_write+0x38>
  4007b4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4007b6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4007f0 <_write+0x4c>
  4007ba:	4f0c      	ldr	r7, [pc, #48]	; (4007ec <_write+0x48>)
  4007bc:	f8d8 0000 	ldr.w	r0, [r8]
  4007c0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4007c4:	683b      	ldr	r3, [r7, #0]
  4007c6:	4798      	blx	r3
  4007c8:	2800      	cmp	r0, #0
  4007ca:	db0a      	blt.n	4007e2 <_write+0x3e>
  4007cc:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4007ce:	3c01      	subs	r4, #1
  4007d0:	d1f4      	bne.n	4007bc <_write+0x18>
  4007d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4007d6:	f04f 30ff 	mov.w	r0, #4294967295
  4007da:	4770      	bx	lr
	for (; len != 0; --len) {
  4007dc:	4610      	mov	r0, r2
  4007de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4007e2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4007e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007ea:	bf00      	nop
  4007ec:	2000a56c 	.word	0x2000a56c
  4007f0:	2000a570 	.word	0x2000a570

004007f4 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4007f4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4007f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007fa:	4b6d      	ldr	r3, [pc, #436]	; (4009b0 <board_init+0x1bc>)
  4007fc:	605a      	str	r2, [r3, #4]
  4007fe:	2009      	movs	r0, #9
  400800:	4c6c      	ldr	r4, [pc, #432]	; (4009b4 <board_init+0x1c0>)
  400802:	47a0      	blx	r4
  400804:	200a      	movs	r0, #10
  400806:	47a0      	blx	r4
  400808:	200b      	movs	r0, #11
  40080a:	47a0      	blx	r4
  40080c:	200c      	movs	r0, #12
  40080e:	47a0      	blx	r4
  400810:	200d      	movs	r0, #13
  400812:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400814:	4b68      	ldr	r3, [pc, #416]	; (4009b8 <board_init+0x1c4>)
  400816:	2201      	movs	r2, #1
  400818:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40081a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40081e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400820:	4966      	ldr	r1, [pc, #408]	; (4009bc <board_init+0x1c8>)
  400822:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400826:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400828:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40082c:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40082e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  400832:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400834:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400838:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40083a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40083e:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400840:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400844:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400846:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40084a:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40084c:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40084e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400852:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400854:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400858:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40085a:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40085c:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400860:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400862:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400866:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  40086a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40086e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400870:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400874:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40087a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  40087c:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40087e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400882:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400884:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400888:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40088a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40088c:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400890:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  400892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400896:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  40089a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40089e:	2202      	movs	r2, #2
  4008a0:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4008a6:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008ac:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4008ae:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4008b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4008b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008b6:	f021 0102 	bic.w	r1, r1, #2
  4008ba:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008be:	f021 0102 	bic.w	r1, r1, #2
  4008c2:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  4008c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008c8:	2204      	movs	r2, #4
  4008ca:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4008d0:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008d6:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4008d8:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4008da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4008de:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008e0:	f021 0104 	bic.w	r1, r1, #4
  4008e4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008e6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008e8:	f021 0104 	bic.w	r1, r1, #4
  4008ec:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4008ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4008f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4008f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4008fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4008fe:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400900:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400904:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400906:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40090c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40090e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400912:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400914:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400916:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40091a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40091c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40091e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400922:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400924:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400928:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40092a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40092c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400930:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400932:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400936:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400938:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40093a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40093e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400940:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400946:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400948:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40094c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40094e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400954:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400956:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40095a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40095c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40095e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400962:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400964:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40096a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40096c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400970:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400972:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400978:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40097a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  40097e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400980:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400982:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400986:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400988:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40098a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40098e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400994:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400996:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40099c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40099e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4009a2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009a4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009a6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4009aa:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4009ac:	605a      	str	r2, [r3, #4]
  4009ae:	bd10      	pop	{r4, pc}
  4009b0:	400e1850 	.word	0x400e1850
  4009b4:	00400de5 	.word	0x00400de5
  4009b8:	400e0e00 	.word	0x400e0e00
  4009bc:	400e1400 	.word	0x400e1400

004009c0 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4009c0:	b570      	push	{r4, r5, r6, lr}
  4009c2:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4009c4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4009c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4009c8:	4013      	ands	r3, r2
  4009ca:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4009cc:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4009ce:	4d21      	ldr	r5, [pc, #132]	; (400a54 <afec_process_callback+0x94>)
  4009d0:	42a8      	cmp	r0, r5
  4009d2:	bf14      	ite	ne
  4009d4:	2500      	movne	r5, #0
  4009d6:	2501      	moveq	r5, #1
  4009d8:	006e      	lsls	r6, r5, #1
  4009da:	442e      	add	r6, r5
  4009dc:	e00b      	b.n	4009f6 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4009de:	2c14      	cmp	r4, #20
  4009e0:	d824      	bhi.n	400a2c <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4009e2:	9a01      	ldr	r2, [sp, #4]
  4009e4:	f104 0108 	add.w	r1, r4, #8
  4009e8:	2301      	movs	r3, #1
  4009ea:	408b      	lsls	r3, r1
  4009ec:	4213      	tst	r3, r2
  4009ee:	d113      	bne.n	400a18 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4009f0:	3401      	adds	r4, #1
  4009f2:	2c17      	cmp	r4, #23
  4009f4:	d02b      	beq.n	400a4e <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4009f6:	2c0f      	cmp	r4, #15
  4009f8:	d8f1      	bhi.n	4009de <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4009fa:	9a01      	ldr	r2, [sp, #4]
  4009fc:	2301      	movs	r3, #1
  4009fe:	40a3      	lsls	r3, r4
  400a00:	4213      	tst	r3, r2
  400a02:	d0f5      	beq.n	4009f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400a04:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400a08:	4423      	add	r3, r4
  400a0a:	4a13      	ldr	r2, [pc, #76]	; (400a58 <afec_process_callback+0x98>)
  400a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400a10:	2b00      	cmp	r3, #0
  400a12:	d0ed      	beq.n	4009f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400a14:	4798      	blx	r3
  400a16:	e7eb      	b.n	4009f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400a18:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400a1c:	4423      	add	r3, r4
  400a1e:	4a0e      	ldr	r2, [pc, #56]	; (400a58 <afec_process_callback+0x98>)
  400a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400a24:	2b00      	cmp	r3, #0
  400a26:	d0e3      	beq.n	4009f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400a28:	4798      	blx	r3
  400a2a:	e7e1      	b.n	4009f0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400a2c:	9a01      	ldr	r2, [sp, #4]
  400a2e:	f104 0109 	add.w	r1, r4, #9
  400a32:	2301      	movs	r3, #1
  400a34:	408b      	lsls	r3, r1
  400a36:	4213      	tst	r3, r2
  400a38:	d0da      	beq.n	4009f0 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400a3a:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400a3e:	4423      	add	r3, r4
  400a40:	4a05      	ldr	r2, [pc, #20]	; (400a58 <afec_process_callback+0x98>)
  400a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400a46:	2b00      	cmp	r3, #0
  400a48:	d0d2      	beq.n	4009f0 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400a4a:	4798      	blx	r3
  400a4c:	e7d0      	b.n	4009f0 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400a4e:	b002      	add	sp, #8
  400a50:	bd70      	pop	{r4, r5, r6, pc}
  400a52:	bf00      	nop
  400a54:	400b4000 	.word	0x400b4000
  400a58:	2000a574 	.word	0x2000a574

00400a5c <afec_ch_set_config>:
{
  400a5c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400a5e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400a60:	2301      	movs	r3, #1
  400a62:	408b      	lsls	r3, r1
  400a64:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400a68:	7815      	ldrb	r5, [r2, #0]
  400a6a:	2d00      	cmp	r5, #0
  400a6c:	bf08      	it	eq
  400a6e:	2300      	moveq	r3, #0
  400a70:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400a72:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400a74:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400a76:	004b      	lsls	r3, r1, #1
  400a78:	2103      	movs	r1, #3
  400a7a:	4099      	lsls	r1, r3
  400a7c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400a80:	7851      	ldrb	r1, [r2, #1]
  400a82:	4099      	lsls	r1, r3
  400a84:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400a86:	6541      	str	r1, [r0, #84]	; 0x54
}
  400a88:	bc30      	pop	{r4, r5}
  400a8a:	4770      	bx	lr

00400a8c <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400a8c:	2200      	movs	r2, #0
  400a8e:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400a90:	4b08      	ldr	r3, [pc, #32]	; (400ab4 <afec_get_config_defaults+0x28>)
  400a92:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400a94:	4b08      	ldr	r3, [pc, #32]	; (400ab8 <afec_get_config_defaults+0x2c>)
  400a96:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400a98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400a9c:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400a9e:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400aa0:	2302      	movs	r3, #2
  400aa2:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400aa4:	2301      	movs	r3, #1
  400aa6:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400aa8:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400aaa:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400aac:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400aae:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400ab0:	7683      	strb	r3, [r0, #26]
  400ab2:	4770      	bx	lr
  400ab4:	07270e00 	.word	0x07270e00
  400ab8:	005b8d80 	.word	0x005b8d80

00400abc <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400abc:	2300      	movs	r3, #0
  400abe:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400ac0:	2301      	movs	r3, #1
  400ac2:	7043      	strb	r3, [r0, #1]
  400ac4:	4770      	bx	lr
	...

00400ac8 <afec_init>:
	return afec->AFEC_ISR;
  400ac8:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400aca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ace:	d001      	beq.n	400ad4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400ad0:	2019      	movs	r0, #25
  400ad2:	4770      	bx	lr
{
  400ad4:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400ad6:	2301      	movs	r3, #1
  400ad8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ada:	7dcb      	ldrb	r3, [r1, #23]
  400adc:	2b00      	cmp	r3, #0
  400ade:	bf14      	ite	ne
  400ae0:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400ae4:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400ae6:	7d8b      	ldrb	r3, [r1, #22]
  400ae8:	2b00      	cmp	r3, #0
  400aea:	bf14      	ite	ne
  400aec:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  400af0:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  400af2:	7d0b      	ldrb	r3, [r1, #20]
  400af4:	061b      	lsls	r3, r3, #24
  400af6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400afa:	690a      	ldr	r2, [r1, #16]
  400afc:	68ce      	ldr	r6, [r1, #12]
  400afe:	4332      	orrs	r2, r6
  400b00:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  400b02:	7d4a      	ldrb	r2, [r1, #21]
  400b04:	0712      	lsls	r2, r2, #28
  400b06:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400b0a:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  400b0c:	688a      	ldr	r2, [r1, #8]
  400b0e:	0056      	lsls	r6, r2, #1
  400b10:	684a      	ldr	r2, [r1, #4]
  400b12:	fbb2 f2f6 	udiv	r2, r2, r6
  400b16:	3a01      	subs	r2, #1
  400b18:	0212      	lsls	r2, r2, #8
  400b1a:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400b1c:	4313      	orrs	r3, r2
  400b1e:	432b      	orrs	r3, r5
  400b20:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  400b22:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400b24:	7e0b      	ldrb	r3, [r1, #24]
  400b26:	2b00      	cmp	r3, #0
  400b28:	bf14      	ite	ne
  400b2a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400b2e:	2300      	moveq	r3, #0
  400b30:	680a      	ldr	r2, [r1, #0]
  400b32:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400b34:	7e4a      	ldrb	r2, [r1, #25]
  400b36:	2a00      	cmp	r2, #0
  400b38:	bf14      	ite	ne
  400b3a:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400b3e:	2200      	moveq	r2, #0
			(config->resolution) |
  400b40:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400b42:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  400b44:	7e8b      	ldrb	r3, [r1, #26]
  400b46:	021b      	lsls	r3, r3, #8
  400b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400b4c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400b50:	4b0e      	ldr	r3, [pc, #56]	; (400b8c <afec_init+0xc4>)
  400b52:	4298      	cmp	r0, r3
  400b54:	d005      	beq.n	400b62 <afec_init+0x9a>
	if(afec == AFEC1) {
  400b56:	4b0e      	ldr	r3, [pc, #56]	; (400b90 <afec_init+0xc8>)
  400b58:	4298      	cmp	r0, r3
  400b5a:	d00c      	beq.n	400b76 <afec_init+0xae>
	return STATUS_OK;
  400b5c:	2000      	movs	r0, #0
}
  400b5e:	bc70      	pop	{r4, r5, r6}
  400b60:	4770      	bx	lr
  400b62:	4b0c      	ldr	r3, [pc, #48]	; (400b94 <afec_init+0xcc>)
  400b64:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400b68:	2200      	movs	r2, #0
  400b6a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b6e:	428b      	cmp	r3, r1
  400b70:	d1fb      	bne.n	400b6a <afec_init+0xa2>
	return STATUS_OK;
  400b72:	2000      	movs	r0, #0
  400b74:	e7f3      	b.n	400b5e <afec_init+0x96>
  400b76:	4b08      	ldr	r3, [pc, #32]	; (400b98 <afec_init+0xd0>)
  400b78:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400b7c:	2200      	movs	r2, #0
  400b7e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b82:	428b      	cmp	r3, r1
  400b84:	d1fb      	bne.n	400b7e <afec_init+0xb6>
	return STATUS_OK;
  400b86:	2000      	movs	r0, #0
  400b88:	e7e9      	b.n	400b5e <afec_init+0x96>
  400b8a:	bf00      	nop
  400b8c:	400b0000 	.word	0x400b0000
  400b90:	400b4000 	.word	0x400b4000
  400b94:	2000a570 	.word	0x2000a570
  400b98:	2000a5cc 	.word	0x2000a5cc

00400b9c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400b9c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400b9e:	4802      	ldr	r0, [pc, #8]	; (400ba8 <AFEC0_Handler+0xc>)
  400ba0:	4b02      	ldr	r3, [pc, #8]	; (400bac <AFEC0_Handler+0x10>)
  400ba2:	4798      	blx	r3
  400ba4:	bd08      	pop	{r3, pc}
  400ba6:	bf00      	nop
  400ba8:	400b0000 	.word	0x400b0000
  400bac:	004009c1 	.word	0x004009c1

00400bb0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400bb0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400bb2:	4802      	ldr	r0, [pc, #8]	; (400bbc <AFEC1_Handler+0xc>)
  400bb4:	4b02      	ldr	r3, [pc, #8]	; (400bc0 <AFEC1_Handler+0x10>)
  400bb6:	4798      	blx	r3
  400bb8:	bd08      	pop	{r3, pc}
  400bba:	bf00      	nop
  400bbc:	400b4000 	.word	0x400b4000
  400bc0:	004009c1 	.word	0x004009c1

00400bc4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400bc4:	b500      	push	{lr}
  400bc6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400bc8:	4b13      	ldr	r3, [pc, #76]	; (400c18 <afec_enable+0x54>)
  400bca:	4298      	cmp	r0, r3
  400bcc:	bf0c      	ite	eq
  400bce:	201f      	moveq	r0, #31
  400bd0:	201e      	movne	r0, #30
  400bd2:	4b12      	ldr	r3, [pc, #72]	; (400c1c <afec_enable+0x58>)
  400bd4:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400bd6:	4b12      	ldr	r3, [pc, #72]	; (400c20 <afec_enable+0x5c>)
  400bd8:	789b      	ldrb	r3, [r3, #2]
  400bda:	2bff      	cmp	r3, #255	; 0xff
  400bdc:	d01a      	beq.n	400c14 <afec_enable+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400bde:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400be2:	fab3 f383 	clz	r3, r3
  400be6:	095b      	lsrs	r3, r3, #5
  400be8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400bea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400bec:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400bf0:	2200      	movs	r2, #0
  400bf2:	4b0c      	ldr	r3, [pc, #48]	; (400c24 <afec_enable+0x60>)
  400bf4:	701a      	strb	r2, [r3, #0]
	return flags;
  400bf6:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400bf8:	4a09      	ldr	r2, [pc, #36]	; (400c20 <afec_enable+0x5c>)
  400bfa:	7893      	ldrb	r3, [r2, #2]
  400bfc:	3301      	adds	r3, #1
  400bfe:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400c00:	b129      	cbz	r1, 400c0e <afec_enable+0x4a>
		cpu_irq_enable();
  400c02:	2201      	movs	r2, #1
  400c04:	4b07      	ldr	r3, [pc, #28]	; (400c24 <afec_enable+0x60>)
  400c06:	701a      	strb	r2, [r3, #0]
  400c08:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400c0c:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400c0e:	b003      	add	sp, #12
  400c10:	f85d fb04 	ldr.w	pc, [sp], #4
  400c14:	e7fe      	b.n	400c14 <afec_enable+0x50>
  400c16:	bf00      	nop
  400c18:	400b4000 	.word	0x400b4000
  400c1c:	00400de5 	.word	0x00400de5
  400c20:	2000a560 	.word	0x2000a560
  400c24:	20000002 	.word	0x20000002

00400c28 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400c28:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c2a:	4770      	bx	lr

00400c2c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c2c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c2e:	4770      	bx	lr

00400c30 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c34:	4681      	mov	r9, r0
  400c36:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c38:	4b12      	ldr	r3, [pc, #72]	; (400c84 <pio_handler_process+0x54>)
  400c3a:	4798      	blx	r3
  400c3c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c3e:	4648      	mov	r0, r9
  400c40:	4b11      	ldr	r3, [pc, #68]	; (400c88 <pio_handler_process+0x58>)
  400c42:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c44:	4005      	ands	r5, r0
  400c46:	d013      	beq.n	400c70 <pio_handler_process+0x40>
  400c48:	4c10      	ldr	r4, [pc, #64]	; (400c8c <pio_handler_process+0x5c>)
  400c4a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c4e:	e003      	b.n	400c58 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c50:	42b4      	cmp	r4, r6
  400c52:	d00d      	beq.n	400c70 <pio_handler_process+0x40>
  400c54:	3410      	adds	r4, #16
		while (status != 0) {
  400c56:	b15d      	cbz	r5, 400c70 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c58:	6820      	ldr	r0, [r4, #0]
  400c5a:	42b8      	cmp	r0, r7
  400c5c:	d1f8      	bne.n	400c50 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c5e:	6861      	ldr	r1, [r4, #4]
  400c60:	4229      	tst	r1, r5
  400c62:	d0f5      	beq.n	400c50 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c64:	68e3      	ldr	r3, [r4, #12]
  400c66:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400c68:	6863      	ldr	r3, [r4, #4]
  400c6a:	ea25 0503 	bic.w	r5, r5, r3
  400c6e:	e7ef      	b.n	400c50 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400c70:	4b07      	ldr	r3, [pc, #28]	; (400c90 <pio_handler_process+0x60>)
  400c72:	681b      	ldr	r3, [r3, #0]
  400c74:	b123      	cbz	r3, 400c80 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400c76:	4b07      	ldr	r3, [pc, #28]	; (400c94 <pio_handler_process+0x64>)
  400c78:	681b      	ldr	r3, [r3, #0]
  400c7a:	b10b      	cbz	r3, 400c80 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400c7c:	4648      	mov	r0, r9
  400c7e:	4798      	blx	r3
  400c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c84:	00400c29 	.word	0x00400c29
  400c88:	00400c2d 	.word	0x00400c2d
  400c8c:	2000a4b0 	.word	0x2000a4b0
  400c90:	2000a62c 	.word	0x2000a62c
  400c94:	2000a520 	.word	0x2000a520

00400c98 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c98:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400c9a:	2109      	movs	r1, #9
  400c9c:	4801      	ldr	r0, [pc, #4]	; (400ca4 <PIOA_Handler+0xc>)
  400c9e:	4b02      	ldr	r3, [pc, #8]	; (400ca8 <PIOA_Handler+0x10>)
  400ca0:	4798      	blx	r3
  400ca2:	bd08      	pop	{r3, pc}
  400ca4:	400e0e00 	.word	0x400e0e00
  400ca8:	00400c31 	.word	0x00400c31

00400cac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400cac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400cae:	210a      	movs	r1, #10
  400cb0:	4801      	ldr	r0, [pc, #4]	; (400cb8 <PIOB_Handler+0xc>)
  400cb2:	4b02      	ldr	r3, [pc, #8]	; (400cbc <PIOB_Handler+0x10>)
  400cb4:	4798      	blx	r3
  400cb6:	bd08      	pop	{r3, pc}
  400cb8:	400e1000 	.word	0x400e1000
  400cbc:	00400c31 	.word	0x00400c31

00400cc0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400cc0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400cc2:	210b      	movs	r1, #11
  400cc4:	4801      	ldr	r0, [pc, #4]	; (400ccc <PIOC_Handler+0xc>)
  400cc6:	4b02      	ldr	r3, [pc, #8]	; (400cd0 <PIOC_Handler+0x10>)
  400cc8:	4798      	blx	r3
  400cca:	bd08      	pop	{r3, pc}
  400ccc:	400e1200 	.word	0x400e1200
  400cd0:	00400c31 	.word	0x00400c31

00400cd4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400cd4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400cd6:	210c      	movs	r1, #12
  400cd8:	4801      	ldr	r0, [pc, #4]	; (400ce0 <PIOD_Handler+0xc>)
  400cda:	4b02      	ldr	r3, [pc, #8]	; (400ce4 <PIOD_Handler+0x10>)
  400cdc:	4798      	blx	r3
  400cde:	bd08      	pop	{r3, pc}
  400ce0:	400e1400 	.word	0x400e1400
  400ce4:	00400c31 	.word	0x00400c31

00400ce8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ce8:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400cea:	210d      	movs	r1, #13
  400cec:	4801      	ldr	r0, [pc, #4]	; (400cf4 <PIOE_Handler+0xc>)
  400cee:	4b02      	ldr	r3, [pc, #8]	; (400cf8 <PIOE_Handler+0x10>)
  400cf0:	4798      	blx	r3
  400cf2:	bd08      	pop	{r3, pc}
  400cf4:	400e1600 	.word	0x400e1600
  400cf8:	00400c31 	.word	0x00400c31

00400cfc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400cfc:	4a17      	ldr	r2, [pc, #92]	; (400d5c <pmc_switch_mck_to_pllack+0x60>)
  400cfe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d04:	4318      	orrs	r0, r3
  400d06:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d08:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d0a:	f013 0f08 	tst.w	r3, #8
  400d0e:	d10a      	bne.n	400d26 <pmc_switch_mck_to_pllack+0x2a>
  400d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d14:	4911      	ldr	r1, [pc, #68]	; (400d5c <pmc_switch_mck_to_pllack+0x60>)
  400d16:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d18:	f012 0f08 	tst.w	r2, #8
  400d1c:	d103      	bne.n	400d26 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d1e:	3b01      	subs	r3, #1
  400d20:	d1f9      	bne.n	400d16 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400d22:	2001      	movs	r0, #1
  400d24:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d26:	4a0d      	ldr	r2, [pc, #52]	; (400d5c <pmc_switch_mck_to_pllack+0x60>)
  400d28:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d2a:	f023 0303 	bic.w	r3, r3, #3
  400d2e:	f043 0302 	orr.w	r3, r3, #2
  400d32:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d34:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d36:	f013 0f08 	tst.w	r3, #8
  400d3a:	d10a      	bne.n	400d52 <pmc_switch_mck_to_pllack+0x56>
  400d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d40:	4906      	ldr	r1, [pc, #24]	; (400d5c <pmc_switch_mck_to_pllack+0x60>)
  400d42:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d44:	f012 0f08 	tst.w	r2, #8
  400d48:	d105      	bne.n	400d56 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d4a:	3b01      	subs	r3, #1
  400d4c:	d1f9      	bne.n	400d42 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400d4e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400d50:	4770      	bx	lr
	return 0;
  400d52:	2000      	movs	r0, #0
  400d54:	4770      	bx	lr
  400d56:	2000      	movs	r0, #0
  400d58:	4770      	bx	lr
  400d5a:	bf00      	nop
  400d5c:	400e0400 	.word	0x400e0400

00400d60 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400d60:	b9c8      	cbnz	r0, 400d96 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d62:	4a11      	ldr	r2, [pc, #68]	; (400da8 <pmc_switch_mainck_to_xtal+0x48>)
  400d64:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d66:	0209      	lsls	r1, r1, #8
  400d68:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d6a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400d6e:	f023 0303 	bic.w	r3, r3, #3
  400d72:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400d76:	f043 0301 	orr.w	r3, r3, #1
  400d7a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d7c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d7e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d80:	f013 0f01 	tst.w	r3, #1
  400d84:	d0fb      	beq.n	400d7e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d86:	4a08      	ldr	r2, [pc, #32]	; (400da8 <pmc_switch_mainck_to_xtal+0x48>)
  400d88:	6a13      	ldr	r3, [r2, #32]
  400d8a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400d92:	6213      	str	r3, [r2, #32]
  400d94:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d96:	4904      	ldr	r1, [pc, #16]	; (400da8 <pmc_switch_mainck_to_xtal+0x48>)
  400d98:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400d9a:	4a04      	ldr	r2, [pc, #16]	; (400dac <pmc_switch_mainck_to_xtal+0x4c>)
  400d9c:	401a      	ands	r2, r3
  400d9e:	4b04      	ldr	r3, [pc, #16]	; (400db0 <pmc_switch_mainck_to_xtal+0x50>)
  400da0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400da2:	620b      	str	r3, [r1, #32]
  400da4:	4770      	bx	lr
  400da6:	bf00      	nop
  400da8:	400e0400 	.word	0x400e0400
  400dac:	fec8fffc 	.word	0xfec8fffc
  400db0:	01370002 	.word	0x01370002

00400db4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400db4:	4b02      	ldr	r3, [pc, #8]	; (400dc0 <pmc_osc_is_ready_mainck+0xc>)
  400db6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400db8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400dbc:	4770      	bx	lr
  400dbe:	bf00      	nop
  400dc0:	400e0400 	.word	0x400e0400

00400dc4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400dc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400dc8:	4b01      	ldr	r3, [pc, #4]	; (400dd0 <pmc_disable_pllack+0xc>)
  400dca:	629a      	str	r2, [r3, #40]	; 0x28
  400dcc:	4770      	bx	lr
  400dce:	bf00      	nop
  400dd0:	400e0400 	.word	0x400e0400

00400dd4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400dd4:	4b02      	ldr	r3, [pc, #8]	; (400de0 <pmc_is_locked_pllack+0xc>)
  400dd6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400dd8:	f000 0002 	and.w	r0, r0, #2
  400ddc:	4770      	bx	lr
  400dde:	bf00      	nop
  400de0:	400e0400 	.word	0x400e0400

00400de4 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400de4:	282f      	cmp	r0, #47	; 0x2f
  400de6:	d81e      	bhi.n	400e26 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400de8:	281f      	cmp	r0, #31
  400dea:	d80c      	bhi.n	400e06 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400dec:	4b11      	ldr	r3, [pc, #68]	; (400e34 <pmc_enable_periph_clk+0x50>)
  400dee:	699a      	ldr	r2, [r3, #24]
  400df0:	2301      	movs	r3, #1
  400df2:	4083      	lsls	r3, r0
  400df4:	4393      	bics	r3, r2
  400df6:	d018      	beq.n	400e2a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400df8:	2301      	movs	r3, #1
  400dfa:	fa03 f000 	lsl.w	r0, r3, r0
  400dfe:	4b0d      	ldr	r3, [pc, #52]	; (400e34 <pmc_enable_periph_clk+0x50>)
  400e00:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400e02:	2000      	movs	r0, #0
  400e04:	4770      	bx	lr
		ul_id -= 32;
  400e06:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e08:	4b0a      	ldr	r3, [pc, #40]	; (400e34 <pmc_enable_periph_clk+0x50>)
  400e0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e0e:	2301      	movs	r3, #1
  400e10:	4083      	lsls	r3, r0
  400e12:	4393      	bics	r3, r2
  400e14:	d00b      	beq.n	400e2e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e16:	2301      	movs	r3, #1
  400e18:	fa03 f000 	lsl.w	r0, r3, r0
  400e1c:	4b05      	ldr	r3, [pc, #20]	; (400e34 <pmc_enable_periph_clk+0x50>)
  400e1e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400e22:	2000      	movs	r0, #0
  400e24:	4770      	bx	lr
		return 1;
  400e26:	2001      	movs	r0, #1
  400e28:	4770      	bx	lr
	return 0;
  400e2a:	2000      	movs	r0, #0
  400e2c:	4770      	bx	lr
  400e2e:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e30:	4770      	bx	lr
  400e32:	bf00      	nop
  400e34:	400e0400 	.word	0x400e0400

00400e38 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400e38:	b508      	push	{r3, lr}
  400e3a:	2013      	movs	r0, #19
  400e3c:	4b01      	ldr	r3, [pc, #4]	; (400e44 <spi_enable_clock+0xc>)
  400e3e:	4798      	blx	r3
  400e40:	bd08      	pop	{r3, pc}
  400e42:	bf00      	nop
  400e44:	00400de5 	.word	0x00400de5

00400e48 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400e48:	6843      	ldr	r3, [r0, #4]
  400e4a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400e4e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400e50:	6843      	ldr	r3, [r0, #4]
  400e52:	0409      	lsls	r1, r1, #16
  400e54:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400e58:	4319      	orrs	r1, r3
  400e5a:	6041      	str	r1, [r0, #4]
  400e5c:	4770      	bx	lr

00400e5e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400e5e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400e60:	f643 2499 	movw	r4, #15001	; 0x3a99
  400e64:	6905      	ldr	r5, [r0, #16]
  400e66:	f015 0f02 	tst.w	r5, #2
  400e6a:	d103      	bne.n	400e74 <spi_write+0x16>
		if (!timeout--) {
  400e6c:	3c01      	subs	r4, #1
  400e6e:	d1f9      	bne.n	400e64 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400e70:	2001      	movs	r0, #1
  400e72:	e00c      	b.n	400e8e <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400e74:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400e76:	f014 0f02 	tst.w	r4, #2
  400e7a:	d006      	beq.n	400e8a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400e7c:	0412      	lsls	r2, r2, #16
  400e7e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400e82:	4311      	orrs	r1, r2
		if (uc_last) {
  400e84:	b10b      	cbz	r3, 400e8a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400e86:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400e8a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400e8c:	2000      	movs	r0, #0
}
  400e8e:	bc30      	pop	{r4, r5}
  400e90:	4770      	bx	lr

00400e92 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400e92:	b932      	cbnz	r2, 400ea2 <spi_set_clock_polarity+0x10>
  400e94:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400e98:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400e9a:	f023 0301 	bic.w	r3, r3, #1
  400e9e:	6303      	str	r3, [r0, #48]	; 0x30
  400ea0:	4770      	bx	lr
  400ea2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400ea6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400ea8:	f043 0301 	orr.w	r3, r3, #1
  400eac:	6303      	str	r3, [r0, #48]	; 0x30
  400eae:	4770      	bx	lr

00400eb0 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400eb0:	b932      	cbnz	r2, 400ec0 <spi_set_clock_phase+0x10>
  400eb2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400eb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400eb8:	f023 0302 	bic.w	r3, r3, #2
  400ebc:	6303      	str	r3, [r0, #48]	; 0x30
  400ebe:	4770      	bx	lr
  400ec0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400ec4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400ec6:	f043 0302 	orr.w	r3, r3, #2
  400eca:	6303      	str	r3, [r0, #48]	; 0x30
  400ecc:	4770      	bx	lr

00400ece <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400ece:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400ed2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400ed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400ed8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400eda:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400edc:	431a      	orrs	r2, r3
  400ede:	630a      	str	r2, [r1, #48]	; 0x30
  400ee0:	4770      	bx	lr

00400ee2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400ee2:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ee4:	0189      	lsls	r1, r1, #6
  400ee6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400ee8:	2402      	movs	r4, #2
  400eea:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400eec:	f04f 31ff 	mov.w	r1, #4294967295
  400ef0:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400ef2:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400ef4:	605a      	str	r2, [r3, #4]
}
  400ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
  400efa:	4770      	bx	lr

00400efc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400efc:	0189      	lsls	r1, r1, #6
  400efe:	2305      	movs	r3, #5
  400f00:	5043      	str	r3, [r0, r1]
  400f02:	4770      	bx	lr

00400f04 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400f04:	0189      	lsls	r1, r1, #6
  400f06:	2302      	movs	r3, #2
  400f08:	5043      	str	r3, [r0, r1]
  400f0a:	4770      	bx	lr

00400f0c <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400f0c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400f10:	61ca      	str	r2, [r1, #28]
  400f12:	4770      	bx	lr

00400f14 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f14:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400f18:	624a      	str	r2, [r1, #36]	; 0x24
  400f1a:	4770      	bx	lr

00400f1c <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f1c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400f20:	6a08      	ldr	r0, [r1, #32]
}
  400f22:	4770      	bx	lr

00400f24 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400f24:	b4f0      	push	{r4, r5, r6, r7}
  400f26:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f28:	2402      	movs	r4, #2
  400f2a:	9401      	str	r4, [sp, #4]
  400f2c:	2408      	movs	r4, #8
  400f2e:	9402      	str	r4, [sp, #8]
  400f30:	2420      	movs	r4, #32
  400f32:	9403      	str	r4, [sp, #12]
  400f34:	2480      	movs	r4, #128	; 0x80
  400f36:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400f38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400f3a:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f3c:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400f3e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400f42:	d814      	bhi.n	400f6e <tc_find_mck_divisor+0x4a>
  400f44:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400f46:	42a0      	cmp	r0, r4
  400f48:	d217      	bcs.n	400f7a <tc_find_mck_divisor+0x56>
  400f4a:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400f4c:	af01      	add	r7, sp, #4
  400f4e:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400f52:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400f56:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400f58:	4284      	cmp	r4, r0
  400f5a:	d30a      	bcc.n	400f72 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400f5c:	4286      	cmp	r6, r0
  400f5e:	d90d      	bls.n	400f7c <tc_find_mck_divisor+0x58>
			ul_index++) {
  400f60:	3501      	adds	r5, #1
	for (ul_index = 0;
  400f62:	2d05      	cmp	r5, #5
  400f64:	d1f3      	bne.n	400f4e <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400f66:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400f68:	b006      	add	sp, #24
  400f6a:	bcf0      	pop	{r4, r5, r6, r7}
  400f6c:	4770      	bx	lr
			return 0;
  400f6e:	2000      	movs	r0, #0
  400f70:	e7fa      	b.n	400f68 <tc_find_mck_divisor+0x44>
  400f72:	2000      	movs	r0, #0
  400f74:	e7f8      	b.n	400f68 <tc_find_mck_divisor+0x44>
	return 1;
  400f76:	2001      	movs	r0, #1
  400f78:	e7f6      	b.n	400f68 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400f7a:	2500      	movs	r5, #0
	if (p_uldiv) {
  400f7c:	b12a      	cbz	r2, 400f8a <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400f7e:	a906      	add	r1, sp, #24
  400f80:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400f84:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400f88:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400f8a:	2b00      	cmp	r3, #0
  400f8c:	d0f3      	beq.n	400f76 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400f8e:	601d      	str	r5, [r3, #0]
	return 1;
  400f90:	2001      	movs	r0, #1
  400f92:	e7e9      	b.n	400f68 <tc_find_mck_divisor+0x44>

00400f94 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400f94:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400f96:	23ac      	movs	r3, #172	; 0xac
  400f98:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400f9a:	680b      	ldr	r3, [r1, #0]
  400f9c:	684a      	ldr	r2, [r1, #4]
  400f9e:	fbb3 f3f2 	udiv	r3, r3, r2
  400fa2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400fa4:	1e5c      	subs	r4, r3, #1
  400fa6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400faa:	4294      	cmp	r4, r2
  400fac:	d80c      	bhi.n	400fc8 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400fae:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400fb0:	688b      	ldr	r3, [r1, #8]
  400fb2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400fb4:	f240 2302 	movw	r3, #514	; 0x202
  400fb8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400fbc:	2350      	movs	r3, #80	; 0x50
  400fbe:	6003      	str	r3, [r0, #0]

	return 0;
  400fc0:	2000      	movs	r0, #0
}
  400fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fc6:	4770      	bx	lr
		return 1;
  400fc8:	2001      	movs	r0, #1
  400fca:	e7fa      	b.n	400fc2 <uart_init+0x2e>

00400fcc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400fcc:	6943      	ldr	r3, [r0, #20]
  400fce:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400fd2:	bf1a      	itte	ne
  400fd4:	61c1      	strne	r1, [r0, #28]
	return 0;
  400fd6:	2000      	movne	r0, #0
		return 1;
  400fd8:	2001      	moveq	r0, #1
}
  400fda:	4770      	bx	lr

00400fdc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400fdc:	6943      	ldr	r3, [r0, #20]
  400fde:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400fe2:	bf1d      	ittte	ne
  400fe4:	6983      	ldrne	r3, [r0, #24]
  400fe6:	700b      	strbne	r3, [r1, #0]
	return 0;
  400fe8:	2000      	movne	r0, #0
		return 1;
  400fea:	2001      	moveq	r0, #1
}
  400fec:	4770      	bx	lr

00400fee <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400fee:	6943      	ldr	r3, [r0, #20]
  400ff0:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400ff4:	bf1d      	ittte	ne
  400ff6:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400ffa:	61c1      	strne	r1, [r0, #28]
	return 0;
  400ffc:	2000      	movne	r0, #0
		return 1;
  400ffe:	2001      	moveq	r0, #1
}
  401000:	4770      	bx	lr

00401002 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401002:	6943      	ldr	r3, [r0, #20]
  401004:	f013 0f01 	tst.w	r3, #1
  401008:	d005      	beq.n	401016 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40100a:	6983      	ldr	r3, [r0, #24]
  40100c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401010:	600b      	str	r3, [r1, #0]

	return 0;
  401012:	2000      	movs	r0, #0
  401014:	4770      	bx	lr
		return 1;
  401016:	2001      	movs	r0, #1
}
  401018:	4770      	bx	lr

0040101a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40101a:	e7fe      	b.n	40101a <Dummy_Handler>

0040101c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40101c:	b500      	push	{lr}
  40101e:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401020:	4b25      	ldr	r3, [pc, #148]	; (4010b8 <Reset_Handler+0x9c>)
  401022:	4a26      	ldr	r2, [pc, #152]	; (4010bc <Reset_Handler+0xa0>)
  401024:	429a      	cmp	r2, r3
  401026:	d010      	beq.n	40104a <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401028:	4b25      	ldr	r3, [pc, #148]	; (4010c0 <Reset_Handler+0xa4>)
  40102a:	4a23      	ldr	r2, [pc, #140]	; (4010b8 <Reset_Handler+0x9c>)
  40102c:	429a      	cmp	r2, r3
  40102e:	d20c      	bcs.n	40104a <Reset_Handler+0x2e>
  401030:	3b01      	subs	r3, #1
  401032:	1a9b      	subs	r3, r3, r2
  401034:	f023 0303 	bic.w	r3, r3, #3
  401038:	3304      	adds	r3, #4
  40103a:	4413      	add	r3, r2
  40103c:	491f      	ldr	r1, [pc, #124]	; (4010bc <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40103e:	f851 0b04 	ldr.w	r0, [r1], #4
  401042:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401046:	429a      	cmp	r2, r3
  401048:	d1f9      	bne.n	40103e <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40104a:	4b1e      	ldr	r3, [pc, #120]	; (4010c4 <Reset_Handler+0xa8>)
  40104c:	4a1e      	ldr	r2, [pc, #120]	; (4010c8 <Reset_Handler+0xac>)
  40104e:	429a      	cmp	r2, r3
  401050:	d20a      	bcs.n	401068 <Reset_Handler+0x4c>
  401052:	3b01      	subs	r3, #1
  401054:	1a9b      	subs	r3, r3, r2
  401056:	f023 0303 	bic.w	r3, r3, #3
  40105a:	3304      	adds	r3, #4
  40105c:	4413      	add	r3, r2
		*pDest++ = 0;
  40105e:	2100      	movs	r1, #0
  401060:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401064:	4293      	cmp	r3, r2
  401066:	d1fb      	bne.n	401060 <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401068:	4a18      	ldr	r2, [pc, #96]	; (4010cc <Reset_Handler+0xb0>)
  40106a:	4b19      	ldr	r3, [pc, #100]	; (4010d0 <Reset_Handler+0xb4>)
  40106c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401070:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  401072:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401076:	fab3 f383 	clz	r3, r3
  40107a:	095b      	lsrs	r3, r3, #5
  40107c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40107e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  401080:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401084:	2200      	movs	r2, #0
  401086:	4b13      	ldr	r3, [pc, #76]	; (4010d4 <Reset_Handler+0xb8>)
  401088:	701a      	strb	r2, [r3, #0]
	return flags;
  40108a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40108c:	4a12      	ldr	r2, [pc, #72]	; (4010d8 <Reset_Handler+0xbc>)
  40108e:	6813      	ldr	r3, [r2, #0]
  401090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401094:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401096:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40109a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40109e:	b129      	cbz	r1, 4010ac <Reset_Handler+0x90>
		cpu_irq_enable();
  4010a0:	2201      	movs	r2, #1
  4010a2:	4b0c      	ldr	r3, [pc, #48]	; (4010d4 <Reset_Handler+0xb8>)
  4010a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4010a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010aa:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4010ac:	4b0b      	ldr	r3, [pc, #44]	; (4010dc <Reset_Handler+0xc0>)
  4010ae:	4798      	blx	r3

	/* Branch to main function */
	main();
  4010b0:	4b0b      	ldr	r3, [pc, #44]	; (4010e0 <Reset_Handler+0xc4>)
  4010b2:	4798      	blx	r3
  4010b4:	e7fe      	b.n	4010b4 <Reset_Handler+0x98>
  4010b6:	bf00      	nop
  4010b8:	20000000 	.word	0x20000000
  4010bc:	004023d0 	.word	0x004023d0
  4010c0:	2000084c 	.word	0x2000084c
  4010c4:	2000a658 	.word	0x2000a658
  4010c8:	2000084c 	.word	0x2000084c
  4010cc:	e000ed00 	.word	0xe000ed00
  4010d0:	00400000 	.word	0x00400000
  4010d4:	20000002 	.word	0x20000002
  4010d8:	e000ed88 	.word	0xe000ed88
  4010dc:	004012b1 	.word	0x004012b1
  4010e0:	0040039d 	.word	0x0040039d

004010e4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4010e4:	4b3b      	ldr	r3, [pc, #236]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  4010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010e8:	f003 0303 	and.w	r3, r3, #3
  4010ec:	2b01      	cmp	r3, #1
  4010ee:	d01d      	beq.n	40112c <SystemCoreClockUpdate+0x48>
  4010f0:	b183      	cbz	r3, 401114 <SystemCoreClockUpdate+0x30>
  4010f2:	2b02      	cmp	r3, #2
  4010f4:	d036      	beq.n	401164 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4010f6:	4b37      	ldr	r3, [pc, #220]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  4010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010fe:	2b70      	cmp	r3, #112	; 0x70
  401100:	d05f      	beq.n	4011c2 <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  401102:	4b34      	ldr	r3, [pc, #208]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  401104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401106:	4934      	ldr	r1, [pc, #208]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  401108:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40110c:	680b      	ldr	r3, [r1, #0]
  40110e:	40d3      	lsrs	r3, r2
  401110:	600b      	str	r3, [r1, #0]
  401112:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401114:	4b31      	ldr	r3, [pc, #196]	; (4011dc <SystemCoreClockUpdate+0xf8>)
  401116:	695b      	ldr	r3, [r3, #20]
  401118:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40111c:	bf14      	ite	ne
  40111e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401122:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401126:	4b2c      	ldr	r3, [pc, #176]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  401128:	601a      	str	r2, [r3, #0]
  40112a:	e7e4      	b.n	4010f6 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40112c:	4b29      	ldr	r3, [pc, #164]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  40112e:	6a1b      	ldr	r3, [r3, #32]
  401130:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401134:	d003      	beq.n	40113e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401136:	4a2a      	ldr	r2, [pc, #168]	; (4011e0 <SystemCoreClockUpdate+0xfc>)
  401138:	4b27      	ldr	r3, [pc, #156]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  40113a:	601a      	str	r2, [r3, #0]
  40113c:	e7db      	b.n	4010f6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40113e:	4a29      	ldr	r2, [pc, #164]	; (4011e4 <SystemCoreClockUpdate+0x100>)
  401140:	4b25      	ldr	r3, [pc, #148]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  401142:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401144:	4b23      	ldr	r3, [pc, #140]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  401146:	6a1b      	ldr	r3, [r3, #32]
  401148:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40114c:	2b10      	cmp	r3, #16
  40114e:	d005      	beq.n	40115c <SystemCoreClockUpdate+0x78>
  401150:	2b20      	cmp	r3, #32
  401152:	d1d0      	bne.n	4010f6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401154:	4a22      	ldr	r2, [pc, #136]	; (4011e0 <SystemCoreClockUpdate+0xfc>)
  401156:	4b20      	ldr	r3, [pc, #128]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  401158:	601a      	str	r2, [r3, #0]
				break;
  40115a:	e7cc      	b.n	4010f6 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  40115c:	4a22      	ldr	r2, [pc, #136]	; (4011e8 <SystemCoreClockUpdate+0x104>)
  40115e:	4b1e      	ldr	r3, [pc, #120]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  401160:	601a      	str	r2, [r3, #0]
				break;
  401162:	e7c8      	b.n	4010f6 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401164:	4b1b      	ldr	r3, [pc, #108]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  401166:	6a1b      	ldr	r3, [r3, #32]
  401168:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40116c:	d016      	beq.n	40119c <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40116e:	4a1c      	ldr	r2, [pc, #112]	; (4011e0 <SystemCoreClockUpdate+0xfc>)
  401170:	4b19      	ldr	r3, [pc, #100]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  401172:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  401174:	4b17      	ldr	r3, [pc, #92]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  401176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401178:	f003 0303 	and.w	r3, r3, #3
  40117c:	2b02      	cmp	r3, #2
  40117e:	d1ba      	bne.n	4010f6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401180:	4a14      	ldr	r2, [pc, #80]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  401182:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401184:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401186:	4814      	ldr	r0, [pc, #80]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401188:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40118c:	6803      	ldr	r3, [r0, #0]
  40118e:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401192:	b2d2      	uxtb	r2, r2
  401194:	fbb3 f3f2 	udiv	r3, r3, r2
  401198:	6003      	str	r3, [r0, #0]
  40119a:	e7ac      	b.n	4010f6 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40119c:	4a11      	ldr	r2, [pc, #68]	; (4011e4 <SystemCoreClockUpdate+0x100>)
  40119e:	4b0e      	ldr	r3, [pc, #56]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  4011a0:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4011a2:	4b0c      	ldr	r3, [pc, #48]	; (4011d4 <SystemCoreClockUpdate+0xf0>)
  4011a4:	6a1b      	ldr	r3, [r3, #32]
  4011a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011aa:	2b10      	cmp	r3, #16
  4011ac:	d005      	beq.n	4011ba <SystemCoreClockUpdate+0xd6>
  4011ae:	2b20      	cmp	r3, #32
  4011b0:	d1e0      	bne.n	401174 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4011b2:	4a0b      	ldr	r2, [pc, #44]	; (4011e0 <SystemCoreClockUpdate+0xfc>)
  4011b4:	4b08      	ldr	r3, [pc, #32]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  4011b6:	601a      	str	r2, [r3, #0]
				break;
  4011b8:	e7dc      	b.n	401174 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4011ba:	4a0b      	ldr	r2, [pc, #44]	; (4011e8 <SystemCoreClockUpdate+0x104>)
  4011bc:	4b06      	ldr	r3, [pc, #24]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  4011be:	601a      	str	r2, [r3, #0]
				break;
  4011c0:	e7d8      	b.n	401174 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4011c2:	4a05      	ldr	r2, [pc, #20]	; (4011d8 <SystemCoreClockUpdate+0xf4>)
  4011c4:	6813      	ldr	r3, [r2, #0]
  4011c6:	4909      	ldr	r1, [pc, #36]	; (4011ec <SystemCoreClockUpdate+0x108>)
  4011c8:	fba1 1303 	umull	r1, r3, r1, r3
  4011cc:	085b      	lsrs	r3, r3, #1
  4011ce:	6013      	str	r3, [r2, #0]
  4011d0:	4770      	bx	lr
  4011d2:	bf00      	nop
  4011d4:	400e0400 	.word	0x400e0400
  4011d8:	20000004 	.word	0x20000004
  4011dc:	400e1810 	.word	0x400e1810
  4011e0:	00b71b00 	.word	0x00b71b00
  4011e4:	003d0900 	.word	0x003d0900
  4011e8:	007a1200 	.word	0x007a1200
  4011ec:	aaaaaaab 	.word	0xaaaaaaab

004011f0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4011f0:	4b12      	ldr	r3, [pc, #72]	; (40123c <system_init_flash+0x4c>)
  4011f2:	4298      	cmp	r0, r3
  4011f4:	d911      	bls.n	40121a <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4011f6:	4b12      	ldr	r3, [pc, #72]	; (401240 <system_init_flash+0x50>)
  4011f8:	4298      	cmp	r0, r3
  4011fa:	d913      	bls.n	401224 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4011fc:	4b11      	ldr	r3, [pc, #68]	; (401244 <system_init_flash+0x54>)
  4011fe:	4298      	cmp	r0, r3
  401200:	d914      	bls.n	40122c <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401202:	4b11      	ldr	r3, [pc, #68]	; (401248 <system_init_flash+0x58>)
  401204:	4298      	cmp	r0, r3
  401206:	d915      	bls.n	401234 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401208:	4b10      	ldr	r3, [pc, #64]	; (40124c <system_init_flash+0x5c>)
  40120a:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40120c:	bf94      	ite	ls
  40120e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401212:	4a0f      	ldrhi	r2, [pc, #60]	; (401250 <system_init_flash+0x60>)
  401214:	4b0f      	ldr	r3, [pc, #60]	; (401254 <system_init_flash+0x64>)
  401216:	601a      	str	r2, [r3, #0]
  401218:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40121a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40121e:	4b0d      	ldr	r3, [pc, #52]	; (401254 <system_init_flash+0x64>)
  401220:	601a      	str	r2, [r3, #0]
  401222:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401224:	4a0c      	ldr	r2, [pc, #48]	; (401258 <system_init_flash+0x68>)
  401226:	4b0b      	ldr	r3, [pc, #44]	; (401254 <system_init_flash+0x64>)
  401228:	601a      	str	r2, [r3, #0]
  40122a:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40122c:	4a0b      	ldr	r2, [pc, #44]	; (40125c <system_init_flash+0x6c>)
  40122e:	4b09      	ldr	r3, [pc, #36]	; (401254 <system_init_flash+0x64>)
  401230:	601a      	str	r2, [r3, #0]
  401232:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401234:	4a0a      	ldr	r2, [pc, #40]	; (401260 <system_init_flash+0x70>)
  401236:	4b07      	ldr	r3, [pc, #28]	; (401254 <system_init_flash+0x64>)
  401238:	601a      	str	r2, [r3, #0]
  40123a:	4770      	bx	lr
  40123c:	01312cff 	.word	0x01312cff
  401240:	026259ff 	.word	0x026259ff
  401244:	039386ff 	.word	0x039386ff
  401248:	04c4b3ff 	.word	0x04c4b3ff
  40124c:	05f5e0ff 	.word	0x05f5e0ff
  401250:	04000500 	.word	0x04000500
  401254:	400e0a00 	.word	0x400e0a00
  401258:	04000100 	.word	0x04000100
  40125c:	04000200 	.word	0x04000200
  401260:	04000300 	.word	0x04000300

00401264 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401264:	4b0a      	ldr	r3, [pc, #40]	; (401290 <_sbrk+0x2c>)
  401266:	681b      	ldr	r3, [r3, #0]
  401268:	b153      	cbz	r3, 401280 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40126a:	4b09      	ldr	r3, [pc, #36]	; (401290 <_sbrk+0x2c>)
  40126c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40126e:	181a      	adds	r2, r3, r0
  401270:	4908      	ldr	r1, [pc, #32]	; (401294 <_sbrk+0x30>)
  401272:	4291      	cmp	r1, r2
  401274:	db08      	blt.n	401288 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401276:	4610      	mov	r0, r2
  401278:	4a05      	ldr	r2, [pc, #20]	; (401290 <_sbrk+0x2c>)
  40127a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40127c:	4618      	mov	r0, r3
  40127e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401280:	4a05      	ldr	r2, [pc, #20]	; (401298 <_sbrk+0x34>)
  401282:	4b03      	ldr	r3, [pc, #12]	; (401290 <_sbrk+0x2c>)
  401284:	601a      	str	r2, [r3, #0]
  401286:	e7f0      	b.n	40126a <_sbrk+0x6>
		return (caddr_t) -1;	
  401288:	f04f 30ff 	mov.w	r0, #4294967295
}
  40128c:	4770      	bx	lr
  40128e:	bf00      	nop
  401290:	2000a524 	.word	0x2000a524
  401294:	2001fffc 	.word	0x2001fffc
  401298:	2000d658 	.word	0x2000d658

0040129c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40129c:	f04f 30ff 	mov.w	r0, #4294967295
  4012a0:	4770      	bx	lr

004012a2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4012a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4012a6:	604b      	str	r3, [r1, #4]

	return 0;
}
  4012a8:	2000      	movs	r0, #0
  4012aa:	4770      	bx	lr

004012ac <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4012ac:	2000      	movs	r0, #0
  4012ae:	4770      	bx	lr

004012b0 <__libc_init_array>:
  4012b0:	b570      	push	{r4, r5, r6, lr}
  4012b2:	4e0f      	ldr	r6, [pc, #60]	; (4012f0 <__libc_init_array+0x40>)
  4012b4:	4d0f      	ldr	r5, [pc, #60]	; (4012f4 <__libc_init_array+0x44>)
  4012b6:	1b76      	subs	r6, r6, r5
  4012b8:	10b6      	asrs	r6, r6, #2
  4012ba:	bf18      	it	ne
  4012bc:	2400      	movne	r4, #0
  4012be:	d005      	beq.n	4012cc <__libc_init_array+0x1c>
  4012c0:	3401      	adds	r4, #1
  4012c2:	f855 3b04 	ldr.w	r3, [r5], #4
  4012c6:	4798      	blx	r3
  4012c8:	42a6      	cmp	r6, r4
  4012ca:	d1f9      	bne.n	4012c0 <__libc_init_array+0x10>
  4012cc:	4e0a      	ldr	r6, [pc, #40]	; (4012f8 <__libc_init_array+0x48>)
  4012ce:	4d0b      	ldr	r5, [pc, #44]	; (4012fc <__libc_init_array+0x4c>)
  4012d0:	1b76      	subs	r6, r6, r5
  4012d2:	f001 f86b 	bl	4023ac <_init>
  4012d6:	10b6      	asrs	r6, r6, #2
  4012d8:	bf18      	it	ne
  4012da:	2400      	movne	r4, #0
  4012dc:	d006      	beq.n	4012ec <__libc_init_array+0x3c>
  4012de:	3401      	adds	r4, #1
  4012e0:	f855 3b04 	ldr.w	r3, [r5], #4
  4012e4:	4798      	blx	r3
  4012e6:	42a6      	cmp	r6, r4
  4012e8:	d1f9      	bne.n	4012de <__libc_init_array+0x2e>
  4012ea:	bd70      	pop	{r4, r5, r6, pc}
  4012ec:	bd70      	pop	{r4, r5, r6, pc}
  4012ee:	bf00      	nop
  4012f0:	004023b8 	.word	0x004023b8
  4012f4:	004023b8 	.word	0x004023b8
  4012f8:	004023c0 	.word	0x004023c0
  4012fc:	004023b8 	.word	0x004023b8

00401300 <memset>:
  401300:	b470      	push	{r4, r5, r6}
  401302:	0786      	lsls	r6, r0, #30
  401304:	d046      	beq.n	401394 <memset+0x94>
  401306:	1e54      	subs	r4, r2, #1
  401308:	2a00      	cmp	r2, #0
  40130a:	d041      	beq.n	401390 <memset+0x90>
  40130c:	b2ca      	uxtb	r2, r1
  40130e:	4603      	mov	r3, r0
  401310:	e002      	b.n	401318 <memset+0x18>
  401312:	f114 34ff 	adds.w	r4, r4, #4294967295
  401316:	d33b      	bcc.n	401390 <memset+0x90>
  401318:	f803 2b01 	strb.w	r2, [r3], #1
  40131c:	079d      	lsls	r5, r3, #30
  40131e:	d1f8      	bne.n	401312 <memset+0x12>
  401320:	2c03      	cmp	r4, #3
  401322:	d92e      	bls.n	401382 <memset+0x82>
  401324:	b2cd      	uxtb	r5, r1
  401326:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40132a:	2c0f      	cmp	r4, #15
  40132c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401330:	d919      	bls.n	401366 <memset+0x66>
  401332:	f103 0210 	add.w	r2, r3, #16
  401336:	4626      	mov	r6, r4
  401338:	3e10      	subs	r6, #16
  40133a:	2e0f      	cmp	r6, #15
  40133c:	f842 5c10 	str.w	r5, [r2, #-16]
  401340:	f842 5c0c 	str.w	r5, [r2, #-12]
  401344:	f842 5c08 	str.w	r5, [r2, #-8]
  401348:	f842 5c04 	str.w	r5, [r2, #-4]
  40134c:	f102 0210 	add.w	r2, r2, #16
  401350:	d8f2      	bhi.n	401338 <memset+0x38>
  401352:	f1a4 0210 	sub.w	r2, r4, #16
  401356:	f022 020f 	bic.w	r2, r2, #15
  40135a:	f004 040f 	and.w	r4, r4, #15
  40135e:	3210      	adds	r2, #16
  401360:	2c03      	cmp	r4, #3
  401362:	4413      	add	r3, r2
  401364:	d90d      	bls.n	401382 <memset+0x82>
  401366:	461e      	mov	r6, r3
  401368:	4622      	mov	r2, r4
  40136a:	3a04      	subs	r2, #4
  40136c:	2a03      	cmp	r2, #3
  40136e:	f846 5b04 	str.w	r5, [r6], #4
  401372:	d8fa      	bhi.n	40136a <memset+0x6a>
  401374:	1f22      	subs	r2, r4, #4
  401376:	f022 0203 	bic.w	r2, r2, #3
  40137a:	3204      	adds	r2, #4
  40137c:	4413      	add	r3, r2
  40137e:	f004 0403 	and.w	r4, r4, #3
  401382:	b12c      	cbz	r4, 401390 <memset+0x90>
  401384:	b2c9      	uxtb	r1, r1
  401386:	441c      	add	r4, r3
  401388:	f803 1b01 	strb.w	r1, [r3], #1
  40138c:	429c      	cmp	r4, r3
  40138e:	d1fb      	bne.n	401388 <memset+0x88>
  401390:	bc70      	pop	{r4, r5, r6}
  401392:	4770      	bx	lr
  401394:	4614      	mov	r4, r2
  401396:	4603      	mov	r3, r0
  401398:	e7c2      	b.n	401320 <memset+0x20>
  40139a:	bf00      	nop

0040139c <setbuf>:
  40139c:	2900      	cmp	r1, #0
  40139e:	bf0c      	ite	eq
  4013a0:	2202      	moveq	r2, #2
  4013a2:	2200      	movne	r2, #0
  4013a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4013a8:	f000 b800 	b.w	4013ac <setvbuf>

004013ac <setvbuf>:
  4013ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4013b0:	4c61      	ldr	r4, [pc, #388]	; (401538 <setvbuf+0x18c>)
  4013b2:	6825      	ldr	r5, [r4, #0]
  4013b4:	b083      	sub	sp, #12
  4013b6:	4604      	mov	r4, r0
  4013b8:	460f      	mov	r7, r1
  4013ba:	4690      	mov	r8, r2
  4013bc:	461e      	mov	r6, r3
  4013be:	b115      	cbz	r5, 4013c6 <setvbuf+0x1a>
  4013c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d064      	beq.n	401490 <setvbuf+0xe4>
  4013c6:	f1b8 0f02 	cmp.w	r8, #2
  4013ca:	d006      	beq.n	4013da <setvbuf+0x2e>
  4013cc:	f1b8 0f01 	cmp.w	r8, #1
  4013d0:	f200 809f 	bhi.w	401512 <setvbuf+0x166>
  4013d4:	2e00      	cmp	r6, #0
  4013d6:	f2c0 809c 	blt.w	401512 <setvbuf+0x166>
  4013da:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4013dc:	07d8      	lsls	r0, r3, #31
  4013de:	d534      	bpl.n	40144a <setvbuf+0x9e>
  4013e0:	4621      	mov	r1, r4
  4013e2:	4628      	mov	r0, r5
  4013e4:	f000 f95a 	bl	40169c <_fflush_r>
  4013e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4013ea:	b141      	cbz	r1, 4013fe <setvbuf+0x52>
  4013ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4013f0:	4299      	cmp	r1, r3
  4013f2:	d002      	beq.n	4013fa <setvbuf+0x4e>
  4013f4:	4628      	mov	r0, r5
  4013f6:	f000 fa4b 	bl	401890 <_free_r>
  4013fa:	2300      	movs	r3, #0
  4013fc:	6323      	str	r3, [r4, #48]	; 0x30
  4013fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401402:	2200      	movs	r2, #0
  401404:	61a2      	str	r2, [r4, #24]
  401406:	6062      	str	r2, [r4, #4]
  401408:	061a      	lsls	r2, r3, #24
  40140a:	d43a      	bmi.n	401482 <setvbuf+0xd6>
  40140c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401410:	f023 0303 	bic.w	r3, r3, #3
  401414:	f1b8 0f02 	cmp.w	r8, #2
  401418:	81a3      	strh	r3, [r4, #12]
  40141a:	d01d      	beq.n	401458 <setvbuf+0xac>
  40141c:	ab01      	add	r3, sp, #4
  40141e:	466a      	mov	r2, sp
  401420:	4621      	mov	r1, r4
  401422:	4628      	mov	r0, r5
  401424:	f000 fb4c 	bl	401ac0 <__swhatbuf_r>
  401428:	89a3      	ldrh	r3, [r4, #12]
  40142a:	4318      	orrs	r0, r3
  40142c:	81a0      	strh	r0, [r4, #12]
  40142e:	2e00      	cmp	r6, #0
  401430:	d132      	bne.n	401498 <setvbuf+0xec>
  401432:	9e00      	ldr	r6, [sp, #0]
  401434:	4630      	mov	r0, r6
  401436:	f000 fb71 	bl	401b1c <malloc>
  40143a:	4607      	mov	r7, r0
  40143c:	2800      	cmp	r0, #0
  40143e:	d06b      	beq.n	401518 <setvbuf+0x16c>
  401440:	89a3      	ldrh	r3, [r4, #12]
  401442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401446:	81a3      	strh	r3, [r4, #12]
  401448:	e028      	b.n	40149c <setvbuf+0xf0>
  40144a:	89a3      	ldrh	r3, [r4, #12]
  40144c:	0599      	lsls	r1, r3, #22
  40144e:	d4c7      	bmi.n	4013e0 <setvbuf+0x34>
  401450:	6da0      	ldr	r0, [r4, #88]	; 0x58
  401452:	f000 fb31 	bl	401ab8 <__retarget_lock_acquire_recursive>
  401456:	e7c3      	b.n	4013e0 <setvbuf+0x34>
  401458:	2500      	movs	r5, #0
  40145a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40145c:	2600      	movs	r6, #0
  40145e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401462:	f043 0302 	orr.w	r3, r3, #2
  401466:	2001      	movs	r0, #1
  401468:	60a6      	str	r6, [r4, #8]
  40146a:	07ce      	lsls	r6, r1, #31
  40146c:	81a3      	strh	r3, [r4, #12]
  40146e:	6022      	str	r2, [r4, #0]
  401470:	6122      	str	r2, [r4, #16]
  401472:	6160      	str	r0, [r4, #20]
  401474:	d401      	bmi.n	40147a <setvbuf+0xce>
  401476:	0598      	lsls	r0, r3, #22
  401478:	d53e      	bpl.n	4014f8 <setvbuf+0x14c>
  40147a:	4628      	mov	r0, r5
  40147c:	b003      	add	sp, #12
  40147e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401482:	6921      	ldr	r1, [r4, #16]
  401484:	4628      	mov	r0, r5
  401486:	f000 fa03 	bl	401890 <_free_r>
  40148a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40148e:	e7bd      	b.n	40140c <setvbuf+0x60>
  401490:	4628      	mov	r0, r5
  401492:	f000 f95b 	bl	40174c <__sinit>
  401496:	e796      	b.n	4013c6 <setvbuf+0x1a>
  401498:	2f00      	cmp	r7, #0
  40149a:	d0cb      	beq.n	401434 <setvbuf+0x88>
  40149c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40149e:	2b00      	cmp	r3, #0
  4014a0:	d033      	beq.n	40150a <setvbuf+0x15e>
  4014a2:	9b00      	ldr	r3, [sp, #0]
  4014a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4014a8:	6027      	str	r7, [r4, #0]
  4014aa:	429e      	cmp	r6, r3
  4014ac:	bf1c      	itt	ne
  4014ae:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4014b2:	81a2      	strhne	r2, [r4, #12]
  4014b4:	f1b8 0f01 	cmp.w	r8, #1
  4014b8:	bf04      	itt	eq
  4014ba:	f042 0201 	orreq.w	r2, r2, #1
  4014be:	81a2      	strheq	r2, [r4, #12]
  4014c0:	b292      	uxth	r2, r2
  4014c2:	f012 0308 	ands.w	r3, r2, #8
  4014c6:	6127      	str	r7, [r4, #16]
  4014c8:	6166      	str	r6, [r4, #20]
  4014ca:	d00e      	beq.n	4014ea <setvbuf+0x13e>
  4014cc:	07d1      	lsls	r1, r2, #31
  4014ce:	d51a      	bpl.n	401506 <setvbuf+0x15a>
  4014d0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4014d2:	4276      	negs	r6, r6
  4014d4:	2300      	movs	r3, #0
  4014d6:	f015 0501 	ands.w	r5, r5, #1
  4014da:	61a6      	str	r6, [r4, #24]
  4014dc:	60a3      	str	r3, [r4, #8]
  4014de:	d009      	beq.n	4014f4 <setvbuf+0x148>
  4014e0:	2500      	movs	r5, #0
  4014e2:	4628      	mov	r0, r5
  4014e4:	b003      	add	sp, #12
  4014e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4014ea:	60a3      	str	r3, [r4, #8]
  4014ec:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4014ee:	f015 0501 	ands.w	r5, r5, #1
  4014f2:	d1f5      	bne.n	4014e0 <setvbuf+0x134>
  4014f4:	0593      	lsls	r3, r2, #22
  4014f6:	d4c0      	bmi.n	40147a <setvbuf+0xce>
  4014f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4014fa:	f000 fadf 	bl	401abc <__retarget_lock_release_recursive>
  4014fe:	4628      	mov	r0, r5
  401500:	b003      	add	sp, #12
  401502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401506:	60a6      	str	r6, [r4, #8]
  401508:	e7f0      	b.n	4014ec <setvbuf+0x140>
  40150a:	4628      	mov	r0, r5
  40150c:	f000 f91e 	bl	40174c <__sinit>
  401510:	e7c7      	b.n	4014a2 <setvbuf+0xf6>
  401512:	f04f 35ff 	mov.w	r5, #4294967295
  401516:	e7b0      	b.n	40147a <setvbuf+0xce>
  401518:	f8dd 9000 	ldr.w	r9, [sp]
  40151c:	45b1      	cmp	r9, r6
  40151e:	d004      	beq.n	40152a <setvbuf+0x17e>
  401520:	4648      	mov	r0, r9
  401522:	f000 fafb 	bl	401b1c <malloc>
  401526:	4607      	mov	r7, r0
  401528:	b920      	cbnz	r0, 401534 <setvbuf+0x188>
  40152a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40152e:	f04f 35ff 	mov.w	r5, #4294967295
  401532:	e792      	b.n	40145a <setvbuf+0xae>
  401534:	464e      	mov	r6, r9
  401536:	e783      	b.n	401440 <setvbuf+0x94>
  401538:	20000008 	.word	0x20000008

0040153c <register_fini>:
  40153c:	4b02      	ldr	r3, [pc, #8]	; (401548 <register_fini+0xc>)
  40153e:	b113      	cbz	r3, 401546 <register_fini+0xa>
  401540:	4802      	ldr	r0, [pc, #8]	; (40154c <register_fini+0x10>)
  401542:	f000 b805 	b.w	401550 <atexit>
  401546:	4770      	bx	lr
  401548:	00000000 	.word	0x00000000
  40154c:	004017bd 	.word	0x004017bd

00401550 <atexit>:
  401550:	2300      	movs	r3, #0
  401552:	4601      	mov	r1, r0
  401554:	461a      	mov	r2, r3
  401556:	4618      	mov	r0, r3
  401558:	f000 be10 	b.w	40217c <__register_exitproc>

0040155c <__sflush_r>:
  40155c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401560:	b29a      	uxth	r2, r3
  401562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401566:	460d      	mov	r5, r1
  401568:	0711      	lsls	r1, r2, #28
  40156a:	4680      	mov	r8, r0
  40156c:	d43a      	bmi.n	4015e4 <__sflush_r+0x88>
  40156e:	686a      	ldr	r2, [r5, #4]
  401570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401574:	2a00      	cmp	r2, #0
  401576:	81ab      	strh	r3, [r5, #12]
  401578:	dd6f      	ble.n	40165a <__sflush_r+0xfe>
  40157a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40157c:	2c00      	cmp	r4, #0
  40157e:	d049      	beq.n	401614 <__sflush_r+0xb8>
  401580:	2200      	movs	r2, #0
  401582:	b29b      	uxth	r3, r3
  401584:	f8d8 6000 	ldr.w	r6, [r8]
  401588:	f8c8 2000 	str.w	r2, [r8]
  40158c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  401590:	d067      	beq.n	401662 <__sflush_r+0x106>
  401592:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401594:	075f      	lsls	r7, r3, #29
  401596:	d505      	bpl.n	4015a4 <__sflush_r+0x48>
  401598:	6869      	ldr	r1, [r5, #4]
  40159a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40159c:	1a52      	subs	r2, r2, r1
  40159e:	b10b      	cbz	r3, 4015a4 <__sflush_r+0x48>
  4015a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4015a2:	1ad2      	subs	r2, r2, r3
  4015a4:	2300      	movs	r3, #0
  4015a6:	69e9      	ldr	r1, [r5, #28]
  4015a8:	4640      	mov	r0, r8
  4015aa:	47a0      	blx	r4
  4015ac:	1c44      	adds	r4, r0, #1
  4015ae:	d03c      	beq.n	40162a <__sflush_r+0xce>
  4015b0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4015b4:	692a      	ldr	r2, [r5, #16]
  4015b6:	602a      	str	r2, [r5, #0]
  4015b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4015bc:	2200      	movs	r2, #0
  4015be:	81ab      	strh	r3, [r5, #12]
  4015c0:	04db      	lsls	r3, r3, #19
  4015c2:	606a      	str	r2, [r5, #4]
  4015c4:	d447      	bmi.n	401656 <__sflush_r+0xfa>
  4015c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4015c8:	f8c8 6000 	str.w	r6, [r8]
  4015cc:	b311      	cbz	r1, 401614 <__sflush_r+0xb8>
  4015ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4015d2:	4299      	cmp	r1, r3
  4015d4:	d002      	beq.n	4015dc <__sflush_r+0x80>
  4015d6:	4640      	mov	r0, r8
  4015d8:	f000 f95a 	bl	401890 <_free_r>
  4015dc:	2000      	movs	r0, #0
  4015de:	6328      	str	r0, [r5, #48]	; 0x30
  4015e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015e4:	692e      	ldr	r6, [r5, #16]
  4015e6:	b1ae      	cbz	r6, 401614 <__sflush_r+0xb8>
  4015e8:	682c      	ldr	r4, [r5, #0]
  4015ea:	602e      	str	r6, [r5, #0]
  4015ec:	0791      	lsls	r1, r2, #30
  4015ee:	bf0c      	ite	eq
  4015f0:	696b      	ldreq	r3, [r5, #20]
  4015f2:	2300      	movne	r3, #0
  4015f4:	1ba4      	subs	r4, r4, r6
  4015f6:	60ab      	str	r3, [r5, #8]
  4015f8:	e00a      	b.n	401610 <__sflush_r+0xb4>
  4015fa:	4623      	mov	r3, r4
  4015fc:	4632      	mov	r2, r6
  4015fe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  401600:	69e9      	ldr	r1, [r5, #28]
  401602:	4640      	mov	r0, r8
  401604:	47b8      	blx	r7
  401606:	2800      	cmp	r0, #0
  401608:	eba4 0400 	sub.w	r4, r4, r0
  40160c:	4406      	add	r6, r0
  40160e:	dd04      	ble.n	40161a <__sflush_r+0xbe>
  401610:	2c00      	cmp	r4, #0
  401612:	dcf2      	bgt.n	4015fa <__sflush_r+0x9e>
  401614:	2000      	movs	r0, #0
  401616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40161a:	89ab      	ldrh	r3, [r5, #12]
  40161c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401620:	81ab      	strh	r3, [r5, #12]
  401622:	f04f 30ff 	mov.w	r0, #4294967295
  401626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40162a:	f8d8 4000 	ldr.w	r4, [r8]
  40162e:	2c1d      	cmp	r4, #29
  401630:	d8f3      	bhi.n	40161a <__sflush_r+0xbe>
  401632:	4b19      	ldr	r3, [pc, #100]	; (401698 <__sflush_r+0x13c>)
  401634:	40e3      	lsrs	r3, r4
  401636:	43db      	mvns	r3, r3
  401638:	f013 0301 	ands.w	r3, r3, #1
  40163c:	d1ed      	bne.n	40161a <__sflush_r+0xbe>
  40163e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  401642:	606b      	str	r3, [r5, #4]
  401644:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401648:	6929      	ldr	r1, [r5, #16]
  40164a:	81ab      	strh	r3, [r5, #12]
  40164c:	04da      	lsls	r2, r3, #19
  40164e:	6029      	str	r1, [r5, #0]
  401650:	d5b9      	bpl.n	4015c6 <__sflush_r+0x6a>
  401652:	2c00      	cmp	r4, #0
  401654:	d1b7      	bne.n	4015c6 <__sflush_r+0x6a>
  401656:	6528      	str	r0, [r5, #80]	; 0x50
  401658:	e7b5      	b.n	4015c6 <__sflush_r+0x6a>
  40165a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40165c:	2a00      	cmp	r2, #0
  40165e:	dc8c      	bgt.n	40157a <__sflush_r+0x1e>
  401660:	e7d8      	b.n	401614 <__sflush_r+0xb8>
  401662:	2301      	movs	r3, #1
  401664:	69e9      	ldr	r1, [r5, #28]
  401666:	4640      	mov	r0, r8
  401668:	47a0      	blx	r4
  40166a:	1c43      	adds	r3, r0, #1
  40166c:	4602      	mov	r2, r0
  40166e:	d002      	beq.n	401676 <__sflush_r+0x11a>
  401670:	89ab      	ldrh	r3, [r5, #12]
  401672:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401674:	e78e      	b.n	401594 <__sflush_r+0x38>
  401676:	f8d8 3000 	ldr.w	r3, [r8]
  40167a:	2b00      	cmp	r3, #0
  40167c:	d0f8      	beq.n	401670 <__sflush_r+0x114>
  40167e:	2b1d      	cmp	r3, #29
  401680:	d001      	beq.n	401686 <__sflush_r+0x12a>
  401682:	2b16      	cmp	r3, #22
  401684:	d102      	bne.n	40168c <__sflush_r+0x130>
  401686:	f8c8 6000 	str.w	r6, [r8]
  40168a:	e7c3      	b.n	401614 <__sflush_r+0xb8>
  40168c:	89ab      	ldrh	r3, [r5, #12]
  40168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401692:	81ab      	strh	r3, [r5, #12]
  401694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401698:	20400001 	.word	0x20400001

0040169c <_fflush_r>:
  40169c:	b538      	push	{r3, r4, r5, lr}
  40169e:	460d      	mov	r5, r1
  4016a0:	4604      	mov	r4, r0
  4016a2:	b108      	cbz	r0, 4016a8 <_fflush_r+0xc>
  4016a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4016a6:	b1bb      	cbz	r3, 4016d8 <_fflush_r+0x3c>
  4016a8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4016ac:	b188      	cbz	r0, 4016d2 <_fflush_r+0x36>
  4016ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4016b0:	07db      	lsls	r3, r3, #31
  4016b2:	d401      	bmi.n	4016b8 <_fflush_r+0x1c>
  4016b4:	0581      	lsls	r1, r0, #22
  4016b6:	d517      	bpl.n	4016e8 <_fflush_r+0x4c>
  4016b8:	4620      	mov	r0, r4
  4016ba:	4629      	mov	r1, r5
  4016bc:	f7ff ff4e 	bl	40155c <__sflush_r>
  4016c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4016c2:	07da      	lsls	r2, r3, #31
  4016c4:	4604      	mov	r4, r0
  4016c6:	d402      	bmi.n	4016ce <_fflush_r+0x32>
  4016c8:	89ab      	ldrh	r3, [r5, #12]
  4016ca:	059b      	lsls	r3, r3, #22
  4016cc:	d507      	bpl.n	4016de <_fflush_r+0x42>
  4016ce:	4620      	mov	r0, r4
  4016d0:	bd38      	pop	{r3, r4, r5, pc}
  4016d2:	4604      	mov	r4, r0
  4016d4:	4620      	mov	r0, r4
  4016d6:	bd38      	pop	{r3, r4, r5, pc}
  4016d8:	f000 f838 	bl	40174c <__sinit>
  4016dc:	e7e4      	b.n	4016a8 <_fflush_r+0xc>
  4016de:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4016e0:	f000 f9ec 	bl	401abc <__retarget_lock_release_recursive>
  4016e4:	4620      	mov	r0, r4
  4016e6:	bd38      	pop	{r3, r4, r5, pc}
  4016e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4016ea:	f000 f9e5 	bl	401ab8 <__retarget_lock_acquire_recursive>
  4016ee:	e7e3      	b.n	4016b8 <_fflush_r+0x1c>

004016f0 <_cleanup_r>:
  4016f0:	4901      	ldr	r1, [pc, #4]	; (4016f8 <_cleanup_r+0x8>)
  4016f2:	f000 b9b3 	b.w	401a5c <_fwalk_reent>
  4016f6:	bf00      	nop
  4016f8:	00402265 	.word	0x00402265

004016fc <std.isra.0>:
  4016fc:	b510      	push	{r4, lr}
  4016fe:	2300      	movs	r3, #0
  401700:	4604      	mov	r4, r0
  401702:	8181      	strh	r1, [r0, #12]
  401704:	81c2      	strh	r2, [r0, #14]
  401706:	6003      	str	r3, [r0, #0]
  401708:	6043      	str	r3, [r0, #4]
  40170a:	6083      	str	r3, [r0, #8]
  40170c:	6643      	str	r3, [r0, #100]	; 0x64
  40170e:	6103      	str	r3, [r0, #16]
  401710:	6143      	str	r3, [r0, #20]
  401712:	6183      	str	r3, [r0, #24]
  401714:	4619      	mov	r1, r3
  401716:	2208      	movs	r2, #8
  401718:	305c      	adds	r0, #92	; 0x5c
  40171a:	f7ff fdf1 	bl	401300 <memset>
  40171e:	4807      	ldr	r0, [pc, #28]	; (40173c <std.isra.0+0x40>)
  401720:	4907      	ldr	r1, [pc, #28]	; (401740 <std.isra.0+0x44>)
  401722:	4a08      	ldr	r2, [pc, #32]	; (401744 <std.isra.0+0x48>)
  401724:	4b08      	ldr	r3, [pc, #32]	; (401748 <std.isra.0+0x4c>)
  401726:	6220      	str	r0, [r4, #32]
  401728:	61e4      	str	r4, [r4, #28]
  40172a:	6261      	str	r1, [r4, #36]	; 0x24
  40172c:	62a2      	str	r2, [r4, #40]	; 0x28
  40172e:	62e3      	str	r3, [r4, #44]	; 0x2c
  401730:	f104 0058 	add.w	r0, r4, #88	; 0x58
  401734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401738:	f000 b9ba 	b.w	401ab0 <__retarget_lock_init_recursive>
  40173c:	004020c9 	.word	0x004020c9
  401740:	004020ed 	.word	0x004020ed
  401744:	00402129 	.word	0x00402129
  401748:	00402149 	.word	0x00402149

0040174c <__sinit>:
  40174c:	b510      	push	{r4, lr}
  40174e:	4604      	mov	r4, r0
  401750:	4812      	ldr	r0, [pc, #72]	; (40179c <__sinit+0x50>)
  401752:	f000 f9b1 	bl	401ab8 <__retarget_lock_acquire_recursive>
  401756:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401758:	b9d2      	cbnz	r2, 401790 <__sinit+0x44>
  40175a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40175e:	4810      	ldr	r0, [pc, #64]	; (4017a0 <__sinit+0x54>)
  401760:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401764:	2103      	movs	r1, #3
  401766:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40176a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40176c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  401770:	6860      	ldr	r0, [r4, #4]
  401772:	2104      	movs	r1, #4
  401774:	f7ff ffc2 	bl	4016fc <std.isra.0>
  401778:	2201      	movs	r2, #1
  40177a:	2109      	movs	r1, #9
  40177c:	68a0      	ldr	r0, [r4, #8]
  40177e:	f7ff ffbd 	bl	4016fc <std.isra.0>
  401782:	2202      	movs	r2, #2
  401784:	2112      	movs	r1, #18
  401786:	68e0      	ldr	r0, [r4, #12]
  401788:	f7ff ffb8 	bl	4016fc <std.isra.0>
  40178c:	2301      	movs	r3, #1
  40178e:	63a3      	str	r3, [r4, #56]	; 0x38
  401790:	4802      	ldr	r0, [pc, #8]	; (40179c <__sinit+0x50>)
  401792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401796:	f000 b991 	b.w	401abc <__retarget_lock_release_recursive>
  40179a:	bf00      	nop
  40179c:	2000a63c 	.word	0x2000a63c
  4017a0:	004016f1 	.word	0x004016f1

004017a4 <__sfp_lock_acquire>:
  4017a4:	4801      	ldr	r0, [pc, #4]	; (4017ac <__sfp_lock_acquire+0x8>)
  4017a6:	f000 b987 	b.w	401ab8 <__retarget_lock_acquire_recursive>
  4017aa:	bf00      	nop
  4017ac:	2000a650 	.word	0x2000a650

004017b0 <__sfp_lock_release>:
  4017b0:	4801      	ldr	r0, [pc, #4]	; (4017b8 <__sfp_lock_release+0x8>)
  4017b2:	f000 b983 	b.w	401abc <__retarget_lock_release_recursive>
  4017b6:	bf00      	nop
  4017b8:	2000a650 	.word	0x2000a650

004017bc <__libc_fini_array>:
  4017bc:	b538      	push	{r3, r4, r5, lr}
  4017be:	4c0a      	ldr	r4, [pc, #40]	; (4017e8 <__libc_fini_array+0x2c>)
  4017c0:	4d0a      	ldr	r5, [pc, #40]	; (4017ec <__libc_fini_array+0x30>)
  4017c2:	1b64      	subs	r4, r4, r5
  4017c4:	10a4      	asrs	r4, r4, #2
  4017c6:	d00a      	beq.n	4017de <__libc_fini_array+0x22>
  4017c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4017cc:	3b01      	subs	r3, #1
  4017ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4017d2:	3c01      	subs	r4, #1
  4017d4:	f855 3904 	ldr.w	r3, [r5], #-4
  4017d8:	4798      	blx	r3
  4017da:	2c00      	cmp	r4, #0
  4017dc:	d1f9      	bne.n	4017d2 <__libc_fini_array+0x16>
  4017de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4017e2:	f000 bded 	b.w	4023c0 <_fini>
  4017e6:	bf00      	nop
  4017e8:	004023d0 	.word	0x004023d0
  4017ec:	004023cc 	.word	0x004023cc

004017f0 <_malloc_trim_r>:
  4017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4017f2:	4f24      	ldr	r7, [pc, #144]	; (401884 <_malloc_trim_r+0x94>)
  4017f4:	460c      	mov	r4, r1
  4017f6:	4606      	mov	r6, r0
  4017f8:	f000 fc48 	bl	40208c <__malloc_lock>
  4017fc:	68bb      	ldr	r3, [r7, #8]
  4017fe:	685d      	ldr	r5, [r3, #4]
  401800:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401804:	310f      	adds	r1, #15
  401806:	f025 0503 	bic.w	r5, r5, #3
  40180a:	4429      	add	r1, r5
  40180c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401810:	f021 010f 	bic.w	r1, r1, #15
  401814:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401818:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40181c:	db07      	blt.n	40182e <_malloc_trim_r+0x3e>
  40181e:	2100      	movs	r1, #0
  401820:	4630      	mov	r0, r6
  401822:	f000 fc3f 	bl	4020a4 <_sbrk_r>
  401826:	68bb      	ldr	r3, [r7, #8]
  401828:	442b      	add	r3, r5
  40182a:	4298      	cmp	r0, r3
  40182c:	d004      	beq.n	401838 <_malloc_trim_r+0x48>
  40182e:	4630      	mov	r0, r6
  401830:	f000 fc32 	bl	402098 <__malloc_unlock>
  401834:	2000      	movs	r0, #0
  401836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401838:	4261      	negs	r1, r4
  40183a:	4630      	mov	r0, r6
  40183c:	f000 fc32 	bl	4020a4 <_sbrk_r>
  401840:	3001      	adds	r0, #1
  401842:	d00d      	beq.n	401860 <_malloc_trim_r+0x70>
  401844:	4b10      	ldr	r3, [pc, #64]	; (401888 <_malloc_trim_r+0x98>)
  401846:	68ba      	ldr	r2, [r7, #8]
  401848:	6819      	ldr	r1, [r3, #0]
  40184a:	1b2d      	subs	r5, r5, r4
  40184c:	f045 0501 	orr.w	r5, r5, #1
  401850:	4630      	mov	r0, r6
  401852:	1b09      	subs	r1, r1, r4
  401854:	6055      	str	r5, [r2, #4]
  401856:	6019      	str	r1, [r3, #0]
  401858:	f000 fc1e 	bl	402098 <__malloc_unlock>
  40185c:	2001      	movs	r0, #1
  40185e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401860:	2100      	movs	r1, #0
  401862:	4630      	mov	r0, r6
  401864:	f000 fc1e 	bl	4020a4 <_sbrk_r>
  401868:	68ba      	ldr	r2, [r7, #8]
  40186a:	1a83      	subs	r3, r0, r2
  40186c:	2b0f      	cmp	r3, #15
  40186e:	ddde      	ble.n	40182e <_malloc_trim_r+0x3e>
  401870:	4c06      	ldr	r4, [pc, #24]	; (40188c <_malloc_trim_r+0x9c>)
  401872:	4905      	ldr	r1, [pc, #20]	; (401888 <_malloc_trim_r+0x98>)
  401874:	6824      	ldr	r4, [r4, #0]
  401876:	f043 0301 	orr.w	r3, r3, #1
  40187a:	1b00      	subs	r0, r0, r4
  40187c:	6053      	str	r3, [r2, #4]
  40187e:	6008      	str	r0, [r1, #0]
  401880:	e7d5      	b.n	40182e <_malloc_trim_r+0x3e>
  401882:	bf00      	nop
  401884:	2000043c 	.word	0x2000043c
  401888:	2000a528 	.word	0x2000a528
  40188c:	20000844 	.word	0x20000844

00401890 <_free_r>:
  401890:	2900      	cmp	r1, #0
  401892:	d044      	beq.n	40191e <_free_r+0x8e>
  401894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401898:	460d      	mov	r5, r1
  40189a:	4680      	mov	r8, r0
  40189c:	f000 fbf6 	bl	40208c <__malloc_lock>
  4018a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4018a4:	4969      	ldr	r1, [pc, #420]	; (401a4c <_free_r+0x1bc>)
  4018a6:	f027 0301 	bic.w	r3, r7, #1
  4018aa:	f1a5 0408 	sub.w	r4, r5, #8
  4018ae:	18e2      	adds	r2, r4, r3
  4018b0:	688e      	ldr	r6, [r1, #8]
  4018b2:	6850      	ldr	r0, [r2, #4]
  4018b4:	42b2      	cmp	r2, r6
  4018b6:	f020 0003 	bic.w	r0, r0, #3
  4018ba:	d05e      	beq.n	40197a <_free_r+0xea>
  4018bc:	07fe      	lsls	r6, r7, #31
  4018be:	6050      	str	r0, [r2, #4]
  4018c0:	d40b      	bmi.n	4018da <_free_r+0x4a>
  4018c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4018c6:	1be4      	subs	r4, r4, r7
  4018c8:	f101 0e08 	add.w	lr, r1, #8
  4018cc:	68a5      	ldr	r5, [r4, #8]
  4018ce:	4575      	cmp	r5, lr
  4018d0:	443b      	add	r3, r7
  4018d2:	d06d      	beq.n	4019b0 <_free_r+0x120>
  4018d4:	68e7      	ldr	r7, [r4, #12]
  4018d6:	60ef      	str	r7, [r5, #12]
  4018d8:	60bd      	str	r5, [r7, #8]
  4018da:	1815      	adds	r5, r2, r0
  4018dc:	686d      	ldr	r5, [r5, #4]
  4018de:	07ed      	lsls	r5, r5, #31
  4018e0:	d53e      	bpl.n	401960 <_free_r+0xd0>
  4018e2:	f043 0201 	orr.w	r2, r3, #1
  4018e6:	6062      	str	r2, [r4, #4]
  4018e8:	50e3      	str	r3, [r4, r3]
  4018ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4018ee:	d217      	bcs.n	401920 <_free_r+0x90>
  4018f0:	08db      	lsrs	r3, r3, #3
  4018f2:	1c58      	adds	r0, r3, #1
  4018f4:	109a      	asrs	r2, r3, #2
  4018f6:	684d      	ldr	r5, [r1, #4]
  4018f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4018fc:	60a7      	str	r7, [r4, #8]
  4018fe:	2301      	movs	r3, #1
  401900:	4093      	lsls	r3, r2
  401902:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  401906:	432b      	orrs	r3, r5
  401908:	3a08      	subs	r2, #8
  40190a:	60e2      	str	r2, [r4, #12]
  40190c:	604b      	str	r3, [r1, #4]
  40190e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  401912:	60fc      	str	r4, [r7, #12]
  401914:	4640      	mov	r0, r8
  401916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40191a:	f000 bbbd 	b.w	402098 <__malloc_unlock>
  40191e:	4770      	bx	lr
  401920:	0a5a      	lsrs	r2, r3, #9
  401922:	2a04      	cmp	r2, #4
  401924:	d852      	bhi.n	4019cc <_free_r+0x13c>
  401926:	099a      	lsrs	r2, r3, #6
  401928:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40192c:	00ff      	lsls	r7, r7, #3
  40192e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  401932:	19c8      	adds	r0, r1, r7
  401934:	59ca      	ldr	r2, [r1, r7]
  401936:	3808      	subs	r0, #8
  401938:	4290      	cmp	r0, r2
  40193a:	d04f      	beq.n	4019dc <_free_r+0x14c>
  40193c:	6851      	ldr	r1, [r2, #4]
  40193e:	f021 0103 	bic.w	r1, r1, #3
  401942:	428b      	cmp	r3, r1
  401944:	d232      	bcs.n	4019ac <_free_r+0x11c>
  401946:	6892      	ldr	r2, [r2, #8]
  401948:	4290      	cmp	r0, r2
  40194a:	d1f7      	bne.n	40193c <_free_r+0xac>
  40194c:	68c3      	ldr	r3, [r0, #12]
  40194e:	60a0      	str	r0, [r4, #8]
  401950:	60e3      	str	r3, [r4, #12]
  401952:	609c      	str	r4, [r3, #8]
  401954:	60c4      	str	r4, [r0, #12]
  401956:	4640      	mov	r0, r8
  401958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40195c:	f000 bb9c 	b.w	402098 <__malloc_unlock>
  401960:	6895      	ldr	r5, [r2, #8]
  401962:	4f3b      	ldr	r7, [pc, #236]	; (401a50 <_free_r+0x1c0>)
  401964:	42bd      	cmp	r5, r7
  401966:	4403      	add	r3, r0
  401968:	d040      	beq.n	4019ec <_free_r+0x15c>
  40196a:	68d0      	ldr	r0, [r2, #12]
  40196c:	60e8      	str	r0, [r5, #12]
  40196e:	f043 0201 	orr.w	r2, r3, #1
  401972:	6085      	str	r5, [r0, #8]
  401974:	6062      	str	r2, [r4, #4]
  401976:	50e3      	str	r3, [r4, r3]
  401978:	e7b7      	b.n	4018ea <_free_r+0x5a>
  40197a:	07ff      	lsls	r7, r7, #31
  40197c:	4403      	add	r3, r0
  40197e:	d407      	bmi.n	401990 <_free_r+0x100>
  401980:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401984:	1aa4      	subs	r4, r4, r2
  401986:	4413      	add	r3, r2
  401988:	68a0      	ldr	r0, [r4, #8]
  40198a:	68e2      	ldr	r2, [r4, #12]
  40198c:	60c2      	str	r2, [r0, #12]
  40198e:	6090      	str	r0, [r2, #8]
  401990:	4a30      	ldr	r2, [pc, #192]	; (401a54 <_free_r+0x1c4>)
  401992:	6812      	ldr	r2, [r2, #0]
  401994:	f043 0001 	orr.w	r0, r3, #1
  401998:	4293      	cmp	r3, r2
  40199a:	6060      	str	r0, [r4, #4]
  40199c:	608c      	str	r4, [r1, #8]
  40199e:	d3b9      	bcc.n	401914 <_free_r+0x84>
  4019a0:	4b2d      	ldr	r3, [pc, #180]	; (401a58 <_free_r+0x1c8>)
  4019a2:	4640      	mov	r0, r8
  4019a4:	6819      	ldr	r1, [r3, #0]
  4019a6:	f7ff ff23 	bl	4017f0 <_malloc_trim_r>
  4019aa:	e7b3      	b.n	401914 <_free_r+0x84>
  4019ac:	4610      	mov	r0, r2
  4019ae:	e7cd      	b.n	40194c <_free_r+0xbc>
  4019b0:	1811      	adds	r1, r2, r0
  4019b2:	6849      	ldr	r1, [r1, #4]
  4019b4:	07c9      	lsls	r1, r1, #31
  4019b6:	d444      	bmi.n	401a42 <_free_r+0x1b2>
  4019b8:	6891      	ldr	r1, [r2, #8]
  4019ba:	68d2      	ldr	r2, [r2, #12]
  4019bc:	60ca      	str	r2, [r1, #12]
  4019be:	4403      	add	r3, r0
  4019c0:	f043 0001 	orr.w	r0, r3, #1
  4019c4:	6091      	str	r1, [r2, #8]
  4019c6:	6060      	str	r0, [r4, #4]
  4019c8:	50e3      	str	r3, [r4, r3]
  4019ca:	e7a3      	b.n	401914 <_free_r+0x84>
  4019cc:	2a14      	cmp	r2, #20
  4019ce:	d816      	bhi.n	4019fe <_free_r+0x16e>
  4019d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4019d4:	00ff      	lsls	r7, r7, #3
  4019d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4019da:	e7aa      	b.n	401932 <_free_r+0xa2>
  4019dc:	10aa      	asrs	r2, r5, #2
  4019de:	2301      	movs	r3, #1
  4019e0:	684d      	ldr	r5, [r1, #4]
  4019e2:	4093      	lsls	r3, r2
  4019e4:	432b      	orrs	r3, r5
  4019e6:	604b      	str	r3, [r1, #4]
  4019e8:	4603      	mov	r3, r0
  4019ea:	e7b0      	b.n	40194e <_free_r+0xbe>
  4019ec:	f043 0201 	orr.w	r2, r3, #1
  4019f0:	614c      	str	r4, [r1, #20]
  4019f2:	610c      	str	r4, [r1, #16]
  4019f4:	60e5      	str	r5, [r4, #12]
  4019f6:	60a5      	str	r5, [r4, #8]
  4019f8:	6062      	str	r2, [r4, #4]
  4019fa:	50e3      	str	r3, [r4, r3]
  4019fc:	e78a      	b.n	401914 <_free_r+0x84>
  4019fe:	2a54      	cmp	r2, #84	; 0x54
  401a00:	d806      	bhi.n	401a10 <_free_r+0x180>
  401a02:	0b1a      	lsrs	r2, r3, #12
  401a04:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401a08:	00ff      	lsls	r7, r7, #3
  401a0a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401a0e:	e790      	b.n	401932 <_free_r+0xa2>
  401a10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401a14:	d806      	bhi.n	401a24 <_free_r+0x194>
  401a16:	0bda      	lsrs	r2, r3, #15
  401a18:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401a1c:	00ff      	lsls	r7, r7, #3
  401a1e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401a22:	e786      	b.n	401932 <_free_r+0xa2>
  401a24:	f240 5054 	movw	r0, #1364	; 0x554
  401a28:	4282      	cmp	r2, r0
  401a2a:	d806      	bhi.n	401a3a <_free_r+0x1aa>
  401a2c:	0c9a      	lsrs	r2, r3, #18
  401a2e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401a32:	00ff      	lsls	r7, r7, #3
  401a34:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401a38:	e77b      	b.n	401932 <_free_r+0xa2>
  401a3a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  401a3e:	257e      	movs	r5, #126	; 0x7e
  401a40:	e777      	b.n	401932 <_free_r+0xa2>
  401a42:	f043 0101 	orr.w	r1, r3, #1
  401a46:	6061      	str	r1, [r4, #4]
  401a48:	6013      	str	r3, [r2, #0]
  401a4a:	e763      	b.n	401914 <_free_r+0x84>
  401a4c:	2000043c 	.word	0x2000043c
  401a50:	20000444 	.word	0x20000444
  401a54:	20000848 	.word	0x20000848
  401a58:	2000a558 	.word	0x2000a558

00401a5c <_fwalk_reent>:
  401a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a60:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401a64:	d01f      	beq.n	401aa6 <_fwalk_reent+0x4a>
  401a66:	4688      	mov	r8, r1
  401a68:	4606      	mov	r6, r0
  401a6a:	f04f 0900 	mov.w	r9, #0
  401a6e:	687d      	ldr	r5, [r7, #4]
  401a70:	68bc      	ldr	r4, [r7, #8]
  401a72:	3d01      	subs	r5, #1
  401a74:	d411      	bmi.n	401a9a <_fwalk_reent+0x3e>
  401a76:	89a3      	ldrh	r3, [r4, #12]
  401a78:	2b01      	cmp	r3, #1
  401a7a:	f105 35ff 	add.w	r5, r5, #4294967295
  401a7e:	d908      	bls.n	401a92 <_fwalk_reent+0x36>
  401a80:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401a84:	3301      	adds	r3, #1
  401a86:	4621      	mov	r1, r4
  401a88:	4630      	mov	r0, r6
  401a8a:	d002      	beq.n	401a92 <_fwalk_reent+0x36>
  401a8c:	47c0      	blx	r8
  401a8e:	ea49 0900 	orr.w	r9, r9, r0
  401a92:	1c6b      	adds	r3, r5, #1
  401a94:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401a98:	d1ed      	bne.n	401a76 <_fwalk_reent+0x1a>
  401a9a:	683f      	ldr	r7, [r7, #0]
  401a9c:	2f00      	cmp	r7, #0
  401a9e:	d1e6      	bne.n	401a6e <_fwalk_reent+0x12>
  401aa0:	4648      	mov	r0, r9
  401aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401aa6:	46b9      	mov	r9, r7
  401aa8:	4648      	mov	r0, r9
  401aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401aae:	bf00      	nop

00401ab0 <__retarget_lock_init_recursive>:
  401ab0:	4770      	bx	lr
  401ab2:	bf00      	nop

00401ab4 <__retarget_lock_close_recursive>:
  401ab4:	4770      	bx	lr
  401ab6:	bf00      	nop

00401ab8 <__retarget_lock_acquire_recursive>:
  401ab8:	4770      	bx	lr
  401aba:	bf00      	nop

00401abc <__retarget_lock_release_recursive>:
  401abc:	4770      	bx	lr
  401abe:	bf00      	nop

00401ac0 <__swhatbuf_r>:
  401ac0:	b570      	push	{r4, r5, r6, lr}
  401ac2:	460c      	mov	r4, r1
  401ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401ac8:	2900      	cmp	r1, #0
  401aca:	b090      	sub	sp, #64	; 0x40
  401acc:	4615      	mov	r5, r2
  401ace:	461e      	mov	r6, r3
  401ad0:	db14      	blt.n	401afc <__swhatbuf_r+0x3c>
  401ad2:	aa01      	add	r2, sp, #4
  401ad4:	f000 fc28 	bl	402328 <_fstat_r>
  401ad8:	2800      	cmp	r0, #0
  401ada:	db0f      	blt.n	401afc <__swhatbuf_r+0x3c>
  401adc:	9a02      	ldr	r2, [sp, #8]
  401ade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401ae2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401ae6:	fab2 f282 	clz	r2, r2
  401aea:	0952      	lsrs	r2, r2, #5
  401aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401af0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401af4:	6032      	str	r2, [r6, #0]
  401af6:	602b      	str	r3, [r5, #0]
  401af8:	b010      	add	sp, #64	; 0x40
  401afa:	bd70      	pop	{r4, r5, r6, pc}
  401afc:	89a2      	ldrh	r2, [r4, #12]
  401afe:	2300      	movs	r3, #0
  401b00:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401b04:	6033      	str	r3, [r6, #0]
  401b06:	d004      	beq.n	401b12 <__swhatbuf_r+0x52>
  401b08:	2240      	movs	r2, #64	; 0x40
  401b0a:	4618      	mov	r0, r3
  401b0c:	602a      	str	r2, [r5, #0]
  401b0e:	b010      	add	sp, #64	; 0x40
  401b10:	bd70      	pop	{r4, r5, r6, pc}
  401b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b16:	602b      	str	r3, [r5, #0]
  401b18:	b010      	add	sp, #64	; 0x40
  401b1a:	bd70      	pop	{r4, r5, r6, pc}

00401b1c <malloc>:
  401b1c:	4b02      	ldr	r3, [pc, #8]	; (401b28 <malloc+0xc>)
  401b1e:	4601      	mov	r1, r0
  401b20:	6818      	ldr	r0, [r3, #0]
  401b22:	f000 b803 	b.w	401b2c <_malloc_r>
  401b26:	bf00      	nop
  401b28:	20000008 	.word	0x20000008

00401b2c <_malloc_r>:
  401b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b30:	f101 060b 	add.w	r6, r1, #11
  401b34:	2e16      	cmp	r6, #22
  401b36:	b083      	sub	sp, #12
  401b38:	4605      	mov	r5, r0
  401b3a:	f240 809e 	bls.w	401c7a <_malloc_r+0x14e>
  401b3e:	f036 0607 	bics.w	r6, r6, #7
  401b42:	f100 80bd 	bmi.w	401cc0 <_malloc_r+0x194>
  401b46:	42b1      	cmp	r1, r6
  401b48:	f200 80ba 	bhi.w	401cc0 <_malloc_r+0x194>
  401b4c:	f000 fa9e 	bl	40208c <__malloc_lock>
  401b50:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401b54:	f0c0 8293 	bcc.w	40207e <_malloc_r+0x552>
  401b58:	0a73      	lsrs	r3, r6, #9
  401b5a:	f000 80b8 	beq.w	401cce <_malloc_r+0x1a2>
  401b5e:	2b04      	cmp	r3, #4
  401b60:	f200 8179 	bhi.w	401e56 <_malloc_r+0x32a>
  401b64:	09b3      	lsrs	r3, r6, #6
  401b66:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401b6a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401b6e:	00c3      	lsls	r3, r0, #3
  401b70:	4fbf      	ldr	r7, [pc, #764]	; (401e70 <_malloc_r+0x344>)
  401b72:	443b      	add	r3, r7
  401b74:	f1a3 0108 	sub.w	r1, r3, #8
  401b78:	685c      	ldr	r4, [r3, #4]
  401b7a:	42a1      	cmp	r1, r4
  401b7c:	d106      	bne.n	401b8c <_malloc_r+0x60>
  401b7e:	e00c      	b.n	401b9a <_malloc_r+0x6e>
  401b80:	2a00      	cmp	r2, #0
  401b82:	f280 80aa 	bge.w	401cda <_malloc_r+0x1ae>
  401b86:	68e4      	ldr	r4, [r4, #12]
  401b88:	42a1      	cmp	r1, r4
  401b8a:	d006      	beq.n	401b9a <_malloc_r+0x6e>
  401b8c:	6863      	ldr	r3, [r4, #4]
  401b8e:	f023 0303 	bic.w	r3, r3, #3
  401b92:	1b9a      	subs	r2, r3, r6
  401b94:	2a0f      	cmp	r2, #15
  401b96:	ddf3      	ble.n	401b80 <_malloc_r+0x54>
  401b98:	4670      	mov	r0, lr
  401b9a:	693c      	ldr	r4, [r7, #16]
  401b9c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401e84 <_malloc_r+0x358>
  401ba0:	4574      	cmp	r4, lr
  401ba2:	f000 81ab 	beq.w	401efc <_malloc_r+0x3d0>
  401ba6:	6863      	ldr	r3, [r4, #4]
  401ba8:	f023 0303 	bic.w	r3, r3, #3
  401bac:	1b9a      	subs	r2, r3, r6
  401bae:	2a0f      	cmp	r2, #15
  401bb0:	f300 8190 	bgt.w	401ed4 <_malloc_r+0x3a8>
  401bb4:	2a00      	cmp	r2, #0
  401bb6:	f8c7 e014 	str.w	lr, [r7, #20]
  401bba:	f8c7 e010 	str.w	lr, [r7, #16]
  401bbe:	f280 809d 	bge.w	401cfc <_malloc_r+0x1d0>
  401bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401bc6:	f080 8161 	bcs.w	401e8c <_malloc_r+0x360>
  401bca:	08db      	lsrs	r3, r3, #3
  401bcc:	f103 0c01 	add.w	ip, r3, #1
  401bd0:	1099      	asrs	r1, r3, #2
  401bd2:	687a      	ldr	r2, [r7, #4]
  401bd4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401bd8:	f8c4 8008 	str.w	r8, [r4, #8]
  401bdc:	2301      	movs	r3, #1
  401bde:	408b      	lsls	r3, r1
  401be0:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401be4:	4313      	orrs	r3, r2
  401be6:	3908      	subs	r1, #8
  401be8:	60e1      	str	r1, [r4, #12]
  401bea:	607b      	str	r3, [r7, #4]
  401bec:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401bf0:	f8c8 400c 	str.w	r4, [r8, #12]
  401bf4:	1082      	asrs	r2, r0, #2
  401bf6:	2401      	movs	r4, #1
  401bf8:	4094      	lsls	r4, r2
  401bfa:	429c      	cmp	r4, r3
  401bfc:	f200 808b 	bhi.w	401d16 <_malloc_r+0x1ea>
  401c00:	421c      	tst	r4, r3
  401c02:	d106      	bne.n	401c12 <_malloc_r+0xe6>
  401c04:	f020 0003 	bic.w	r0, r0, #3
  401c08:	0064      	lsls	r4, r4, #1
  401c0a:	421c      	tst	r4, r3
  401c0c:	f100 0004 	add.w	r0, r0, #4
  401c10:	d0fa      	beq.n	401c08 <_malloc_r+0xdc>
  401c12:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401c16:	46cc      	mov	ip, r9
  401c18:	4680      	mov	r8, r0
  401c1a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401c1e:	459c      	cmp	ip, r3
  401c20:	d107      	bne.n	401c32 <_malloc_r+0x106>
  401c22:	e16d      	b.n	401f00 <_malloc_r+0x3d4>
  401c24:	2a00      	cmp	r2, #0
  401c26:	f280 817b 	bge.w	401f20 <_malloc_r+0x3f4>
  401c2a:	68db      	ldr	r3, [r3, #12]
  401c2c:	459c      	cmp	ip, r3
  401c2e:	f000 8167 	beq.w	401f00 <_malloc_r+0x3d4>
  401c32:	6859      	ldr	r1, [r3, #4]
  401c34:	f021 0103 	bic.w	r1, r1, #3
  401c38:	1b8a      	subs	r2, r1, r6
  401c3a:	2a0f      	cmp	r2, #15
  401c3c:	ddf2      	ble.n	401c24 <_malloc_r+0xf8>
  401c3e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401c42:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401c46:	9300      	str	r3, [sp, #0]
  401c48:	199c      	adds	r4, r3, r6
  401c4a:	4628      	mov	r0, r5
  401c4c:	f046 0601 	orr.w	r6, r6, #1
  401c50:	f042 0501 	orr.w	r5, r2, #1
  401c54:	605e      	str	r6, [r3, #4]
  401c56:	f8c8 c00c 	str.w	ip, [r8, #12]
  401c5a:	f8cc 8008 	str.w	r8, [ip, #8]
  401c5e:	617c      	str	r4, [r7, #20]
  401c60:	613c      	str	r4, [r7, #16]
  401c62:	f8c4 e00c 	str.w	lr, [r4, #12]
  401c66:	f8c4 e008 	str.w	lr, [r4, #8]
  401c6a:	6065      	str	r5, [r4, #4]
  401c6c:	505a      	str	r2, [r3, r1]
  401c6e:	f000 fa13 	bl	402098 <__malloc_unlock>
  401c72:	9b00      	ldr	r3, [sp, #0]
  401c74:	f103 0408 	add.w	r4, r3, #8
  401c78:	e01e      	b.n	401cb8 <_malloc_r+0x18c>
  401c7a:	2910      	cmp	r1, #16
  401c7c:	d820      	bhi.n	401cc0 <_malloc_r+0x194>
  401c7e:	f000 fa05 	bl	40208c <__malloc_lock>
  401c82:	2610      	movs	r6, #16
  401c84:	2318      	movs	r3, #24
  401c86:	2002      	movs	r0, #2
  401c88:	4f79      	ldr	r7, [pc, #484]	; (401e70 <_malloc_r+0x344>)
  401c8a:	443b      	add	r3, r7
  401c8c:	f1a3 0208 	sub.w	r2, r3, #8
  401c90:	685c      	ldr	r4, [r3, #4]
  401c92:	4294      	cmp	r4, r2
  401c94:	f000 813d 	beq.w	401f12 <_malloc_r+0x3e6>
  401c98:	6863      	ldr	r3, [r4, #4]
  401c9a:	68e1      	ldr	r1, [r4, #12]
  401c9c:	68a6      	ldr	r6, [r4, #8]
  401c9e:	f023 0303 	bic.w	r3, r3, #3
  401ca2:	4423      	add	r3, r4
  401ca4:	4628      	mov	r0, r5
  401ca6:	685a      	ldr	r2, [r3, #4]
  401ca8:	60f1      	str	r1, [r6, #12]
  401caa:	f042 0201 	orr.w	r2, r2, #1
  401cae:	608e      	str	r6, [r1, #8]
  401cb0:	605a      	str	r2, [r3, #4]
  401cb2:	f000 f9f1 	bl	402098 <__malloc_unlock>
  401cb6:	3408      	adds	r4, #8
  401cb8:	4620      	mov	r0, r4
  401cba:	b003      	add	sp, #12
  401cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cc0:	2400      	movs	r4, #0
  401cc2:	230c      	movs	r3, #12
  401cc4:	4620      	mov	r0, r4
  401cc6:	602b      	str	r3, [r5, #0]
  401cc8:	b003      	add	sp, #12
  401cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cce:	2040      	movs	r0, #64	; 0x40
  401cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
  401cd4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401cd8:	e74a      	b.n	401b70 <_malloc_r+0x44>
  401cda:	4423      	add	r3, r4
  401cdc:	68e1      	ldr	r1, [r4, #12]
  401cde:	685a      	ldr	r2, [r3, #4]
  401ce0:	68a6      	ldr	r6, [r4, #8]
  401ce2:	f042 0201 	orr.w	r2, r2, #1
  401ce6:	60f1      	str	r1, [r6, #12]
  401ce8:	4628      	mov	r0, r5
  401cea:	608e      	str	r6, [r1, #8]
  401cec:	605a      	str	r2, [r3, #4]
  401cee:	f000 f9d3 	bl	402098 <__malloc_unlock>
  401cf2:	3408      	adds	r4, #8
  401cf4:	4620      	mov	r0, r4
  401cf6:	b003      	add	sp, #12
  401cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cfc:	4423      	add	r3, r4
  401cfe:	4628      	mov	r0, r5
  401d00:	685a      	ldr	r2, [r3, #4]
  401d02:	f042 0201 	orr.w	r2, r2, #1
  401d06:	605a      	str	r2, [r3, #4]
  401d08:	f000 f9c6 	bl	402098 <__malloc_unlock>
  401d0c:	3408      	adds	r4, #8
  401d0e:	4620      	mov	r0, r4
  401d10:	b003      	add	sp, #12
  401d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d16:	68bc      	ldr	r4, [r7, #8]
  401d18:	6863      	ldr	r3, [r4, #4]
  401d1a:	f023 0803 	bic.w	r8, r3, #3
  401d1e:	45b0      	cmp	r8, r6
  401d20:	d304      	bcc.n	401d2c <_malloc_r+0x200>
  401d22:	eba8 0306 	sub.w	r3, r8, r6
  401d26:	2b0f      	cmp	r3, #15
  401d28:	f300 8085 	bgt.w	401e36 <_malloc_r+0x30a>
  401d2c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401e88 <_malloc_r+0x35c>
  401d30:	4b50      	ldr	r3, [pc, #320]	; (401e74 <_malloc_r+0x348>)
  401d32:	f8d9 2000 	ldr.w	r2, [r9]
  401d36:	681b      	ldr	r3, [r3, #0]
  401d38:	3201      	adds	r2, #1
  401d3a:	4433      	add	r3, r6
  401d3c:	eb04 0a08 	add.w	sl, r4, r8
  401d40:	f000 8155 	beq.w	401fee <_malloc_r+0x4c2>
  401d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401d48:	330f      	adds	r3, #15
  401d4a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401d4e:	f02b 0b0f 	bic.w	fp, fp, #15
  401d52:	4659      	mov	r1, fp
  401d54:	4628      	mov	r0, r5
  401d56:	f000 f9a5 	bl	4020a4 <_sbrk_r>
  401d5a:	1c41      	adds	r1, r0, #1
  401d5c:	4602      	mov	r2, r0
  401d5e:	f000 80fc 	beq.w	401f5a <_malloc_r+0x42e>
  401d62:	4582      	cmp	sl, r0
  401d64:	f200 80f7 	bhi.w	401f56 <_malloc_r+0x42a>
  401d68:	4b43      	ldr	r3, [pc, #268]	; (401e78 <_malloc_r+0x34c>)
  401d6a:	6819      	ldr	r1, [r3, #0]
  401d6c:	4459      	add	r1, fp
  401d6e:	6019      	str	r1, [r3, #0]
  401d70:	f000 814d 	beq.w	40200e <_malloc_r+0x4e2>
  401d74:	f8d9 0000 	ldr.w	r0, [r9]
  401d78:	3001      	adds	r0, #1
  401d7a:	bf1b      	ittet	ne
  401d7c:	eba2 0a0a 	subne.w	sl, r2, sl
  401d80:	4451      	addne	r1, sl
  401d82:	f8c9 2000 	streq.w	r2, [r9]
  401d86:	6019      	strne	r1, [r3, #0]
  401d88:	f012 0107 	ands.w	r1, r2, #7
  401d8c:	f000 8115 	beq.w	401fba <_malloc_r+0x48e>
  401d90:	f1c1 0008 	rsb	r0, r1, #8
  401d94:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401d98:	4402      	add	r2, r0
  401d9a:	3108      	adds	r1, #8
  401d9c:	eb02 090b 	add.w	r9, r2, fp
  401da0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401da4:	eba1 0909 	sub.w	r9, r1, r9
  401da8:	4649      	mov	r1, r9
  401daa:	4628      	mov	r0, r5
  401dac:	9301      	str	r3, [sp, #4]
  401dae:	9200      	str	r2, [sp, #0]
  401db0:	f000 f978 	bl	4020a4 <_sbrk_r>
  401db4:	1c43      	adds	r3, r0, #1
  401db6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401dba:	f000 8143 	beq.w	402044 <_malloc_r+0x518>
  401dbe:	1a80      	subs	r0, r0, r2
  401dc0:	4448      	add	r0, r9
  401dc2:	f040 0001 	orr.w	r0, r0, #1
  401dc6:	6819      	ldr	r1, [r3, #0]
  401dc8:	60ba      	str	r2, [r7, #8]
  401dca:	4449      	add	r1, r9
  401dcc:	42bc      	cmp	r4, r7
  401dce:	6050      	str	r0, [r2, #4]
  401dd0:	6019      	str	r1, [r3, #0]
  401dd2:	d017      	beq.n	401e04 <_malloc_r+0x2d8>
  401dd4:	f1b8 0f0f 	cmp.w	r8, #15
  401dd8:	f240 80fb 	bls.w	401fd2 <_malloc_r+0x4a6>
  401ddc:	6860      	ldr	r0, [r4, #4]
  401dde:	f1a8 020c 	sub.w	r2, r8, #12
  401de2:	f022 0207 	bic.w	r2, r2, #7
  401de6:	eb04 0e02 	add.w	lr, r4, r2
  401dea:	f000 0001 	and.w	r0, r0, #1
  401dee:	f04f 0c05 	mov.w	ip, #5
  401df2:	4310      	orrs	r0, r2
  401df4:	2a0f      	cmp	r2, #15
  401df6:	6060      	str	r0, [r4, #4]
  401df8:	f8ce c004 	str.w	ip, [lr, #4]
  401dfc:	f8ce c008 	str.w	ip, [lr, #8]
  401e00:	f200 8117 	bhi.w	402032 <_malloc_r+0x506>
  401e04:	4b1d      	ldr	r3, [pc, #116]	; (401e7c <_malloc_r+0x350>)
  401e06:	68bc      	ldr	r4, [r7, #8]
  401e08:	681a      	ldr	r2, [r3, #0]
  401e0a:	4291      	cmp	r1, r2
  401e0c:	bf88      	it	hi
  401e0e:	6019      	strhi	r1, [r3, #0]
  401e10:	4b1b      	ldr	r3, [pc, #108]	; (401e80 <_malloc_r+0x354>)
  401e12:	681a      	ldr	r2, [r3, #0]
  401e14:	4291      	cmp	r1, r2
  401e16:	6862      	ldr	r2, [r4, #4]
  401e18:	bf88      	it	hi
  401e1a:	6019      	strhi	r1, [r3, #0]
  401e1c:	f022 0203 	bic.w	r2, r2, #3
  401e20:	4296      	cmp	r6, r2
  401e22:	eba2 0306 	sub.w	r3, r2, r6
  401e26:	d801      	bhi.n	401e2c <_malloc_r+0x300>
  401e28:	2b0f      	cmp	r3, #15
  401e2a:	dc04      	bgt.n	401e36 <_malloc_r+0x30a>
  401e2c:	4628      	mov	r0, r5
  401e2e:	f000 f933 	bl	402098 <__malloc_unlock>
  401e32:	2400      	movs	r4, #0
  401e34:	e740      	b.n	401cb8 <_malloc_r+0x18c>
  401e36:	19a2      	adds	r2, r4, r6
  401e38:	f043 0301 	orr.w	r3, r3, #1
  401e3c:	f046 0601 	orr.w	r6, r6, #1
  401e40:	6066      	str	r6, [r4, #4]
  401e42:	4628      	mov	r0, r5
  401e44:	60ba      	str	r2, [r7, #8]
  401e46:	6053      	str	r3, [r2, #4]
  401e48:	f000 f926 	bl	402098 <__malloc_unlock>
  401e4c:	3408      	adds	r4, #8
  401e4e:	4620      	mov	r0, r4
  401e50:	b003      	add	sp, #12
  401e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e56:	2b14      	cmp	r3, #20
  401e58:	d971      	bls.n	401f3e <_malloc_r+0x412>
  401e5a:	2b54      	cmp	r3, #84	; 0x54
  401e5c:	f200 80a3 	bhi.w	401fa6 <_malloc_r+0x47a>
  401e60:	0b33      	lsrs	r3, r6, #12
  401e62:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401e66:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401e6a:	00c3      	lsls	r3, r0, #3
  401e6c:	e680      	b.n	401b70 <_malloc_r+0x44>
  401e6e:	bf00      	nop
  401e70:	2000043c 	.word	0x2000043c
  401e74:	2000a558 	.word	0x2000a558
  401e78:	2000a528 	.word	0x2000a528
  401e7c:	2000a550 	.word	0x2000a550
  401e80:	2000a554 	.word	0x2000a554
  401e84:	20000444 	.word	0x20000444
  401e88:	20000844 	.word	0x20000844
  401e8c:	0a5a      	lsrs	r2, r3, #9
  401e8e:	2a04      	cmp	r2, #4
  401e90:	d95b      	bls.n	401f4a <_malloc_r+0x41e>
  401e92:	2a14      	cmp	r2, #20
  401e94:	f200 80ae 	bhi.w	401ff4 <_malloc_r+0x4c8>
  401e98:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401e9c:	00c9      	lsls	r1, r1, #3
  401e9e:	325b      	adds	r2, #91	; 0x5b
  401ea0:	eb07 0c01 	add.w	ip, r7, r1
  401ea4:	5879      	ldr	r1, [r7, r1]
  401ea6:	f1ac 0c08 	sub.w	ip, ip, #8
  401eaa:	458c      	cmp	ip, r1
  401eac:	f000 8088 	beq.w	401fc0 <_malloc_r+0x494>
  401eb0:	684a      	ldr	r2, [r1, #4]
  401eb2:	f022 0203 	bic.w	r2, r2, #3
  401eb6:	4293      	cmp	r3, r2
  401eb8:	d273      	bcs.n	401fa2 <_malloc_r+0x476>
  401eba:	6889      	ldr	r1, [r1, #8]
  401ebc:	458c      	cmp	ip, r1
  401ebe:	d1f7      	bne.n	401eb0 <_malloc_r+0x384>
  401ec0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401ec4:	687b      	ldr	r3, [r7, #4]
  401ec6:	60e2      	str	r2, [r4, #12]
  401ec8:	f8c4 c008 	str.w	ip, [r4, #8]
  401ecc:	6094      	str	r4, [r2, #8]
  401ece:	f8cc 400c 	str.w	r4, [ip, #12]
  401ed2:	e68f      	b.n	401bf4 <_malloc_r+0xc8>
  401ed4:	19a1      	adds	r1, r4, r6
  401ed6:	f046 0c01 	orr.w	ip, r6, #1
  401eda:	f042 0601 	orr.w	r6, r2, #1
  401ede:	f8c4 c004 	str.w	ip, [r4, #4]
  401ee2:	4628      	mov	r0, r5
  401ee4:	6179      	str	r1, [r7, #20]
  401ee6:	6139      	str	r1, [r7, #16]
  401ee8:	f8c1 e00c 	str.w	lr, [r1, #12]
  401eec:	f8c1 e008 	str.w	lr, [r1, #8]
  401ef0:	604e      	str	r6, [r1, #4]
  401ef2:	50e2      	str	r2, [r4, r3]
  401ef4:	f000 f8d0 	bl	402098 <__malloc_unlock>
  401ef8:	3408      	adds	r4, #8
  401efa:	e6dd      	b.n	401cb8 <_malloc_r+0x18c>
  401efc:	687b      	ldr	r3, [r7, #4]
  401efe:	e679      	b.n	401bf4 <_malloc_r+0xc8>
  401f00:	f108 0801 	add.w	r8, r8, #1
  401f04:	f018 0f03 	tst.w	r8, #3
  401f08:	f10c 0c08 	add.w	ip, ip, #8
  401f0c:	f47f ae85 	bne.w	401c1a <_malloc_r+0xee>
  401f10:	e02d      	b.n	401f6e <_malloc_r+0x442>
  401f12:	68dc      	ldr	r4, [r3, #12]
  401f14:	42a3      	cmp	r3, r4
  401f16:	bf08      	it	eq
  401f18:	3002      	addeq	r0, #2
  401f1a:	f43f ae3e 	beq.w	401b9a <_malloc_r+0x6e>
  401f1e:	e6bb      	b.n	401c98 <_malloc_r+0x16c>
  401f20:	4419      	add	r1, r3
  401f22:	461c      	mov	r4, r3
  401f24:	684a      	ldr	r2, [r1, #4]
  401f26:	68db      	ldr	r3, [r3, #12]
  401f28:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401f2c:	f042 0201 	orr.w	r2, r2, #1
  401f30:	604a      	str	r2, [r1, #4]
  401f32:	4628      	mov	r0, r5
  401f34:	60f3      	str	r3, [r6, #12]
  401f36:	609e      	str	r6, [r3, #8]
  401f38:	f000 f8ae 	bl	402098 <__malloc_unlock>
  401f3c:	e6bc      	b.n	401cb8 <_malloc_r+0x18c>
  401f3e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  401f42:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  401f46:	00c3      	lsls	r3, r0, #3
  401f48:	e612      	b.n	401b70 <_malloc_r+0x44>
  401f4a:	099a      	lsrs	r2, r3, #6
  401f4c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401f50:	00c9      	lsls	r1, r1, #3
  401f52:	3238      	adds	r2, #56	; 0x38
  401f54:	e7a4      	b.n	401ea0 <_malloc_r+0x374>
  401f56:	42bc      	cmp	r4, r7
  401f58:	d054      	beq.n	402004 <_malloc_r+0x4d8>
  401f5a:	68bc      	ldr	r4, [r7, #8]
  401f5c:	6862      	ldr	r2, [r4, #4]
  401f5e:	f022 0203 	bic.w	r2, r2, #3
  401f62:	e75d      	b.n	401e20 <_malloc_r+0x2f4>
  401f64:	f859 3908 	ldr.w	r3, [r9], #-8
  401f68:	4599      	cmp	r9, r3
  401f6a:	f040 8086 	bne.w	40207a <_malloc_r+0x54e>
  401f6e:	f010 0f03 	tst.w	r0, #3
  401f72:	f100 30ff 	add.w	r0, r0, #4294967295
  401f76:	d1f5      	bne.n	401f64 <_malloc_r+0x438>
  401f78:	687b      	ldr	r3, [r7, #4]
  401f7a:	ea23 0304 	bic.w	r3, r3, r4
  401f7e:	607b      	str	r3, [r7, #4]
  401f80:	0064      	lsls	r4, r4, #1
  401f82:	429c      	cmp	r4, r3
  401f84:	f63f aec7 	bhi.w	401d16 <_malloc_r+0x1ea>
  401f88:	2c00      	cmp	r4, #0
  401f8a:	f43f aec4 	beq.w	401d16 <_malloc_r+0x1ea>
  401f8e:	421c      	tst	r4, r3
  401f90:	4640      	mov	r0, r8
  401f92:	f47f ae3e 	bne.w	401c12 <_malloc_r+0xe6>
  401f96:	0064      	lsls	r4, r4, #1
  401f98:	421c      	tst	r4, r3
  401f9a:	f100 0004 	add.w	r0, r0, #4
  401f9e:	d0fa      	beq.n	401f96 <_malloc_r+0x46a>
  401fa0:	e637      	b.n	401c12 <_malloc_r+0xe6>
  401fa2:	468c      	mov	ip, r1
  401fa4:	e78c      	b.n	401ec0 <_malloc_r+0x394>
  401fa6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401faa:	d815      	bhi.n	401fd8 <_malloc_r+0x4ac>
  401fac:	0bf3      	lsrs	r3, r6, #15
  401fae:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401fb2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  401fb6:	00c3      	lsls	r3, r0, #3
  401fb8:	e5da      	b.n	401b70 <_malloc_r+0x44>
  401fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401fbe:	e6ed      	b.n	401d9c <_malloc_r+0x270>
  401fc0:	687b      	ldr	r3, [r7, #4]
  401fc2:	1092      	asrs	r2, r2, #2
  401fc4:	2101      	movs	r1, #1
  401fc6:	fa01 f202 	lsl.w	r2, r1, r2
  401fca:	4313      	orrs	r3, r2
  401fcc:	607b      	str	r3, [r7, #4]
  401fce:	4662      	mov	r2, ip
  401fd0:	e779      	b.n	401ec6 <_malloc_r+0x39a>
  401fd2:	2301      	movs	r3, #1
  401fd4:	6053      	str	r3, [r2, #4]
  401fd6:	e729      	b.n	401e2c <_malloc_r+0x300>
  401fd8:	f240 5254 	movw	r2, #1364	; 0x554
  401fdc:	4293      	cmp	r3, r2
  401fde:	d822      	bhi.n	402026 <_malloc_r+0x4fa>
  401fe0:	0cb3      	lsrs	r3, r6, #18
  401fe2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  401fe6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  401fea:	00c3      	lsls	r3, r0, #3
  401fec:	e5c0      	b.n	401b70 <_malloc_r+0x44>
  401fee:	f103 0b10 	add.w	fp, r3, #16
  401ff2:	e6ae      	b.n	401d52 <_malloc_r+0x226>
  401ff4:	2a54      	cmp	r2, #84	; 0x54
  401ff6:	d829      	bhi.n	40204c <_malloc_r+0x520>
  401ff8:	0b1a      	lsrs	r2, r3, #12
  401ffa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401ffe:	00c9      	lsls	r1, r1, #3
  402000:	326e      	adds	r2, #110	; 0x6e
  402002:	e74d      	b.n	401ea0 <_malloc_r+0x374>
  402004:	4b20      	ldr	r3, [pc, #128]	; (402088 <_malloc_r+0x55c>)
  402006:	6819      	ldr	r1, [r3, #0]
  402008:	4459      	add	r1, fp
  40200a:	6019      	str	r1, [r3, #0]
  40200c:	e6b2      	b.n	401d74 <_malloc_r+0x248>
  40200e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402012:	2800      	cmp	r0, #0
  402014:	f47f aeae 	bne.w	401d74 <_malloc_r+0x248>
  402018:	eb08 030b 	add.w	r3, r8, fp
  40201c:	68ba      	ldr	r2, [r7, #8]
  40201e:	f043 0301 	orr.w	r3, r3, #1
  402022:	6053      	str	r3, [r2, #4]
  402024:	e6ee      	b.n	401e04 <_malloc_r+0x2d8>
  402026:	207f      	movs	r0, #127	; 0x7f
  402028:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40202c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402030:	e59e      	b.n	401b70 <_malloc_r+0x44>
  402032:	f104 0108 	add.w	r1, r4, #8
  402036:	4628      	mov	r0, r5
  402038:	9300      	str	r3, [sp, #0]
  40203a:	f7ff fc29 	bl	401890 <_free_r>
  40203e:	9b00      	ldr	r3, [sp, #0]
  402040:	6819      	ldr	r1, [r3, #0]
  402042:	e6df      	b.n	401e04 <_malloc_r+0x2d8>
  402044:	2001      	movs	r0, #1
  402046:	f04f 0900 	mov.w	r9, #0
  40204a:	e6bc      	b.n	401dc6 <_malloc_r+0x29a>
  40204c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402050:	d805      	bhi.n	40205e <_malloc_r+0x532>
  402052:	0bda      	lsrs	r2, r3, #15
  402054:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402058:	00c9      	lsls	r1, r1, #3
  40205a:	3277      	adds	r2, #119	; 0x77
  40205c:	e720      	b.n	401ea0 <_malloc_r+0x374>
  40205e:	f240 5154 	movw	r1, #1364	; 0x554
  402062:	428a      	cmp	r2, r1
  402064:	d805      	bhi.n	402072 <_malloc_r+0x546>
  402066:	0c9a      	lsrs	r2, r3, #18
  402068:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40206c:	00c9      	lsls	r1, r1, #3
  40206e:	327c      	adds	r2, #124	; 0x7c
  402070:	e716      	b.n	401ea0 <_malloc_r+0x374>
  402072:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402076:	227e      	movs	r2, #126	; 0x7e
  402078:	e712      	b.n	401ea0 <_malloc_r+0x374>
  40207a:	687b      	ldr	r3, [r7, #4]
  40207c:	e780      	b.n	401f80 <_malloc_r+0x454>
  40207e:	08f0      	lsrs	r0, r6, #3
  402080:	f106 0308 	add.w	r3, r6, #8
  402084:	e600      	b.n	401c88 <_malloc_r+0x15c>
  402086:	bf00      	nop
  402088:	2000a528 	.word	0x2000a528

0040208c <__malloc_lock>:
  40208c:	4801      	ldr	r0, [pc, #4]	; (402094 <__malloc_lock+0x8>)
  40208e:	f7ff bd13 	b.w	401ab8 <__retarget_lock_acquire_recursive>
  402092:	bf00      	nop
  402094:	2000a640 	.word	0x2000a640

00402098 <__malloc_unlock>:
  402098:	4801      	ldr	r0, [pc, #4]	; (4020a0 <__malloc_unlock+0x8>)
  40209a:	f7ff bd0f 	b.w	401abc <__retarget_lock_release_recursive>
  40209e:	bf00      	nop
  4020a0:	2000a640 	.word	0x2000a640

004020a4 <_sbrk_r>:
  4020a4:	b538      	push	{r3, r4, r5, lr}
  4020a6:	4c07      	ldr	r4, [pc, #28]	; (4020c4 <_sbrk_r+0x20>)
  4020a8:	2300      	movs	r3, #0
  4020aa:	4605      	mov	r5, r0
  4020ac:	4608      	mov	r0, r1
  4020ae:	6023      	str	r3, [r4, #0]
  4020b0:	f7ff f8d8 	bl	401264 <_sbrk>
  4020b4:	1c43      	adds	r3, r0, #1
  4020b6:	d000      	beq.n	4020ba <_sbrk_r+0x16>
  4020b8:	bd38      	pop	{r3, r4, r5, pc}
  4020ba:	6823      	ldr	r3, [r4, #0]
  4020bc:	2b00      	cmp	r3, #0
  4020be:	d0fb      	beq.n	4020b8 <_sbrk_r+0x14>
  4020c0:	602b      	str	r3, [r5, #0]
  4020c2:	bd38      	pop	{r3, r4, r5, pc}
  4020c4:	2000a654 	.word	0x2000a654

004020c8 <__sread>:
  4020c8:	b510      	push	{r4, lr}
  4020ca:	460c      	mov	r4, r1
  4020cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4020d0:	f000 f954 	bl	40237c <_read_r>
  4020d4:	2800      	cmp	r0, #0
  4020d6:	db03      	blt.n	4020e0 <__sread+0x18>
  4020d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4020da:	4403      	add	r3, r0
  4020dc:	6523      	str	r3, [r4, #80]	; 0x50
  4020de:	bd10      	pop	{r4, pc}
  4020e0:	89a3      	ldrh	r3, [r4, #12]
  4020e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4020e6:	81a3      	strh	r3, [r4, #12]
  4020e8:	bd10      	pop	{r4, pc}
  4020ea:	bf00      	nop

004020ec <__swrite>:
  4020ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020f0:	4616      	mov	r6, r2
  4020f2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4020f6:	461f      	mov	r7, r3
  4020f8:	05d3      	lsls	r3, r2, #23
  4020fa:	460c      	mov	r4, r1
  4020fc:	4605      	mov	r5, r0
  4020fe:	d507      	bpl.n	402110 <__swrite+0x24>
  402100:	2200      	movs	r2, #0
  402102:	2302      	movs	r3, #2
  402104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402108:	f000 f922 	bl	402350 <_lseek_r>
  40210c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402114:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402118:	81a2      	strh	r2, [r4, #12]
  40211a:	463b      	mov	r3, r7
  40211c:	4632      	mov	r2, r6
  40211e:	4628      	mov	r0, r5
  402120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402124:	f000 b814 	b.w	402150 <_write_r>

00402128 <__sseek>:
  402128:	b510      	push	{r4, lr}
  40212a:	460c      	mov	r4, r1
  40212c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402130:	f000 f90e 	bl	402350 <_lseek_r>
  402134:	89a3      	ldrh	r3, [r4, #12]
  402136:	1c42      	adds	r2, r0, #1
  402138:	bf0e      	itee	eq
  40213a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40213e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402142:	6520      	strne	r0, [r4, #80]	; 0x50
  402144:	81a3      	strh	r3, [r4, #12]
  402146:	bd10      	pop	{r4, pc}

00402148 <__sclose>:
  402148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40214c:	f000 b878 	b.w	402240 <_close_r>

00402150 <_write_r>:
  402150:	b570      	push	{r4, r5, r6, lr}
  402152:	460d      	mov	r5, r1
  402154:	4c08      	ldr	r4, [pc, #32]	; (402178 <_write_r+0x28>)
  402156:	4611      	mov	r1, r2
  402158:	4606      	mov	r6, r0
  40215a:	461a      	mov	r2, r3
  40215c:	4628      	mov	r0, r5
  40215e:	2300      	movs	r3, #0
  402160:	6023      	str	r3, [r4, #0]
  402162:	f7fe fb1f 	bl	4007a4 <_write>
  402166:	1c43      	adds	r3, r0, #1
  402168:	d000      	beq.n	40216c <_write_r+0x1c>
  40216a:	bd70      	pop	{r4, r5, r6, pc}
  40216c:	6823      	ldr	r3, [r4, #0]
  40216e:	2b00      	cmp	r3, #0
  402170:	d0fb      	beq.n	40216a <_write_r+0x1a>
  402172:	6033      	str	r3, [r6, #0]
  402174:	bd70      	pop	{r4, r5, r6, pc}
  402176:	bf00      	nop
  402178:	2000a654 	.word	0x2000a654

0040217c <__register_exitproc>:
  40217c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402180:	4d2c      	ldr	r5, [pc, #176]	; (402234 <__register_exitproc+0xb8>)
  402182:	4606      	mov	r6, r0
  402184:	6828      	ldr	r0, [r5, #0]
  402186:	4698      	mov	r8, r3
  402188:	460f      	mov	r7, r1
  40218a:	4691      	mov	r9, r2
  40218c:	f7ff fc94 	bl	401ab8 <__retarget_lock_acquire_recursive>
  402190:	4b29      	ldr	r3, [pc, #164]	; (402238 <__register_exitproc+0xbc>)
  402192:	681c      	ldr	r4, [r3, #0]
  402194:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402198:	2b00      	cmp	r3, #0
  40219a:	d03e      	beq.n	40221a <__register_exitproc+0x9e>
  40219c:	685a      	ldr	r2, [r3, #4]
  40219e:	2a1f      	cmp	r2, #31
  4021a0:	dc1c      	bgt.n	4021dc <__register_exitproc+0x60>
  4021a2:	f102 0e01 	add.w	lr, r2, #1
  4021a6:	b176      	cbz	r6, 4021c6 <__register_exitproc+0x4a>
  4021a8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4021ac:	2401      	movs	r4, #1
  4021ae:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4021b2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4021b6:	4094      	lsls	r4, r2
  4021b8:	4320      	orrs	r0, r4
  4021ba:	2e02      	cmp	r6, #2
  4021bc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4021c0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4021c4:	d023      	beq.n	40220e <__register_exitproc+0x92>
  4021c6:	3202      	adds	r2, #2
  4021c8:	f8c3 e004 	str.w	lr, [r3, #4]
  4021cc:	6828      	ldr	r0, [r5, #0]
  4021ce:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4021d2:	f7ff fc73 	bl	401abc <__retarget_lock_release_recursive>
  4021d6:	2000      	movs	r0, #0
  4021d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4021dc:	4b17      	ldr	r3, [pc, #92]	; (40223c <__register_exitproc+0xc0>)
  4021de:	b30b      	cbz	r3, 402224 <__register_exitproc+0xa8>
  4021e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4021e4:	f7ff fc9a 	bl	401b1c <malloc>
  4021e8:	4603      	mov	r3, r0
  4021ea:	b1d8      	cbz	r0, 402224 <__register_exitproc+0xa8>
  4021ec:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4021f0:	6002      	str	r2, [r0, #0]
  4021f2:	2100      	movs	r1, #0
  4021f4:	6041      	str	r1, [r0, #4]
  4021f6:	460a      	mov	r2, r1
  4021f8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4021fc:	f04f 0e01 	mov.w	lr, #1
  402200:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402204:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402208:	2e00      	cmp	r6, #0
  40220a:	d0dc      	beq.n	4021c6 <__register_exitproc+0x4a>
  40220c:	e7cc      	b.n	4021a8 <__register_exitproc+0x2c>
  40220e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402212:	430c      	orrs	r4, r1
  402214:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402218:	e7d5      	b.n	4021c6 <__register_exitproc+0x4a>
  40221a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40221e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402222:	e7bb      	b.n	40219c <__register_exitproc+0x20>
  402224:	6828      	ldr	r0, [r5, #0]
  402226:	f7ff fc49 	bl	401abc <__retarget_lock_release_recursive>
  40222a:	f04f 30ff 	mov.w	r0, #4294967295
  40222e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402232:	bf00      	nop
  402234:	20000438 	.word	0x20000438
  402238:	004023a8 	.word	0x004023a8
  40223c:	00401b1d 	.word	0x00401b1d

00402240 <_close_r>:
  402240:	b538      	push	{r3, r4, r5, lr}
  402242:	4c07      	ldr	r4, [pc, #28]	; (402260 <_close_r+0x20>)
  402244:	2300      	movs	r3, #0
  402246:	4605      	mov	r5, r0
  402248:	4608      	mov	r0, r1
  40224a:	6023      	str	r3, [r4, #0]
  40224c:	f7ff f826 	bl	40129c <_close>
  402250:	1c43      	adds	r3, r0, #1
  402252:	d000      	beq.n	402256 <_close_r+0x16>
  402254:	bd38      	pop	{r3, r4, r5, pc}
  402256:	6823      	ldr	r3, [r4, #0]
  402258:	2b00      	cmp	r3, #0
  40225a:	d0fb      	beq.n	402254 <_close_r+0x14>
  40225c:	602b      	str	r3, [r5, #0]
  40225e:	bd38      	pop	{r3, r4, r5, pc}
  402260:	2000a654 	.word	0x2000a654

00402264 <_fclose_r>:
  402264:	b570      	push	{r4, r5, r6, lr}
  402266:	b159      	cbz	r1, 402280 <_fclose_r+0x1c>
  402268:	4605      	mov	r5, r0
  40226a:	460c      	mov	r4, r1
  40226c:	b110      	cbz	r0, 402274 <_fclose_r+0x10>
  40226e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402270:	2b00      	cmp	r3, #0
  402272:	d03c      	beq.n	4022ee <_fclose_r+0x8a>
  402274:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402276:	07d8      	lsls	r0, r3, #31
  402278:	d505      	bpl.n	402286 <_fclose_r+0x22>
  40227a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40227e:	b92b      	cbnz	r3, 40228c <_fclose_r+0x28>
  402280:	2600      	movs	r6, #0
  402282:	4630      	mov	r0, r6
  402284:	bd70      	pop	{r4, r5, r6, pc}
  402286:	89a3      	ldrh	r3, [r4, #12]
  402288:	0599      	lsls	r1, r3, #22
  40228a:	d53c      	bpl.n	402306 <_fclose_r+0xa2>
  40228c:	4621      	mov	r1, r4
  40228e:	4628      	mov	r0, r5
  402290:	f7ff f964 	bl	40155c <__sflush_r>
  402294:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402296:	4606      	mov	r6, r0
  402298:	b133      	cbz	r3, 4022a8 <_fclose_r+0x44>
  40229a:	69e1      	ldr	r1, [r4, #28]
  40229c:	4628      	mov	r0, r5
  40229e:	4798      	blx	r3
  4022a0:	2800      	cmp	r0, #0
  4022a2:	bfb8      	it	lt
  4022a4:	f04f 36ff 	movlt.w	r6, #4294967295
  4022a8:	89a3      	ldrh	r3, [r4, #12]
  4022aa:	061a      	lsls	r2, r3, #24
  4022ac:	d422      	bmi.n	4022f4 <_fclose_r+0x90>
  4022ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4022b0:	b141      	cbz	r1, 4022c4 <_fclose_r+0x60>
  4022b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4022b6:	4299      	cmp	r1, r3
  4022b8:	d002      	beq.n	4022c0 <_fclose_r+0x5c>
  4022ba:	4628      	mov	r0, r5
  4022bc:	f7ff fae8 	bl	401890 <_free_r>
  4022c0:	2300      	movs	r3, #0
  4022c2:	6323      	str	r3, [r4, #48]	; 0x30
  4022c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4022c6:	b121      	cbz	r1, 4022d2 <_fclose_r+0x6e>
  4022c8:	4628      	mov	r0, r5
  4022ca:	f7ff fae1 	bl	401890 <_free_r>
  4022ce:	2300      	movs	r3, #0
  4022d0:	6463      	str	r3, [r4, #68]	; 0x44
  4022d2:	f7ff fa67 	bl	4017a4 <__sfp_lock_acquire>
  4022d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4022d8:	2200      	movs	r2, #0
  4022da:	07db      	lsls	r3, r3, #31
  4022dc:	81a2      	strh	r2, [r4, #12]
  4022de:	d50e      	bpl.n	4022fe <_fclose_r+0x9a>
  4022e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4022e2:	f7ff fbe7 	bl	401ab4 <__retarget_lock_close_recursive>
  4022e6:	f7ff fa63 	bl	4017b0 <__sfp_lock_release>
  4022ea:	4630      	mov	r0, r6
  4022ec:	bd70      	pop	{r4, r5, r6, pc}
  4022ee:	f7ff fa2d 	bl	40174c <__sinit>
  4022f2:	e7bf      	b.n	402274 <_fclose_r+0x10>
  4022f4:	6921      	ldr	r1, [r4, #16]
  4022f6:	4628      	mov	r0, r5
  4022f8:	f7ff faca 	bl	401890 <_free_r>
  4022fc:	e7d7      	b.n	4022ae <_fclose_r+0x4a>
  4022fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402300:	f7ff fbdc 	bl	401abc <__retarget_lock_release_recursive>
  402304:	e7ec      	b.n	4022e0 <_fclose_r+0x7c>
  402306:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402308:	f7ff fbd6 	bl	401ab8 <__retarget_lock_acquire_recursive>
  40230c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402310:	2b00      	cmp	r3, #0
  402312:	d1bb      	bne.n	40228c <_fclose_r+0x28>
  402314:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402316:	f016 0601 	ands.w	r6, r6, #1
  40231a:	d1b1      	bne.n	402280 <_fclose_r+0x1c>
  40231c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40231e:	f7ff fbcd 	bl	401abc <__retarget_lock_release_recursive>
  402322:	4630      	mov	r0, r6
  402324:	bd70      	pop	{r4, r5, r6, pc}
  402326:	bf00      	nop

00402328 <_fstat_r>:
  402328:	b538      	push	{r3, r4, r5, lr}
  40232a:	460b      	mov	r3, r1
  40232c:	4c07      	ldr	r4, [pc, #28]	; (40234c <_fstat_r+0x24>)
  40232e:	4605      	mov	r5, r0
  402330:	4611      	mov	r1, r2
  402332:	4618      	mov	r0, r3
  402334:	2300      	movs	r3, #0
  402336:	6023      	str	r3, [r4, #0]
  402338:	f7fe ffb3 	bl	4012a2 <_fstat>
  40233c:	1c43      	adds	r3, r0, #1
  40233e:	d000      	beq.n	402342 <_fstat_r+0x1a>
  402340:	bd38      	pop	{r3, r4, r5, pc}
  402342:	6823      	ldr	r3, [r4, #0]
  402344:	2b00      	cmp	r3, #0
  402346:	d0fb      	beq.n	402340 <_fstat_r+0x18>
  402348:	602b      	str	r3, [r5, #0]
  40234a:	bd38      	pop	{r3, r4, r5, pc}
  40234c:	2000a654 	.word	0x2000a654

00402350 <_lseek_r>:
  402350:	b570      	push	{r4, r5, r6, lr}
  402352:	460d      	mov	r5, r1
  402354:	4c08      	ldr	r4, [pc, #32]	; (402378 <_lseek_r+0x28>)
  402356:	4611      	mov	r1, r2
  402358:	4606      	mov	r6, r0
  40235a:	461a      	mov	r2, r3
  40235c:	4628      	mov	r0, r5
  40235e:	2300      	movs	r3, #0
  402360:	6023      	str	r3, [r4, #0]
  402362:	f7fe ffa3 	bl	4012ac <_lseek>
  402366:	1c43      	adds	r3, r0, #1
  402368:	d000      	beq.n	40236c <_lseek_r+0x1c>
  40236a:	bd70      	pop	{r4, r5, r6, pc}
  40236c:	6823      	ldr	r3, [r4, #0]
  40236e:	2b00      	cmp	r3, #0
  402370:	d0fb      	beq.n	40236a <_lseek_r+0x1a>
  402372:	6033      	str	r3, [r6, #0]
  402374:	bd70      	pop	{r4, r5, r6, pc}
  402376:	bf00      	nop
  402378:	2000a654 	.word	0x2000a654

0040237c <_read_r>:
  40237c:	b570      	push	{r4, r5, r6, lr}
  40237e:	460d      	mov	r5, r1
  402380:	4c08      	ldr	r4, [pc, #32]	; (4023a4 <_read_r+0x28>)
  402382:	4611      	mov	r1, r2
  402384:	4606      	mov	r6, r0
  402386:	461a      	mov	r2, r3
  402388:	4628      	mov	r0, r5
  40238a:	2300      	movs	r3, #0
  40238c:	6023      	str	r3, [r4, #0]
  40238e:	f7fe f9eb 	bl	400768 <_read>
  402392:	1c43      	adds	r3, r0, #1
  402394:	d000      	beq.n	402398 <_read_r+0x1c>
  402396:	bd70      	pop	{r4, r5, r6, pc}
  402398:	6823      	ldr	r3, [r4, #0]
  40239a:	2b00      	cmp	r3, #0
  40239c:	d0fb      	beq.n	402396 <_read_r+0x1a>
  40239e:	6033      	str	r3, [r6, #0]
  4023a0:	bd70      	pop	{r4, r5, r6, pc}
  4023a2:	bf00      	nop
  4023a4:	2000a654 	.word	0x2000a654

004023a8 <_global_impure_ptr>:
  4023a8:	20000010                                ... 

004023ac <_init>:
  4023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023ae:	bf00      	nop
  4023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4023b2:	bc08      	pop	{r3}
  4023b4:	469e      	mov	lr, r3
  4023b6:	4770      	bx	lr

004023b8 <__init_array_start>:
  4023b8:	0040153d 	.word	0x0040153d

004023bc <__frame_dummy_init_array_entry>:
  4023bc:	0040011d                                ..@.

004023c0 <_fini>:
  4023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023c2:	bf00      	nop
  4023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4023c6:	bc08      	pop	{r3}
  4023c8:	469e      	mov	lr, r3
  4023ca:	4770      	bx	lr

004023cc <__fini_array_start>:
  4023cc:	004000f9 	.word	0x004000f9
