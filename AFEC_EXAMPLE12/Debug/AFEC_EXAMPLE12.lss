
AFEC_EXAMPLE12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023cc  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20000000  004023cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00009e10  2000084c  00402c18  0002084c  2**2
                  ALLOC
  3 .stack        00003004  2000a65c  0040ca28  0002084c  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018a2e  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003546  00000000  00000000  00039301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005426  00000000  00000000  0003c847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ad0  00000000  00000000  00041c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a70  00000000  00000000  0004273d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018bed  00000000  00000000  000431ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c8e9  00000000  00000000  0005bd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00065f43  00000000  00000000  00068683  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e48  00000000  00000000  000ce5c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 d6 00 20 19 10 40 00 17 10 40 00 17 10 40 00     `.. ..@...@...@.
  400010:	17 10 40 00 17 10 40 00 17 10 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	17 10 40 00 17 10 40 00 00 00 00 00 17 10 40 00     ..@...@.......@.
  40003c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40004c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40005c:	17 10 40 00 17 10 40 00 95 0c 40 00 a9 0c 40 00     ..@...@...@...@.
  40006c:	bd 0c 40 00 d1 0c 40 00 e5 0c 40 00 17 10 40 00     ..@...@...@...@.
  40007c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  40008c:	ed 02 40 00 17 10 40 00 51 03 40 00 17 10 40 00     ..@...@.Q.@...@.
  40009c:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000ac:	17 10 40 00 17 10 40 00 17 10 40 00 99 0b 40 00     ..@...@...@...@.
  4000bc:	ad 0b 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000cc:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000dc:	17 10 40 00 17 10 40 00 17 10 40 00 17 10 40 00     ..@...@...@...@.
  4000ec:	17 10 40 00 17 10 40 00 17 10 40 00                 ..@...@...@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	2000084c 	.word	0x2000084c
  400114:	00000000 	.word	0x00000000
  400118:	004023cc 	.word	0x004023cc

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	004023cc 	.word	0x004023cc
  400158:	20000850 	.word	0x20000850
  40015c:	004023cc 	.word	0x004023cc
  400160:	00000000 	.word	0x00000000

00400164 <disable_interrupts>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400164:	4b09      	ldr	r3, [pc, #36]	; (40018c <disable_interrupts+0x28>)
  400166:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40016a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40016e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400172:	f3bf 8f6f 	isb	sy
  400176:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40017a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  40017e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400182:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400186:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  40018a:	4770      	bx	lr
  40018c:	e000e100 	.word	0xe000e100

00400190 <restart>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400190:	4b10      	ldr	r3, [pc, #64]	; (4001d4 <restart+0x44>)
  400192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400194:	0fdb      	lsrs	r3, r3, #31
		ioport_set_pin_dir(is_written_pin, IOPORT_DIR_OUTPUT);
}

static void restart(void)
{
	GO_status = ioport_get_pin_level(GO_pin);
  400196:	4a10      	ldr	r2, [pc, #64]	; (4001d8 <restart+0x48>)
  400198:	7013      	strb	r3, [r2, #0]
	if (!GO_status)
  40019a:	7813      	ldrb	r3, [r2, #0]
  40019c:	b103      	cbz	r3, 4001a0 <restart+0x10>
  40019e:	4770      	bx	lr
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001a0:	4b0c      	ldr	r3, [pc, #48]	; (4001d4 <restart+0x44>)
  4001a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4001a6:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4001ac:	631a      	str	r2, [r3, #48]	; 0x30
  4001ae:	2201      	movs	r2, #1
  4001b0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4001b4:	631a      	str	r2, [r3, #48]	; 0x30
  4001b6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4001ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4001be:	631a      	str	r2, [r3, #48]	; 0x30
  4001c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4001c4:	631a      	str	r2, [r3, #48]	; 0x30
	{
		set_default_pin_levels();
		i = 0;
  4001c6:	2300      	movs	r3, #0
  4001c8:	4a04      	ldr	r2, [pc, #16]	; (4001dc <restart+0x4c>)
  4001ca:	6013      	str	r3, [r2, #0]
		state = SL_READY;
  4001cc:	4a04      	ldr	r2, [pc, #16]	; (4001e0 <restart+0x50>)
  4001ce:	7013      	strb	r3, [r2, #0]
	}
}
  4001d0:	e7e5      	b.n	40019e <restart+0xe>
  4001d2:	bf00      	nop
  4001d4:	400e1200 	.word	0x400e1200
  4001d8:	20000868 	.word	0x20000868
  4001dc:	2000a4b0 	.word	0x2000a4b0
  4001e0:	2000a560 	.word	0x2000a560

004001e4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4001e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001e6:	b083      	sub	sp, #12
  4001e8:	4605      	mov	r5, r0
  4001ea:	460c      	mov	r4, r1
	uint32_t val = 0;
  4001ec:	2300      	movs	r3, #0
  4001ee:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001f0:	4b18      	ldr	r3, [pc, #96]	; (400254 <usart_serial_getchar+0x70>)
  4001f2:	4298      	cmp	r0, r3
  4001f4:	d00a      	beq.n	40020c <usart_serial_getchar+0x28>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001f6:	4b18      	ldr	r3, [pc, #96]	; (400258 <usart_serial_getchar+0x74>)
  4001f8:	4298      	cmp	r0, r3
  4001fa:	d00f      	beq.n	40021c <usart_serial_getchar+0x38>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001fc:	4b17      	ldr	r3, [pc, #92]	; (40025c <usart_serial_getchar+0x78>)
  4001fe:	4298      	cmp	r0, r3
  400200:	d014      	beq.n	40022c <usart_serial_getchar+0x48>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400202:	4b17      	ldr	r3, [pc, #92]	; (400260 <usart_serial_getchar+0x7c>)
  400204:	429d      	cmp	r5, r3
  400206:	d01b      	beq.n	400240 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400208:	b003      	add	sp, #12
  40020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40020c:	461f      	mov	r7, r3
  40020e:	4e15      	ldr	r6, [pc, #84]	; (400264 <usart_serial_getchar+0x80>)
  400210:	4621      	mov	r1, r4
  400212:	4638      	mov	r0, r7
  400214:	47b0      	blx	r6
  400216:	2800      	cmp	r0, #0
  400218:	d1fa      	bne.n	400210 <usart_serial_getchar+0x2c>
  40021a:	e7f2      	b.n	400202 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40021c:	461e      	mov	r6, r3
  40021e:	4d11      	ldr	r5, [pc, #68]	; (400264 <usart_serial_getchar+0x80>)
  400220:	4621      	mov	r1, r4
  400222:	4630      	mov	r0, r6
  400224:	47a8      	blx	r5
  400226:	2800      	cmp	r0, #0
  400228:	d1fa      	bne.n	400220 <usart_serial_getchar+0x3c>
  40022a:	e7ed      	b.n	400208 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  40022c:	461e      	mov	r6, r3
  40022e:	4d0e      	ldr	r5, [pc, #56]	; (400268 <usart_serial_getchar+0x84>)
  400230:	a901      	add	r1, sp, #4
  400232:	4630      	mov	r0, r6
  400234:	47a8      	blx	r5
  400236:	2800      	cmp	r0, #0
  400238:	d1fa      	bne.n	400230 <usart_serial_getchar+0x4c>
		*data = (uint8_t)(val & 0xFF);
  40023a:	9b01      	ldr	r3, [sp, #4]
  40023c:	7023      	strb	r3, [r4, #0]
  40023e:	e7e3      	b.n	400208 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  400240:	461e      	mov	r6, r3
  400242:	4d09      	ldr	r5, [pc, #36]	; (400268 <usart_serial_getchar+0x84>)
  400244:	a901      	add	r1, sp, #4
  400246:	4630      	mov	r0, r6
  400248:	47a8      	blx	r5
  40024a:	2800      	cmp	r0, #0
  40024c:	d1fa      	bne.n	400244 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
  40024e:	9b01      	ldr	r3, [sp, #4]
  400250:	7023      	strb	r3, [r4, #0]
}
  400252:	e7d9      	b.n	400208 <usart_serial_getchar+0x24>
  400254:	400e0600 	.word	0x400e0600
  400258:	40060600 	.word	0x40060600
  40025c:	400a0000 	.word	0x400a0000
  400260:	400a4000 	.word	0x400a4000
  400264:	00400fd9 	.word	0x00400fd9
  400268:	00400fff 	.word	0x00400fff

0040026c <usart_serial_putchar>:
{
  40026c:	b570      	push	{r4, r5, r6, lr}
  40026e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  400270:	4b18      	ldr	r3, [pc, #96]	; (4002d4 <usart_serial_putchar+0x68>)
  400272:	4298      	cmp	r0, r3
  400274:	d00a      	beq.n	40028c <usart_serial_putchar+0x20>
	if (UART1 == (Uart*)p_usart) {
  400276:	4b18      	ldr	r3, [pc, #96]	; (4002d8 <usart_serial_putchar+0x6c>)
  400278:	4298      	cmp	r0, r3
  40027a:	d010      	beq.n	40029e <usart_serial_putchar+0x32>
	if (USART0 == p_usart) {
  40027c:	4b17      	ldr	r3, [pc, #92]	; (4002dc <usart_serial_putchar+0x70>)
  40027e:	4298      	cmp	r0, r3
  400280:	d016      	beq.n	4002b0 <usart_serial_putchar+0x44>
	if (USART1 == p_usart) {
  400282:	4b17      	ldr	r3, [pc, #92]	; (4002e0 <usart_serial_putchar+0x74>)
  400284:	4298      	cmp	r0, r3
  400286:	d01c      	beq.n	4002c2 <usart_serial_putchar+0x56>
	return 0;
  400288:	2000      	movs	r0, #0
}
  40028a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40028c:	461e      	mov	r6, r3
  40028e:	4d15      	ldr	r5, [pc, #84]	; (4002e4 <usart_serial_putchar+0x78>)
  400290:	4621      	mov	r1, r4
  400292:	4630      	mov	r0, r6
  400294:	47a8      	blx	r5
  400296:	2800      	cmp	r0, #0
  400298:	d1fa      	bne.n	400290 <usart_serial_putchar+0x24>
		return 1;
  40029a:	2001      	movs	r0, #1
  40029c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40029e:	461e      	mov	r6, r3
  4002a0:	4d10      	ldr	r5, [pc, #64]	; (4002e4 <usart_serial_putchar+0x78>)
  4002a2:	4621      	mov	r1, r4
  4002a4:	4630      	mov	r0, r6
  4002a6:	47a8      	blx	r5
  4002a8:	2800      	cmp	r0, #0
  4002aa:	d1fa      	bne.n	4002a2 <usart_serial_putchar+0x36>
		return 1;
  4002ac:	2001      	movs	r0, #1
  4002ae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4002b0:	461e      	mov	r6, r3
  4002b2:	4d0d      	ldr	r5, [pc, #52]	; (4002e8 <usart_serial_putchar+0x7c>)
  4002b4:	4621      	mov	r1, r4
  4002b6:	4630      	mov	r0, r6
  4002b8:	47a8      	blx	r5
  4002ba:	2800      	cmp	r0, #0
  4002bc:	d1fa      	bne.n	4002b4 <usart_serial_putchar+0x48>
		return 1;
  4002be:	2001      	movs	r0, #1
  4002c0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4002c2:	461e      	mov	r6, r3
  4002c4:	4d08      	ldr	r5, [pc, #32]	; (4002e8 <usart_serial_putchar+0x7c>)
  4002c6:	4621      	mov	r1, r4
  4002c8:	4630      	mov	r0, r6
  4002ca:	47a8      	blx	r5
  4002cc:	2800      	cmp	r0, #0
  4002ce:	d1fa      	bne.n	4002c6 <usart_serial_putchar+0x5a>
		return 1;
  4002d0:	2001      	movs	r0, #1
  4002d2:	bd70      	pop	{r4, r5, r6, pc}
  4002d4:	400e0600 	.word	0x400e0600
  4002d8:	40060600 	.word	0x40060600
  4002dc:	400a0000 	.word	0x400a0000
  4002e0:	400a4000 	.word	0x400a4000
  4002e4:	00400fc9 	.word	0x00400fc9
  4002e8:	00400feb 	.word	0x00400feb

004002ec <SPI_Handler>:
{	
  4002ec:	b538      	push	{r3, r4, r5, lr}
	if(channel_to_write > 1)
  4002ee:	4b12      	ldr	r3, [pc, #72]	; (400338 <SPI_Handler+0x4c>)
  4002f0:	781b      	ldrb	r3, [r3, #0]
  4002f2:	b2db      	uxtb	r3, r3
  4002f4:	2b01      	cmp	r3, #1
  4002f6:	d900      	bls.n	4002fa <SPI_Handler+0xe>
  4002f8:	bd38      	pop	{r3, r4, r5, pc}
	if(i < data_size)
  4002fa:	4b10      	ldr	r3, [pc, #64]	; (40033c <SPI_Handler+0x50>)
  4002fc:	681a      	ldr	r2, [r3, #0]
  4002fe:	f242 730f 	movw	r3, #9999	; 0x270f
  400302:	429a      	cmp	r2, r3
  400304:	d903      	bls.n	40030e <SPI_Handler+0x22>
		ch_written = true;
  400306:	2201      	movs	r2, #1
  400308:	4b0d      	ldr	r3, [pc, #52]	; (400340 <SPI_Handler+0x54>)
  40030a:	701a      	strb	r2, [r3, #0]
}
  40030c:	e7f4      	b.n	4002f8 <SPI_Handler+0xc>
		spi_write(SPI_SLAVE_BASE, data[channel_to_write][i], 0, 0);
  40030e:	4b0a      	ldr	r3, [pc, #40]	; (400338 <SPI_Handler+0x4c>)
  400310:	781a      	ldrb	r2, [r3, #0]
  400312:	4c0a      	ldr	r4, [pc, #40]	; (40033c <SPI_Handler+0x50>)
  400314:	6823      	ldr	r3, [r4, #0]
  400316:	f242 7111 	movw	r1, #10001	; 0x2711
  40031a:	fb02 3101 	mla	r1, r2, r1, r3
  40031e:	2300      	movs	r3, #0
  400320:	461a      	mov	r2, r3
  400322:	4808      	ldr	r0, [pc, #32]	; (400344 <SPI_Handler+0x58>)
  400324:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
  400328:	4807      	ldr	r0, [pc, #28]	; (400348 <SPI_Handler+0x5c>)
  40032a:	4d08      	ldr	r5, [pc, #32]	; (40034c <SPI_Handler+0x60>)
  40032c:	47a8      	blx	r5
		i++; 
  40032e:	6823      	ldr	r3, [r4, #0]
  400330:	3301      	adds	r3, #1
  400332:	6023      	str	r3, [r4, #0]
  400334:	bd38      	pop	{r3, r4, r5, pc}
  400336:	bf00      	nop
  400338:	20000001 	.word	0x20000001
  40033c:	2000a4b0 	.word	0x2000a4b0
  400340:	2000086a 	.word	0x2000086a
  400344:	2000086c 	.word	0x2000086c
  400348:	40088000 	.word	0x40088000
  40034c:	00400e5b 	.word	0x00400e5b

00400350 <TC0_Handler>:
{
  400350:	b510      	push	{r4, lr}
  400352:	b082      	sub	sp, #8
	ul_dummy = tc_get_status(TC0, 0);
  400354:	2100      	movs	r1, #0
  400356:	4814      	ldr	r0, [pc, #80]	; (4003a8 <TC0_Handler+0x58>)
  400358:	4b14      	ldr	r3, [pc, #80]	; (4003ac <TC0_Handler+0x5c>)
  40035a:	4798      	blx	r3
  40035c:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
  40035e:	9b01      	ldr	r3, [sp, #4]
	if (i < data_size) {
  400360:	4b13      	ldr	r3, [pc, #76]	; (4003b0 <TC0_Handler+0x60>)
  400362:	681a      	ldr	r2, [r3, #0]
  400364:	f242 730f 	movw	r3, #9999	; 0x270f
  400368:	429a      	cmp	r2, r3
  40036a:	d904      	bls.n	400376 <TC0_Handler+0x26>
		buffer_full = true;
  40036c:	2201      	movs	r2, #1
  40036e:	4b11      	ldr	r3, [pc, #68]	; (4003b4 <TC0_Handler+0x64>)
  400370:	701a      	strb	r2, [r3, #0]
}
  400372:	b002      	add	sp, #8
  400374:	bd10      	pop	{r4, pc}
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  400376:	4a10      	ldr	r2, [pc, #64]	; (4003b8 <TC0_Handler+0x68>)
  400378:	2302      	movs	r3, #2
  40037a:	6013      	str	r3, [r2, #0]
		data[0][i] = afec_channel_get_value(AFEC0, channel_1);
  40037c:	490c      	ldr	r1, [pc, #48]	; (4003b0 <TC0_Handler+0x60>)
  40037e:	680b      	ldr	r3, [r1, #0]
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400380:	2005      	movs	r0, #5
  400382:	6650      	str	r0, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  400384:	6e94      	ldr	r4, [r2, #104]	; 0x68
  400386:	480d      	ldr	r0, [pc, #52]	; (4003bc <TC0_Handler+0x6c>)
  400388:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
		data[1][i] = afec_channel_get_value(AFEC0, channel_2);
  40038c:	680b      	ldr	r3, [r1, #0]
	afec->AFEC_CSELR = afec_ch;
  40038e:	2404      	movs	r4, #4
  400390:	6654      	str	r4, [r2, #100]	; 0x64
	return afec->AFEC_CDR;
  400392:	6e92      	ldr	r2, [r2, #104]	; 0x68
  400394:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
  400398:	3311      	adds	r3, #17
  40039a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		i++;
  40039e:	680b      	ldr	r3, [r1, #0]
  4003a0:	3301      	adds	r3, #1
  4003a2:	600b      	str	r3, [r1, #0]
  4003a4:	e7e5      	b.n	400372 <TC0_Handler+0x22>
  4003a6:	bf00      	nop
  4003a8:	40090000 	.word	0x40090000
  4003ac:	00400f19 	.word	0x00400f19
  4003b0:	2000a4b0 	.word	0x2000a4b0
  4003b4:	20000869 	.word	0x20000869
  4003b8:	400b0000 	.word	0x400b0000
  4003bc:	2000086c 	.word	0x2000086c

004003c0 <main>:

int main(void)
{
  4003c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  4003c4:	b08f      	sub	sp, #60	; 0x3c
	/* Initialize the SAM system. */
	sysclk_init();
  4003c6:	4b9f      	ldr	r3, [pc, #636]	; (400644 <main+0x284>)
  4003c8:	4798      	blx	r3
	board_init();
  4003ca:	4b9f      	ldr	r3, [pc, #636]	; (400648 <main+0x288>)
  4003cc:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003ce:	2009      	movs	r0, #9
  4003d0:	4c9e      	ldr	r4, [pc, #632]	; (40064c <main+0x28c>)
  4003d2:	47a0      	blx	r4
  4003d4:	200a      	movs	r0, #10
  4003d6:	47a0      	blx	r4
  4003d8:	200b      	movs	r0, #11
  4003da:	47a0      	blx	r4
  4003dc:	200c      	movs	r0, #12
  4003de:	47a0      	blx	r4
  4003e0:	200d      	movs	r0, #13
  4003e2:	47a0      	blx	r4
  4003e4:	2007      	movs	r0, #7
  4003e6:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4003e8:	4e99      	ldr	r6, [pc, #612]	; (400650 <main+0x290>)
  4003ea:	4b9a      	ldr	r3, [pc, #616]	; (400654 <main+0x294>)
  4003ec:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4003ee:	4a9a      	ldr	r2, [pc, #616]	; (400658 <main+0x298>)
  4003f0:	4b9a      	ldr	r3, [pc, #616]	; (40065c <main+0x29c>)
  4003f2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4003f4:	4a9a      	ldr	r2, [pc, #616]	; (400660 <main+0x2a0>)
  4003f6:	4b9b      	ldr	r3, [pc, #620]	; (400664 <main+0x2a4>)
  4003f8:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4003fa:	4b9b      	ldr	r3, [pc, #620]	; (400668 <main+0x2a8>)
  4003fc:	9304      	str	r3, [sp, #16]
	uart_settings.ul_baudrate = opt->baudrate;
  4003fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400402:	9305      	str	r3, [sp, #20]
	uart_settings.ul_mode = opt->paritytype;
  400404:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400408:	9506      	str	r5, [sp, #24]
  40040a:	2007      	movs	r0, #7
  40040c:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
  40040e:	a904      	add	r1, sp, #16
  400410:	4630      	mov	r0, r6
  400412:	4b96      	ldr	r3, [pc, #600]	; (40066c <main+0x2ac>)
  400414:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400416:	4e96      	ldr	r6, [pc, #600]	; (400670 <main+0x2b0>)
  400418:	6833      	ldr	r3, [r6, #0]
  40041a:	2100      	movs	r1, #0
  40041c:	6898      	ldr	r0, [r3, #8]
  40041e:	4c95      	ldr	r4, [pc, #596]	; (400674 <main+0x2b4>)
  400420:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400422:	6833      	ldr	r3, [r6, #0]
  400424:	2100      	movs	r1, #0
  400426:	6858      	ldr	r0, [r3, #4]
  400428:	47a0      	blx	r4
	ioport_init();

	configure_console();

	afec_enable(AFEC0);
  40042a:	4c93      	ldr	r4, [pc, #588]	; (400678 <main+0x2b8>)
  40042c:	4620      	mov	r0, r4
  40042e:	4b93      	ldr	r3, [pc, #588]	; (40067c <main+0x2bc>)
  400430:	4798      	blx	r3
	struct afec_config afec_cfg;
	afec_get_config_defaults(&afec_cfg);
  400432:	a807      	add	r0, sp, #28
  400434:	4b92      	ldr	r3, [pc, #584]	; (400680 <main+0x2c0>)
  400436:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  400438:	a907      	add	r1, sp, #28
  40043a:	4620      	mov	r0, r4
  40043c:	4b91      	ldr	r3, [pc, #580]	; (400684 <main+0x2c4>)
  40043e:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400440:	2320      	movs	r3, #32
  400442:	6163      	str	r3, [r4, #20]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  400444:	a804      	add	r0, sp, #16
  400446:	4f90      	ldr	r7, [pc, #576]	; (400688 <main+0x2c8>)
  400448:	47b8      	blx	r7
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  40044a:	aa04      	add	r2, sp, #16
  40044c:	2105      	movs	r1, #5
  40044e:	4620      	mov	r0, r4
  400450:	4e8e      	ldr	r6, [pc, #568]	; (40068c <main+0x2cc>)
  400452:	47b0      	blx	r6
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400454:	2305      	movs	r3, #5
  400456:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400458:	66e5      	str	r5, [r4, #108]	; 0x6c
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40045a:	2310      	movs	r3, #16
  40045c:	6163      	str	r3, [r4, #20]
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40045e:	eb0d 0003 	add.w	r0, sp, r3
  400462:	47b8      	blx	r7
	afec_ch_set_config(AFEC0, chan, &afec_ch_cfg);
  400464:	aa04      	add	r2, sp, #16
  400466:	2104      	movs	r1, #4
  400468:	4620      	mov	r0, r4
  40046a:	47b0      	blx	r6
	afec->AFEC_CSELR = afec_ch;
  40046c:	2304      	movs	r3, #4
  40046e:	6663      	str	r3, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400470:	66e5      	str	r5, [r4, #108]	; 0x6c
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400472:	4b87      	ldr	r3, [pc, #540]	; (400690 <main+0x2d0>)
  400474:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400478:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40047a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40047e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400482:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400484:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400488:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40048c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40048e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400496:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400498:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40049c:	6359      	str	r1, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40049e:	631a      	str	r2, [r3, #48]	; 0x30
  4004a0:	2201      	movs	r2, #1
  4004a2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4004a6:	631a      	str	r2, [r3, #48]	; 0x30
  4004a8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4004ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4004b0:	631a      	str	r2, [r3, #48]	; 0x30
  4004b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004b6:	631a      	str	r2, [r3, #48]	; 0x30
	
	/* Configuring PIO */
	configure_pio();
	set_default_pin_levels();
	
	state = SL_READY;
  4004b8:	2200      	movs	r2, #0
  4004ba:	4b76      	ldr	r3, [pc, #472]	; (400694 <main+0x2d4>)
  4004bc:	701a      	strb	r2, [r3, #0]

	while (1) {
		switch (state){
  4004be:	461d      	mov	r5, r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4004c0:	4e73      	ldr	r6, [pc, #460]	; (400690 <main+0x2d0>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004c2:	f8df a234 	ldr.w	sl, [pc, #564]	; 4006f8 <main+0x338>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4004c6:	f8df b234 	ldr.w	fp, [pc, #564]	; 4006fc <main+0x33c>
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4004ca:	f8df 919c 	ldr.w	r9, [pc, #412]	; 400668 <main+0x2a8>
  4004ce:	e08a      	b.n	4005e6 <main+0x226>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4004d0:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  4004d2:	0fdb      	lsrs	r3, r3, #31
			case SL_READY:
				GO_status = ioport_get_pin_level(GO_pin);
  4004d4:	4a70      	ldr	r2, [pc, #448]	; (400698 <main+0x2d8>)
  4004d6:	7013      	strb	r3, [r2, #0]
				if (GO_status)
  4004d8:	7813      	ldrb	r3, [r2, #0]
  4004da:	2b00      	cmp	r3, #0
  4004dc:	f000 8083 	beq.w	4005e6 <main+0x226>
	pmc_enable_periph_clk(ID_TC0);
  4004e0:	2015      	movs	r0, #21
  4004e2:	4b5a      	ldr	r3, [pc, #360]	; (40064c <main+0x28c>)
  4004e4:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4004e6:	f8cd 9000 	str.w	r9, [sp]
  4004ea:	ab04      	add	r3, sp, #16
  4004ec:	aa03      	add	r2, sp, #12
  4004ee:	4649      	mov	r1, r9
  4004f0:	486a      	ldr	r0, [pc, #424]	; (40069c <main+0x2dc>)
  4004f2:	4c6b      	ldr	r4, [pc, #428]	; (4006a0 <main+0x2e0>)
  4004f4:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  4004f6:	4c6b      	ldr	r4, [pc, #428]	; (4006a4 <main+0x2e4>)
  4004f8:	9a04      	ldr	r2, [sp, #16]
  4004fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4004fe:	2100      	movs	r1, #0
  400500:	4620      	mov	r0, r4
  400502:	4b69      	ldr	r3, [pc, #420]	; (4006a8 <main+0x2e8>)
  400504:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / freq);
  400506:	9b03      	ldr	r3, [sp, #12]
  400508:	fbb9 f2f3 	udiv	r2, r9, r3
  40050c:	0952      	lsrs	r2, r2, #5
  40050e:	4b67      	ldr	r3, [pc, #412]	; (4006ac <main+0x2ec>)
  400510:	fba3 3202 	umull	r3, r2, r3, r2
  400514:	09d2      	lsrs	r2, r2, #7
  400516:	2100      	movs	r1, #0
  400518:	4620      	mov	r0, r4
  40051a:	4b65      	ldr	r3, [pc, #404]	; (4006b0 <main+0x2f0>)
  40051c:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40051e:	4b65      	ldr	r3, [pc, #404]	; (4006b4 <main+0x2f4>)
  400520:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400528:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40052c:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400530:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400534:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400536:	2210      	movs	r2, #16
  400538:	2100      	movs	r1, #0
  40053a:	4620      	mov	r0, r4
  40053c:	4b5e      	ldr	r3, [pc, #376]	; (4006b8 <main+0x2f8>)
  40053e:	4798      	blx	r3
	tc_start(TC0, 0);
  400540:	2100      	movs	r1, #0
  400542:	4620      	mov	r0, r4
  400544:	4b5d      	ldr	r3, [pc, #372]	; (4006bc <main+0x2fc>)
  400546:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400548:	2301      	movs	r3, #1
  40054a:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
				{
					configure_tc();	
					ioport_set_pin_level(LED0_GPIO, 0);
					state = SL_SAMPLING;
  40054e:	702b      	strb	r3, [r5, #0]
  400550:	e049      	b.n	4005e6 <main+0x226>
				}
				break;
			case SL_SAMPLING:
				//mk_sound();
				if (buffer_full) 
  400552:	4b5b      	ldr	r3, [pc, #364]	; (4006c0 <main+0x300>)
  400554:	781b      	ldrb	r3, [r3, #0]
  400556:	2b00      	cmp	r3, #0
  400558:	d03d      	beq.n	4005d6 <main+0x216>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40055a:	2701      	movs	r7, #1
  40055c:	f8ca 7030 	str.w	r7, [sl, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400564:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40056c:	6333      	str	r3, [r6, #48]	; 0x30
				{	
					ioport_set_pin_level(LED0_GPIO, 1);
					ioport_set_pin_level(LED1_GPIO, 0);
					ioport_set_pin_level(is_sampled_pin, 1);
					tc_stop(TC0, 0);
  40056e:	2100      	movs	r1, #0
  400570:	484c      	ldr	r0, [pc, #304]	; (4006a4 <main+0x2e4>)
  400572:	4b54      	ldr	r3, [pc, #336]	; (4006c4 <main+0x304>)
  400574:	4798      	blx	r3
					state = SL_WRITING;
  400576:	f04f 0802 	mov.w	r8, #2
  40057a:	f885 8000 	strb.w	r8, [r5]
	spi_enable_clock(SPI_SLAVE_BASE);
  40057e:	4c52      	ldr	r4, [pc, #328]	; (4006c8 <main+0x308>)
  400580:	4620      	mov	r0, r4
  400582:	4b52      	ldr	r3, [pc, #328]	; (4006cc <main+0x30c>)
  400584:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400586:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40058a:	f04f 0880 	mov.w	r8, #128	; 0x80
  40058e:	f8c4 8000 	str.w	r8, [r4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  400592:	6863      	ldr	r3, [r4, #4]
  400594:	f023 0301 	bic.w	r3, r3, #1
  400598:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  40059a:	6863      	ldr	r3, [r4, #4]
  40059c:	f043 0310 	orr.w	r3, r3, #16
  4005a0:	6063      	str	r3, [r4, #4]
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
  4005a2:	210e      	movs	r1, #14
  4005a4:	4620      	mov	r0, r4
  4005a6:	4b4a      	ldr	r3, [pc, #296]	; (4006d0 <main+0x310>)
  4005a8:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  4005aa:	2200      	movs	r2, #0
  4005ac:	4611      	mov	r1, r2
  4005ae:	4620      	mov	r0, r4
  4005b0:	4b48      	ldr	r3, [pc, #288]	; (4006d4 <main+0x314>)
  4005b2:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  4005b4:	2200      	movs	r2, #0
  4005b6:	4611      	mov	r1, r2
  4005b8:	4620      	mov	r0, r4
  4005ba:	4b47      	ldr	r3, [pc, #284]	; (4006d8 <main+0x318>)
  4005bc:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, bits_per_transfer);
  4005be:	4642      	mov	r2, r8
  4005c0:	2100      	movs	r1, #0
  4005c2:	4620      	mov	r0, r4
  4005c4:	4b45      	ldr	r3, [pc, #276]	; (4006dc <main+0x31c>)
  4005c6:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  4005c8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4005cc:	6163      	str	r3, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4005ce:	6027      	str	r7, [r4, #0]
					spi_slave_initialize();
					disable_interrupts();
  4005d0:	4b43      	ldr	r3, [pc, #268]	; (4006e0 <main+0x320>)
  4005d2:	4798      	blx	r3
  4005d4:	e010      	b.n	4005f8 <main+0x238>
				}
				else
				{
					restart();
  4005d6:	4b43      	ldr	r3, [pc, #268]	; (4006e4 <main+0x324>)
  4005d8:	4798      	blx	r3
					break;
  4005da:	e004      	b.n	4005e6 <main+0x226>
					ch_written = false;
					enable_spi_slave_interrupt();
					ioport_set_pin_level(is_written_pin, 0);
				}
				
				if(ch_written)
  4005dc:	4b42      	ldr	r3, [pc, #264]	; (4006e8 <main+0x328>)
  4005de:	781b      	ldrb	r3, [r3, #0]
  4005e0:	bb4b      	cbnz	r3, 400636 <main+0x276>
				{
					ioport_set_pin_level(is_written_pin, 1);
					disable_interrupts();
				}
				
				restart();
  4005e2:	4b40      	ldr	r3, [pc, #256]	; (4006e4 <main+0x324>)
  4005e4:	4798      	blx	r3
		switch (state){
  4005e6:	782b      	ldrb	r3, [r5, #0]
  4005e8:	b2db      	uxtb	r3, r3
  4005ea:	2b01      	cmp	r3, #1
  4005ec:	d0b1      	beq.n	400552 <main+0x192>
  4005ee:	2b00      	cmp	r3, #0
  4005f0:	f43f af6e 	beq.w	4004d0 <main+0x110>
  4005f4:	2b02      	cmp	r3, #2
  4005f6:	d1f6      	bne.n	4005e6 <main+0x226>
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4005f8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
				ch_select = ioport_get_pin_level(ch_select_pin);
  4005fa:	f3c3 7340 	ubfx	r3, r3, #29, #1
  4005fe:	4a3b      	ldr	r2, [pc, #236]	; (4006ec <main+0x32c>)
  400600:	7013      	strb	r3, [r2, #0]
				if(channel_to_write != ch_select)
  400602:	4b3b      	ldr	r3, [pc, #236]	; (4006f0 <main+0x330>)
  400604:	781b      	ldrb	r3, [r3, #0]
  400606:	7812      	ldrb	r2, [r2, #0]
  400608:	b2db      	uxtb	r3, r3
  40060a:	4293      	cmp	r3, r2
  40060c:	d0e6      	beq.n	4005dc <main+0x21c>
					channel_to_write = ch_select;
  40060e:	4b37      	ldr	r3, [pc, #220]	; (4006ec <main+0x32c>)
  400610:	781b      	ldrb	r3, [r3, #0]
  400612:	b2db      	uxtb	r3, r3
  400614:	4a36      	ldr	r2, [pc, #216]	; (4006f0 <main+0x330>)
  400616:	7013      	strb	r3, [r2, #0]
					i = 0;
  400618:	2300      	movs	r3, #0
  40061a:	4a36      	ldr	r2, [pc, #216]	; (4006f4 <main+0x334>)
  40061c:	6013      	str	r3, [r2, #0]
					ch_written = false;
  40061e:	4a32      	ldr	r2, [pc, #200]	; (4006e8 <main+0x328>)
  400620:	7013      	strb	r3, [r2, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400622:	4a24      	ldr	r2, [pc, #144]	; (4006b4 <main+0x2f4>)
  400624:	f882 3313 	strb.w	r3, [r2, #787]	; 0x313
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400628:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40062c:	6013      	str	r3, [r2, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40062e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400632:	6373      	str	r3, [r6, #52]	; 0x34
  400634:	e7d2      	b.n	4005dc <main+0x21c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400636:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40063a:	6333      	str	r3, [r6, #48]	; 0x30
					disable_interrupts();
  40063c:	4b28      	ldr	r3, [pc, #160]	; (4006e0 <main+0x320>)
  40063e:	4798      	blx	r3
  400640:	e7cf      	b.n	4005e2 <main+0x222>
  400642:	bf00      	nop
  400644:	00400701 	.word	0x00400701
  400648:	004007f1 	.word	0x004007f1
  40064c:	00400de1 	.word	0x00400de1
  400650:	400e0600 	.word	0x400e0600
  400654:	2000a574 	.word	0x2000a574
  400658:	0040026d 	.word	0x0040026d
  40065c:	2000a570 	.word	0x2000a570
  400660:	004001e5 	.word	0x004001e5
  400664:	2000a56c 	.word	0x2000a56c
  400668:	07270e00 	.word	0x07270e00
  40066c:	00400f91 	.word	0x00400f91
  400670:	20000008 	.word	0x20000008
  400674:	00401399 	.word	0x00401399
  400678:	400b0000 	.word	0x400b0000
  40067c:	00400bc1 	.word	0x00400bc1
  400680:	00400a89 	.word	0x00400a89
  400684:	00400ac5 	.word	0x00400ac5
  400688:	00400ab9 	.word	0x00400ab9
  40068c:	00400a59 	.word	0x00400a59
  400690:	400e1200 	.word	0x400e1200
  400694:	2000a560 	.word	0x2000a560
  400698:	20000868 	.word	0x20000868
  40069c:	000186a0 	.word	0x000186a0
  4006a0:	00400f21 	.word	0x00400f21
  4006a4:	40090000 	.word	0x40090000
  4006a8:	00400edf 	.word	0x00400edf
  4006ac:	0a7c5ac5 	.word	0x0a7c5ac5
  4006b0:	00400f09 	.word	0x00400f09
  4006b4:	e000e100 	.word	0xe000e100
  4006b8:	00400f11 	.word	0x00400f11
  4006bc:	00400ef9 	.word	0x00400ef9
  4006c0:	20000869 	.word	0x20000869
  4006c4:	00400f01 	.word	0x00400f01
  4006c8:	40088000 	.word	0x40088000
  4006cc:	00400e35 	.word	0x00400e35
  4006d0:	00400e45 	.word	0x00400e45
  4006d4:	00400e8f 	.word	0x00400e8f
  4006d8:	00400ead 	.word	0x00400ead
  4006dc:	00400ecb 	.word	0x00400ecb
  4006e0:	00400165 	.word	0x00400165
  4006e4:	00400191 	.word	0x00400191
  4006e8:	2000086a 	.word	0x2000086a
  4006ec:	20000000 	.word	0x20000000
  4006f0:	20000001 	.word	0x20000001
  4006f4:	2000a4b0 	.word	0x2000a4b0
  4006f8:	400e0e00 	.word	0x400e0e00
  4006fc:	400e1400 	.word	0x400e1400

00400700 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400700:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400702:	480e      	ldr	r0, [pc, #56]	; (40073c <sysclk_init+0x3c>)
  400704:	4b0e      	ldr	r3, [pc, #56]	; (400740 <sysclk_init+0x40>)
  400706:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400708:	213e      	movs	r1, #62	; 0x3e
  40070a:	2000      	movs	r0, #0
  40070c:	4b0d      	ldr	r3, [pc, #52]	; (400744 <sysclk_init+0x44>)
  40070e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400710:	4c0d      	ldr	r4, [pc, #52]	; (400748 <sysclk_init+0x48>)
  400712:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400714:	2800      	cmp	r0, #0
  400716:	d0fc      	beq.n	400712 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400718:	4b0c      	ldr	r3, [pc, #48]	; (40074c <sysclk_init+0x4c>)
  40071a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40071c:	4a0c      	ldr	r2, [pc, #48]	; (400750 <sysclk_init+0x50>)
  40071e:	4b0d      	ldr	r3, [pc, #52]	; (400754 <sysclk_init+0x54>)
  400720:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  400722:	4c0d      	ldr	r4, [pc, #52]	; (400758 <sysclk_init+0x58>)
  400724:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400726:	2800      	cmp	r0, #0
  400728:	d0fc      	beq.n	400724 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40072a:	2010      	movs	r0, #16
  40072c:	4b0b      	ldr	r3, [pc, #44]	; (40075c <sysclk_init+0x5c>)
  40072e:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400730:	4b0b      	ldr	r3, [pc, #44]	; (400760 <sysclk_init+0x60>)
  400732:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400734:	4801      	ldr	r0, [pc, #4]	; (40073c <sysclk_init+0x3c>)
  400736:	4b02      	ldr	r3, [pc, #8]	; (400740 <sysclk_init+0x40>)
  400738:	4798      	blx	r3
  40073a:	bd10      	pop	{r4, pc}
  40073c:	07270e00 	.word	0x07270e00
  400740:	004011ed 	.word	0x004011ed
  400744:	00400d5d 	.word	0x00400d5d
  400748:	00400db1 	.word	0x00400db1
  40074c:	00400dc1 	.word	0x00400dc1
  400750:	20133f01 	.word	0x20133f01
  400754:	400e0400 	.word	0x400e0400
  400758:	00400dd1 	.word	0x00400dd1
  40075c:	00400cf9 	.word	0x00400cf9
  400760:	004010e1 	.word	0x004010e1

00400764 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400768:	b980      	cbnz	r0, 40078c <_read+0x28>
  40076a:	460c      	mov	r4, r1
  40076c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40076e:	2a00      	cmp	r2, #0
  400770:	dd0f      	ble.n	400792 <_read+0x2e>
  400772:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400774:	4e08      	ldr	r6, [pc, #32]	; (400798 <_read+0x34>)
  400776:	4d09      	ldr	r5, [pc, #36]	; (40079c <_read+0x38>)
  400778:	6830      	ldr	r0, [r6, #0]
  40077a:	4621      	mov	r1, r4
  40077c:	682b      	ldr	r3, [r5, #0]
  40077e:	4798      	blx	r3
		ptr++;
  400780:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400782:	42bc      	cmp	r4, r7
  400784:	d1f8      	bne.n	400778 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400786:	4640      	mov	r0, r8
  400788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40078c:	f04f 38ff 	mov.w	r8, #4294967295
  400790:	e7f9      	b.n	400786 <_read+0x22>
	for (; len > 0; --len) {
  400792:	4680      	mov	r8, r0
  400794:	e7f7      	b.n	400786 <_read+0x22>
  400796:	bf00      	nop
  400798:	2000a574 	.word	0x2000a574
  40079c:	2000a56c 	.word	0x2000a56c

004007a0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4007a0:	3801      	subs	r0, #1
  4007a2:	2802      	cmp	r0, #2
  4007a4:	d815      	bhi.n	4007d2 <_write+0x32>
{
  4007a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007aa:	460e      	mov	r6, r1
  4007ac:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4007ae:	b19a      	cbz	r2, 4007d8 <_write+0x38>
  4007b0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4007b2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4007ec <_write+0x4c>
  4007b6:	4f0c      	ldr	r7, [pc, #48]	; (4007e8 <_write+0x48>)
  4007b8:	f8d8 0000 	ldr.w	r0, [r8]
  4007bc:	f815 1b01 	ldrb.w	r1, [r5], #1
  4007c0:	683b      	ldr	r3, [r7, #0]
  4007c2:	4798      	blx	r3
  4007c4:	2800      	cmp	r0, #0
  4007c6:	db0a      	blt.n	4007de <_write+0x3e>
  4007c8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4007ca:	3c01      	subs	r4, #1
  4007cc:	d1f4      	bne.n	4007b8 <_write+0x18>
  4007ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4007d2:	f04f 30ff 	mov.w	r0, #4294967295
  4007d6:	4770      	bx	lr
	for (; len != 0; --len) {
  4007d8:	4610      	mov	r0, r2
  4007da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4007de:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4007e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007e6:	bf00      	nop
  4007e8:	2000a570 	.word	0x2000a570
  4007ec:	2000a574 	.word	0x2000a574

004007f0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4007f0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4007f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007f6:	4b6d      	ldr	r3, [pc, #436]	; (4009ac <board_init+0x1bc>)
  4007f8:	605a      	str	r2, [r3, #4]
  4007fa:	2009      	movs	r0, #9
  4007fc:	4c6c      	ldr	r4, [pc, #432]	; (4009b0 <board_init+0x1c0>)
  4007fe:	47a0      	blx	r4
  400800:	200a      	movs	r0, #10
  400802:	47a0      	blx	r4
  400804:	200b      	movs	r0, #11
  400806:	47a0      	blx	r4
  400808:	200c      	movs	r0, #12
  40080a:	47a0      	blx	r4
  40080c:	200d      	movs	r0, #13
  40080e:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400810:	4b68      	ldr	r3, [pc, #416]	; (4009b4 <board_init+0x1c4>)
  400812:	2201      	movs	r2, #1
  400814:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400816:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40081a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40081c:	4966      	ldr	r1, [pc, #408]	; (4009b8 <board_init+0x1c8>)
  40081e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400822:	610a      	str	r2, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400824:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400828:	630a      	str	r2, [r1, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40082a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  40082e:	6108      	str	r0, [r1, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400830:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400834:	6308      	str	r0, [r1, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400836:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40083a:	6159      	str	r1, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40083c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400840:	6659      	str	r1, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400842:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400846:	6559      	str	r1, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400848:	6219      	str	r1, [r3, #32]
		base->PIO_IFSCER = mask;
  40084a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40084e:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400850:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  400854:	6718      	str	r0, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400856:	6f58      	ldr	r0, [r3, #116]	; 0x74
  400858:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  40085c:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40085e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400862:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400866:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40086a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40086c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400870:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400876:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400878:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  40087a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40087e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400880:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  400884:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400886:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400888:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  40088c:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  40088e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400892:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	base->PIO_AIMER = mask;
  400896:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40089a:	2202      	movs	r2, #2
  40089c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40089e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4008a2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008a8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4008aa:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4008ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4008b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008b2:	f021 0102 	bic.w	r1, r1, #2
  4008b6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008b8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008ba:	f021 0102 	bic.w	r1, r1, #2
  4008be:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_AIMDR = mask;
  4008c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008c4:	2204      	movs	r2, #4
  4008c6:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4008cc:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4008d2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4008d4:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4008d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4008da:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4008dc:	f021 0104 	bic.w	r1, r1, #4
  4008e0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4008e2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4008e4:	f021 0104 	bic.w	r1, r1, #4
  4008e8:	6759      	str	r1, [r3, #116]	; 0x74
		base->PIO_ESR = mask;
  4008ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4008ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	base->PIO_AIMER = mask;
  4008f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4008f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4008fa:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4008fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400900:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400902:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400908:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40090a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  40090e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400910:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400912:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
  400916:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400918:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40091a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40091e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400924:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400926:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  40092c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40092e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  400932:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400934:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400936:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  40093a:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40093c:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  40093e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400942:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400948:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40094a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40094c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400950:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400952:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400956:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400958:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40095a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40095e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400960:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400966:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400968:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40096c:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40096e:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400974:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400976:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  40097a:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40097c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40097e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
  400982:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400984:	605a      	str	r2, [r3, #4]
		base->PIO_PUDR = mask;
  400986:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40098a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40098c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400990:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400992:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400998:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40099a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40099e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009a0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4009a2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4009a6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4009a8:	605a      	str	r2, [r3, #4]
  4009aa:	bd10      	pop	{r4, pc}
  4009ac:	400e1850 	.word	0x400e1850
  4009b0:	00400de1 	.word	0x00400de1
  4009b4:	400e0e00 	.word	0x400e0e00
  4009b8:	400e1400 	.word	0x400e1400

004009bc <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4009bc:	b570      	push	{r4, r5, r6, lr}
  4009be:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4009c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4009c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4009c4:	4013      	ands	r3, r2
  4009c6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4009c8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4009ca:	4d21      	ldr	r5, [pc, #132]	; (400a50 <afec_process_callback+0x94>)
  4009cc:	42a8      	cmp	r0, r5
  4009ce:	bf14      	ite	ne
  4009d0:	2500      	movne	r5, #0
  4009d2:	2501      	moveq	r5, #1
  4009d4:	006e      	lsls	r6, r5, #1
  4009d6:	442e      	add	r6, r5
  4009d8:	e00b      	b.n	4009f2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4009da:	2c14      	cmp	r4, #20
  4009dc:	d824      	bhi.n	400a28 <afec_process_callback+0x6c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4009de:	9a01      	ldr	r2, [sp, #4]
  4009e0:	f104 0108 	add.w	r1, r4, #8
  4009e4:	2301      	movs	r3, #1
  4009e6:	408b      	lsls	r3, r1
  4009e8:	4213      	tst	r3, r2
  4009ea:	d113      	bne.n	400a14 <afec_process_callback+0x58>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4009ec:	3401      	adds	r4, #1
  4009ee:	2c17      	cmp	r4, #23
  4009f0:	d02b      	beq.n	400a4a <afec_process_callback+0x8e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4009f2:	2c0f      	cmp	r4, #15
  4009f4:	d8f1      	bhi.n	4009da <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4009f6:	9a01      	ldr	r2, [sp, #4]
  4009f8:	2301      	movs	r3, #1
  4009fa:	40a3      	lsls	r3, r4
  4009fc:	4213      	tst	r3, r2
  4009fe:	d0f5      	beq.n	4009ec <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400a00:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400a04:	4423      	add	r3, r4
  400a06:	4a13      	ldr	r2, [pc, #76]	; (400a54 <afec_process_callback+0x98>)
  400a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d0ed      	beq.n	4009ec <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400a10:	4798      	blx	r3
  400a12:	e7eb      	b.n	4009ec <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400a14:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400a18:	4423      	add	r3, r4
  400a1a:	4a0e      	ldr	r2, [pc, #56]	; (400a54 <afec_process_callback+0x98>)
  400a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400a20:	2b00      	cmp	r3, #0
  400a22:	d0e3      	beq.n	4009ec <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400a24:	4798      	blx	r3
  400a26:	e7e1      	b.n	4009ec <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400a28:	9a01      	ldr	r2, [sp, #4]
  400a2a:	f104 0109 	add.w	r1, r4, #9
  400a2e:	2301      	movs	r3, #1
  400a30:	408b      	lsls	r3, r1
  400a32:	4213      	tst	r3, r2
  400a34:	d0da      	beq.n	4009ec <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400a36:	ebc5 03c6 	rsb	r3, r5, r6, lsl #3
  400a3a:	4423      	add	r3, r4
  400a3c:	4a05      	ldr	r2, [pc, #20]	; (400a54 <afec_process_callback+0x98>)
  400a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  400a42:	2b00      	cmp	r3, #0
  400a44:	d0d2      	beq.n	4009ec <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400a46:	4798      	blx	r3
  400a48:	e7d0      	b.n	4009ec <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400a4a:	b002      	add	sp, #8
  400a4c:	bd70      	pop	{r4, r5, r6, pc}
  400a4e:	bf00      	nop
  400a50:	400b4000 	.word	0x400b4000
  400a54:	2000a578 	.word	0x2000a578

00400a58 <afec_ch_set_config>:
{
  400a58:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400a5a:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400a5c:	2301      	movs	r3, #1
  400a5e:	408b      	lsls	r3, r1
  400a60:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400a64:	7815      	ldrb	r5, [r2, #0]
  400a66:	2d00      	cmp	r5, #0
  400a68:	bf08      	it	eq
  400a6a:	2300      	moveq	r3, #0
  400a6c:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400a6e:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400a70:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400a72:	004b      	lsls	r3, r1, #1
  400a74:	2103      	movs	r1, #3
  400a76:	4099      	lsls	r1, r3
  400a78:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400a7c:	7851      	ldrb	r1, [r2, #1]
  400a7e:	4099      	lsls	r1, r3
  400a80:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400a82:	6541      	str	r1, [r0, #84]	; 0x54
}
  400a84:	bc30      	pop	{r4, r5}
  400a86:	4770      	bx	lr

00400a88 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400a88:	2200      	movs	r2, #0
  400a8a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  400a8c:	4b08      	ldr	r3, [pc, #32]	; (400ab0 <afec_get_config_defaults+0x28>)
  400a8e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400a90:	4b08      	ldr	r3, [pc, #32]	; (400ab4 <afec_get_config_defaults+0x2c>)
  400a92:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400a98:	60c3      	str	r3, [r0, #12]
		cfg->settling_time = AFEC_SETTLING_TIME_0;
  400a9a:	6102      	str	r2, [r0, #16]
		cfg->tracktim = 2;
  400a9c:	2302      	movs	r3, #2
  400a9e:	7503      	strb	r3, [r0, #20]
		cfg->transfer = 1;
  400aa0:	2301      	movs	r3, #1
  400aa2:	7543      	strb	r3, [r0, #21]
		cfg->anach = true;
  400aa4:	7583      	strb	r3, [r0, #22]
		cfg->useq = false;
  400aa6:	75c2      	strb	r2, [r0, #23]
		cfg->tag = true;
  400aa8:	7603      	strb	r3, [r0, #24]
		cfg->stm = true;
  400aaa:	7643      	strb	r3, [r0, #25]
		cfg->ibctl = 1;
  400aac:	7683      	strb	r3, [r0, #26]
  400aae:	4770      	bx	lr
  400ab0:	07270e00 	.word	0x07270e00
  400ab4:	005b8d80 	.word	0x005b8d80

00400ab8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  400ab8:	2300      	movs	r3, #0
  400aba:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  400abc:	2301      	movs	r3, #1
  400abe:	7043      	strb	r3, [r0, #1]
  400ac0:	4770      	bx	lr
	...

00400ac4 <afec_init>:
	return afec->AFEC_ISR;
  400ac4:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  400ac6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400aca:	d001      	beq.n	400ad0 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  400acc:	2019      	movs	r0, #25
  400ace:	4770      	bx	lr
{
  400ad0:	b470      	push	{r4, r5, r6}
	afec->AFEC_CR = AFEC_CR_SWRST;
  400ad2:	2301      	movs	r3, #1
  400ad4:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400ad6:	7dcb      	ldrb	r3, [r1, #23]
  400ad8:	2b00      	cmp	r3, #0
  400ada:	bf14      	ite	ne
  400adc:	f04f 4500 	movne.w	r5, #2147483648	; 0x80000000
  400ae0:	2500      	moveq	r5, #0
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
  400ae2:	7d8b      	ldrb	r3, [r1, #22]
  400ae4:	2b00      	cmp	r3, #0
  400ae6:	bf14      	ite	ne
  400ae8:	f44f 0400 	movne.w	r4, #8388608	; 0x800000
  400aec:	2400      	moveq	r4, #0
			AFEC_MR_TRACKTIM(config->tracktim) |
  400aee:	7d0b      	ldrb	r3, [r1, #20]
  400af0:	061b      	lsls	r3, r3, #24
  400af2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400af6:	690a      	ldr	r2, [r1, #16]
  400af8:	68ce      	ldr	r6, [r1, #12]
  400afa:	4332      	orrs	r2, r6
  400afc:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  400afe:	7d4a      	ldrb	r2, [r1, #21]
  400b00:	0712      	lsls	r2, r2, #28
  400b02:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400b06:	4313      	orrs	r3, r2
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
  400b08:	688a      	ldr	r2, [r1, #8]
  400b0a:	0056      	lsls	r6, r2, #1
  400b0c:	684a      	ldr	r2, [r1, #4]
  400b0e:	fbb2 f2f6 	udiv	r2, r2, r6
  400b12:	3a01      	subs	r2, #1
  400b14:	0212      	lsls	r2, r2, #8
  400b16:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400b18:	4313      	orrs	r3, r2
  400b1a:	432b      	orrs	r3, r5
  400b1c:	4323      	orrs	r3, r4
	afec->AFEC_MR = reg;
  400b1e:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400b20:	7e0b      	ldrb	r3, [r1, #24]
  400b22:	2b00      	cmp	r3, #0
  400b24:	bf14      	ite	ne
  400b26:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400b2a:	2300      	moveq	r3, #0
  400b2c:	680a      	ldr	r2, [r1, #0]
  400b2e:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400b30:	7e4a      	ldrb	r2, [r1, #25]
  400b32:	2a00      	cmp	r2, #0
  400b34:	bf14      	ite	ne
  400b36:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400b3a:	2200      	moveq	r2, #0
			(config->resolution) |
  400b3c:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400b3e:	6083      	str	r3, [r0, #8]
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  400b40:	7e8b      	ldrb	r3, [r1, #26]
  400b42:	021b      	lsls	r3, r3, #8
  400b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400b48:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400b4c:	4b0e      	ldr	r3, [pc, #56]	; (400b88 <afec_init+0xc4>)
  400b4e:	4298      	cmp	r0, r3
  400b50:	d005      	beq.n	400b5e <afec_init+0x9a>
	if(afec == AFEC1) {
  400b52:	4b0e      	ldr	r3, [pc, #56]	; (400b8c <afec_init+0xc8>)
  400b54:	4298      	cmp	r0, r3
  400b56:	d00c      	beq.n	400b72 <afec_init+0xae>
	return STATUS_OK;
  400b58:	2000      	movs	r0, #0
}
  400b5a:	bc70      	pop	{r4, r5, r6}
  400b5c:	4770      	bx	lr
  400b5e:	4b0c      	ldr	r3, [pc, #48]	; (400b90 <afec_init+0xcc>)
  400b60:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[0][i] = 0;
  400b64:	2200      	movs	r2, #0
  400b66:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b6a:	428b      	cmp	r3, r1
  400b6c:	d1fb      	bne.n	400b66 <afec_init+0xa2>
	return STATUS_OK;
  400b6e:	2000      	movs	r0, #0
  400b70:	e7f3      	b.n	400b5a <afec_init+0x96>
  400b72:	4b08      	ldr	r3, [pc, #32]	; (400b94 <afec_init+0xd0>)
  400b74:	f103 015c 	add.w	r1, r3, #92	; 0x5c
			afec_callback_pointer[1][i] = 0;
  400b78:	2200      	movs	r2, #0
  400b7a:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400b7e:	428b      	cmp	r3, r1
  400b80:	d1fb      	bne.n	400b7a <afec_init+0xb6>
	return STATUS_OK;
  400b82:	2000      	movs	r0, #0
  400b84:	e7e9      	b.n	400b5a <afec_init+0x96>
  400b86:	bf00      	nop
  400b88:	400b0000 	.word	0x400b0000
  400b8c:	400b4000 	.word	0x400b4000
  400b90:	2000a574 	.word	0x2000a574
  400b94:	2000a5d0 	.word	0x2000a5d0

00400b98 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400b98:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400b9a:	4802      	ldr	r0, [pc, #8]	; (400ba4 <AFEC0_Handler+0xc>)
  400b9c:	4b02      	ldr	r3, [pc, #8]	; (400ba8 <AFEC0_Handler+0x10>)
  400b9e:	4798      	blx	r3
  400ba0:	bd08      	pop	{r3, pc}
  400ba2:	bf00      	nop
  400ba4:	400b0000 	.word	0x400b0000
  400ba8:	004009bd 	.word	0x004009bd

00400bac <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400bac:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400bae:	4802      	ldr	r0, [pc, #8]	; (400bb8 <AFEC1_Handler+0xc>)
  400bb0:	4b02      	ldr	r3, [pc, #8]	; (400bbc <AFEC1_Handler+0x10>)
  400bb2:	4798      	blx	r3
  400bb4:	bd08      	pop	{r3, pc}
  400bb6:	bf00      	nop
  400bb8:	400b4000 	.word	0x400b4000
  400bbc:	004009bd 	.word	0x004009bd

00400bc0 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400bc0:	b500      	push	{lr}
  400bc2:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400bc4:	4b13      	ldr	r3, [pc, #76]	; (400c14 <afec_enable+0x54>)
  400bc6:	4298      	cmp	r0, r3
  400bc8:	bf0c      	ite	eq
  400bca:	201f      	moveq	r0, #31
  400bcc:	201e      	movne	r0, #30
  400bce:	4b12      	ldr	r3, [pc, #72]	; (400c18 <afec_enable+0x58>)
  400bd0:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400bd2:	4b12      	ldr	r3, [pc, #72]	; (400c1c <afec_enable+0x5c>)
  400bd4:	789b      	ldrb	r3, [r3, #2]
  400bd6:	2bff      	cmp	r3, #255	; 0xff
  400bd8:	d01a      	beq.n	400c10 <afec_enable+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400bda:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400bde:	fab3 f383 	clz	r3, r3
  400be2:	095b      	lsrs	r3, r3, #5
  400be4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400be6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400be8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400bec:	2200      	movs	r2, #0
  400bee:	4b0c      	ldr	r3, [pc, #48]	; (400c20 <afec_enable+0x60>)
  400bf0:	701a      	strb	r2, [r3, #0]
	return flags;
  400bf2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  400bf4:	4a09      	ldr	r2, [pc, #36]	; (400c1c <afec_enable+0x5c>)
  400bf6:	7893      	ldrb	r3, [r2, #2]
  400bf8:	3301      	adds	r3, #1
  400bfa:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400bfc:	b129      	cbz	r1, 400c0a <afec_enable+0x4a>
		cpu_irq_enable();
  400bfe:	2201      	movs	r2, #1
  400c00:	4b07      	ldr	r3, [pc, #28]	; (400c20 <afec_enable+0x60>)
  400c02:	701a      	strb	r2, [r3, #0]
  400c04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400c08:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400c0a:	b003      	add	sp, #12
  400c0c:	f85d fb04 	ldr.w	pc, [sp], #4
  400c10:	e7fe      	b.n	400c10 <afec_enable+0x50>
  400c12:	bf00      	nop
  400c14:	400b4000 	.word	0x400b4000
  400c18:	00400de1 	.word	0x00400de1
  400c1c:	2000a564 	.word	0x2000a564
  400c20:	20000002 	.word	0x20000002

00400c24 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400c24:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400c26:	4770      	bx	lr

00400c28 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400c28:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400c2a:	4770      	bx	lr

00400c2c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400c30:	4681      	mov	r9, r0
  400c32:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400c34:	4b12      	ldr	r3, [pc, #72]	; (400c80 <pio_handler_process+0x54>)
  400c36:	4798      	blx	r3
  400c38:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400c3a:	4648      	mov	r0, r9
  400c3c:	4b11      	ldr	r3, [pc, #68]	; (400c84 <pio_handler_process+0x58>)
  400c3e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400c40:	4005      	ands	r5, r0
  400c42:	d013      	beq.n	400c6c <pio_handler_process+0x40>
  400c44:	4c10      	ldr	r4, [pc, #64]	; (400c88 <pio_handler_process+0x5c>)
  400c46:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400c4a:	e003      	b.n	400c54 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400c4c:	42b4      	cmp	r4, r6
  400c4e:	d00d      	beq.n	400c6c <pio_handler_process+0x40>
  400c50:	3410      	adds	r4, #16
		while (status != 0) {
  400c52:	b15d      	cbz	r5, 400c6c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400c54:	6820      	ldr	r0, [r4, #0]
  400c56:	42b8      	cmp	r0, r7
  400c58:	d1f8      	bne.n	400c4c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400c5a:	6861      	ldr	r1, [r4, #4]
  400c5c:	4229      	tst	r1, r5
  400c5e:	d0f5      	beq.n	400c4c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400c60:	68e3      	ldr	r3, [r4, #12]
  400c62:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400c64:	6863      	ldr	r3, [r4, #4]
  400c66:	ea25 0503 	bic.w	r5, r5, r3
  400c6a:	e7ef      	b.n	400c4c <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400c6c:	4b07      	ldr	r3, [pc, #28]	; (400c8c <pio_handler_process+0x60>)
  400c6e:	681b      	ldr	r3, [r3, #0]
  400c70:	b123      	cbz	r3, 400c7c <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400c72:	4b07      	ldr	r3, [pc, #28]	; (400c90 <pio_handler_process+0x64>)
  400c74:	681b      	ldr	r3, [r3, #0]
  400c76:	b10b      	cbz	r3, 400c7c <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400c78:	4648      	mov	r0, r9
  400c7a:	4798      	blx	r3
  400c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c80:	00400c25 	.word	0x00400c25
  400c84:	00400c29 	.word	0x00400c29
  400c88:	2000a4b4 	.word	0x2000a4b4
  400c8c:	2000a630 	.word	0x2000a630
  400c90:	2000a524 	.word	0x2000a524

00400c94 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400c94:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400c96:	2109      	movs	r1, #9
  400c98:	4801      	ldr	r0, [pc, #4]	; (400ca0 <PIOA_Handler+0xc>)
  400c9a:	4b02      	ldr	r3, [pc, #8]	; (400ca4 <PIOA_Handler+0x10>)
  400c9c:	4798      	blx	r3
  400c9e:	bd08      	pop	{r3, pc}
  400ca0:	400e0e00 	.word	0x400e0e00
  400ca4:	00400c2d 	.word	0x00400c2d

00400ca8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400ca8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400caa:	210a      	movs	r1, #10
  400cac:	4801      	ldr	r0, [pc, #4]	; (400cb4 <PIOB_Handler+0xc>)
  400cae:	4b02      	ldr	r3, [pc, #8]	; (400cb8 <PIOB_Handler+0x10>)
  400cb0:	4798      	blx	r3
  400cb2:	bd08      	pop	{r3, pc}
  400cb4:	400e1000 	.word	0x400e1000
  400cb8:	00400c2d 	.word	0x00400c2d

00400cbc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400cbc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400cbe:	210b      	movs	r1, #11
  400cc0:	4801      	ldr	r0, [pc, #4]	; (400cc8 <PIOC_Handler+0xc>)
  400cc2:	4b02      	ldr	r3, [pc, #8]	; (400ccc <PIOC_Handler+0x10>)
  400cc4:	4798      	blx	r3
  400cc6:	bd08      	pop	{r3, pc}
  400cc8:	400e1200 	.word	0x400e1200
  400ccc:	00400c2d 	.word	0x00400c2d

00400cd0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400cd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400cd2:	210c      	movs	r1, #12
  400cd4:	4801      	ldr	r0, [pc, #4]	; (400cdc <PIOD_Handler+0xc>)
  400cd6:	4b02      	ldr	r3, [pc, #8]	; (400ce0 <PIOD_Handler+0x10>)
  400cd8:	4798      	blx	r3
  400cda:	bd08      	pop	{r3, pc}
  400cdc:	400e1400 	.word	0x400e1400
  400ce0:	00400c2d 	.word	0x00400c2d

00400ce4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ce4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400ce6:	210d      	movs	r1, #13
  400ce8:	4801      	ldr	r0, [pc, #4]	; (400cf0 <PIOE_Handler+0xc>)
  400cea:	4b02      	ldr	r3, [pc, #8]	; (400cf4 <PIOE_Handler+0x10>)
  400cec:	4798      	blx	r3
  400cee:	bd08      	pop	{r3, pc}
  400cf0:	400e1600 	.word	0x400e1600
  400cf4:	00400c2d 	.word	0x00400c2d

00400cf8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400cf8:	4a17      	ldr	r2, [pc, #92]	; (400d58 <pmc_switch_mck_to_pllack+0x60>)
  400cfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400d00:	4318      	orrs	r0, r3
  400d02:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d04:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d06:	f013 0f08 	tst.w	r3, #8
  400d0a:	d10a      	bne.n	400d22 <pmc_switch_mck_to_pllack+0x2a>
  400d0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d10:	4911      	ldr	r1, [pc, #68]	; (400d58 <pmc_switch_mck_to_pllack+0x60>)
  400d12:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d14:	f012 0f08 	tst.w	r2, #8
  400d18:	d103      	bne.n	400d22 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d1a:	3b01      	subs	r3, #1
  400d1c:	d1f9      	bne.n	400d12 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400d1e:	2001      	movs	r0, #1
  400d20:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400d22:	4a0d      	ldr	r2, [pc, #52]	; (400d58 <pmc_switch_mck_to_pllack+0x60>)
  400d24:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400d26:	f023 0303 	bic.w	r3, r3, #3
  400d2a:	f043 0302 	orr.w	r3, r3, #2
  400d2e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d30:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d32:	f013 0f08 	tst.w	r3, #8
  400d36:	d10a      	bne.n	400d4e <pmc_switch_mck_to_pllack+0x56>
  400d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d3c:	4906      	ldr	r1, [pc, #24]	; (400d58 <pmc_switch_mck_to_pllack+0x60>)
  400d3e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400d40:	f012 0f08 	tst.w	r2, #8
  400d44:	d105      	bne.n	400d52 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d46:	3b01      	subs	r3, #1
  400d48:	d1f9      	bne.n	400d3e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400d4a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400d4c:	4770      	bx	lr
	return 0;
  400d4e:	2000      	movs	r0, #0
  400d50:	4770      	bx	lr
  400d52:	2000      	movs	r0, #0
  400d54:	4770      	bx	lr
  400d56:	bf00      	nop
  400d58:	400e0400 	.word	0x400e0400

00400d5c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400d5c:	b9c8      	cbnz	r0, 400d92 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d5e:	4a11      	ldr	r2, [pc, #68]	; (400da4 <pmc_switch_mainck_to_xtal+0x48>)
  400d60:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400d62:	0209      	lsls	r1, r1, #8
  400d64:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400d66:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400d6a:	f023 0303 	bic.w	r3, r3, #3
  400d6e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400d72:	f043 0301 	orr.w	r3, r3, #1
  400d76:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400d78:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400d7a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400d7c:	f013 0f01 	tst.w	r3, #1
  400d80:	d0fb      	beq.n	400d7a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400d82:	4a08      	ldr	r2, [pc, #32]	; (400da4 <pmc_switch_mainck_to_xtal+0x48>)
  400d84:	6a13      	ldr	r3, [r2, #32]
  400d86:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400d8e:	6213      	str	r3, [r2, #32]
  400d90:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d92:	4904      	ldr	r1, [pc, #16]	; (400da4 <pmc_switch_mainck_to_xtal+0x48>)
  400d94:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400d96:	4a04      	ldr	r2, [pc, #16]	; (400da8 <pmc_switch_mainck_to_xtal+0x4c>)
  400d98:	401a      	ands	r2, r3
  400d9a:	4b04      	ldr	r3, [pc, #16]	; (400dac <pmc_switch_mainck_to_xtal+0x50>)
  400d9c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400d9e:	620b      	str	r3, [r1, #32]
  400da0:	4770      	bx	lr
  400da2:	bf00      	nop
  400da4:	400e0400 	.word	0x400e0400
  400da8:	fec8fffc 	.word	0xfec8fffc
  400dac:	01370002 	.word	0x01370002

00400db0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400db0:	4b02      	ldr	r3, [pc, #8]	; (400dbc <pmc_osc_is_ready_mainck+0xc>)
  400db2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400db4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400db8:	4770      	bx	lr
  400dba:	bf00      	nop
  400dbc:	400e0400 	.word	0x400e0400

00400dc0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400dc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400dc4:	4b01      	ldr	r3, [pc, #4]	; (400dcc <pmc_disable_pllack+0xc>)
  400dc6:	629a      	str	r2, [r3, #40]	; 0x28
  400dc8:	4770      	bx	lr
  400dca:	bf00      	nop
  400dcc:	400e0400 	.word	0x400e0400

00400dd0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400dd0:	4b02      	ldr	r3, [pc, #8]	; (400ddc <pmc_is_locked_pllack+0xc>)
  400dd2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400dd4:	f000 0002 	and.w	r0, r0, #2
  400dd8:	4770      	bx	lr
  400dda:	bf00      	nop
  400ddc:	400e0400 	.word	0x400e0400

00400de0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400de0:	282f      	cmp	r0, #47	; 0x2f
  400de2:	d81e      	bhi.n	400e22 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400de4:	281f      	cmp	r0, #31
  400de6:	d80c      	bhi.n	400e02 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400de8:	4b11      	ldr	r3, [pc, #68]	; (400e30 <pmc_enable_periph_clk+0x50>)
  400dea:	699a      	ldr	r2, [r3, #24]
  400dec:	2301      	movs	r3, #1
  400dee:	4083      	lsls	r3, r0
  400df0:	4393      	bics	r3, r2
  400df2:	d018      	beq.n	400e26 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400df4:	2301      	movs	r3, #1
  400df6:	fa03 f000 	lsl.w	r0, r3, r0
  400dfa:	4b0d      	ldr	r3, [pc, #52]	; (400e30 <pmc_enable_periph_clk+0x50>)
  400dfc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400dfe:	2000      	movs	r0, #0
  400e00:	4770      	bx	lr
		ul_id -= 32;
  400e02:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e04:	4b0a      	ldr	r3, [pc, #40]	; (400e30 <pmc_enable_periph_clk+0x50>)
  400e06:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400e0a:	2301      	movs	r3, #1
  400e0c:	4083      	lsls	r3, r0
  400e0e:	4393      	bics	r3, r2
  400e10:	d00b      	beq.n	400e2a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e12:	2301      	movs	r3, #1
  400e14:	fa03 f000 	lsl.w	r0, r3, r0
  400e18:	4b05      	ldr	r3, [pc, #20]	; (400e30 <pmc_enable_periph_clk+0x50>)
  400e1a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400e1e:	2000      	movs	r0, #0
  400e20:	4770      	bx	lr
		return 1;
  400e22:	2001      	movs	r0, #1
  400e24:	4770      	bx	lr
	return 0;
  400e26:	2000      	movs	r0, #0
  400e28:	4770      	bx	lr
  400e2a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop
  400e30:	400e0400 	.word	0x400e0400

00400e34 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400e34:	b508      	push	{r3, lr}
  400e36:	2013      	movs	r0, #19
  400e38:	4b01      	ldr	r3, [pc, #4]	; (400e40 <spi_enable_clock+0xc>)
  400e3a:	4798      	blx	r3
  400e3c:	bd08      	pop	{r3, pc}
  400e3e:	bf00      	nop
  400e40:	00400de1 	.word	0x00400de1

00400e44 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400e44:	6843      	ldr	r3, [r0, #4]
  400e46:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400e4a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400e4c:	6843      	ldr	r3, [r0, #4]
  400e4e:	0409      	lsls	r1, r1, #16
  400e50:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400e54:	4319      	orrs	r1, r3
  400e56:	6041      	str	r1, [r0, #4]
  400e58:	4770      	bx	lr

00400e5a <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400e5a:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400e5c:	f643 2499 	movw	r4, #15001	; 0x3a99
  400e60:	6905      	ldr	r5, [r0, #16]
  400e62:	f015 0f02 	tst.w	r5, #2
  400e66:	d103      	bne.n	400e70 <spi_write+0x16>
		if (!timeout--) {
  400e68:	3c01      	subs	r4, #1
  400e6a:	d1f9      	bne.n	400e60 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400e6c:	2001      	movs	r0, #1
  400e6e:	e00c      	b.n	400e8a <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400e70:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400e72:	f014 0f02 	tst.w	r4, #2
  400e76:	d006      	beq.n	400e86 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400e78:	0412      	lsls	r2, r2, #16
  400e7a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400e7e:	4311      	orrs	r1, r2
		if (uc_last) {
  400e80:	b10b      	cbz	r3, 400e86 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400e82:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400e86:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400e88:	2000      	movs	r0, #0
}
  400e8a:	bc30      	pop	{r4, r5}
  400e8c:	4770      	bx	lr

00400e8e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400e8e:	b932      	cbnz	r2, 400e9e <spi_set_clock_polarity+0x10>
  400e90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400e94:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400e96:	f023 0301 	bic.w	r3, r3, #1
  400e9a:	6303      	str	r3, [r0, #48]	; 0x30
  400e9c:	4770      	bx	lr
  400e9e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400ea2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400ea4:	f043 0301 	orr.w	r3, r3, #1
  400ea8:	6303      	str	r3, [r0, #48]	; 0x30
  400eaa:	4770      	bx	lr

00400eac <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400eac:	b932      	cbnz	r2, 400ebc <spi_set_clock_phase+0x10>
  400eae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400eb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400eb4:	f023 0302 	bic.w	r3, r3, #2
  400eb8:	6303      	str	r3, [r0, #48]	; 0x30
  400eba:	4770      	bx	lr
  400ebc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400ec0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400ec2:	f043 0302 	orr.w	r3, r3, #2
  400ec6:	6303      	str	r3, [r0, #48]	; 0x30
  400ec8:	4770      	bx	lr

00400eca <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400eca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400ece:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400ed4:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400ed6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400ed8:	431a      	orrs	r2, r3
  400eda:	630a      	str	r2, [r1, #48]	; 0x30
  400edc:	4770      	bx	lr

00400ede <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400ede:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400ee0:	0189      	lsls	r1, r1, #6
  400ee2:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400ee4:	2402      	movs	r4, #2
  400ee6:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400ee8:	f04f 31ff 	mov.w	r1, #4294967295
  400eec:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400eee:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400ef0:	605a      	str	r2, [r3, #4]
}
  400ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ef6:	4770      	bx	lr

00400ef8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400ef8:	0189      	lsls	r1, r1, #6
  400efa:	2305      	movs	r3, #5
  400efc:	5043      	str	r3, [r0, r1]
  400efe:	4770      	bx	lr

00400f00 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400f00:	0189      	lsls	r1, r1, #6
  400f02:	2302      	movs	r3, #2
  400f04:	5043      	str	r3, [r0, r1]
  400f06:	4770      	bx	lr

00400f08 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400f08:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400f0c:	61ca      	str	r2, [r1, #28]
  400f0e:	4770      	bx	lr

00400f10 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f10:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400f14:	624a      	str	r2, [r1, #36]	; 0x24
  400f16:	4770      	bx	lr

00400f18 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400f18:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400f1c:	6a08      	ldr	r0, [r1, #32]
}
  400f1e:	4770      	bx	lr

00400f20 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400f20:	b4f0      	push	{r4, r5, r6, r7}
  400f22:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f24:	2402      	movs	r4, #2
  400f26:	9401      	str	r4, [sp, #4]
  400f28:	2408      	movs	r4, #8
  400f2a:	9402      	str	r4, [sp, #8]
  400f2c:	2420      	movs	r4, #32
  400f2e:	9403      	str	r4, [sp, #12]
  400f30:	2480      	movs	r4, #128	; 0x80
  400f32:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400f34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400f36:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400f38:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400f3a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400f3e:	d814      	bhi.n	400f6a <tc_find_mck_divisor+0x4a>
  400f40:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400f42:	42a0      	cmp	r0, r4
  400f44:	d217      	bcs.n	400f76 <tc_find_mck_divisor+0x56>
  400f46:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400f48:	af01      	add	r7, sp, #4
  400f4a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400f4e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400f52:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400f54:	4284      	cmp	r4, r0
  400f56:	d30a      	bcc.n	400f6e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400f58:	4286      	cmp	r6, r0
  400f5a:	d90d      	bls.n	400f78 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400f5c:	3501      	adds	r5, #1
	for (ul_index = 0;
  400f5e:	2d05      	cmp	r5, #5
  400f60:	d1f3      	bne.n	400f4a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400f62:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400f64:	b006      	add	sp, #24
  400f66:	bcf0      	pop	{r4, r5, r6, r7}
  400f68:	4770      	bx	lr
			return 0;
  400f6a:	2000      	movs	r0, #0
  400f6c:	e7fa      	b.n	400f64 <tc_find_mck_divisor+0x44>
  400f6e:	2000      	movs	r0, #0
  400f70:	e7f8      	b.n	400f64 <tc_find_mck_divisor+0x44>
	return 1;
  400f72:	2001      	movs	r0, #1
  400f74:	e7f6      	b.n	400f64 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400f76:	2500      	movs	r5, #0
	if (p_uldiv) {
  400f78:	b12a      	cbz	r2, 400f86 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400f7a:	a906      	add	r1, sp, #24
  400f7c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400f80:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400f84:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400f86:	2b00      	cmp	r3, #0
  400f88:	d0f3      	beq.n	400f72 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400f8a:	601d      	str	r5, [r3, #0]
	return 1;
  400f8c:	2001      	movs	r0, #1
  400f8e:	e7e9      	b.n	400f64 <tc_find_mck_divisor+0x44>

00400f90 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400f90:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400f92:	23ac      	movs	r3, #172	; 0xac
  400f94:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400f96:	680b      	ldr	r3, [r1, #0]
  400f98:	684a      	ldr	r2, [r1, #4]
  400f9a:	fbb3 f3f2 	udiv	r3, r3, r2
  400f9e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400fa0:	1e5c      	subs	r4, r3, #1
  400fa2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400fa6:	4294      	cmp	r4, r2
  400fa8:	d80c      	bhi.n	400fc4 <uart_init+0x34>
		return 1;

	p_uart->UART_BRGR = cd;
  400faa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400fac:	688b      	ldr	r3, [r1, #8]
  400fae:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400fb0:	f240 2302 	movw	r3, #514	; 0x202
  400fb4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400fb8:	2350      	movs	r3, #80	; 0x50
  400fba:	6003      	str	r3, [r0, #0]

	return 0;
  400fbc:	2000      	movs	r0, #0
}
  400fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fc2:	4770      	bx	lr
		return 1;
  400fc4:	2001      	movs	r0, #1
  400fc6:	e7fa      	b.n	400fbe <uart_init+0x2e>

00400fc8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400fc8:	6943      	ldr	r3, [r0, #20]
  400fca:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400fce:	bf1a      	itte	ne
  400fd0:	61c1      	strne	r1, [r0, #28]
	return 0;
  400fd2:	2000      	movne	r0, #0
		return 1;
  400fd4:	2001      	moveq	r0, #1
}
  400fd6:	4770      	bx	lr

00400fd8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400fd8:	6943      	ldr	r3, [r0, #20]
  400fda:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400fde:	bf1d      	ittte	ne
  400fe0:	6983      	ldrne	r3, [r0, #24]
  400fe2:	700b      	strbne	r3, [r1, #0]
	return 0;
  400fe4:	2000      	movne	r0, #0
		return 1;
  400fe6:	2001      	moveq	r0, #1
}
  400fe8:	4770      	bx	lr

00400fea <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400fea:	6943      	ldr	r3, [r0, #20]
  400fec:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400ff0:	bf1d      	ittte	ne
  400ff2:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400ff6:	61c1      	strne	r1, [r0, #28]
	return 0;
  400ff8:	2000      	movne	r0, #0
		return 1;
  400ffa:	2001      	moveq	r0, #1
}
  400ffc:	4770      	bx	lr

00400ffe <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400ffe:	6943      	ldr	r3, [r0, #20]
  401000:	f013 0f01 	tst.w	r3, #1
  401004:	d005      	beq.n	401012 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401006:	6983      	ldr	r3, [r0, #24]
  401008:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40100c:	600b      	str	r3, [r1, #0]

	return 0;
  40100e:	2000      	movs	r0, #0
  401010:	4770      	bx	lr
		return 1;
  401012:	2001      	movs	r0, #1
}
  401014:	4770      	bx	lr

00401016 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401016:	e7fe      	b.n	401016 <Dummy_Handler>

00401018 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401018:	b500      	push	{lr}
  40101a:	b083      	sub	sp, #12

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40101c:	4b25      	ldr	r3, [pc, #148]	; (4010b4 <Reset_Handler+0x9c>)
  40101e:	4a26      	ldr	r2, [pc, #152]	; (4010b8 <Reset_Handler+0xa0>)
  401020:	429a      	cmp	r2, r3
  401022:	d010      	beq.n	401046 <Reset_Handler+0x2e>
		for (; pDest < &_erelocate;) {
  401024:	4b25      	ldr	r3, [pc, #148]	; (4010bc <Reset_Handler+0xa4>)
  401026:	4a23      	ldr	r2, [pc, #140]	; (4010b4 <Reset_Handler+0x9c>)
  401028:	429a      	cmp	r2, r3
  40102a:	d20c      	bcs.n	401046 <Reset_Handler+0x2e>
  40102c:	3b01      	subs	r3, #1
  40102e:	1a9b      	subs	r3, r3, r2
  401030:	f023 0303 	bic.w	r3, r3, #3
  401034:	3304      	adds	r3, #4
  401036:	4413      	add	r3, r2
  401038:	491f      	ldr	r1, [pc, #124]	; (4010b8 <Reset_Handler+0xa0>)
			*pDest++ = *pSrc++;
  40103a:	f851 0b04 	ldr.w	r0, [r1], #4
  40103e:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  401042:	429a      	cmp	r2, r3
  401044:	d1f9      	bne.n	40103a <Reset_Handler+0x22>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401046:	4b1e      	ldr	r3, [pc, #120]	; (4010c0 <Reset_Handler+0xa8>)
  401048:	4a1e      	ldr	r2, [pc, #120]	; (4010c4 <Reset_Handler+0xac>)
  40104a:	429a      	cmp	r2, r3
  40104c:	d20a      	bcs.n	401064 <Reset_Handler+0x4c>
  40104e:	3b01      	subs	r3, #1
  401050:	1a9b      	subs	r3, r3, r2
  401052:	f023 0303 	bic.w	r3, r3, #3
  401056:	3304      	adds	r3, #4
  401058:	4413      	add	r3, r2
		*pDest++ = 0;
  40105a:	2100      	movs	r1, #0
  40105c:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  401060:	4293      	cmp	r3, r2
  401062:	d1fb      	bne.n	40105c <Reset_Handler+0x44>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401064:	4a18      	ldr	r2, [pc, #96]	; (4010c8 <Reset_Handler+0xb0>)
  401066:	4b19      	ldr	r3, [pc, #100]	; (4010cc <Reset_Handler+0xb4>)
  401068:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40106c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  40106e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401072:	fab3 f383 	clz	r3, r3
  401076:	095b      	lsrs	r3, r3, #5
  401078:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40107a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40107c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401080:	2200      	movs	r2, #0
  401082:	4b13      	ldr	r3, [pc, #76]	; (4010d0 <Reset_Handler+0xb8>)
  401084:	701a      	strb	r2, [r3, #0]
	return flags;
  401086:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401088:	4a12      	ldr	r2, [pc, #72]	; (4010d4 <Reset_Handler+0xbc>)
  40108a:	6813      	ldr	r3, [r2, #0]
  40108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401090:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  401092:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401096:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  40109a:	b129      	cbz	r1, 4010a8 <Reset_Handler+0x90>
		cpu_irq_enable();
  40109c:	2201      	movs	r2, #1
  40109e:	4b0c      	ldr	r3, [pc, #48]	; (4010d0 <Reset_Handler+0xb8>)
  4010a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  4010a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4010a6:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  4010a8:	4b0b      	ldr	r3, [pc, #44]	; (4010d8 <Reset_Handler+0xc0>)
  4010aa:	4798      	blx	r3

	/* Branch to main function */
	main();
  4010ac:	4b0b      	ldr	r3, [pc, #44]	; (4010dc <Reset_Handler+0xc4>)
  4010ae:	4798      	blx	r3
  4010b0:	e7fe      	b.n	4010b0 <Reset_Handler+0x98>
  4010b2:	bf00      	nop
  4010b4:	20000000 	.word	0x20000000
  4010b8:	004023cc 	.word	0x004023cc
  4010bc:	2000084c 	.word	0x2000084c
  4010c0:	2000a65c 	.word	0x2000a65c
  4010c4:	2000084c 	.word	0x2000084c
  4010c8:	e000ed00 	.word	0xe000ed00
  4010cc:	00400000 	.word	0x00400000
  4010d0:	20000002 	.word	0x20000002
  4010d4:	e000ed88 	.word	0xe000ed88
  4010d8:	004012ad 	.word	0x004012ad
  4010dc:	004003c1 	.word	0x004003c1

004010e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4010e0:	4b3b      	ldr	r3, [pc, #236]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  4010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010e4:	f003 0303 	and.w	r3, r3, #3
  4010e8:	2b01      	cmp	r3, #1
  4010ea:	d01d      	beq.n	401128 <SystemCoreClockUpdate+0x48>
  4010ec:	b183      	cbz	r3, 401110 <SystemCoreClockUpdate+0x30>
  4010ee:	2b02      	cmp	r3, #2
  4010f0:	d036      	beq.n	401160 <SystemCoreClockUpdate+0x80>

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4010f2:	4b37      	ldr	r3, [pc, #220]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  4010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010fa:	2b70      	cmp	r3, #112	; 0x70
  4010fc:	d05f      	beq.n	4011be <SystemCoreClockUpdate+0xde>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4010fe:	4b34      	ldr	r3, [pc, #208]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  401100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401102:	4934      	ldr	r1, [pc, #208]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  401104:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401108:	680b      	ldr	r3, [r1, #0]
  40110a:	40d3      	lsrs	r3, r2
  40110c:	600b      	str	r3, [r1, #0]
  40110e:	4770      	bx	lr
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401110:	4b31      	ldr	r3, [pc, #196]	; (4011d8 <SystemCoreClockUpdate+0xf8>)
  401112:	695b      	ldr	r3, [r3, #20]
  401114:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401118:	bf14      	ite	ne
  40111a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40111e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401122:	4b2c      	ldr	r3, [pc, #176]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  401124:	601a      	str	r2, [r3, #0]
  401126:	e7e4      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401128:	4b29      	ldr	r3, [pc, #164]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  40112a:	6a1b      	ldr	r3, [r3, #32]
  40112c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401130:	d003      	beq.n	40113a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401132:	4a2a      	ldr	r2, [pc, #168]	; (4011dc <SystemCoreClockUpdate+0xfc>)
  401134:	4b27      	ldr	r3, [pc, #156]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  401136:	601a      	str	r2, [r3, #0]
  401138:	e7db      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40113a:	4a29      	ldr	r2, [pc, #164]	; (4011e0 <SystemCoreClockUpdate+0x100>)
  40113c:	4b25      	ldr	r3, [pc, #148]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  40113e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401140:	4b23      	ldr	r3, [pc, #140]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  401142:	6a1b      	ldr	r3, [r3, #32]
  401144:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401148:	2b10      	cmp	r3, #16
  40114a:	d005      	beq.n	401158 <SystemCoreClockUpdate+0x78>
  40114c:	2b20      	cmp	r3, #32
  40114e:	d1d0      	bne.n	4010f2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 3U;
  401150:	4a22      	ldr	r2, [pc, #136]	; (4011dc <SystemCoreClockUpdate+0xfc>)
  401152:	4b20      	ldr	r3, [pc, #128]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  401154:	601a      	str	r2, [r3, #0]
				break;
  401156:	e7cc      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
				SystemCoreClock *= 2U;
  401158:	4a22      	ldr	r2, [pc, #136]	; (4011e4 <SystemCoreClockUpdate+0x104>)
  40115a:	4b1e      	ldr	r3, [pc, #120]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  40115c:	601a      	str	r2, [r3, #0]
				break;
  40115e:	e7c8      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401160:	4b1b      	ldr	r3, [pc, #108]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  401162:	6a1b      	ldr	r3, [r3, #32]
  401164:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401168:	d016      	beq.n	401198 <SystemCoreClockUpdate+0xb8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40116a:	4a1c      	ldr	r2, [pc, #112]	; (4011dc <SystemCoreClockUpdate+0xfc>)
  40116c:	4b19      	ldr	r3, [pc, #100]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  40116e:	601a      	str	r2, [r3, #0]
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  401170:	4b17      	ldr	r3, [pc, #92]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  401172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401174:	f003 0303 	and.w	r3, r3, #3
  401178:	2b02      	cmp	r3, #2
  40117a:	d1ba      	bne.n	4010f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40117c:	4a14      	ldr	r2, [pc, #80]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  40117e:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401180:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401182:	4814      	ldr	r0, [pc, #80]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401184:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401188:	6803      	ldr	r3, [r0, #0]
  40118a:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40118e:	b2d2      	uxtb	r2, r2
  401190:	fbb3 f3f2 	udiv	r3, r3, r2
  401194:	6003      	str	r3, [r0, #0]
  401196:	e7ac      	b.n	4010f2 <SystemCoreClockUpdate+0x12>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401198:	4a11      	ldr	r2, [pc, #68]	; (4011e0 <SystemCoreClockUpdate+0x100>)
  40119a:	4b0e      	ldr	r3, [pc, #56]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  40119c:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40119e:	4b0c      	ldr	r3, [pc, #48]	; (4011d0 <SystemCoreClockUpdate+0xf0>)
  4011a0:	6a1b      	ldr	r3, [r3, #32]
  4011a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011a6:	2b10      	cmp	r3, #16
  4011a8:	d005      	beq.n	4011b6 <SystemCoreClockUpdate+0xd6>
  4011aa:	2b20      	cmp	r3, #32
  4011ac:	d1e0      	bne.n	401170 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
  4011ae:	4a0b      	ldr	r2, [pc, #44]	; (4011dc <SystemCoreClockUpdate+0xfc>)
  4011b0:	4b08      	ldr	r3, [pc, #32]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  4011b2:	601a      	str	r2, [r3, #0]
				break;
  4011b4:	e7dc      	b.n	401170 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
  4011b6:	4a0b      	ldr	r2, [pc, #44]	; (4011e4 <SystemCoreClockUpdate+0x104>)
  4011b8:	4b06      	ldr	r3, [pc, #24]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  4011ba:	601a      	str	r2, [r3, #0]
				break;
  4011bc:	e7d8      	b.n	401170 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4011be:	4a05      	ldr	r2, [pc, #20]	; (4011d4 <SystemCoreClockUpdate+0xf4>)
  4011c0:	6813      	ldr	r3, [r2, #0]
  4011c2:	4909      	ldr	r1, [pc, #36]	; (4011e8 <SystemCoreClockUpdate+0x108>)
  4011c4:	fba1 1303 	umull	r1, r3, r1, r3
  4011c8:	085b      	lsrs	r3, r3, #1
  4011ca:	6013      	str	r3, [r2, #0]
  4011cc:	4770      	bx	lr
  4011ce:	bf00      	nop
  4011d0:	400e0400 	.word	0x400e0400
  4011d4:	20000004 	.word	0x20000004
  4011d8:	400e1810 	.word	0x400e1810
  4011dc:	00b71b00 	.word	0x00b71b00
  4011e0:	003d0900 	.word	0x003d0900
  4011e4:	007a1200 	.word	0x007a1200
  4011e8:	aaaaaaab 	.word	0xaaaaaaab

004011ec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4011ec:	4b12      	ldr	r3, [pc, #72]	; (401238 <system_init_flash+0x4c>)
  4011ee:	4298      	cmp	r0, r3
  4011f0:	d911      	bls.n	401216 <system_init_flash+0x2a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4011f2:	4b12      	ldr	r3, [pc, #72]	; (40123c <system_init_flash+0x50>)
  4011f4:	4298      	cmp	r0, r3
  4011f6:	d913      	bls.n	401220 <system_init_flash+0x34>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4011f8:	4b11      	ldr	r3, [pc, #68]	; (401240 <system_init_flash+0x54>)
  4011fa:	4298      	cmp	r0, r3
  4011fc:	d914      	bls.n	401228 <system_init_flash+0x3c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4011fe:	4b11      	ldr	r3, [pc, #68]	; (401244 <system_init_flash+0x58>)
  401200:	4298      	cmp	r0, r3
  401202:	d915      	bls.n	401230 <system_init_flash+0x44>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401204:	4b10      	ldr	r3, [pc, #64]	; (401248 <system_init_flash+0x5c>)
  401206:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401208:	bf94      	ite	ls
  40120a:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40120e:	4a0f      	ldrhi	r2, [pc, #60]	; (40124c <system_init_flash+0x60>)
  401210:	4b0f      	ldr	r3, [pc, #60]	; (401250 <system_init_flash+0x64>)
  401212:	601a      	str	r2, [r3, #0]
  401214:	4770      	bx	lr
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401216:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40121a:	4b0d      	ldr	r3, [pc, #52]	; (401250 <system_init_flash+0x64>)
  40121c:	601a      	str	r2, [r3, #0]
  40121e:	4770      	bx	lr
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401220:	4a0c      	ldr	r2, [pc, #48]	; (401254 <system_init_flash+0x68>)
  401222:	4b0b      	ldr	r3, [pc, #44]	; (401250 <system_init_flash+0x64>)
  401224:	601a      	str	r2, [r3, #0]
  401226:	4770      	bx	lr
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401228:	4a0b      	ldr	r2, [pc, #44]	; (401258 <system_init_flash+0x6c>)
  40122a:	4b09      	ldr	r3, [pc, #36]	; (401250 <system_init_flash+0x64>)
  40122c:	601a      	str	r2, [r3, #0]
  40122e:	4770      	bx	lr
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401230:	4a0a      	ldr	r2, [pc, #40]	; (40125c <system_init_flash+0x70>)
  401232:	4b07      	ldr	r3, [pc, #28]	; (401250 <system_init_flash+0x64>)
  401234:	601a      	str	r2, [r3, #0]
  401236:	4770      	bx	lr
  401238:	01312cff 	.word	0x01312cff
  40123c:	026259ff 	.word	0x026259ff
  401240:	039386ff 	.word	0x039386ff
  401244:	04c4b3ff 	.word	0x04c4b3ff
  401248:	05f5e0ff 	.word	0x05f5e0ff
  40124c:	04000500 	.word	0x04000500
  401250:	400e0a00 	.word	0x400e0a00
  401254:	04000100 	.word	0x04000100
  401258:	04000200 	.word	0x04000200
  40125c:	04000300 	.word	0x04000300

00401260 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401260:	4b0a      	ldr	r3, [pc, #40]	; (40128c <_sbrk+0x2c>)
  401262:	681b      	ldr	r3, [r3, #0]
  401264:	b153      	cbz	r3, 40127c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401266:	4b09      	ldr	r3, [pc, #36]	; (40128c <_sbrk+0x2c>)
  401268:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40126a:	181a      	adds	r2, r3, r0
  40126c:	4908      	ldr	r1, [pc, #32]	; (401290 <_sbrk+0x30>)
  40126e:	4291      	cmp	r1, r2
  401270:	db08      	blt.n	401284 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401272:	4610      	mov	r0, r2
  401274:	4a05      	ldr	r2, [pc, #20]	; (40128c <_sbrk+0x2c>)
  401276:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401278:	4618      	mov	r0, r3
  40127a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40127c:	4a05      	ldr	r2, [pc, #20]	; (401294 <_sbrk+0x34>)
  40127e:	4b03      	ldr	r3, [pc, #12]	; (40128c <_sbrk+0x2c>)
  401280:	601a      	str	r2, [r3, #0]
  401282:	e7f0      	b.n	401266 <_sbrk+0x6>
		return (caddr_t) -1;	
  401284:	f04f 30ff 	mov.w	r0, #4294967295
}
  401288:	4770      	bx	lr
  40128a:	bf00      	nop
  40128c:	2000a528 	.word	0x2000a528
  401290:	2001fffc 	.word	0x2001fffc
  401294:	2000d660 	.word	0x2000d660

00401298 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401298:	f04f 30ff 	mov.w	r0, #4294967295
  40129c:	4770      	bx	lr

0040129e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4012a2:	604b      	str	r3, [r1, #4]

	return 0;
}
  4012a4:	2000      	movs	r0, #0
  4012a6:	4770      	bx	lr

004012a8 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4012a8:	2000      	movs	r0, #0
  4012aa:	4770      	bx	lr

004012ac <__libc_init_array>:
  4012ac:	b570      	push	{r4, r5, r6, lr}
  4012ae:	4e0f      	ldr	r6, [pc, #60]	; (4012ec <__libc_init_array+0x40>)
  4012b0:	4d0f      	ldr	r5, [pc, #60]	; (4012f0 <__libc_init_array+0x44>)
  4012b2:	1b76      	subs	r6, r6, r5
  4012b4:	10b6      	asrs	r6, r6, #2
  4012b6:	bf18      	it	ne
  4012b8:	2400      	movne	r4, #0
  4012ba:	d005      	beq.n	4012c8 <__libc_init_array+0x1c>
  4012bc:	3401      	adds	r4, #1
  4012be:	f855 3b04 	ldr.w	r3, [r5], #4
  4012c2:	4798      	blx	r3
  4012c4:	42a6      	cmp	r6, r4
  4012c6:	d1f9      	bne.n	4012bc <__libc_init_array+0x10>
  4012c8:	4e0a      	ldr	r6, [pc, #40]	; (4012f4 <__libc_init_array+0x48>)
  4012ca:	4d0b      	ldr	r5, [pc, #44]	; (4012f8 <__libc_init_array+0x4c>)
  4012cc:	1b76      	subs	r6, r6, r5
  4012ce:	f001 f86b 	bl	4023a8 <_init>
  4012d2:	10b6      	asrs	r6, r6, #2
  4012d4:	bf18      	it	ne
  4012d6:	2400      	movne	r4, #0
  4012d8:	d006      	beq.n	4012e8 <__libc_init_array+0x3c>
  4012da:	3401      	adds	r4, #1
  4012dc:	f855 3b04 	ldr.w	r3, [r5], #4
  4012e0:	4798      	blx	r3
  4012e2:	42a6      	cmp	r6, r4
  4012e4:	d1f9      	bne.n	4012da <__libc_init_array+0x2e>
  4012e6:	bd70      	pop	{r4, r5, r6, pc}
  4012e8:	bd70      	pop	{r4, r5, r6, pc}
  4012ea:	bf00      	nop
  4012ec:	004023b4 	.word	0x004023b4
  4012f0:	004023b4 	.word	0x004023b4
  4012f4:	004023bc 	.word	0x004023bc
  4012f8:	004023b4 	.word	0x004023b4

004012fc <memset>:
  4012fc:	b470      	push	{r4, r5, r6}
  4012fe:	0786      	lsls	r6, r0, #30
  401300:	d046      	beq.n	401390 <memset+0x94>
  401302:	1e54      	subs	r4, r2, #1
  401304:	2a00      	cmp	r2, #0
  401306:	d041      	beq.n	40138c <memset+0x90>
  401308:	b2ca      	uxtb	r2, r1
  40130a:	4603      	mov	r3, r0
  40130c:	e002      	b.n	401314 <memset+0x18>
  40130e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401312:	d33b      	bcc.n	40138c <memset+0x90>
  401314:	f803 2b01 	strb.w	r2, [r3], #1
  401318:	079d      	lsls	r5, r3, #30
  40131a:	d1f8      	bne.n	40130e <memset+0x12>
  40131c:	2c03      	cmp	r4, #3
  40131e:	d92e      	bls.n	40137e <memset+0x82>
  401320:	b2cd      	uxtb	r5, r1
  401322:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401326:	2c0f      	cmp	r4, #15
  401328:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40132c:	d919      	bls.n	401362 <memset+0x66>
  40132e:	f103 0210 	add.w	r2, r3, #16
  401332:	4626      	mov	r6, r4
  401334:	3e10      	subs	r6, #16
  401336:	2e0f      	cmp	r6, #15
  401338:	f842 5c10 	str.w	r5, [r2, #-16]
  40133c:	f842 5c0c 	str.w	r5, [r2, #-12]
  401340:	f842 5c08 	str.w	r5, [r2, #-8]
  401344:	f842 5c04 	str.w	r5, [r2, #-4]
  401348:	f102 0210 	add.w	r2, r2, #16
  40134c:	d8f2      	bhi.n	401334 <memset+0x38>
  40134e:	f1a4 0210 	sub.w	r2, r4, #16
  401352:	f022 020f 	bic.w	r2, r2, #15
  401356:	f004 040f 	and.w	r4, r4, #15
  40135a:	3210      	adds	r2, #16
  40135c:	2c03      	cmp	r4, #3
  40135e:	4413      	add	r3, r2
  401360:	d90d      	bls.n	40137e <memset+0x82>
  401362:	461e      	mov	r6, r3
  401364:	4622      	mov	r2, r4
  401366:	3a04      	subs	r2, #4
  401368:	2a03      	cmp	r2, #3
  40136a:	f846 5b04 	str.w	r5, [r6], #4
  40136e:	d8fa      	bhi.n	401366 <memset+0x6a>
  401370:	1f22      	subs	r2, r4, #4
  401372:	f022 0203 	bic.w	r2, r2, #3
  401376:	3204      	adds	r2, #4
  401378:	4413      	add	r3, r2
  40137a:	f004 0403 	and.w	r4, r4, #3
  40137e:	b12c      	cbz	r4, 40138c <memset+0x90>
  401380:	b2c9      	uxtb	r1, r1
  401382:	441c      	add	r4, r3
  401384:	f803 1b01 	strb.w	r1, [r3], #1
  401388:	429c      	cmp	r4, r3
  40138a:	d1fb      	bne.n	401384 <memset+0x88>
  40138c:	bc70      	pop	{r4, r5, r6}
  40138e:	4770      	bx	lr
  401390:	4614      	mov	r4, r2
  401392:	4603      	mov	r3, r0
  401394:	e7c2      	b.n	40131c <memset+0x20>
  401396:	bf00      	nop

00401398 <setbuf>:
  401398:	2900      	cmp	r1, #0
  40139a:	bf0c      	ite	eq
  40139c:	2202      	moveq	r2, #2
  40139e:	2200      	movne	r2, #0
  4013a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4013a4:	f000 b800 	b.w	4013a8 <setvbuf>

004013a8 <setvbuf>:
  4013a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4013ac:	4c61      	ldr	r4, [pc, #388]	; (401534 <setvbuf+0x18c>)
  4013ae:	6825      	ldr	r5, [r4, #0]
  4013b0:	b083      	sub	sp, #12
  4013b2:	4604      	mov	r4, r0
  4013b4:	460f      	mov	r7, r1
  4013b6:	4690      	mov	r8, r2
  4013b8:	461e      	mov	r6, r3
  4013ba:	b115      	cbz	r5, 4013c2 <setvbuf+0x1a>
  4013bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4013be:	2b00      	cmp	r3, #0
  4013c0:	d064      	beq.n	40148c <setvbuf+0xe4>
  4013c2:	f1b8 0f02 	cmp.w	r8, #2
  4013c6:	d006      	beq.n	4013d6 <setvbuf+0x2e>
  4013c8:	f1b8 0f01 	cmp.w	r8, #1
  4013cc:	f200 809f 	bhi.w	40150e <setvbuf+0x166>
  4013d0:	2e00      	cmp	r6, #0
  4013d2:	f2c0 809c 	blt.w	40150e <setvbuf+0x166>
  4013d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4013d8:	07d8      	lsls	r0, r3, #31
  4013da:	d534      	bpl.n	401446 <setvbuf+0x9e>
  4013dc:	4621      	mov	r1, r4
  4013de:	4628      	mov	r0, r5
  4013e0:	f000 f95a 	bl	401698 <_fflush_r>
  4013e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4013e6:	b141      	cbz	r1, 4013fa <setvbuf+0x52>
  4013e8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4013ec:	4299      	cmp	r1, r3
  4013ee:	d002      	beq.n	4013f6 <setvbuf+0x4e>
  4013f0:	4628      	mov	r0, r5
  4013f2:	f000 fa4b 	bl	40188c <_free_r>
  4013f6:	2300      	movs	r3, #0
  4013f8:	6323      	str	r3, [r4, #48]	; 0x30
  4013fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4013fe:	2200      	movs	r2, #0
  401400:	61a2      	str	r2, [r4, #24]
  401402:	6062      	str	r2, [r4, #4]
  401404:	061a      	lsls	r2, r3, #24
  401406:	d43a      	bmi.n	40147e <setvbuf+0xd6>
  401408:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40140c:	f023 0303 	bic.w	r3, r3, #3
  401410:	f1b8 0f02 	cmp.w	r8, #2
  401414:	81a3      	strh	r3, [r4, #12]
  401416:	d01d      	beq.n	401454 <setvbuf+0xac>
  401418:	ab01      	add	r3, sp, #4
  40141a:	466a      	mov	r2, sp
  40141c:	4621      	mov	r1, r4
  40141e:	4628      	mov	r0, r5
  401420:	f000 fb4c 	bl	401abc <__swhatbuf_r>
  401424:	89a3      	ldrh	r3, [r4, #12]
  401426:	4318      	orrs	r0, r3
  401428:	81a0      	strh	r0, [r4, #12]
  40142a:	2e00      	cmp	r6, #0
  40142c:	d132      	bne.n	401494 <setvbuf+0xec>
  40142e:	9e00      	ldr	r6, [sp, #0]
  401430:	4630      	mov	r0, r6
  401432:	f000 fb71 	bl	401b18 <malloc>
  401436:	4607      	mov	r7, r0
  401438:	2800      	cmp	r0, #0
  40143a:	d06b      	beq.n	401514 <setvbuf+0x16c>
  40143c:	89a3      	ldrh	r3, [r4, #12]
  40143e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401442:	81a3      	strh	r3, [r4, #12]
  401444:	e028      	b.n	401498 <setvbuf+0xf0>
  401446:	89a3      	ldrh	r3, [r4, #12]
  401448:	0599      	lsls	r1, r3, #22
  40144a:	d4c7      	bmi.n	4013dc <setvbuf+0x34>
  40144c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40144e:	f000 fb31 	bl	401ab4 <__retarget_lock_acquire_recursive>
  401452:	e7c3      	b.n	4013dc <setvbuf+0x34>
  401454:	2500      	movs	r5, #0
  401456:	6e61      	ldr	r1, [r4, #100]	; 0x64
  401458:	2600      	movs	r6, #0
  40145a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40145e:	f043 0302 	orr.w	r3, r3, #2
  401462:	2001      	movs	r0, #1
  401464:	60a6      	str	r6, [r4, #8]
  401466:	07ce      	lsls	r6, r1, #31
  401468:	81a3      	strh	r3, [r4, #12]
  40146a:	6022      	str	r2, [r4, #0]
  40146c:	6122      	str	r2, [r4, #16]
  40146e:	6160      	str	r0, [r4, #20]
  401470:	d401      	bmi.n	401476 <setvbuf+0xce>
  401472:	0598      	lsls	r0, r3, #22
  401474:	d53e      	bpl.n	4014f4 <setvbuf+0x14c>
  401476:	4628      	mov	r0, r5
  401478:	b003      	add	sp, #12
  40147a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40147e:	6921      	ldr	r1, [r4, #16]
  401480:	4628      	mov	r0, r5
  401482:	f000 fa03 	bl	40188c <_free_r>
  401486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40148a:	e7bd      	b.n	401408 <setvbuf+0x60>
  40148c:	4628      	mov	r0, r5
  40148e:	f000 f95b 	bl	401748 <__sinit>
  401492:	e796      	b.n	4013c2 <setvbuf+0x1a>
  401494:	2f00      	cmp	r7, #0
  401496:	d0cb      	beq.n	401430 <setvbuf+0x88>
  401498:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40149a:	2b00      	cmp	r3, #0
  40149c:	d033      	beq.n	401506 <setvbuf+0x15e>
  40149e:	9b00      	ldr	r3, [sp, #0]
  4014a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4014a4:	6027      	str	r7, [r4, #0]
  4014a6:	429e      	cmp	r6, r3
  4014a8:	bf1c      	itt	ne
  4014aa:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4014ae:	81a2      	strhne	r2, [r4, #12]
  4014b0:	f1b8 0f01 	cmp.w	r8, #1
  4014b4:	bf04      	itt	eq
  4014b6:	f042 0201 	orreq.w	r2, r2, #1
  4014ba:	81a2      	strheq	r2, [r4, #12]
  4014bc:	b292      	uxth	r2, r2
  4014be:	f012 0308 	ands.w	r3, r2, #8
  4014c2:	6127      	str	r7, [r4, #16]
  4014c4:	6166      	str	r6, [r4, #20]
  4014c6:	d00e      	beq.n	4014e6 <setvbuf+0x13e>
  4014c8:	07d1      	lsls	r1, r2, #31
  4014ca:	d51a      	bpl.n	401502 <setvbuf+0x15a>
  4014cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4014ce:	4276      	negs	r6, r6
  4014d0:	2300      	movs	r3, #0
  4014d2:	f015 0501 	ands.w	r5, r5, #1
  4014d6:	61a6      	str	r6, [r4, #24]
  4014d8:	60a3      	str	r3, [r4, #8]
  4014da:	d009      	beq.n	4014f0 <setvbuf+0x148>
  4014dc:	2500      	movs	r5, #0
  4014de:	4628      	mov	r0, r5
  4014e0:	b003      	add	sp, #12
  4014e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4014e6:	60a3      	str	r3, [r4, #8]
  4014e8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4014ea:	f015 0501 	ands.w	r5, r5, #1
  4014ee:	d1f5      	bne.n	4014dc <setvbuf+0x134>
  4014f0:	0593      	lsls	r3, r2, #22
  4014f2:	d4c0      	bmi.n	401476 <setvbuf+0xce>
  4014f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4014f6:	f000 fadf 	bl	401ab8 <__retarget_lock_release_recursive>
  4014fa:	4628      	mov	r0, r5
  4014fc:	b003      	add	sp, #12
  4014fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401502:	60a6      	str	r6, [r4, #8]
  401504:	e7f0      	b.n	4014e8 <setvbuf+0x140>
  401506:	4628      	mov	r0, r5
  401508:	f000 f91e 	bl	401748 <__sinit>
  40150c:	e7c7      	b.n	40149e <setvbuf+0xf6>
  40150e:	f04f 35ff 	mov.w	r5, #4294967295
  401512:	e7b0      	b.n	401476 <setvbuf+0xce>
  401514:	f8dd 9000 	ldr.w	r9, [sp]
  401518:	45b1      	cmp	r9, r6
  40151a:	d004      	beq.n	401526 <setvbuf+0x17e>
  40151c:	4648      	mov	r0, r9
  40151e:	f000 fafb 	bl	401b18 <malloc>
  401522:	4607      	mov	r7, r0
  401524:	b920      	cbnz	r0, 401530 <setvbuf+0x188>
  401526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40152a:	f04f 35ff 	mov.w	r5, #4294967295
  40152e:	e792      	b.n	401456 <setvbuf+0xae>
  401530:	464e      	mov	r6, r9
  401532:	e783      	b.n	40143c <setvbuf+0x94>
  401534:	20000008 	.word	0x20000008

00401538 <register_fini>:
  401538:	4b02      	ldr	r3, [pc, #8]	; (401544 <register_fini+0xc>)
  40153a:	b113      	cbz	r3, 401542 <register_fini+0xa>
  40153c:	4802      	ldr	r0, [pc, #8]	; (401548 <register_fini+0x10>)
  40153e:	f000 b805 	b.w	40154c <atexit>
  401542:	4770      	bx	lr
  401544:	00000000 	.word	0x00000000
  401548:	004017b9 	.word	0x004017b9

0040154c <atexit>:
  40154c:	2300      	movs	r3, #0
  40154e:	4601      	mov	r1, r0
  401550:	461a      	mov	r2, r3
  401552:	4618      	mov	r0, r3
  401554:	f000 be10 	b.w	402178 <__register_exitproc>

00401558 <__sflush_r>:
  401558:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40155c:	b29a      	uxth	r2, r3
  40155e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401562:	460d      	mov	r5, r1
  401564:	0711      	lsls	r1, r2, #28
  401566:	4680      	mov	r8, r0
  401568:	d43a      	bmi.n	4015e0 <__sflush_r+0x88>
  40156a:	686a      	ldr	r2, [r5, #4]
  40156c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401570:	2a00      	cmp	r2, #0
  401572:	81ab      	strh	r3, [r5, #12]
  401574:	dd6f      	ble.n	401656 <__sflush_r+0xfe>
  401576:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401578:	2c00      	cmp	r4, #0
  40157a:	d049      	beq.n	401610 <__sflush_r+0xb8>
  40157c:	2200      	movs	r2, #0
  40157e:	b29b      	uxth	r3, r3
  401580:	f8d8 6000 	ldr.w	r6, [r8]
  401584:	f8c8 2000 	str.w	r2, [r8]
  401588:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40158c:	d067      	beq.n	40165e <__sflush_r+0x106>
  40158e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401590:	075f      	lsls	r7, r3, #29
  401592:	d505      	bpl.n	4015a0 <__sflush_r+0x48>
  401594:	6869      	ldr	r1, [r5, #4]
  401596:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401598:	1a52      	subs	r2, r2, r1
  40159a:	b10b      	cbz	r3, 4015a0 <__sflush_r+0x48>
  40159c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40159e:	1ad2      	subs	r2, r2, r3
  4015a0:	2300      	movs	r3, #0
  4015a2:	69e9      	ldr	r1, [r5, #28]
  4015a4:	4640      	mov	r0, r8
  4015a6:	47a0      	blx	r4
  4015a8:	1c44      	adds	r4, r0, #1
  4015aa:	d03c      	beq.n	401626 <__sflush_r+0xce>
  4015ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4015b0:	692a      	ldr	r2, [r5, #16]
  4015b2:	602a      	str	r2, [r5, #0]
  4015b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4015b8:	2200      	movs	r2, #0
  4015ba:	81ab      	strh	r3, [r5, #12]
  4015bc:	04db      	lsls	r3, r3, #19
  4015be:	606a      	str	r2, [r5, #4]
  4015c0:	d447      	bmi.n	401652 <__sflush_r+0xfa>
  4015c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4015c4:	f8c8 6000 	str.w	r6, [r8]
  4015c8:	b311      	cbz	r1, 401610 <__sflush_r+0xb8>
  4015ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4015ce:	4299      	cmp	r1, r3
  4015d0:	d002      	beq.n	4015d8 <__sflush_r+0x80>
  4015d2:	4640      	mov	r0, r8
  4015d4:	f000 f95a 	bl	40188c <_free_r>
  4015d8:	2000      	movs	r0, #0
  4015da:	6328      	str	r0, [r5, #48]	; 0x30
  4015dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015e0:	692e      	ldr	r6, [r5, #16]
  4015e2:	b1ae      	cbz	r6, 401610 <__sflush_r+0xb8>
  4015e4:	682c      	ldr	r4, [r5, #0]
  4015e6:	602e      	str	r6, [r5, #0]
  4015e8:	0791      	lsls	r1, r2, #30
  4015ea:	bf0c      	ite	eq
  4015ec:	696b      	ldreq	r3, [r5, #20]
  4015ee:	2300      	movne	r3, #0
  4015f0:	1ba4      	subs	r4, r4, r6
  4015f2:	60ab      	str	r3, [r5, #8]
  4015f4:	e00a      	b.n	40160c <__sflush_r+0xb4>
  4015f6:	4623      	mov	r3, r4
  4015f8:	4632      	mov	r2, r6
  4015fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4015fc:	69e9      	ldr	r1, [r5, #28]
  4015fe:	4640      	mov	r0, r8
  401600:	47b8      	blx	r7
  401602:	2800      	cmp	r0, #0
  401604:	eba4 0400 	sub.w	r4, r4, r0
  401608:	4406      	add	r6, r0
  40160a:	dd04      	ble.n	401616 <__sflush_r+0xbe>
  40160c:	2c00      	cmp	r4, #0
  40160e:	dcf2      	bgt.n	4015f6 <__sflush_r+0x9e>
  401610:	2000      	movs	r0, #0
  401612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401616:	89ab      	ldrh	r3, [r5, #12]
  401618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40161c:	81ab      	strh	r3, [r5, #12]
  40161e:	f04f 30ff 	mov.w	r0, #4294967295
  401622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401626:	f8d8 4000 	ldr.w	r4, [r8]
  40162a:	2c1d      	cmp	r4, #29
  40162c:	d8f3      	bhi.n	401616 <__sflush_r+0xbe>
  40162e:	4b19      	ldr	r3, [pc, #100]	; (401694 <__sflush_r+0x13c>)
  401630:	40e3      	lsrs	r3, r4
  401632:	43db      	mvns	r3, r3
  401634:	f013 0301 	ands.w	r3, r3, #1
  401638:	d1ed      	bne.n	401616 <__sflush_r+0xbe>
  40163a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40163e:	606b      	str	r3, [r5, #4]
  401640:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401644:	6929      	ldr	r1, [r5, #16]
  401646:	81ab      	strh	r3, [r5, #12]
  401648:	04da      	lsls	r2, r3, #19
  40164a:	6029      	str	r1, [r5, #0]
  40164c:	d5b9      	bpl.n	4015c2 <__sflush_r+0x6a>
  40164e:	2c00      	cmp	r4, #0
  401650:	d1b7      	bne.n	4015c2 <__sflush_r+0x6a>
  401652:	6528      	str	r0, [r5, #80]	; 0x50
  401654:	e7b5      	b.n	4015c2 <__sflush_r+0x6a>
  401656:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401658:	2a00      	cmp	r2, #0
  40165a:	dc8c      	bgt.n	401576 <__sflush_r+0x1e>
  40165c:	e7d8      	b.n	401610 <__sflush_r+0xb8>
  40165e:	2301      	movs	r3, #1
  401660:	69e9      	ldr	r1, [r5, #28]
  401662:	4640      	mov	r0, r8
  401664:	47a0      	blx	r4
  401666:	1c43      	adds	r3, r0, #1
  401668:	4602      	mov	r2, r0
  40166a:	d002      	beq.n	401672 <__sflush_r+0x11a>
  40166c:	89ab      	ldrh	r3, [r5, #12]
  40166e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401670:	e78e      	b.n	401590 <__sflush_r+0x38>
  401672:	f8d8 3000 	ldr.w	r3, [r8]
  401676:	2b00      	cmp	r3, #0
  401678:	d0f8      	beq.n	40166c <__sflush_r+0x114>
  40167a:	2b1d      	cmp	r3, #29
  40167c:	d001      	beq.n	401682 <__sflush_r+0x12a>
  40167e:	2b16      	cmp	r3, #22
  401680:	d102      	bne.n	401688 <__sflush_r+0x130>
  401682:	f8c8 6000 	str.w	r6, [r8]
  401686:	e7c3      	b.n	401610 <__sflush_r+0xb8>
  401688:	89ab      	ldrh	r3, [r5, #12]
  40168a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40168e:	81ab      	strh	r3, [r5, #12]
  401690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401694:	20400001 	.word	0x20400001

00401698 <_fflush_r>:
  401698:	b538      	push	{r3, r4, r5, lr}
  40169a:	460d      	mov	r5, r1
  40169c:	4604      	mov	r4, r0
  40169e:	b108      	cbz	r0, 4016a4 <_fflush_r+0xc>
  4016a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4016a2:	b1bb      	cbz	r3, 4016d4 <_fflush_r+0x3c>
  4016a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4016a8:	b188      	cbz	r0, 4016ce <_fflush_r+0x36>
  4016aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4016ac:	07db      	lsls	r3, r3, #31
  4016ae:	d401      	bmi.n	4016b4 <_fflush_r+0x1c>
  4016b0:	0581      	lsls	r1, r0, #22
  4016b2:	d517      	bpl.n	4016e4 <_fflush_r+0x4c>
  4016b4:	4620      	mov	r0, r4
  4016b6:	4629      	mov	r1, r5
  4016b8:	f7ff ff4e 	bl	401558 <__sflush_r>
  4016bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4016be:	07da      	lsls	r2, r3, #31
  4016c0:	4604      	mov	r4, r0
  4016c2:	d402      	bmi.n	4016ca <_fflush_r+0x32>
  4016c4:	89ab      	ldrh	r3, [r5, #12]
  4016c6:	059b      	lsls	r3, r3, #22
  4016c8:	d507      	bpl.n	4016da <_fflush_r+0x42>
  4016ca:	4620      	mov	r0, r4
  4016cc:	bd38      	pop	{r3, r4, r5, pc}
  4016ce:	4604      	mov	r4, r0
  4016d0:	4620      	mov	r0, r4
  4016d2:	bd38      	pop	{r3, r4, r5, pc}
  4016d4:	f000 f838 	bl	401748 <__sinit>
  4016d8:	e7e4      	b.n	4016a4 <_fflush_r+0xc>
  4016da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4016dc:	f000 f9ec 	bl	401ab8 <__retarget_lock_release_recursive>
  4016e0:	4620      	mov	r0, r4
  4016e2:	bd38      	pop	{r3, r4, r5, pc}
  4016e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4016e6:	f000 f9e5 	bl	401ab4 <__retarget_lock_acquire_recursive>
  4016ea:	e7e3      	b.n	4016b4 <_fflush_r+0x1c>

004016ec <_cleanup_r>:
  4016ec:	4901      	ldr	r1, [pc, #4]	; (4016f4 <_cleanup_r+0x8>)
  4016ee:	f000 b9b3 	b.w	401a58 <_fwalk_reent>
  4016f2:	bf00      	nop
  4016f4:	00402261 	.word	0x00402261

004016f8 <std.isra.0>:
  4016f8:	b510      	push	{r4, lr}
  4016fa:	2300      	movs	r3, #0
  4016fc:	4604      	mov	r4, r0
  4016fe:	8181      	strh	r1, [r0, #12]
  401700:	81c2      	strh	r2, [r0, #14]
  401702:	6003      	str	r3, [r0, #0]
  401704:	6043      	str	r3, [r0, #4]
  401706:	6083      	str	r3, [r0, #8]
  401708:	6643      	str	r3, [r0, #100]	; 0x64
  40170a:	6103      	str	r3, [r0, #16]
  40170c:	6143      	str	r3, [r0, #20]
  40170e:	6183      	str	r3, [r0, #24]
  401710:	4619      	mov	r1, r3
  401712:	2208      	movs	r2, #8
  401714:	305c      	adds	r0, #92	; 0x5c
  401716:	f7ff fdf1 	bl	4012fc <memset>
  40171a:	4807      	ldr	r0, [pc, #28]	; (401738 <std.isra.0+0x40>)
  40171c:	4907      	ldr	r1, [pc, #28]	; (40173c <std.isra.0+0x44>)
  40171e:	4a08      	ldr	r2, [pc, #32]	; (401740 <std.isra.0+0x48>)
  401720:	4b08      	ldr	r3, [pc, #32]	; (401744 <std.isra.0+0x4c>)
  401722:	6220      	str	r0, [r4, #32]
  401724:	61e4      	str	r4, [r4, #28]
  401726:	6261      	str	r1, [r4, #36]	; 0x24
  401728:	62a2      	str	r2, [r4, #40]	; 0x28
  40172a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40172c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  401730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401734:	f000 b9ba 	b.w	401aac <__retarget_lock_init_recursive>
  401738:	004020c5 	.word	0x004020c5
  40173c:	004020e9 	.word	0x004020e9
  401740:	00402125 	.word	0x00402125
  401744:	00402145 	.word	0x00402145

00401748 <__sinit>:
  401748:	b510      	push	{r4, lr}
  40174a:	4604      	mov	r4, r0
  40174c:	4812      	ldr	r0, [pc, #72]	; (401798 <__sinit+0x50>)
  40174e:	f000 f9b1 	bl	401ab4 <__retarget_lock_acquire_recursive>
  401752:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401754:	b9d2      	cbnz	r2, 40178c <__sinit+0x44>
  401756:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40175a:	4810      	ldr	r0, [pc, #64]	; (40179c <__sinit+0x54>)
  40175c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  401760:	2103      	movs	r1, #3
  401762:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  401766:	63e0      	str	r0, [r4, #60]	; 0x3c
  401768:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40176c:	6860      	ldr	r0, [r4, #4]
  40176e:	2104      	movs	r1, #4
  401770:	f7ff ffc2 	bl	4016f8 <std.isra.0>
  401774:	2201      	movs	r2, #1
  401776:	2109      	movs	r1, #9
  401778:	68a0      	ldr	r0, [r4, #8]
  40177a:	f7ff ffbd 	bl	4016f8 <std.isra.0>
  40177e:	2202      	movs	r2, #2
  401780:	2112      	movs	r1, #18
  401782:	68e0      	ldr	r0, [r4, #12]
  401784:	f7ff ffb8 	bl	4016f8 <std.isra.0>
  401788:	2301      	movs	r3, #1
  40178a:	63a3      	str	r3, [r4, #56]	; 0x38
  40178c:	4802      	ldr	r0, [pc, #8]	; (401798 <__sinit+0x50>)
  40178e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401792:	f000 b991 	b.w	401ab8 <__retarget_lock_release_recursive>
  401796:	bf00      	nop
  401798:	2000a640 	.word	0x2000a640
  40179c:	004016ed 	.word	0x004016ed

004017a0 <__sfp_lock_acquire>:
  4017a0:	4801      	ldr	r0, [pc, #4]	; (4017a8 <__sfp_lock_acquire+0x8>)
  4017a2:	f000 b987 	b.w	401ab4 <__retarget_lock_acquire_recursive>
  4017a6:	bf00      	nop
  4017a8:	2000a654 	.word	0x2000a654

004017ac <__sfp_lock_release>:
  4017ac:	4801      	ldr	r0, [pc, #4]	; (4017b4 <__sfp_lock_release+0x8>)
  4017ae:	f000 b983 	b.w	401ab8 <__retarget_lock_release_recursive>
  4017b2:	bf00      	nop
  4017b4:	2000a654 	.word	0x2000a654

004017b8 <__libc_fini_array>:
  4017b8:	b538      	push	{r3, r4, r5, lr}
  4017ba:	4c0a      	ldr	r4, [pc, #40]	; (4017e4 <__libc_fini_array+0x2c>)
  4017bc:	4d0a      	ldr	r5, [pc, #40]	; (4017e8 <__libc_fini_array+0x30>)
  4017be:	1b64      	subs	r4, r4, r5
  4017c0:	10a4      	asrs	r4, r4, #2
  4017c2:	d00a      	beq.n	4017da <__libc_fini_array+0x22>
  4017c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4017c8:	3b01      	subs	r3, #1
  4017ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4017ce:	3c01      	subs	r4, #1
  4017d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4017d4:	4798      	blx	r3
  4017d6:	2c00      	cmp	r4, #0
  4017d8:	d1f9      	bne.n	4017ce <__libc_fini_array+0x16>
  4017da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4017de:	f000 bded 	b.w	4023bc <_fini>
  4017e2:	bf00      	nop
  4017e4:	004023cc 	.word	0x004023cc
  4017e8:	004023c8 	.word	0x004023c8

004017ec <_malloc_trim_r>:
  4017ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4017ee:	4f24      	ldr	r7, [pc, #144]	; (401880 <_malloc_trim_r+0x94>)
  4017f0:	460c      	mov	r4, r1
  4017f2:	4606      	mov	r6, r0
  4017f4:	f000 fc48 	bl	402088 <__malloc_lock>
  4017f8:	68bb      	ldr	r3, [r7, #8]
  4017fa:	685d      	ldr	r5, [r3, #4]
  4017fc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  401800:	310f      	adds	r1, #15
  401802:	f025 0503 	bic.w	r5, r5, #3
  401806:	4429      	add	r1, r5
  401808:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40180c:	f021 010f 	bic.w	r1, r1, #15
  401810:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401814:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401818:	db07      	blt.n	40182a <_malloc_trim_r+0x3e>
  40181a:	2100      	movs	r1, #0
  40181c:	4630      	mov	r0, r6
  40181e:	f000 fc3f 	bl	4020a0 <_sbrk_r>
  401822:	68bb      	ldr	r3, [r7, #8]
  401824:	442b      	add	r3, r5
  401826:	4298      	cmp	r0, r3
  401828:	d004      	beq.n	401834 <_malloc_trim_r+0x48>
  40182a:	4630      	mov	r0, r6
  40182c:	f000 fc32 	bl	402094 <__malloc_unlock>
  401830:	2000      	movs	r0, #0
  401832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401834:	4261      	negs	r1, r4
  401836:	4630      	mov	r0, r6
  401838:	f000 fc32 	bl	4020a0 <_sbrk_r>
  40183c:	3001      	adds	r0, #1
  40183e:	d00d      	beq.n	40185c <_malloc_trim_r+0x70>
  401840:	4b10      	ldr	r3, [pc, #64]	; (401884 <_malloc_trim_r+0x98>)
  401842:	68ba      	ldr	r2, [r7, #8]
  401844:	6819      	ldr	r1, [r3, #0]
  401846:	1b2d      	subs	r5, r5, r4
  401848:	f045 0501 	orr.w	r5, r5, #1
  40184c:	4630      	mov	r0, r6
  40184e:	1b09      	subs	r1, r1, r4
  401850:	6055      	str	r5, [r2, #4]
  401852:	6019      	str	r1, [r3, #0]
  401854:	f000 fc1e 	bl	402094 <__malloc_unlock>
  401858:	2001      	movs	r0, #1
  40185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40185c:	2100      	movs	r1, #0
  40185e:	4630      	mov	r0, r6
  401860:	f000 fc1e 	bl	4020a0 <_sbrk_r>
  401864:	68ba      	ldr	r2, [r7, #8]
  401866:	1a83      	subs	r3, r0, r2
  401868:	2b0f      	cmp	r3, #15
  40186a:	ddde      	ble.n	40182a <_malloc_trim_r+0x3e>
  40186c:	4c06      	ldr	r4, [pc, #24]	; (401888 <_malloc_trim_r+0x9c>)
  40186e:	4905      	ldr	r1, [pc, #20]	; (401884 <_malloc_trim_r+0x98>)
  401870:	6824      	ldr	r4, [r4, #0]
  401872:	f043 0301 	orr.w	r3, r3, #1
  401876:	1b00      	subs	r0, r0, r4
  401878:	6053      	str	r3, [r2, #4]
  40187a:	6008      	str	r0, [r1, #0]
  40187c:	e7d5      	b.n	40182a <_malloc_trim_r+0x3e>
  40187e:	bf00      	nop
  401880:	2000043c 	.word	0x2000043c
  401884:	2000a52c 	.word	0x2000a52c
  401888:	20000844 	.word	0x20000844

0040188c <_free_r>:
  40188c:	2900      	cmp	r1, #0
  40188e:	d044      	beq.n	40191a <_free_r+0x8e>
  401890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401894:	460d      	mov	r5, r1
  401896:	4680      	mov	r8, r0
  401898:	f000 fbf6 	bl	402088 <__malloc_lock>
  40189c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4018a0:	4969      	ldr	r1, [pc, #420]	; (401a48 <_free_r+0x1bc>)
  4018a2:	f027 0301 	bic.w	r3, r7, #1
  4018a6:	f1a5 0408 	sub.w	r4, r5, #8
  4018aa:	18e2      	adds	r2, r4, r3
  4018ac:	688e      	ldr	r6, [r1, #8]
  4018ae:	6850      	ldr	r0, [r2, #4]
  4018b0:	42b2      	cmp	r2, r6
  4018b2:	f020 0003 	bic.w	r0, r0, #3
  4018b6:	d05e      	beq.n	401976 <_free_r+0xea>
  4018b8:	07fe      	lsls	r6, r7, #31
  4018ba:	6050      	str	r0, [r2, #4]
  4018bc:	d40b      	bmi.n	4018d6 <_free_r+0x4a>
  4018be:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4018c2:	1be4      	subs	r4, r4, r7
  4018c4:	f101 0e08 	add.w	lr, r1, #8
  4018c8:	68a5      	ldr	r5, [r4, #8]
  4018ca:	4575      	cmp	r5, lr
  4018cc:	443b      	add	r3, r7
  4018ce:	d06d      	beq.n	4019ac <_free_r+0x120>
  4018d0:	68e7      	ldr	r7, [r4, #12]
  4018d2:	60ef      	str	r7, [r5, #12]
  4018d4:	60bd      	str	r5, [r7, #8]
  4018d6:	1815      	adds	r5, r2, r0
  4018d8:	686d      	ldr	r5, [r5, #4]
  4018da:	07ed      	lsls	r5, r5, #31
  4018dc:	d53e      	bpl.n	40195c <_free_r+0xd0>
  4018de:	f043 0201 	orr.w	r2, r3, #1
  4018e2:	6062      	str	r2, [r4, #4]
  4018e4:	50e3      	str	r3, [r4, r3]
  4018e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4018ea:	d217      	bcs.n	40191c <_free_r+0x90>
  4018ec:	08db      	lsrs	r3, r3, #3
  4018ee:	1c58      	adds	r0, r3, #1
  4018f0:	109a      	asrs	r2, r3, #2
  4018f2:	684d      	ldr	r5, [r1, #4]
  4018f4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4018f8:	60a7      	str	r7, [r4, #8]
  4018fa:	2301      	movs	r3, #1
  4018fc:	4093      	lsls	r3, r2
  4018fe:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  401902:	432b      	orrs	r3, r5
  401904:	3a08      	subs	r2, #8
  401906:	60e2      	str	r2, [r4, #12]
  401908:	604b      	str	r3, [r1, #4]
  40190a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40190e:	60fc      	str	r4, [r7, #12]
  401910:	4640      	mov	r0, r8
  401912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401916:	f000 bbbd 	b.w	402094 <__malloc_unlock>
  40191a:	4770      	bx	lr
  40191c:	0a5a      	lsrs	r2, r3, #9
  40191e:	2a04      	cmp	r2, #4
  401920:	d852      	bhi.n	4019c8 <_free_r+0x13c>
  401922:	099a      	lsrs	r2, r3, #6
  401924:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401928:	00ff      	lsls	r7, r7, #3
  40192a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40192e:	19c8      	adds	r0, r1, r7
  401930:	59ca      	ldr	r2, [r1, r7]
  401932:	3808      	subs	r0, #8
  401934:	4290      	cmp	r0, r2
  401936:	d04f      	beq.n	4019d8 <_free_r+0x14c>
  401938:	6851      	ldr	r1, [r2, #4]
  40193a:	f021 0103 	bic.w	r1, r1, #3
  40193e:	428b      	cmp	r3, r1
  401940:	d232      	bcs.n	4019a8 <_free_r+0x11c>
  401942:	6892      	ldr	r2, [r2, #8]
  401944:	4290      	cmp	r0, r2
  401946:	d1f7      	bne.n	401938 <_free_r+0xac>
  401948:	68c3      	ldr	r3, [r0, #12]
  40194a:	60a0      	str	r0, [r4, #8]
  40194c:	60e3      	str	r3, [r4, #12]
  40194e:	609c      	str	r4, [r3, #8]
  401950:	60c4      	str	r4, [r0, #12]
  401952:	4640      	mov	r0, r8
  401954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401958:	f000 bb9c 	b.w	402094 <__malloc_unlock>
  40195c:	6895      	ldr	r5, [r2, #8]
  40195e:	4f3b      	ldr	r7, [pc, #236]	; (401a4c <_free_r+0x1c0>)
  401960:	42bd      	cmp	r5, r7
  401962:	4403      	add	r3, r0
  401964:	d040      	beq.n	4019e8 <_free_r+0x15c>
  401966:	68d0      	ldr	r0, [r2, #12]
  401968:	60e8      	str	r0, [r5, #12]
  40196a:	f043 0201 	orr.w	r2, r3, #1
  40196e:	6085      	str	r5, [r0, #8]
  401970:	6062      	str	r2, [r4, #4]
  401972:	50e3      	str	r3, [r4, r3]
  401974:	e7b7      	b.n	4018e6 <_free_r+0x5a>
  401976:	07ff      	lsls	r7, r7, #31
  401978:	4403      	add	r3, r0
  40197a:	d407      	bmi.n	40198c <_free_r+0x100>
  40197c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401980:	1aa4      	subs	r4, r4, r2
  401982:	4413      	add	r3, r2
  401984:	68a0      	ldr	r0, [r4, #8]
  401986:	68e2      	ldr	r2, [r4, #12]
  401988:	60c2      	str	r2, [r0, #12]
  40198a:	6090      	str	r0, [r2, #8]
  40198c:	4a30      	ldr	r2, [pc, #192]	; (401a50 <_free_r+0x1c4>)
  40198e:	6812      	ldr	r2, [r2, #0]
  401990:	f043 0001 	orr.w	r0, r3, #1
  401994:	4293      	cmp	r3, r2
  401996:	6060      	str	r0, [r4, #4]
  401998:	608c      	str	r4, [r1, #8]
  40199a:	d3b9      	bcc.n	401910 <_free_r+0x84>
  40199c:	4b2d      	ldr	r3, [pc, #180]	; (401a54 <_free_r+0x1c8>)
  40199e:	4640      	mov	r0, r8
  4019a0:	6819      	ldr	r1, [r3, #0]
  4019a2:	f7ff ff23 	bl	4017ec <_malloc_trim_r>
  4019a6:	e7b3      	b.n	401910 <_free_r+0x84>
  4019a8:	4610      	mov	r0, r2
  4019aa:	e7cd      	b.n	401948 <_free_r+0xbc>
  4019ac:	1811      	adds	r1, r2, r0
  4019ae:	6849      	ldr	r1, [r1, #4]
  4019b0:	07c9      	lsls	r1, r1, #31
  4019b2:	d444      	bmi.n	401a3e <_free_r+0x1b2>
  4019b4:	6891      	ldr	r1, [r2, #8]
  4019b6:	68d2      	ldr	r2, [r2, #12]
  4019b8:	60ca      	str	r2, [r1, #12]
  4019ba:	4403      	add	r3, r0
  4019bc:	f043 0001 	orr.w	r0, r3, #1
  4019c0:	6091      	str	r1, [r2, #8]
  4019c2:	6060      	str	r0, [r4, #4]
  4019c4:	50e3      	str	r3, [r4, r3]
  4019c6:	e7a3      	b.n	401910 <_free_r+0x84>
  4019c8:	2a14      	cmp	r2, #20
  4019ca:	d816      	bhi.n	4019fa <_free_r+0x16e>
  4019cc:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4019d0:	00ff      	lsls	r7, r7, #3
  4019d2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4019d6:	e7aa      	b.n	40192e <_free_r+0xa2>
  4019d8:	10aa      	asrs	r2, r5, #2
  4019da:	2301      	movs	r3, #1
  4019dc:	684d      	ldr	r5, [r1, #4]
  4019de:	4093      	lsls	r3, r2
  4019e0:	432b      	orrs	r3, r5
  4019e2:	604b      	str	r3, [r1, #4]
  4019e4:	4603      	mov	r3, r0
  4019e6:	e7b0      	b.n	40194a <_free_r+0xbe>
  4019e8:	f043 0201 	orr.w	r2, r3, #1
  4019ec:	614c      	str	r4, [r1, #20]
  4019ee:	610c      	str	r4, [r1, #16]
  4019f0:	60e5      	str	r5, [r4, #12]
  4019f2:	60a5      	str	r5, [r4, #8]
  4019f4:	6062      	str	r2, [r4, #4]
  4019f6:	50e3      	str	r3, [r4, r3]
  4019f8:	e78a      	b.n	401910 <_free_r+0x84>
  4019fa:	2a54      	cmp	r2, #84	; 0x54
  4019fc:	d806      	bhi.n	401a0c <_free_r+0x180>
  4019fe:	0b1a      	lsrs	r2, r3, #12
  401a00:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401a04:	00ff      	lsls	r7, r7, #3
  401a06:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401a0a:	e790      	b.n	40192e <_free_r+0xa2>
  401a0c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401a10:	d806      	bhi.n	401a20 <_free_r+0x194>
  401a12:	0bda      	lsrs	r2, r3, #15
  401a14:	f102 0778 	add.w	r7, r2, #120	; 0x78
  401a18:	00ff      	lsls	r7, r7, #3
  401a1a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401a1e:	e786      	b.n	40192e <_free_r+0xa2>
  401a20:	f240 5054 	movw	r0, #1364	; 0x554
  401a24:	4282      	cmp	r2, r0
  401a26:	d806      	bhi.n	401a36 <_free_r+0x1aa>
  401a28:	0c9a      	lsrs	r2, r3, #18
  401a2a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401a2e:	00ff      	lsls	r7, r7, #3
  401a30:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401a34:	e77b      	b.n	40192e <_free_r+0xa2>
  401a36:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  401a3a:	257e      	movs	r5, #126	; 0x7e
  401a3c:	e777      	b.n	40192e <_free_r+0xa2>
  401a3e:	f043 0101 	orr.w	r1, r3, #1
  401a42:	6061      	str	r1, [r4, #4]
  401a44:	6013      	str	r3, [r2, #0]
  401a46:	e763      	b.n	401910 <_free_r+0x84>
  401a48:	2000043c 	.word	0x2000043c
  401a4c:	20000444 	.word	0x20000444
  401a50:	20000848 	.word	0x20000848
  401a54:	2000a55c 	.word	0x2000a55c

00401a58 <_fwalk_reent>:
  401a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401a5c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401a60:	d01f      	beq.n	401aa2 <_fwalk_reent+0x4a>
  401a62:	4688      	mov	r8, r1
  401a64:	4606      	mov	r6, r0
  401a66:	f04f 0900 	mov.w	r9, #0
  401a6a:	687d      	ldr	r5, [r7, #4]
  401a6c:	68bc      	ldr	r4, [r7, #8]
  401a6e:	3d01      	subs	r5, #1
  401a70:	d411      	bmi.n	401a96 <_fwalk_reent+0x3e>
  401a72:	89a3      	ldrh	r3, [r4, #12]
  401a74:	2b01      	cmp	r3, #1
  401a76:	f105 35ff 	add.w	r5, r5, #4294967295
  401a7a:	d908      	bls.n	401a8e <_fwalk_reent+0x36>
  401a7c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401a80:	3301      	adds	r3, #1
  401a82:	4621      	mov	r1, r4
  401a84:	4630      	mov	r0, r6
  401a86:	d002      	beq.n	401a8e <_fwalk_reent+0x36>
  401a88:	47c0      	blx	r8
  401a8a:	ea49 0900 	orr.w	r9, r9, r0
  401a8e:	1c6b      	adds	r3, r5, #1
  401a90:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401a94:	d1ed      	bne.n	401a72 <_fwalk_reent+0x1a>
  401a96:	683f      	ldr	r7, [r7, #0]
  401a98:	2f00      	cmp	r7, #0
  401a9a:	d1e6      	bne.n	401a6a <_fwalk_reent+0x12>
  401a9c:	4648      	mov	r0, r9
  401a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401aa2:	46b9      	mov	r9, r7
  401aa4:	4648      	mov	r0, r9
  401aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401aaa:	bf00      	nop

00401aac <__retarget_lock_init_recursive>:
  401aac:	4770      	bx	lr
  401aae:	bf00      	nop

00401ab0 <__retarget_lock_close_recursive>:
  401ab0:	4770      	bx	lr
  401ab2:	bf00      	nop

00401ab4 <__retarget_lock_acquire_recursive>:
  401ab4:	4770      	bx	lr
  401ab6:	bf00      	nop

00401ab8 <__retarget_lock_release_recursive>:
  401ab8:	4770      	bx	lr
  401aba:	bf00      	nop

00401abc <__swhatbuf_r>:
  401abc:	b570      	push	{r4, r5, r6, lr}
  401abe:	460c      	mov	r4, r1
  401ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401ac4:	2900      	cmp	r1, #0
  401ac6:	b090      	sub	sp, #64	; 0x40
  401ac8:	4615      	mov	r5, r2
  401aca:	461e      	mov	r6, r3
  401acc:	db14      	blt.n	401af8 <__swhatbuf_r+0x3c>
  401ace:	aa01      	add	r2, sp, #4
  401ad0:	f000 fc28 	bl	402324 <_fstat_r>
  401ad4:	2800      	cmp	r0, #0
  401ad6:	db0f      	blt.n	401af8 <__swhatbuf_r+0x3c>
  401ad8:	9a02      	ldr	r2, [sp, #8]
  401ada:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401ade:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401ae2:	fab2 f282 	clz	r2, r2
  401ae6:	0952      	lsrs	r2, r2, #5
  401ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401aec:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401af0:	6032      	str	r2, [r6, #0]
  401af2:	602b      	str	r3, [r5, #0]
  401af4:	b010      	add	sp, #64	; 0x40
  401af6:	bd70      	pop	{r4, r5, r6, pc}
  401af8:	89a2      	ldrh	r2, [r4, #12]
  401afa:	2300      	movs	r3, #0
  401afc:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  401b00:	6033      	str	r3, [r6, #0]
  401b02:	d004      	beq.n	401b0e <__swhatbuf_r+0x52>
  401b04:	2240      	movs	r2, #64	; 0x40
  401b06:	4618      	mov	r0, r3
  401b08:	602a      	str	r2, [r5, #0]
  401b0a:	b010      	add	sp, #64	; 0x40
  401b0c:	bd70      	pop	{r4, r5, r6, pc}
  401b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b12:	602b      	str	r3, [r5, #0]
  401b14:	b010      	add	sp, #64	; 0x40
  401b16:	bd70      	pop	{r4, r5, r6, pc}

00401b18 <malloc>:
  401b18:	4b02      	ldr	r3, [pc, #8]	; (401b24 <malloc+0xc>)
  401b1a:	4601      	mov	r1, r0
  401b1c:	6818      	ldr	r0, [r3, #0]
  401b1e:	f000 b803 	b.w	401b28 <_malloc_r>
  401b22:	bf00      	nop
  401b24:	20000008 	.word	0x20000008

00401b28 <_malloc_r>:
  401b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b2c:	f101 060b 	add.w	r6, r1, #11
  401b30:	2e16      	cmp	r6, #22
  401b32:	b083      	sub	sp, #12
  401b34:	4605      	mov	r5, r0
  401b36:	f240 809e 	bls.w	401c76 <_malloc_r+0x14e>
  401b3a:	f036 0607 	bics.w	r6, r6, #7
  401b3e:	f100 80bd 	bmi.w	401cbc <_malloc_r+0x194>
  401b42:	42b1      	cmp	r1, r6
  401b44:	f200 80ba 	bhi.w	401cbc <_malloc_r+0x194>
  401b48:	f000 fa9e 	bl	402088 <__malloc_lock>
  401b4c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  401b50:	f0c0 8293 	bcc.w	40207a <_malloc_r+0x552>
  401b54:	0a73      	lsrs	r3, r6, #9
  401b56:	f000 80b8 	beq.w	401cca <_malloc_r+0x1a2>
  401b5a:	2b04      	cmp	r3, #4
  401b5c:	f200 8179 	bhi.w	401e52 <_malloc_r+0x32a>
  401b60:	09b3      	lsrs	r3, r6, #6
  401b62:	f103 0039 	add.w	r0, r3, #57	; 0x39
  401b66:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  401b6a:	00c3      	lsls	r3, r0, #3
  401b6c:	4fbf      	ldr	r7, [pc, #764]	; (401e6c <_malloc_r+0x344>)
  401b6e:	443b      	add	r3, r7
  401b70:	f1a3 0108 	sub.w	r1, r3, #8
  401b74:	685c      	ldr	r4, [r3, #4]
  401b76:	42a1      	cmp	r1, r4
  401b78:	d106      	bne.n	401b88 <_malloc_r+0x60>
  401b7a:	e00c      	b.n	401b96 <_malloc_r+0x6e>
  401b7c:	2a00      	cmp	r2, #0
  401b7e:	f280 80aa 	bge.w	401cd6 <_malloc_r+0x1ae>
  401b82:	68e4      	ldr	r4, [r4, #12]
  401b84:	42a1      	cmp	r1, r4
  401b86:	d006      	beq.n	401b96 <_malloc_r+0x6e>
  401b88:	6863      	ldr	r3, [r4, #4]
  401b8a:	f023 0303 	bic.w	r3, r3, #3
  401b8e:	1b9a      	subs	r2, r3, r6
  401b90:	2a0f      	cmp	r2, #15
  401b92:	ddf3      	ble.n	401b7c <_malloc_r+0x54>
  401b94:	4670      	mov	r0, lr
  401b96:	693c      	ldr	r4, [r7, #16]
  401b98:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 401e80 <_malloc_r+0x358>
  401b9c:	4574      	cmp	r4, lr
  401b9e:	f000 81ab 	beq.w	401ef8 <_malloc_r+0x3d0>
  401ba2:	6863      	ldr	r3, [r4, #4]
  401ba4:	f023 0303 	bic.w	r3, r3, #3
  401ba8:	1b9a      	subs	r2, r3, r6
  401baa:	2a0f      	cmp	r2, #15
  401bac:	f300 8190 	bgt.w	401ed0 <_malloc_r+0x3a8>
  401bb0:	2a00      	cmp	r2, #0
  401bb2:	f8c7 e014 	str.w	lr, [r7, #20]
  401bb6:	f8c7 e010 	str.w	lr, [r7, #16]
  401bba:	f280 809d 	bge.w	401cf8 <_malloc_r+0x1d0>
  401bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401bc2:	f080 8161 	bcs.w	401e88 <_malloc_r+0x360>
  401bc6:	08db      	lsrs	r3, r3, #3
  401bc8:	f103 0c01 	add.w	ip, r3, #1
  401bcc:	1099      	asrs	r1, r3, #2
  401bce:	687a      	ldr	r2, [r7, #4]
  401bd0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  401bd4:	f8c4 8008 	str.w	r8, [r4, #8]
  401bd8:	2301      	movs	r3, #1
  401bda:	408b      	lsls	r3, r1
  401bdc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  401be0:	4313      	orrs	r3, r2
  401be2:	3908      	subs	r1, #8
  401be4:	60e1      	str	r1, [r4, #12]
  401be6:	607b      	str	r3, [r7, #4]
  401be8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  401bec:	f8c8 400c 	str.w	r4, [r8, #12]
  401bf0:	1082      	asrs	r2, r0, #2
  401bf2:	2401      	movs	r4, #1
  401bf4:	4094      	lsls	r4, r2
  401bf6:	429c      	cmp	r4, r3
  401bf8:	f200 808b 	bhi.w	401d12 <_malloc_r+0x1ea>
  401bfc:	421c      	tst	r4, r3
  401bfe:	d106      	bne.n	401c0e <_malloc_r+0xe6>
  401c00:	f020 0003 	bic.w	r0, r0, #3
  401c04:	0064      	lsls	r4, r4, #1
  401c06:	421c      	tst	r4, r3
  401c08:	f100 0004 	add.w	r0, r0, #4
  401c0c:	d0fa      	beq.n	401c04 <_malloc_r+0xdc>
  401c0e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401c12:	46cc      	mov	ip, r9
  401c14:	4680      	mov	r8, r0
  401c16:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401c1a:	459c      	cmp	ip, r3
  401c1c:	d107      	bne.n	401c2e <_malloc_r+0x106>
  401c1e:	e16d      	b.n	401efc <_malloc_r+0x3d4>
  401c20:	2a00      	cmp	r2, #0
  401c22:	f280 817b 	bge.w	401f1c <_malloc_r+0x3f4>
  401c26:	68db      	ldr	r3, [r3, #12]
  401c28:	459c      	cmp	ip, r3
  401c2a:	f000 8167 	beq.w	401efc <_malloc_r+0x3d4>
  401c2e:	6859      	ldr	r1, [r3, #4]
  401c30:	f021 0103 	bic.w	r1, r1, #3
  401c34:	1b8a      	subs	r2, r1, r6
  401c36:	2a0f      	cmp	r2, #15
  401c38:	ddf2      	ble.n	401c20 <_malloc_r+0xf8>
  401c3a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401c3e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  401c42:	9300      	str	r3, [sp, #0]
  401c44:	199c      	adds	r4, r3, r6
  401c46:	4628      	mov	r0, r5
  401c48:	f046 0601 	orr.w	r6, r6, #1
  401c4c:	f042 0501 	orr.w	r5, r2, #1
  401c50:	605e      	str	r6, [r3, #4]
  401c52:	f8c8 c00c 	str.w	ip, [r8, #12]
  401c56:	f8cc 8008 	str.w	r8, [ip, #8]
  401c5a:	617c      	str	r4, [r7, #20]
  401c5c:	613c      	str	r4, [r7, #16]
  401c5e:	f8c4 e00c 	str.w	lr, [r4, #12]
  401c62:	f8c4 e008 	str.w	lr, [r4, #8]
  401c66:	6065      	str	r5, [r4, #4]
  401c68:	505a      	str	r2, [r3, r1]
  401c6a:	f000 fa13 	bl	402094 <__malloc_unlock>
  401c6e:	9b00      	ldr	r3, [sp, #0]
  401c70:	f103 0408 	add.w	r4, r3, #8
  401c74:	e01e      	b.n	401cb4 <_malloc_r+0x18c>
  401c76:	2910      	cmp	r1, #16
  401c78:	d820      	bhi.n	401cbc <_malloc_r+0x194>
  401c7a:	f000 fa05 	bl	402088 <__malloc_lock>
  401c7e:	2610      	movs	r6, #16
  401c80:	2318      	movs	r3, #24
  401c82:	2002      	movs	r0, #2
  401c84:	4f79      	ldr	r7, [pc, #484]	; (401e6c <_malloc_r+0x344>)
  401c86:	443b      	add	r3, r7
  401c88:	f1a3 0208 	sub.w	r2, r3, #8
  401c8c:	685c      	ldr	r4, [r3, #4]
  401c8e:	4294      	cmp	r4, r2
  401c90:	f000 813d 	beq.w	401f0e <_malloc_r+0x3e6>
  401c94:	6863      	ldr	r3, [r4, #4]
  401c96:	68e1      	ldr	r1, [r4, #12]
  401c98:	68a6      	ldr	r6, [r4, #8]
  401c9a:	f023 0303 	bic.w	r3, r3, #3
  401c9e:	4423      	add	r3, r4
  401ca0:	4628      	mov	r0, r5
  401ca2:	685a      	ldr	r2, [r3, #4]
  401ca4:	60f1      	str	r1, [r6, #12]
  401ca6:	f042 0201 	orr.w	r2, r2, #1
  401caa:	608e      	str	r6, [r1, #8]
  401cac:	605a      	str	r2, [r3, #4]
  401cae:	f000 f9f1 	bl	402094 <__malloc_unlock>
  401cb2:	3408      	adds	r4, #8
  401cb4:	4620      	mov	r0, r4
  401cb6:	b003      	add	sp, #12
  401cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cbc:	2400      	movs	r4, #0
  401cbe:	230c      	movs	r3, #12
  401cc0:	4620      	mov	r0, r4
  401cc2:	602b      	str	r3, [r5, #0]
  401cc4:	b003      	add	sp, #12
  401cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cca:	2040      	movs	r0, #64	; 0x40
  401ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
  401cd0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  401cd4:	e74a      	b.n	401b6c <_malloc_r+0x44>
  401cd6:	4423      	add	r3, r4
  401cd8:	68e1      	ldr	r1, [r4, #12]
  401cda:	685a      	ldr	r2, [r3, #4]
  401cdc:	68a6      	ldr	r6, [r4, #8]
  401cde:	f042 0201 	orr.w	r2, r2, #1
  401ce2:	60f1      	str	r1, [r6, #12]
  401ce4:	4628      	mov	r0, r5
  401ce6:	608e      	str	r6, [r1, #8]
  401ce8:	605a      	str	r2, [r3, #4]
  401cea:	f000 f9d3 	bl	402094 <__malloc_unlock>
  401cee:	3408      	adds	r4, #8
  401cf0:	4620      	mov	r0, r4
  401cf2:	b003      	add	sp, #12
  401cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401cf8:	4423      	add	r3, r4
  401cfa:	4628      	mov	r0, r5
  401cfc:	685a      	ldr	r2, [r3, #4]
  401cfe:	f042 0201 	orr.w	r2, r2, #1
  401d02:	605a      	str	r2, [r3, #4]
  401d04:	f000 f9c6 	bl	402094 <__malloc_unlock>
  401d08:	3408      	adds	r4, #8
  401d0a:	4620      	mov	r0, r4
  401d0c:	b003      	add	sp, #12
  401d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d12:	68bc      	ldr	r4, [r7, #8]
  401d14:	6863      	ldr	r3, [r4, #4]
  401d16:	f023 0803 	bic.w	r8, r3, #3
  401d1a:	45b0      	cmp	r8, r6
  401d1c:	d304      	bcc.n	401d28 <_malloc_r+0x200>
  401d1e:	eba8 0306 	sub.w	r3, r8, r6
  401d22:	2b0f      	cmp	r3, #15
  401d24:	f300 8085 	bgt.w	401e32 <_malloc_r+0x30a>
  401d28:	f8df 9158 	ldr.w	r9, [pc, #344]	; 401e84 <_malloc_r+0x35c>
  401d2c:	4b50      	ldr	r3, [pc, #320]	; (401e70 <_malloc_r+0x348>)
  401d2e:	f8d9 2000 	ldr.w	r2, [r9]
  401d32:	681b      	ldr	r3, [r3, #0]
  401d34:	3201      	adds	r2, #1
  401d36:	4433      	add	r3, r6
  401d38:	eb04 0a08 	add.w	sl, r4, r8
  401d3c:	f000 8155 	beq.w	401fea <_malloc_r+0x4c2>
  401d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  401d44:	330f      	adds	r3, #15
  401d46:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  401d4a:	f02b 0b0f 	bic.w	fp, fp, #15
  401d4e:	4659      	mov	r1, fp
  401d50:	4628      	mov	r0, r5
  401d52:	f000 f9a5 	bl	4020a0 <_sbrk_r>
  401d56:	1c41      	adds	r1, r0, #1
  401d58:	4602      	mov	r2, r0
  401d5a:	f000 80fc 	beq.w	401f56 <_malloc_r+0x42e>
  401d5e:	4582      	cmp	sl, r0
  401d60:	f200 80f7 	bhi.w	401f52 <_malloc_r+0x42a>
  401d64:	4b43      	ldr	r3, [pc, #268]	; (401e74 <_malloc_r+0x34c>)
  401d66:	6819      	ldr	r1, [r3, #0]
  401d68:	4459      	add	r1, fp
  401d6a:	6019      	str	r1, [r3, #0]
  401d6c:	f000 814d 	beq.w	40200a <_malloc_r+0x4e2>
  401d70:	f8d9 0000 	ldr.w	r0, [r9]
  401d74:	3001      	adds	r0, #1
  401d76:	bf1b      	ittet	ne
  401d78:	eba2 0a0a 	subne.w	sl, r2, sl
  401d7c:	4451      	addne	r1, sl
  401d7e:	f8c9 2000 	streq.w	r2, [r9]
  401d82:	6019      	strne	r1, [r3, #0]
  401d84:	f012 0107 	ands.w	r1, r2, #7
  401d88:	f000 8115 	beq.w	401fb6 <_malloc_r+0x48e>
  401d8c:	f1c1 0008 	rsb	r0, r1, #8
  401d90:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401d94:	4402      	add	r2, r0
  401d96:	3108      	adds	r1, #8
  401d98:	eb02 090b 	add.w	r9, r2, fp
  401d9c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  401da0:	eba1 0909 	sub.w	r9, r1, r9
  401da4:	4649      	mov	r1, r9
  401da6:	4628      	mov	r0, r5
  401da8:	9301      	str	r3, [sp, #4]
  401daa:	9200      	str	r2, [sp, #0]
  401dac:	f000 f978 	bl	4020a0 <_sbrk_r>
  401db0:	1c43      	adds	r3, r0, #1
  401db2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  401db6:	f000 8143 	beq.w	402040 <_malloc_r+0x518>
  401dba:	1a80      	subs	r0, r0, r2
  401dbc:	4448      	add	r0, r9
  401dbe:	f040 0001 	orr.w	r0, r0, #1
  401dc2:	6819      	ldr	r1, [r3, #0]
  401dc4:	60ba      	str	r2, [r7, #8]
  401dc6:	4449      	add	r1, r9
  401dc8:	42bc      	cmp	r4, r7
  401dca:	6050      	str	r0, [r2, #4]
  401dcc:	6019      	str	r1, [r3, #0]
  401dce:	d017      	beq.n	401e00 <_malloc_r+0x2d8>
  401dd0:	f1b8 0f0f 	cmp.w	r8, #15
  401dd4:	f240 80fb 	bls.w	401fce <_malloc_r+0x4a6>
  401dd8:	6860      	ldr	r0, [r4, #4]
  401dda:	f1a8 020c 	sub.w	r2, r8, #12
  401dde:	f022 0207 	bic.w	r2, r2, #7
  401de2:	eb04 0e02 	add.w	lr, r4, r2
  401de6:	f000 0001 	and.w	r0, r0, #1
  401dea:	f04f 0c05 	mov.w	ip, #5
  401dee:	4310      	orrs	r0, r2
  401df0:	2a0f      	cmp	r2, #15
  401df2:	6060      	str	r0, [r4, #4]
  401df4:	f8ce c004 	str.w	ip, [lr, #4]
  401df8:	f8ce c008 	str.w	ip, [lr, #8]
  401dfc:	f200 8117 	bhi.w	40202e <_malloc_r+0x506>
  401e00:	4b1d      	ldr	r3, [pc, #116]	; (401e78 <_malloc_r+0x350>)
  401e02:	68bc      	ldr	r4, [r7, #8]
  401e04:	681a      	ldr	r2, [r3, #0]
  401e06:	4291      	cmp	r1, r2
  401e08:	bf88      	it	hi
  401e0a:	6019      	strhi	r1, [r3, #0]
  401e0c:	4b1b      	ldr	r3, [pc, #108]	; (401e7c <_malloc_r+0x354>)
  401e0e:	681a      	ldr	r2, [r3, #0]
  401e10:	4291      	cmp	r1, r2
  401e12:	6862      	ldr	r2, [r4, #4]
  401e14:	bf88      	it	hi
  401e16:	6019      	strhi	r1, [r3, #0]
  401e18:	f022 0203 	bic.w	r2, r2, #3
  401e1c:	4296      	cmp	r6, r2
  401e1e:	eba2 0306 	sub.w	r3, r2, r6
  401e22:	d801      	bhi.n	401e28 <_malloc_r+0x300>
  401e24:	2b0f      	cmp	r3, #15
  401e26:	dc04      	bgt.n	401e32 <_malloc_r+0x30a>
  401e28:	4628      	mov	r0, r5
  401e2a:	f000 f933 	bl	402094 <__malloc_unlock>
  401e2e:	2400      	movs	r4, #0
  401e30:	e740      	b.n	401cb4 <_malloc_r+0x18c>
  401e32:	19a2      	adds	r2, r4, r6
  401e34:	f043 0301 	orr.w	r3, r3, #1
  401e38:	f046 0601 	orr.w	r6, r6, #1
  401e3c:	6066      	str	r6, [r4, #4]
  401e3e:	4628      	mov	r0, r5
  401e40:	60ba      	str	r2, [r7, #8]
  401e42:	6053      	str	r3, [r2, #4]
  401e44:	f000 f926 	bl	402094 <__malloc_unlock>
  401e48:	3408      	adds	r4, #8
  401e4a:	4620      	mov	r0, r4
  401e4c:	b003      	add	sp, #12
  401e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e52:	2b14      	cmp	r3, #20
  401e54:	d971      	bls.n	401f3a <_malloc_r+0x412>
  401e56:	2b54      	cmp	r3, #84	; 0x54
  401e58:	f200 80a3 	bhi.w	401fa2 <_malloc_r+0x47a>
  401e5c:	0b33      	lsrs	r3, r6, #12
  401e5e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  401e62:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  401e66:	00c3      	lsls	r3, r0, #3
  401e68:	e680      	b.n	401b6c <_malloc_r+0x44>
  401e6a:	bf00      	nop
  401e6c:	2000043c 	.word	0x2000043c
  401e70:	2000a55c 	.word	0x2000a55c
  401e74:	2000a52c 	.word	0x2000a52c
  401e78:	2000a554 	.word	0x2000a554
  401e7c:	2000a558 	.word	0x2000a558
  401e80:	20000444 	.word	0x20000444
  401e84:	20000844 	.word	0x20000844
  401e88:	0a5a      	lsrs	r2, r3, #9
  401e8a:	2a04      	cmp	r2, #4
  401e8c:	d95b      	bls.n	401f46 <_malloc_r+0x41e>
  401e8e:	2a14      	cmp	r2, #20
  401e90:	f200 80ae 	bhi.w	401ff0 <_malloc_r+0x4c8>
  401e94:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401e98:	00c9      	lsls	r1, r1, #3
  401e9a:	325b      	adds	r2, #91	; 0x5b
  401e9c:	eb07 0c01 	add.w	ip, r7, r1
  401ea0:	5879      	ldr	r1, [r7, r1]
  401ea2:	f1ac 0c08 	sub.w	ip, ip, #8
  401ea6:	458c      	cmp	ip, r1
  401ea8:	f000 8088 	beq.w	401fbc <_malloc_r+0x494>
  401eac:	684a      	ldr	r2, [r1, #4]
  401eae:	f022 0203 	bic.w	r2, r2, #3
  401eb2:	4293      	cmp	r3, r2
  401eb4:	d273      	bcs.n	401f9e <_malloc_r+0x476>
  401eb6:	6889      	ldr	r1, [r1, #8]
  401eb8:	458c      	cmp	ip, r1
  401eba:	d1f7      	bne.n	401eac <_malloc_r+0x384>
  401ebc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  401ec0:	687b      	ldr	r3, [r7, #4]
  401ec2:	60e2      	str	r2, [r4, #12]
  401ec4:	f8c4 c008 	str.w	ip, [r4, #8]
  401ec8:	6094      	str	r4, [r2, #8]
  401eca:	f8cc 400c 	str.w	r4, [ip, #12]
  401ece:	e68f      	b.n	401bf0 <_malloc_r+0xc8>
  401ed0:	19a1      	adds	r1, r4, r6
  401ed2:	f046 0c01 	orr.w	ip, r6, #1
  401ed6:	f042 0601 	orr.w	r6, r2, #1
  401eda:	f8c4 c004 	str.w	ip, [r4, #4]
  401ede:	4628      	mov	r0, r5
  401ee0:	6179      	str	r1, [r7, #20]
  401ee2:	6139      	str	r1, [r7, #16]
  401ee4:	f8c1 e00c 	str.w	lr, [r1, #12]
  401ee8:	f8c1 e008 	str.w	lr, [r1, #8]
  401eec:	604e      	str	r6, [r1, #4]
  401eee:	50e2      	str	r2, [r4, r3]
  401ef0:	f000 f8d0 	bl	402094 <__malloc_unlock>
  401ef4:	3408      	adds	r4, #8
  401ef6:	e6dd      	b.n	401cb4 <_malloc_r+0x18c>
  401ef8:	687b      	ldr	r3, [r7, #4]
  401efa:	e679      	b.n	401bf0 <_malloc_r+0xc8>
  401efc:	f108 0801 	add.w	r8, r8, #1
  401f00:	f018 0f03 	tst.w	r8, #3
  401f04:	f10c 0c08 	add.w	ip, ip, #8
  401f08:	f47f ae85 	bne.w	401c16 <_malloc_r+0xee>
  401f0c:	e02d      	b.n	401f6a <_malloc_r+0x442>
  401f0e:	68dc      	ldr	r4, [r3, #12]
  401f10:	42a3      	cmp	r3, r4
  401f12:	bf08      	it	eq
  401f14:	3002      	addeq	r0, #2
  401f16:	f43f ae3e 	beq.w	401b96 <_malloc_r+0x6e>
  401f1a:	e6bb      	b.n	401c94 <_malloc_r+0x16c>
  401f1c:	4419      	add	r1, r3
  401f1e:	461c      	mov	r4, r3
  401f20:	684a      	ldr	r2, [r1, #4]
  401f22:	68db      	ldr	r3, [r3, #12]
  401f24:	f854 6f08 	ldr.w	r6, [r4, #8]!
  401f28:	f042 0201 	orr.w	r2, r2, #1
  401f2c:	604a      	str	r2, [r1, #4]
  401f2e:	4628      	mov	r0, r5
  401f30:	60f3      	str	r3, [r6, #12]
  401f32:	609e      	str	r6, [r3, #8]
  401f34:	f000 f8ae 	bl	402094 <__malloc_unlock>
  401f38:	e6bc      	b.n	401cb4 <_malloc_r+0x18c>
  401f3a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  401f3e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  401f42:	00c3      	lsls	r3, r0, #3
  401f44:	e612      	b.n	401b6c <_malloc_r+0x44>
  401f46:	099a      	lsrs	r2, r3, #6
  401f48:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401f4c:	00c9      	lsls	r1, r1, #3
  401f4e:	3238      	adds	r2, #56	; 0x38
  401f50:	e7a4      	b.n	401e9c <_malloc_r+0x374>
  401f52:	42bc      	cmp	r4, r7
  401f54:	d054      	beq.n	402000 <_malloc_r+0x4d8>
  401f56:	68bc      	ldr	r4, [r7, #8]
  401f58:	6862      	ldr	r2, [r4, #4]
  401f5a:	f022 0203 	bic.w	r2, r2, #3
  401f5e:	e75d      	b.n	401e1c <_malloc_r+0x2f4>
  401f60:	f859 3908 	ldr.w	r3, [r9], #-8
  401f64:	4599      	cmp	r9, r3
  401f66:	f040 8086 	bne.w	402076 <_malloc_r+0x54e>
  401f6a:	f010 0f03 	tst.w	r0, #3
  401f6e:	f100 30ff 	add.w	r0, r0, #4294967295
  401f72:	d1f5      	bne.n	401f60 <_malloc_r+0x438>
  401f74:	687b      	ldr	r3, [r7, #4]
  401f76:	ea23 0304 	bic.w	r3, r3, r4
  401f7a:	607b      	str	r3, [r7, #4]
  401f7c:	0064      	lsls	r4, r4, #1
  401f7e:	429c      	cmp	r4, r3
  401f80:	f63f aec7 	bhi.w	401d12 <_malloc_r+0x1ea>
  401f84:	2c00      	cmp	r4, #0
  401f86:	f43f aec4 	beq.w	401d12 <_malloc_r+0x1ea>
  401f8a:	421c      	tst	r4, r3
  401f8c:	4640      	mov	r0, r8
  401f8e:	f47f ae3e 	bne.w	401c0e <_malloc_r+0xe6>
  401f92:	0064      	lsls	r4, r4, #1
  401f94:	421c      	tst	r4, r3
  401f96:	f100 0004 	add.w	r0, r0, #4
  401f9a:	d0fa      	beq.n	401f92 <_malloc_r+0x46a>
  401f9c:	e637      	b.n	401c0e <_malloc_r+0xe6>
  401f9e:	468c      	mov	ip, r1
  401fa0:	e78c      	b.n	401ebc <_malloc_r+0x394>
  401fa2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401fa6:	d815      	bhi.n	401fd4 <_malloc_r+0x4ac>
  401fa8:	0bf3      	lsrs	r3, r6, #15
  401faa:	f103 0078 	add.w	r0, r3, #120	; 0x78
  401fae:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  401fb2:	00c3      	lsls	r3, r0, #3
  401fb4:	e5da      	b.n	401b6c <_malloc_r+0x44>
  401fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401fba:	e6ed      	b.n	401d98 <_malloc_r+0x270>
  401fbc:	687b      	ldr	r3, [r7, #4]
  401fbe:	1092      	asrs	r2, r2, #2
  401fc0:	2101      	movs	r1, #1
  401fc2:	fa01 f202 	lsl.w	r2, r1, r2
  401fc6:	4313      	orrs	r3, r2
  401fc8:	607b      	str	r3, [r7, #4]
  401fca:	4662      	mov	r2, ip
  401fcc:	e779      	b.n	401ec2 <_malloc_r+0x39a>
  401fce:	2301      	movs	r3, #1
  401fd0:	6053      	str	r3, [r2, #4]
  401fd2:	e729      	b.n	401e28 <_malloc_r+0x300>
  401fd4:	f240 5254 	movw	r2, #1364	; 0x554
  401fd8:	4293      	cmp	r3, r2
  401fda:	d822      	bhi.n	402022 <_malloc_r+0x4fa>
  401fdc:	0cb3      	lsrs	r3, r6, #18
  401fde:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  401fe2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  401fe6:	00c3      	lsls	r3, r0, #3
  401fe8:	e5c0      	b.n	401b6c <_malloc_r+0x44>
  401fea:	f103 0b10 	add.w	fp, r3, #16
  401fee:	e6ae      	b.n	401d4e <_malloc_r+0x226>
  401ff0:	2a54      	cmp	r2, #84	; 0x54
  401ff2:	d829      	bhi.n	402048 <_malloc_r+0x520>
  401ff4:	0b1a      	lsrs	r2, r3, #12
  401ff6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401ffa:	00c9      	lsls	r1, r1, #3
  401ffc:	326e      	adds	r2, #110	; 0x6e
  401ffe:	e74d      	b.n	401e9c <_malloc_r+0x374>
  402000:	4b20      	ldr	r3, [pc, #128]	; (402084 <_malloc_r+0x55c>)
  402002:	6819      	ldr	r1, [r3, #0]
  402004:	4459      	add	r1, fp
  402006:	6019      	str	r1, [r3, #0]
  402008:	e6b2      	b.n	401d70 <_malloc_r+0x248>
  40200a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40200e:	2800      	cmp	r0, #0
  402010:	f47f aeae 	bne.w	401d70 <_malloc_r+0x248>
  402014:	eb08 030b 	add.w	r3, r8, fp
  402018:	68ba      	ldr	r2, [r7, #8]
  40201a:	f043 0301 	orr.w	r3, r3, #1
  40201e:	6053      	str	r3, [r2, #4]
  402020:	e6ee      	b.n	401e00 <_malloc_r+0x2d8>
  402022:	207f      	movs	r0, #127	; 0x7f
  402024:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402028:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40202c:	e59e      	b.n	401b6c <_malloc_r+0x44>
  40202e:	f104 0108 	add.w	r1, r4, #8
  402032:	4628      	mov	r0, r5
  402034:	9300      	str	r3, [sp, #0]
  402036:	f7ff fc29 	bl	40188c <_free_r>
  40203a:	9b00      	ldr	r3, [sp, #0]
  40203c:	6819      	ldr	r1, [r3, #0]
  40203e:	e6df      	b.n	401e00 <_malloc_r+0x2d8>
  402040:	2001      	movs	r0, #1
  402042:	f04f 0900 	mov.w	r9, #0
  402046:	e6bc      	b.n	401dc2 <_malloc_r+0x29a>
  402048:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40204c:	d805      	bhi.n	40205a <_malloc_r+0x532>
  40204e:	0bda      	lsrs	r2, r3, #15
  402050:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402054:	00c9      	lsls	r1, r1, #3
  402056:	3277      	adds	r2, #119	; 0x77
  402058:	e720      	b.n	401e9c <_malloc_r+0x374>
  40205a:	f240 5154 	movw	r1, #1364	; 0x554
  40205e:	428a      	cmp	r2, r1
  402060:	d805      	bhi.n	40206e <_malloc_r+0x546>
  402062:	0c9a      	lsrs	r2, r3, #18
  402064:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402068:	00c9      	lsls	r1, r1, #3
  40206a:	327c      	adds	r2, #124	; 0x7c
  40206c:	e716      	b.n	401e9c <_malloc_r+0x374>
  40206e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  402072:	227e      	movs	r2, #126	; 0x7e
  402074:	e712      	b.n	401e9c <_malloc_r+0x374>
  402076:	687b      	ldr	r3, [r7, #4]
  402078:	e780      	b.n	401f7c <_malloc_r+0x454>
  40207a:	08f0      	lsrs	r0, r6, #3
  40207c:	f106 0308 	add.w	r3, r6, #8
  402080:	e600      	b.n	401c84 <_malloc_r+0x15c>
  402082:	bf00      	nop
  402084:	2000a52c 	.word	0x2000a52c

00402088 <__malloc_lock>:
  402088:	4801      	ldr	r0, [pc, #4]	; (402090 <__malloc_lock+0x8>)
  40208a:	f7ff bd13 	b.w	401ab4 <__retarget_lock_acquire_recursive>
  40208e:	bf00      	nop
  402090:	2000a644 	.word	0x2000a644

00402094 <__malloc_unlock>:
  402094:	4801      	ldr	r0, [pc, #4]	; (40209c <__malloc_unlock+0x8>)
  402096:	f7ff bd0f 	b.w	401ab8 <__retarget_lock_release_recursive>
  40209a:	bf00      	nop
  40209c:	2000a644 	.word	0x2000a644

004020a0 <_sbrk_r>:
  4020a0:	b538      	push	{r3, r4, r5, lr}
  4020a2:	4c07      	ldr	r4, [pc, #28]	; (4020c0 <_sbrk_r+0x20>)
  4020a4:	2300      	movs	r3, #0
  4020a6:	4605      	mov	r5, r0
  4020a8:	4608      	mov	r0, r1
  4020aa:	6023      	str	r3, [r4, #0]
  4020ac:	f7ff f8d8 	bl	401260 <_sbrk>
  4020b0:	1c43      	adds	r3, r0, #1
  4020b2:	d000      	beq.n	4020b6 <_sbrk_r+0x16>
  4020b4:	bd38      	pop	{r3, r4, r5, pc}
  4020b6:	6823      	ldr	r3, [r4, #0]
  4020b8:	2b00      	cmp	r3, #0
  4020ba:	d0fb      	beq.n	4020b4 <_sbrk_r+0x14>
  4020bc:	602b      	str	r3, [r5, #0]
  4020be:	bd38      	pop	{r3, r4, r5, pc}
  4020c0:	2000a658 	.word	0x2000a658

004020c4 <__sread>:
  4020c4:	b510      	push	{r4, lr}
  4020c6:	460c      	mov	r4, r1
  4020c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4020cc:	f000 f954 	bl	402378 <_read_r>
  4020d0:	2800      	cmp	r0, #0
  4020d2:	db03      	blt.n	4020dc <__sread+0x18>
  4020d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4020d6:	4403      	add	r3, r0
  4020d8:	6523      	str	r3, [r4, #80]	; 0x50
  4020da:	bd10      	pop	{r4, pc}
  4020dc:	89a3      	ldrh	r3, [r4, #12]
  4020de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4020e2:	81a3      	strh	r3, [r4, #12]
  4020e4:	bd10      	pop	{r4, pc}
  4020e6:	bf00      	nop

004020e8 <__swrite>:
  4020e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4020ec:	4616      	mov	r6, r2
  4020ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4020f2:	461f      	mov	r7, r3
  4020f4:	05d3      	lsls	r3, r2, #23
  4020f6:	460c      	mov	r4, r1
  4020f8:	4605      	mov	r5, r0
  4020fa:	d507      	bpl.n	40210c <__swrite+0x24>
  4020fc:	2200      	movs	r2, #0
  4020fe:	2302      	movs	r3, #2
  402100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402104:	f000 f922 	bl	40234c <_lseek_r>
  402108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40210c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402114:	81a2      	strh	r2, [r4, #12]
  402116:	463b      	mov	r3, r7
  402118:	4632      	mov	r2, r6
  40211a:	4628      	mov	r0, r5
  40211c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402120:	f000 b814 	b.w	40214c <_write_r>

00402124 <__sseek>:
  402124:	b510      	push	{r4, lr}
  402126:	460c      	mov	r4, r1
  402128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40212c:	f000 f90e 	bl	40234c <_lseek_r>
  402130:	89a3      	ldrh	r3, [r4, #12]
  402132:	1c42      	adds	r2, r0, #1
  402134:	bf0e      	itee	eq
  402136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40213a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40213e:	6520      	strne	r0, [r4, #80]	; 0x50
  402140:	81a3      	strh	r3, [r4, #12]
  402142:	bd10      	pop	{r4, pc}

00402144 <__sclose>:
  402144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402148:	f000 b878 	b.w	40223c <_close_r>

0040214c <_write_r>:
  40214c:	b570      	push	{r4, r5, r6, lr}
  40214e:	460d      	mov	r5, r1
  402150:	4c08      	ldr	r4, [pc, #32]	; (402174 <_write_r+0x28>)
  402152:	4611      	mov	r1, r2
  402154:	4606      	mov	r6, r0
  402156:	461a      	mov	r2, r3
  402158:	4628      	mov	r0, r5
  40215a:	2300      	movs	r3, #0
  40215c:	6023      	str	r3, [r4, #0]
  40215e:	f7fe fb1f 	bl	4007a0 <_write>
  402162:	1c43      	adds	r3, r0, #1
  402164:	d000      	beq.n	402168 <_write_r+0x1c>
  402166:	bd70      	pop	{r4, r5, r6, pc}
  402168:	6823      	ldr	r3, [r4, #0]
  40216a:	2b00      	cmp	r3, #0
  40216c:	d0fb      	beq.n	402166 <_write_r+0x1a>
  40216e:	6033      	str	r3, [r6, #0]
  402170:	bd70      	pop	{r4, r5, r6, pc}
  402172:	bf00      	nop
  402174:	2000a658 	.word	0x2000a658

00402178 <__register_exitproc>:
  402178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40217c:	4d2c      	ldr	r5, [pc, #176]	; (402230 <__register_exitproc+0xb8>)
  40217e:	4606      	mov	r6, r0
  402180:	6828      	ldr	r0, [r5, #0]
  402182:	4698      	mov	r8, r3
  402184:	460f      	mov	r7, r1
  402186:	4691      	mov	r9, r2
  402188:	f7ff fc94 	bl	401ab4 <__retarget_lock_acquire_recursive>
  40218c:	4b29      	ldr	r3, [pc, #164]	; (402234 <__register_exitproc+0xbc>)
  40218e:	681c      	ldr	r4, [r3, #0]
  402190:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402194:	2b00      	cmp	r3, #0
  402196:	d03e      	beq.n	402216 <__register_exitproc+0x9e>
  402198:	685a      	ldr	r2, [r3, #4]
  40219a:	2a1f      	cmp	r2, #31
  40219c:	dc1c      	bgt.n	4021d8 <__register_exitproc+0x60>
  40219e:	f102 0e01 	add.w	lr, r2, #1
  4021a2:	b176      	cbz	r6, 4021c2 <__register_exitproc+0x4a>
  4021a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4021a8:	2401      	movs	r4, #1
  4021aa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4021ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4021b2:	4094      	lsls	r4, r2
  4021b4:	4320      	orrs	r0, r4
  4021b6:	2e02      	cmp	r6, #2
  4021b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4021bc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4021c0:	d023      	beq.n	40220a <__register_exitproc+0x92>
  4021c2:	3202      	adds	r2, #2
  4021c4:	f8c3 e004 	str.w	lr, [r3, #4]
  4021c8:	6828      	ldr	r0, [r5, #0]
  4021ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4021ce:	f7ff fc73 	bl	401ab8 <__retarget_lock_release_recursive>
  4021d2:	2000      	movs	r0, #0
  4021d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4021d8:	4b17      	ldr	r3, [pc, #92]	; (402238 <__register_exitproc+0xc0>)
  4021da:	b30b      	cbz	r3, 402220 <__register_exitproc+0xa8>
  4021dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4021e0:	f7ff fc9a 	bl	401b18 <malloc>
  4021e4:	4603      	mov	r3, r0
  4021e6:	b1d8      	cbz	r0, 402220 <__register_exitproc+0xa8>
  4021e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4021ec:	6002      	str	r2, [r0, #0]
  4021ee:	2100      	movs	r1, #0
  4021f0:	6041      	str	r1, [r0, #4]
  4021f2:	460a      	mov	r2, r1
  4021f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4021f8:	f04f 0e01 	mov.w	lr, #1
  4021fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402200:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402204:	2e00      	cmp	r6, #0
  402206:	d0dc      	beq.n	4021c2 <__register_exitproc+0x4a>
  402208:	e7cc      	b.n	4021a4 <__register_exitproc+0x2c>
  40220a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40220e:	430c      	orrs	r4, r1
  402210:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402214:	e7d5      	b.n	4021c2 <__register_exitproc+0x4a>
  402216:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40221a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40221e:	e7bb      	b.n	402198 <__register_exitproc+0x20>
  402220:	6828      	ldr	r0, [r5, #0]
  402222:	f7ff fc49 	bl	401ab8 <__retarget_lock_release_recursive>
  402226:	f04f 30ff 	mov.w	r0, #4294967295
  40222a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40222e:	bf00      	nop
  402230:	20000438 	.word	0x20000438
  402234:	004023a4 	.word	0x004023a4
  402238:	00401b19 	.word	0x00401b19

0040223c <_close_r>:
  40223c:	b538      	push	{r3, r4, r5, lr}
  40223e:	4c07      	ldr	r4, [pc, #28]	; (40225c <_close_r+0x20>)
  402240:	2300      	movs	r3, #0
  402242:	4605      	mov	r5, r0
  402244:	4608      	mov	r0, r1
  402246:	6023      	str	r3, [r4, #0]
  402248:	f7ff f826 	bl	401298 <_close>
  40224c:	1c43      	adds	r3, r0, #1
  40224e:	d000      	beq.n	402252 <_close_r+0x16>
  402250:	bd38      	pop	{r3, r4, r5, pc}
  402252:	6823      	ldr	r3, [r4, #0]
  402254:	2b00      	cmp	r3, #0
  402256:	d0fb      	beq.n	402250 <_close_r+0x14>
  402258:	602b      	str	r3, [r5, #0]
  40225a:	bd38      	pop	{r3, r4, r5, pc}
  40225c:	2000a658 	.word	0x2000a658

00402260 <_fclose_r>:
  402260:	b570      	push	{r4, r5, r6, lr}
  402262:	b159      	cbz	r1, 40227c <_fclose_r+0x1c>
  402264:	4605      	mov	r5, r0
  402266:	460c      	mov	r4, r1
  402268:	b110      	cbz	r0, 402270 <_fclose_r+0x10>
  40226a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40226c:	2b00      	cmp	r3, #0
  40226e:	d03c      	beq.n	4022ea <_fclose_r+0x8a>
  402270:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402272:	07d8      	lsls	r0, r3, #31
  402274:	d505      	bpl.n	402282 <_fclose_r+0x22>
  402276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40227a:	b92b      	cbnz	r3, 402288 <_fclose_r+0x28>
  40227c:	2600      	movs	r6, #0
  40227e:	4630      	mov	r0, r6
  402280:	bd70      	pop	{r4, r5, r6, pc}
  402282:	89a3      	ldrh	r3, [r4, #12]
  402284:	0599      	lsls	r1, r3, #22
  402286:	d53c      	bpl.n	402302 <_fclose_r+0xa2>
  402288:	4621      	mov	r1, r4
  40228a:	4628      	mov	r0, r5
  40228c:	f7ff f964 	bl	401558 <__sflush_r>
  402290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402292:	4606      	mov	r6, r0
  402294:	b133      	cbz	r3, 4022a4 <_fclose_r+0x44>
  402296:	69e1      	ldr	r1, [r4, #28]
  402298:	4628      	mov	r0, r5
  40229a:	4798      	blx	r3
  40229c:	2800      	cmp	r0, #0
  40229e:	bfb8      	it	lt
  4022a0:	f04f 36ff 	movlt.w	r6, #4294967295
  4022a4:	89a3      	ldrh	r3, [r4, #12]
  4022a6:	061a      	lsls	r2, r3, #24
  4022a8:	d422      	bmi.n	4022f0 <_fclose_r+0x90>
  4022aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4022ac:	b141      	cbz	r1, 4022c0 <_fclose_r+0x60>
  4022ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4022b2:	4299      	cmp	r1, r3
  4022b4:	d002      	beq.n	4022bc <_fclose_r+0x5c>
  4022b6:	4628      	mov	r0, r5
  4022b8:	f7ff fae8 	bl	40188c <_free_r>
  4022bc:	2300      	movs	r3, #0
  4022be:	6323      	str	r3, [r4, #48]	; 0x30
  4022c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4022c2:	b121      	cbz	r1, 4022ce <_fclose_r+0x6e>
  4022c4:	4628      	mov	r0, r5
  4022c6:	f7ff fae1 	bl	40188c <_free_r>
  4022ca:	2300      	movs	r3, #0
  4022cc:	6463      	str	r3, [r4, #68]	; 0x44
  4022ce:	f7ff fa67 	bl	4017a0 <__sfp_lock_acquire>
  4022d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4022d4:	2200      	movs	r2, #0
  4022d6:	07db      	lsls	r3, r3, #31
  4022d8:	81a2      	strh	r2, [r4, #12]
  4022da:	d50e      	bpl.n	4022fa <_fclose_r+0x9a>
  4022dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4022de:	f7ff fbe7 	bl	401ab0 <__retarget_lock_close_recursive>
  4022e2:	f7ff fa63 	bl	4017ac <__sfp_lock_release>
  4022e6:	4630      	mov	r0, r6
  4022e8:	bd70      	pop	{r4, r5, r6, pc}
  4022ea:	f7ff fa2d 	bl	401748 <__sinit>
  4022ee:	e7bf      	b.n	402270 <_fclose_r+0x10>
  4022f0:	6921      	ldr	r1, [r4, #16]
  4022f2:	4628      	mov	r0, r5
  4022f4:	f7ff faca 	bl	40188c <_free_r>
  4022f8:	e7d7      	b.n	4022aa <_fclose_r+0x4a>
  4022fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4022fc:	f7ff fbdc 	bl	401ab8 <__retarget_lock_release_recursive>
  402300:	e7ec      	b.n	4022dc <_fclose_r+0x7c>
  402302:	6da0      	ldr	r0, [r4, #88]	; 0x58
  402304:	f7ff fbd6 	bl	401ab4 <__retarget_lock_acquire_recursive>
  402308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40230c:	2b00      	cmp	r3, #0
  40230e:	d1bb      	bne.n	402288 <_fclose_r+0x28>
  402310:	6e66      	ldr	r6, [r4, #100]	; 0x64
  402312:	f016 0601 	ands.w	r6, r6, #1
  402316:	d1b1      	bne.n	40227c <_fclose_r+0x1c>
  402318:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40231a:	f7ff fbcd 	bl	401ab8 <__retarget_lock_release_recursive>
  40231e:	4630      	mov	r0, r6
  402320:	bd70      	pop	{r4, r5, r6, pc}
  402322:	bf00      	nop

00402324 <_fstat_r>:
  402324:	b538      	push	{r3, r4, r5, lr}
  402326:	460b      	mov	r3, r1
  402328:	4c07      	ldr	r4, [pc, #28]	; (402348 <_fstat_r+0x24>)
  40232a:	4605      	mov	r5, r0
  40232c:	4611      	mov	r1, r2
  40232e:	4618      	mov	r0, r3
  402330:	2300      	movs	r3, #0
  402332:	6023      	str	r3, [r4, #0]
  402334:	f7fe ffb3 	bl	40129e <_fstat>
  402338:	1c43      	adds	r3, r0, #1
  40233a:	d000      	beq.n	40233e <_fstat_r+0x1a>
  40233c:	bd38      	pop	{r3, r4, r5, pc}
  40233e:	6823      	ldr	r3, [r4, #0]
  402340:	2b00      	cmp	r3, #0
  402342:	d0fb      	beq.n	40233c <_fstat_r+0x18>
  402344:	602b      	str	r3, [r5, #0]
  402346:	bd38      	pop	{r3, r4, r5, pc}
  402348:	2000a658 	.word	0x2000a658

0040234c <_lseek_r>:
  40234c:	b570      	push	{r4, r5, r6, lr}
  40234e:	460d      	mov	r5, r1
  402350:	4c08      	ldr	r4, [pc, #32]	; (402374 <_lseek_r+0x28>)
  402352:	4611      	mov	r1, r2
  402354:	4606      	mov	r6, r0
  402356:	461a      	mov	r2, r3
  402358:	4628      	mov	r0, r5
  40235a:	2300      	movs	r3, #0
  40235c:	6023      	str	r3, [r4, #0]
  40235e:	f7fe ffa3 	bl	4012a8 <_lseek>
  402362:	1c43      	adds	r3, r0, #1
  402364:	d000      	beq.n	402368 <_lseek_r+0x1c>
  402366:	bd70      	pop	{r4, r5, r6, pc}
  402368:	6823      	ldr	r3, [r4, #0]
  40236a:	2b00      	cmp	r3, #0
  40236c:	d0fb      	beq.n	402366 <_lseek_r+0x1a>
  40236e:	6033      	str	r3, [r6, #0]
  402370:	bd70      	pop	{r4, r5, r6, pc}
  402372:	bf00      	nop
  402374:	2000a658 	.word	0x2000a658

00402378 <_read_r>:
  402378:	b570      	push	{r4, r5, r6, lr}
  40237a:	460d      	mov	r5, r1
  40237c:	4c08      	ldr	r4, [pc, #32]	; (4023a0 <_read_r+0x28>)
  40237e:	4611      	mov	r1, r2
  402380:	4606      	mov	r6, r0
  402382:	461a      	mov	r2, r3
  402384:	4628      	mov	r0, r5
  402386:	2300      	movs	r3, #0
  402388:	6023      	str	r3, [r4, #0]
  40238a:	f7fe f9eb 	bl	400764 <_read>
  40238e:	1c43      	adds	r3, r0, #1
  402390:	d000      	beq.n	402394 <_read_r+0x1c>
  402392:	bd70      	pop	{r4, r5, r6, pc}
  402394:	6823      	ldr	r3, [r4, #0]
  402396:	2b00      	cmp	r3, #0
  402398:	d0fb      	beq.n	402392 <_read_r+0x1a>
  40239a:	6033      	str	r3, [r6, #0]
  40239c:	bd70      	pop	{r4, r5, r6, pc}
  40239e:	bf00      	nop
  4023a0:	2000a658 	.word	0x2000a658

004023a4 <_global_impure_ptr>:
  4023a4:	20000010                                ... 

004023a8 <_init>:
  4023a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023aa:	bf00      	nop
  4023ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4023ae:	bc08      	pop	{r3}
  4023b0:	469e      	mov	lr, r3
  4023b2:	4770      	bx	lr

004023b4 <__init_array_start>:
  4023b4:	00401539 	.word	0x00401539

004023b8 <__frame_dummy_init_array_entry>:
  4023b8:	0040011d                                ..@.

004023bc <_fini>:
  4023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4023be:	bf00      	nop
  4023c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4023c2:	bc08      	pop	{r3}
  4023c4:	469e      	mov	lr, r3
  4023c6:	4770      	bx	lr

004023c8 <__fini_array_start>:
  4023c8:	004000f9 	.word	0x004000f9
